- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional Services and Practices for AWS Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have looked into many security-related concepts and services throughout this
    book. There are still more security services and practices that can help us make
    our AWS infrastructure secure. In this chapter, we will look into some of these
    additional services and practices that are worth paying attention to. Unlike other
    chapters, we will not go very deep into these services. You can refer to the links
    provided in the *See also* section for further learning. We will learn about some
    security-related managed services such as **AWS Resource Access Manager** ( **AWS
    RAM** ), **AWS Systems Manager Parameter Store** , **AWS Secrets Manager** , **AWS
    Trusted Advisor** , and **AWS Artifact** . We will also see how we can use **Amazon
    Machine Images** ( **AMIs** ) and security products from AWS Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and using AWS RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing sensitive data with the Systems Manager Parameter Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS Secrets Manager to manage RDS credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AMI instead of using EC2 user data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using security products from AWS Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS Trusted Advisor for recommendations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS Artifact for compliance reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before diving into the recipes of this chapter, we need to ensure we have the
    following requirements in place:'
  prefs: []
  type: TYPE_NORMAL
- en: We need at least an active AWS account to complete the recipes within this chapter.
    Unless specifically mentioned in the recipe, I will be using the **awsseccb-sandbox-1**
    account that we created in the *Multi-account management with AWS Organizations*
    recipe in [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020) , and I won’t be utilizing
    any AWS Organizations features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For administrative actions, we need a user who has **AdministratorAccess** permission
    to the AWS account we are working with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this book are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition)
    . The code files for this chapter are available at [https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/AWS-Security-Cookbook-Second-Edition/tree/main/Chapter10)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and using AWS RAM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AWS RAM** enables us to securely share AWS resources with other AWS accounts
    or within our AWS organization. The resources we can share include transit gateways,
    subnets, AWS License Manager configurations, and Amazon Route 53 resolver rules.
    In this recipe, we will learn to use AWS RAM to share a subnet.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following to successfully complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: A management account with AWS Organizations set up as discussed in the *Multi-account
    management with AWS Organizations* recipe from [*Chapter 1*](B21384_01.xhtml#_idTextAnchor020)
    . I will be using the **aws-sec-cookbook-1** account that we created in that recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A member account within the organization to share resources with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPC and subnets by following the *Setting up VPC plus VPC resources with minimal
    effort* recipe in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) , however, you
    may skip creating a NAT gateway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can set up and use AWS RAM as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Resource Access Manager** service in the AWS Management Console.
    If we are using the service for the first time, click on **Settings** from the
    left sidebar, select the **Enable sharing with AWS Organizations** option, click
    **Save settings** , and go back to the **Resource Access** **Manager** dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Enable sharing with AWS Organizations](image/B21384_10_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Enable sharing with AWS Organizations
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create a** **resource share** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Resource share name** , provide the **my-subnet-share** value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the section titled **Resources - optional** , in the dropdown for **Select
    resource type** , select **Subnets** , and from the subnet list, select a subnet
    we created for this recipe, as discussed in the *Getting* *ready* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and click **Next** . We will be taken to the **Associate managed
    permissions** page. Leave everything as default, scroll down, and click **Next**
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Grant access to principals** page, under the **Principals** section,
    select **Allow sharing only within your organization** , under **Select principal
    type** , choose **AWS account** , enter the account number of another AWS account,
    click **Add** , scroll down, and click **Next** . It will lead to the **Review
    and create** page. Review the details, scroll down, and click **Create** **resource
    share** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify the resource share, log in to the account that we specified in *Step
    6* and go to the AWS **Resource Access Manager** dashboard. Click on **Resource
    shares** under **Shared with me** from the left sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Shared resources in our member account](image/B21384_10_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Shared resources in our member account
  prefs: []
  type: TYPE_NORMAL
- en: We should see the subnet that was shared. We need to select the same Region
    where we created the shares to see the shares.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we enabled sharing within our AWS organization. This can be done from
    the **AWS RAM** console, as we saw in this recipe. If we do not enable sharing
    within our AWS organization, the accounts we add will be considered external accounts,
    even if they are part of our organization. We added a resource share for a subnet
    and shared it with another account within our OU.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We shared a subnet resource type with AWS RAM. The following are the resource
    type options currently available: **Aurora DB Clusters** , **Capacity Reservations**
    , **CodeBuild Projects** , **CodeBuild Report Groups** , **Dedicated Hosts** ,
    **Image Builder Components** , **Image Builder Image Recipes** , **Image Builder
    Images** , **License Configurations** , **Resolver Rules** , **Traffic Mirror
    Targets** , and **Transit Gateways** .'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read more about AWS RAM at [https://www.cloudericks.com/blog/getting-started-with-aws-ram](https://www.cloudericks.com/blog/getting-started-with-aws-ram)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Storing sensitive data with the Systems Manager Parameter Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can store data using the **Systems Manager Parameter Store** with and without
    encryption, and then reference it from various services without having to hardcode
    the data in any place. In this recipe, we will learn how to store data with encryption
    in an AWS Systems Manager Parameter Store and then retrieve it from an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following to successfully complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: A working AWS account and a user as described in the *Technical* *requirements*
    section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An EC2 instance in the default VPC, within a public subnet within the VPC. For
    **Amazon Machine Image (AMI)** , select **Amazon Linux 2023 AMI** . For **Instance
    type** , select **t2.micro** , For **Key pair (login)** , select an existing one
    you have access to or create a new one. Under **Network settings** , make sure
    the value for **Auto-assign public IP** is **Enable** and **Create security group**
    is selected with the value for **Allow SSH traffic from** set as **Anywhere**
    . We learned about EC2 in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You would benefit from being familiar with KMS. We learned about KMS in [*Chapter
    3*](B21384_03.xhtml#_idTextAnchor088) .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create a parameter in the AWS Systems Manager Parameter Store.
    Then, we will attach a role necessary for accessing the AWS Systems Manager from
    an EC2 instance. Finally, we will retrieve the parameter’s information from that
    EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a parameter in the AWS Systems Manager Parameter Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create a Systems Manager Parameter Store parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Systems Manager** service in the AWS management dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Parameter Store** from the left sidebar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create parameter** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Create parameter** page, for **Name** , enter **MySecureParameter**
    , for **Description — Optional** , enter **My Secure Parameter** , and select
    **Tier** as **Standard** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Type** , select **SecureString** , for **KMS key source** , select **My
    current account** , for **KMS Key ID** , leave the default value of **alias/aws/ssm**
    as is, and for **Value** , enter **MySecureValue** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down and click on **Create parameter** . We should get this message:
    **Create parameter** **request succeeded!** .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will create and attach a role to our EC2 instance to access the AWS
    Systems Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and attaching a role for the AWS Systems Manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To use the AWS Systems Manager from an EC2 instance, we need to attach a role
    to an EC2 instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **IAM** dashboard in the AWS Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Roles** from the left sidebar and click on **Create role** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Trusted entity type** , select **AWS service** , and select **EC2**
    from the list of services for **Service or** **use case** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and select **EC2 Role for AWS Systems Manager** . Click **Next**
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Select trusted entity](image/B21384_10_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Select trusted entity
  prefs: []
  type: TYPE_NORMAL
- en: On the **Add permissions** pane, click on **Next** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Name, review, and create** page, for **Role name** , provide the **MySSMManInstanceRole**
    value, and for **Description** , provide the **Amazon SSM Managed Instance Core
    Role** value. Review the entire page and then click on **Create role** . We should
    see the message that the role was created successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach this role to our EC2 instance as we saw in the *Cross-service access
    via IAM roles on EC2 instances* recipe from [*Chapter 2*](B21384_02.xhtml#_idTextAnchor043)
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieving parameters from the AWS Systems Manager Parameter Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can retrieve the parameter value from our EC2 instance. SSH into the EC2
    instance and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We should get a response like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Getting the parameter](image/B21384_10_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Getting the parameter
  prefs: []
  type: TYPE_NORMAL
- en: The parameter value will be decrypted. We also have a **get-parameter** subcommand
    for the **aws ssm** CLI command; however, currently, the **AWS-provided AmazonEC2RoleForEC2**
    role does not include it. You can add the permission manually and then use **get-parameter**
    .
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a parameter in the AWS Systems Manager Parameter
    Store and retrieved it. We can use the parameter from any service without needing
    to hardcode its values. Now, we can update the value for that parameter from one
    place.
  prefs: []
  type: TYPE_NORMAL
- en: For retrieving and decrypting the parameter value that was encrypted, we used
    the **get-parameters** subcommand of the **aws ssm** CLI command with the **--with-decryption**
    option. The default is **--no-with-decryption** if none is specified and does
    not decrypt the value.
  prefs: []
  type: TYPE_NORMAL
- en: We can also create parameters without encryption by setting **Type** to **String**
    instead of **Secure String** .
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we only used one of the features of the AWS Systems Manager,
    namely the Parameter Store. Let’s quickly go through some more important features
    of the AWS Systems Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Systems Manager allows us to group resources such as EC2 instances, S3 buckets,
    and **Relational Database Service** ( **RDS** ) instances. After we’ve done this,
    we can perform actions, such as installing a patch across a group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the parameter in the AWS Systems Manager Parameter Store from various
    services, such as EC2, Lambda, and CloudFormation. We can also use the parameter
    in a Systems Manager **run** command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **run** command can be used to automate admin tasks and configuration changes
    across a group of EC2 machines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The EC2 role for a simple Systems Manager permits us to use the EC2 **run**
    command from our EC2 instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can specify EC2 target instances manually or based on a tag attached to the
    EC2 instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we configure a **run** command from the console, AWS provides us with the
    corresponding CLI command that we can run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For working with the **run** command, the SSM agent needs to be installed on
    the instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the **run** command to execute actions on on-premises systems as
    well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read more about the AWS Systems Manager at [https://www.cloudericks.com/blog/getting-started-with-aws-systems-manager-ssm](https://www.cloudericks.com/blog/getting-started-with-aws-systems-manager-ssm)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more about using KMS with the AWS Systems Manager Parameter Store
    at [https://www.cloudericks.com/blog/using-aws-kms-with-aws-ssm-parameter-store](https://www.cloudericks.com/blog/using-aws-kms-with-aws-ssm-parameter-store)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS Secrets Manager to manage RDS credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use AWS Secrets Manager to manage RDS credentials.
    This is a more secure alternative to managing and rotating the RDS credentials
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following to successfully complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: A working AWS account and a user as described in the *Technical* *requirements*
    section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An RDS database instance created in RDS with defaults, but with the following
    exceptions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Instance configuration** , select **serverless v2** to keep costs to the
    minimum.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For **Credentials Settings** , provide values for **Master username** and **Master
    password** , as shown in the following figure:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Credentials Settings for the RDS database](image/B21384_10_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Credentials Settings for the RDS database
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If we select the **Managed in AWS Secrets Manager** option in *Figure 10* *.5*
    , then RDS will generate a password and store it within the Secrets Manager without
    the need for the steps outlined in this recipe. However, we want to demonstrate
    storing secrets manually within this recipe and hence we selected the **Self**
    **managed** option.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can configure AWS Secrets Manager to manage the credentials of an RDS database
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **Secrets Manager** service in the AWS Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left sidebar, click on **Secrets** . On the **Secrets** page, click
    on **Store a** **new secret** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For **Secret type** , select **Credentials for Amazon RDS database** , as shown
    in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Choosing a Secret type option in AWS Secrets Manager](image/B21384_10_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Choosing a Secret type option in AWS Secrets Manager
  prefs: []
  type: TYPE_NORMAL
- en: Provide the values of **Master username** and **Master password** as **User
    name** and **Password** respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Encryption key** option, select the default encryption key from the
    dropdown. We may also create a KMS encryption key following the recipes in [*Chapter
    3*](B21384_03.xhtml#_idTextAnchor088) and use it instead, but for this recipe,
    we will use the default one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Database** section select the database we created in the *Getting ready*
    section and click on **Next** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide **prod/CloudericksApp/Postgres** for the **Secret name** field and **Access
    to Postgress prod database for the Cloudericks app** for the **Description** field.
    Optionally, add any tags and click **Next** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Configure automatic rotation** , enable **Automatic rotation** . Then,
    select **Schedule expression builder** for **Rotation schedule** , set **Time
    unit** to **Days** , and enter **30** for **Days** . For **Window duration – optional**
    , leave as default and select the checkbox for **Rotate immediately when the secret
    is stored. The next rotation will begin on** **your schedule** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Configuring automatic rotation](image/B21384_10_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Configuring automatic rotation
  prefs: []
  type: TYPE_NORMAL
- en: In the **Rotation function** section, select **Create a rotation function**
    . For **Lambda rotation function** , provide the **postgres-rotation-lambda**
    name. Select **Single user** for **Rotation strategy** and click **Next** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Configuring the rotation function](image/B21384_10_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Configuring the rotation function
  prefs: []
  type: TYPE_NORMAL
- en: On the **Review** page, carefully review all the details. Additionally, sample
    code is provided for different languages, including Java, JavaScript, C#, Python3,
    Ruby, Go, and Rust, demonstrating how to retrieve the secret from our application,
    as shown in *Figure 10* *.9* . Finally, click **Store** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Sample code to retrieve secrets from Secrets Manager](image/B21384_10_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Sample code to retrieve secrets from Secrets Manager
  prefs: []
  type: TYPE_NORMAL
- en: Once we get the success message, go to the new secret to verify the details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and go to the **Overview** tab, and then click **Retrieve secret
    value** to view our secret. If you want to edit them, you can do so using the
    **Edit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to delete a secret, we can go to the secret, click on the **Actions**
    dropdown, and click on **Delete secret** . We must specify a waiting period of
    between 7 and 30 days before the secret will be deleted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we stored credentials for our RDS database in Secrets Manager.
    For the secret type, we selected **Credentials for Amazon RDS database** . The
    following are the other secret type options currently available in the console:
    **Credentials for Redshift cluster** , **Credentials for DocumentDB database**
    , **Credentials for other database** , and **Other type of secrets** (e.g., API
    key).'
  prefs: []
  type: TYPE_NORMAL
- en: We enabled automatic key rotation with a duration of 30 days. We can also select
    60 days or 90 days, or provide a custom period up to 365 days. I selected the
    default encryption key for this recipe. Instead, you can use a KMS key you created.
    We learned about KMS keys in [*Chapter 3*](B21384_03.xhtml#_idTextAnchor088) .
  prefs: []
  type: TYPE_NORMAL
- en: After configuring a secret, our application can make an API call to Secrets
    Manager to retrieve the secret programmatically. While storing the secret, AWS
    provides us with sample code for different languages to retrieve the secret. Currently,
    there are sample codes for Java, JavaScript, C#, Python3, Ruby, Go, and Rust.
  prefs: []
  type: TYPE_NORMAL
- en: We saw a warning that the first rotation would happen immediately upon storing
    this secret. Therefore, if any of our applications are still using hardcoded credentials
    and are not updated to use the APIs to get the latest credentials, those applications
    will fail.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWS Secrets Manager may look like AWS Systems Manager Parameter Store. Let’s
    quickly compare Secrets Manager with Parameter Store:'
  prefs: []
  type: TYPE_NORMAL
- en: Secrets Manager is primarily used for storing database credentials, API keys,
    and SSH keys. Parameter Store is primarily used for storing license codes, configuration
    data, user-defined parameters, and database strings, and is less commonly used
    for passwords too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Secrets Manager is charged per secret per month and per API call. AWS Systems
    Manager Parameter Store does not charge for standard parameters but charges us
    for advanced parameters based on the number of advanced parameters stored and
    per API interaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secrets Manager has built-in integration with RDS databases. Secrets Manager
    supports the built-in rotation of secrets for RDS. It also supports the rotation
    of non-RDS databases using custom Lambda functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameter Store is integrated with AWS Systems Manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Read more about the AWS Secrets Manager and Parameter Store comparison at [https://www.cloudericks.com/blog/comparing-aws-secrets-manager-and-parameter-store](https://www.cloudericks.com/blog/comparing-aws-secrets-manager-and-parameter-store)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AMI instead of using EC2 user data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an AMI with a web server and then launch an instance
    from that AMI. Instances from AMIs have faster boot times than instances with
    the same configuration defined through EC2 user data. In the *Launching an EC2
    instance with a web server using user data* recipe from [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    , we used EC2 user data to update our operating system and set up a simple web
    server at launch.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the following to successfully complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: A working AWS account and a user as described in the *Technical* *requirements*
    section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A launched EC2 instance, launched following the *Launching an EC2 instance with
    a web server using user data* recipe in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create an AMI from an EC2 instance as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **EC2** service in the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Instances** , select our instance, click **Actions** , expand **Image
    and templates** , and then click **Create image** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Create image** screen, provide **Image name** and **Image description
    - optional** . Use the defaults for the other parameters and click on **Create
    image** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we go to the AMIs list, our AMI should display its initial status as **Pending**
    . Once the status changes to **Available** , create a new instance from this AMI.
    While launching the instance, choose our AMI from the **My** **AMI** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created an AMI from an EC2 instance. Information related
    to the launch of an instance, including any organization-specific configuration,
    can be saved into an AMI. We used Amazon Linux 2023 as our base AMI within this
    recipe and hence used commands that are specific to Amazon Linux 2023. If you
    are using Amazon Linux 2, you can also use the same commands.
  prefs: []
  type: TYPE_NORMAL
- en: We did a similar configuration in [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169)
    using EC2 user data. Instances from AMIs have faster boot times than instances
    with the same configuration defined through EC2 user data. This is because we
    can have packages preinstalled in an AMI, whereas we need to install them at launch
    with user data.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s quickly go through some important concepts related to AMIs:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple EC2 instances can be launched from a single AMI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMIs are specific to a Region, but you can copy them across Regions. While launching
    an instance, we can choose between the AMIs suggested by Amazon, our own AMIs,
    AWS Marketplace AMIs, and community AMIs. We can also filter the list based on
    additional parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should only use public AMIs that we trust. We can check ratings for AMIs
    before using them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AMIs are stored in S3. Hence, we will be charged based on S3 pricing, which
    is also dependent on our free tier eligibility and usage. However, we won’t be
    able to see the AMI or its bucket from the S3 console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, AMIs are private for our account and Region. We can make our AMIs
    public for other AWS accounts to use or sell them through AWS Marketplace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read more about AMIs at [https://www.cloudericks.com/blog/getting-started-with-amis-for-ec2-instances-in-aws](https://www.cloudericks.com/blog/getting-started-with-amis-for-ec2-instances-in-aws)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about AMI hardening at [https://www.cloudericks.com/blog/ami-hardening-for-ensuring-security-and-stability-in-our-aws-environment](https://www.cloudericks.com/blog/ami-hardening-for-ensuring-security-and-stability-in-our-aws-environment)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using security products from AWS Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use various **security products** from AWS
    Marketplace. Many third-party companies will install and configure their products
    and solutions on EC2 instances and provide them as AMIs in AWS Marketplace. Marketplace
    AMIs can be considered EC2 instances with pre-configured software. Alternatively,
    we can also buy the products directly from these vendors and do the configurations
    on our own.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a working AWS account, and a user as described in the *Technical* *requirements*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can find and use security-related AMIs from AWS Marketplace as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **EC2** service on the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Instances** from the left sidebar and click **Launch instances**
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Application and OS Images (Amazon Machine Image)** , click on **Browse**
    **more AMIs** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Browsing AMIS from AWS Marketplace](image/B21384_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Browsing AMIS from AWS Marketplace
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **AWS Marketplace AMIs** tab and search for **security** in the search
    bar. As of this writing, 10719 AMIs are available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – AWS Marketplace AMIs](image/B21384_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – AWS Marketplace AMIs
  prefs: []
  type: TYPE_NORMAL
- en: We can further filter results based on parameters such as **Operating System**
    , **Software Free Trial** , **Software Pricing Plans** , and **Support** from
    the left sidebar. Once we decide on a product, we can follow the recipes within
    [*Chapter 5*](B21384_05.xhtml#_idTextAnchor169) , to complete launching the instance.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS may not be able to provide all the security products we need. Many third-party
    companies have developed products and solutions that complement AWS services for
    security and compliance. We saw how to find such AMIs in AWS Marketplace. Once
    we decide on a product, we can launch an instance with that AMI. For more details
    about the particular product we selected, we can refer to the respective product’s
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Network packet inspection** , also referred to as **deep packet inspection**
    ( **DPI** ), inspects packet headers and data contents of packets to detect non-compliant
    data, viruses, spam, and so on, and can take actions such as blocking and logging.
    It combines the functionalities of a traditional firewall with an **intrusion
    detection system** ( **IDS** ) or an **intrusion prevention** **system** ( **IPS**
    ).'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Web Application Firewall** ( **WAF** ), the firewall service in AWS,
    can check for known exploits such as SQL injection, cross-site scripting, and
    so on. However, AWS cannot do a complete network packet inspection and lacks the
    functionality of an IDS and IPS. We can, however, use solutions from AWS Marketplace.
    There are solutions provided by vendors including Alert Logic, Trend Micro, McAfee,
    Palo Alto Networks, and Cisco Systems, among others.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read about security products in AWS Marketplace at [https://www.cloudericks.com/blog/getting-started-with-aws-marketplace](https://www.cloudericks.com/blog/getting-started-with-aws-marketplace)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS Trusted Advisor for recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use Trusted Advisor. **Trusted Advisor** is
    an online tool in AWS that provides recommendations related to cost optimizations,
    performance, security, fault tolerance, and service limits.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a working AWS account, and a user as described in the *Technical* *requirements*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use Trusted Advisor as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Trusted Advisor** service in the AWS Management Console. We should
    see the **Recommendations** categories and basic recommendations on the dashboard
    landing page, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – The Trusted Advisor dashboard](image/B21384_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – The Trusted Advisor dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Security** from the left sidebar to see recommendations related to
    security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – The Security recommendation page](image/B21384_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – The Security recommendation page
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Download all checks** to download all checks or click on the download
    button for a recommendation to download the details of that recommendation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Refresh all checks** to download all checks or click on the refresh
    button for a recommendation to refresh the details of that recommendation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Service limits** from the left sidebar to see recommendations related
    to service limits such as services that use more than 80% of service quota.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As of this writing, except for **Security** and **Service limits** , all other
    recommendations are only available after upgrading. We can upgrade after clicking
    on **Recommendations** from the left sidebar or after going to any of the recommendation
    category options in the left sidebar except **Security** and **Service limits**
    .
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Trusted Advisor provides recommendations related to cost optimizations, performance,
    security, fault tolerance, service limits, and operational excellence. There are
    two service levels: the Basic plan and the fully Trusted Advisor. The Basic plan
    is free and covers core checks and recommendations. Fully Trusted Advisor functionality
    is available for the Developer, Business, and Enterprise AWS support plans.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Trusted Advisor Basic plan currently has no recommendations available under
    cost optimization, performance, fault tolerance, and operational excellence. For
    these categories, recommendations are available only with the fully Trusted Advisor.
    For the **Security** and **Service limits** categories, some recommendations come
    with both the Basic plan as well as the full Trusted Advisor.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read more about Trusted Advisor at [https://www.cloudericks.com/blog/understanding-aws-trusted-advisor](https://www.cloudericks.com/blog/understanding-aws-trusted-advisor)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS Artifact for compliance reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn to use AWS Artifact. AWS Artifact is a free, self-service
    portal for accessing AWS’s compliance reports. AWS Artifact can be used to access
    AWS’s security and compliance reports and select online agreements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need a working AWS account, and a user as described in the *Technical* *requirements*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use AWS Artifact as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **AWS Artifact** service in the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Reports** in the left sidebar to see the available reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Reports from AWS Artifact](image/B21384_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Reports from AWS Artifact
  prefs: []
  type: TYPE_NORMAL
- en: Click **Agreements** in the left sidebar to see **Account agreements** and **Organization
    agreements** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Agreements](image/B21384_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Agreements
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We can click on the **Organization agreements** tab from an organization’s master
    account to manage agreements for our master account and all member accounts in
    our organization.
  prefs: []
  type: TYPE_NORMAL
- en: Select any agreement and click on the **Download agreement** button to download
    the agreement. If an **Accept NDA to download report** message appears, we need
    to select the **I have read and agree to the all the terms of the** **NDA** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![img](image/B21384_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click **Accept NDA** **and download** .
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Accepting and downloading the report](image/B21384_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Accepting and downloading the report
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ve learned to use AWS Artifact for checking compliance reports. The following
    are some of the reports currently available with AWS Artifact: Accessibility Conformance
    Report (VPAT) – Amazon Cognito User Pool, HDS Certification in English, ABS Cloud
    Computing Implementation Guide 2.0 – Workbook, Accessibility Conformance Report
    (VPAT) – Amazon API Gateway, Accessibility Conformance Report (VPAT) – Amazon
    AppFlow, Accessibility Conformance Report (VPAT) – Amazon AppStream 2.0, Accessibility
    Conformance Report (VPAT) – Amazon Simple Queue Service, Accessibility Conformance
    Report (VPAT) – Amazon Simple Notification Service (SNS), and Accessibility Conformance
    Report (VPAT) – Amazon Simple Email Service (SES).'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We saw many AWS services within this book to help us secure our infrastructure
    on AWS. However, that is not an exhaustive list. AWS also constantly adds more
    services and features. Let’s quickly go through some more services related to
    security:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Detective** is a service that can help in finding the root cause of
    potential security issues by analyzing and visualizing security data. As of this
    writing, this service is in preview.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Control Tower** helps us to set up and govern a multi-account AWS environment
    based on best practices related to security and compliance. End users can provision
    new accounts following the company-wide compliance policies centrally established,
    and the cloud administrators can see a complete overview of the landing zone.
    A landing zone is a container for all of our OUs, accounts, users, and other resources
    that need to be compliant. Landing zones should be in a non-member account of
    an organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS License Manager** helps us manage licenses from third-party vendors,
    such as Microsoft, Oracle, and SAP when we bring them to AWS. We can control their
    usage and even set customized rules on their usage for different groups of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Personal Health Dashboard** is a service available to customers with
    the Premium support plan to monitor, manage, and optimize their AWS environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Well-Architected Tool** is a management service based on the AWS **Well-Architected
    Framework** . We can define workloads against current AWS best practices and this
    tool will provide guidance on how to improve our cloud architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read about AWS Artifact at [https://www.cloudericks.com/blog/getting-started-with-aws-artifact](https://www.cloudericks.com/blog/getting-started-with-aws-artifact)
    .
  prefs: []
  type: TYPE_NORMAL
