- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with Penetration Testing Labs in the Cloud
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The demand for cloud security professionals continues to increase as the number
    of cloud-related threats and incidents rises significantly every year. To manage
    the risks involved when learning cloud penetration testing and ethical hacking,
    security engineers seeking to advance their careers would benefit from having
    a solid understanding of how to set up penetration testing environments in the
    cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this introductory chapter, we will quickly go through the benefits of setting
    up penetration testing labs in the cloud. We will explore how modern cloud applications
    are designed, developed, and deployed as this will be essential when we build
    penetration testing labs in the succeeding chapters. In the final section of this
    chapter, we’ll delve deeper into several relevant factors to consider when designing
    and building vulnerable cloud infrastructures.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Why build your penetration testing labs in the cloud?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognizing the impact of cloud computing on the cybersecurity landscape
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring how modern cloud applications are designed, developed, and deployed
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the considerations when building penetration testing lab environments
    in the cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these in mind, let’s get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Why build your penetration testing labs in the cloud?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At some point in their careers, security professionals may build penetration
    testing labs where they can practice their skills safely in an isolated environment.
    At this point, you might be asking yourself: *What’s inside a penetration testing*
    *lab environment?*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B19755_01_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Penetration testing lab example
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 1**.1*, we can see that a **penetration testing lab environment**
    is simply a controlled environment that hosts several vulnerable-by-design applications
    and services. These applications have known vulnerabilities and misconfigurations
    that can be exploited using the right set of tools and techniques. These vulnerabilities
    are incorporated to provide a realistic environment for penetration testers to
    practice and simulate real-world attack scenarios. In addition to this, security
    researchers and penetration testers can dive deeper into various attack vectors,
    explore new techniques for exploitation, and develop countermeasures.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going over the benefits of setting up our penetration testing labs in
    the cloud, let’s discuss why having a penetration testing lab environment is a
    great idea. Here are some of the reasons why it is recommended to have a penetration
    testing lab environment:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Learning penetration testing in a dedicated lab environment helps you stay away
    from legal trouble. Attacking a system owned by another person or company is illegal
    without a contract, consent, or agreement.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given that penetration tests may corrupt data, crash servers, and leave environments
    in an unstable state, having a separate penetration testing lab will help ensure
    that production environments are not affected by the possible side effects of
    penetration test simulations.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鉴于渗透测试可能会破坏数据、崩溃服务器并使环境处于不稳定状态，拥有一个独立的渗透测试实验室将有助于确保生产环境不受渗透测试模拟可能产生的副作用影响。
- en: We may also use these lab environments while developing custom penetration testing
    tools to automate and speed up certain steps in the penetration testing process.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以在开发自定义渗透测试工具时，利用这些实验室环境来自动化和加速渗透测试过程中的某些步骤。
- en: We can also practice **defense evasion** in these environments by setting up
    various defense mechanisms that could detect and block certain types of attacks.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以在这些环境中练习**防御规避**，通过设置各种防御机制，检测并阻止某些类型的攻击。
- en: We can hack lab environments to teach the fundamentals of penetration testing
    to security enthusiasts and beginners.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过黑客实验室环境来教授渗透测试的基础知识，面向安全爱好者和初学者。
- en: Penetration testing labs can be used to validate a newly disclosed vulnerability.
    These isolated environments can also be used to verify whether a previously known
    vulnerability has already been remediated after an update, a configuration change,
    or a patch has been applied.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渗透测试实验室可以用来验证新披露的漏洞。这些隔离的环境还可以用来验证在应用了更新、配置更改或补丁之后，之前已知的漏洞是否已经得到修复。
- en: 'Now that we have discussed *why* it is a good idea to have a penetration testing
    lab environment, it’s about time we talk about *where* we can host these hacking
    labs. In the past, most security practitioners set up their lab environments primarily
    on their local machines (for example, their personal computer or laptop). They
    invested in dedicated hardware where they can run virtual lab environments using
    **VirtualBox** or other alternative virtualization software:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经讨论了*为什么*拥有渗透测试实验室环境是一个好主意，那么接下来该讨论*在哪里*托管这些黑客实验室了。过去，大多数安全从业人员主要在他们的本地机器上（例如，个人计算机或笔记本电脑）设置实验室环境。他们投资购买专用硬件，以便使用**VirtualBox**或其他虚拟化软件运行虚拟实验室环境：
- en: '![](image/B19755_01_2.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_01_2.jpg)'
- en: Figure 1.2 – Running penetration testing lab environments on your local machine
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – 在本地机器上运行渗透测试实验室环境
- en: In *Figure 1**.2*, we can see that a common practice in home lab environments
    involves creating **snapshots** (used to capture the current state) before tests
    are performed since certain steps in the penetration testing process may affect
    the configuration and stability of the target machine. These snapshots can then
    be used to revert and restore the setup to its original state so that security
    professionals and researchers can perform a series of tests and experiments without
    having to worry about the side effects of the previous tests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 1.2*中，我们可以看到，在家庭实验室环境中，一种常见的做法是在执行测试之前创建**快照**（用于捕捉当前状态），因为渗透测试过程中的某些步骤可能会影响目标机器的配置和稳定性。然后，这些快照可以用来恢复设置到原始状态，从而让安全专家和研究人员能够进行一系列测试和实验，而无需担心之前测试的副作用。
- en: Note
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In the past, one of the common targets that was set up in penetration testing
    lab environments was an intentionally vulnerable Linux image called **Metasploitable**.
    It contained various vulnerable running services mapped to several open ports
    waiting to be scanned and attacked. Practitioners would then set up an attacker
    machine using **BackTrack Linux** (now known as **Kali Linux**) that had been
    configured with a variety of tools, such as **Nmap** and **Metasploit**, to attack
    the target machine.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，渗透测试实验室环境中常见的目标之一是一个故意设计为脆弱的Linux镜像，名为**Metasploitable**。它包含了多个脆弱的运行服务，映射到若干个开放端口，等待被扫描和攻击。实践者会使用**BackTrack
    Linux**（现已更名为**Kali Linux**）设置攻击机，并配置多种工具，如**Nmap**和**Metasploit**，来攻击目标机器。
- en: 'Of course, setting up a vulnerable-by-design lab environment on our local machines
    has its own set of challenges and limitations. These may include one or more of
    the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在本地机器上设置一个设计脆弱的实验室环境也存在一系列挑战和限制。这些可能包括以下一种或多种情况：
- en: Setting up a penetration testing lab environment on our personal computer or
    laptop (most likely containing personal and work files) may have unintended consequences
    as the entire system might be compromised if the hacking lab environment is set
    up incorrectly. In the worst case, we might lose all our files when the system
    crashes completely due to hardware degradation or failure.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machines that are used in the lab environment can be resource-hungry.
    That said, we may be required to have a more expensive local setup to meet the
    demands of the virtual machines that are running.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a vulnerable lab environment can be time-consuming and may require
    prior knowledge of the tools and applications involved. The process of configuring
    and preparing the necessary components for a lab environment, such as vulnerable
    software or network setups, can be complex and demanding. It is essential to have
    a good understanding of the tools and their dependencies, which can be a limitation
    for those who are new to the field or have limited experience.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain vulnerabilities and misconfigurations may be hard to test, especially
    those that involve the usage and presence of a cloud service.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, we may also encounter licensing issues that prevent us from using
    certain virtual machines, operating systems, and applications in our hacking lab
    environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve one or more of the challenges mentioned, it is a good idea to consider
    setting up our penetration testing labs in the cloud. Here are some of the advantages
    when setting up cloud penetration testing labs:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Lab environments hosted in the cloud may be closer to what actual production
    environments deployed in the cloud look like
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can manage costs significantly by having our hacking lab environment running
    in the cloud for a few hours and then deleting (or turning off) the cloud resources
    after the tests and experiments are finished
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the cloud lab environment ourselves will help us have a deeper understanding
    of the implementation and security configuration of the cloud resources deployed
    in the penetration testing lab environment
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easier to grow the complexity of vulnerable lab environments in the cloud
    since resources can be provisioned right away without us having to worry about
    the prerequisite hardware requirements
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certain attacks are difficult to simulate locally but are relatively simple
    to carry out in cloud environments (for example, attacks on cloud functions, along
    with other **serverless** resources)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up complex lab environments in the cloud may be faster with the help
    of automation tools, frameworks, and services
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don’t have to worry about the personal and work files stored on our local
    machine being deleted or stolen
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easier to have multiple users practice penetration testing in hacking
    lab environments deployed in the cloud
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: In addition to these, learning penetration testing can be faster in the cloud.
    For one thing, downloading large files and setting up vulnerable VMs can be significantly
    faster in the cloud. In addition to this, rebuilding cloud environments is generally
    easier since there are various options to recreate and rebuild these lab environments.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些，学习渗透测试在云中可以更快。首先，下载大文件和设置易受攻击的虚拟机在云中会显著更快。除此之外，重建云环境通常更容易，因为有多种选项可以重新创建和重建这些实验环境。
- en: At this point, we should know why it is a *great* idea to build our penetration
    testing lab environments in the cloud! In the next section, we’ll quickly discuss
    how cloud computing has influenced and shaped the modern cybersecurity landscape.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们应该知道为什么在云中构建渗透测试实验环境是一个*很棒*的主意！在接下来的部分，我们将快速讨论云计算是如何影响并塑造现代网络安全格局的。
- en: Recognizing the impact of cloud computing on the cybersecurity landscape
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认识到云计算对网络安全格局的影响
- en: 'In the past, companies had to host their applications primarily in their data
    centers. Due to the operational overhead of managing their own data centers, most
    businesses have considered migrating their data and their workloads to the cloud.
    Some organizations have moved all their applications and data to the cloud, while
    others use a *hybrid cloud architecture* to host their applications in both on-premises
    data centers and in the cloud. Cloud computing has allowed companies to do the
    following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，公司必须主要在自己的数据中心托管应用程序。由于管理自有数据中心的运营开销，大多数企业已经考虑将数据和工作负载迁移到云中。有些组织将所有的应用程序和数据迁移到了云中，而其他则使用*混合云架构*将应用程序托管在本地数据中心和云中。云计算使得公司能够做到以下几点：
- en: '**Ensure continuous operations**: High availability in the cloud ensures that
    applications and services remain accessible and operational, even in the event
    of failures or disruptions. By leveraging redundancy and fault-tolerant architectures
    offered by cloud providers, downtime is minimized, and uninterrupted access to
    resources is maintained.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保持续运营**：云中的高可用性确保应用程序和服务即使在发生故障或中断的情况下仍然可访问和运行。通过利用云服务提供商提供的冗余和容错架构，可以将停机时间降到最低，并保持对资源的不间断访问。'
- en: '**Save money**: No hardware infrastructure investment is needed to get started
    as cloud resources can be created and deleted within seconds or minutes. In addition
    to this, cloud platforms generally have a pay-per-use model for the usage of cloud
    resources.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**节省资金**：不需要投资硬件基础设施即可开始使用，因为云资源可以在几秒钟或几分钟内创建和删除。除此之外，云平台通常采用按需付费的模型来使用云资源。'
- en: '**Easily manage application workloads**: Application workloads in the cloud
    can be managed remotely. In addition to this, resources can be scaled up and down
    easily, depending on what the business needs.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻松管理应用程序工作负载**：云中的应用程序工作负载可以远程管理。此外，资源可以根据业务需求轻松扩展或缩减。'
- en: '**Easily manage data**: Managing data becomes more streamlined and convenient
    in the cloud environment due to the availability of a wide range of services,
    features, and capabilities. Additionally, the virtually unlimited storage capacity
    offered by the cloud eliminates concerns related to handling large files. This
    enhanced data management capability in the cloud contributes to improved efficiency
    and scalability for companies.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轻松管理数据**：由于云环境中提供了各种服务、功能和能力，数据管理变得更加流畅和方便。此外，云提供的几乎无限的存储容量消除了处理大文件时的顾虑。这种增强的数据管理能力有助于提高企业的效率和可扩展性。'
- en: '**Automate relevant processes**: Building automated pipelines and workflows
    in the cloud is easier since most of the cloud services can be managed through
    **application programming interfaces** (**APIs**) and **software development**
    **kits** (**SDKs**).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化相关流程**：在云中构建自动化的管道和工作流变得更容易，因为大多数云服务可以通过**应用程序编程接口**（**APIs**）和**软件开发工具包**（**SDKs**）进行管理。'
- en: With more companies storing their data in the cloud, there has been a significant
    increase in cloud attacks in the last couple of years. The attack surface has
    changed due to the rise of cloud computing, and along with it, the types of attacks
    have changed. Hackers can take advantage of vulnerable and misconfigured cloud
    resources, which could end up having sensitive data stored in the cloud stolen.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越多的公司将数据存储在云中，过去几年云攻击显著增加。由于云计算的兴起，攻击面发生了变化，与此同时，攻击的类型也发生了变化。黑客可以利用易受攻击和配置错误的云资源，这可能导致存储在云中的敏感数据被窃取。
- en: What do we mean by attack surface?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说的攻击面是什么意思？
- en: '**Attack surface** refers to the collective set of potential vulnerabilities
    within a system that can be exploited by attackers. It encompasses various elements,
    including network interfaces, APIs, user access points, operating systems, and
    deployed cloud resources. Understanding and managing the attack surface is crucial
    for assessing and mitigating security risks in the cloud as it allows organizations
    to identify and address potential weak points that could be targeted by malicious
    actors.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**攻击面**是指系统内一组潜在的脆弱点，攻击者可以利用这些脆弱点进行攻击。它包括多个元素，包括网络接口、API、用户访问点、操作系统和已部署的云资源。理解和管理攻击面对于评估和减轻云中的安全风险至关重要，因为它可以帮助组织识别并解决可能被恶意行为者利用的弱点。'
- en: 'With this in mind, here is a quick list of relevant cyberattacks on cloud-based
    data and applications:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有鉴于此，以下是有关基于云的数据和应用程序的相关网络攻击的简要列表：
- en: '**Attacks on vulnerable application servers and misconfigured cloud storage
    resources**: Attacks on vulnerable and misconfigured cloud resources such as APIs,
    virtual machines, CI/CD pipelines, and storage resources have resulted in serious
    data breaches around the world. Identities and information stolen from data breaches
    are used for identity theft and phishing.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对易受攻击的应用服务器和配置错误的云存储资源的攻击**：针对易受攻击和配置错误的云资源（如API、虚拟机、CI/CD管道和存储资源）的攻击已导致全球范围内的严重数据泄露。被窃取的身份和信息常用于身份盗窃和钓鱼攻击。'
- en: '**Ransomware attacks in the cloud**: Sensitive data stored in the cloud is
    constantly being targeted by hackers. Ransomware victims are generally asked to
    pay the ransom in Bitcoin or other cryptocurrencies. Bitcoin and other cryptocurrencies
    let users maintain their anonymity. This, along with other techniques, makes it
    hard for authorities to track down ransomware hackers.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云中的勒索软件攻击**：存储在云中的敏感数据不断成为黑客的攻击目标。勒索软件的受害者通常被要求支付比特币或其他加密货币作为赎金。比特币和其他加密货币使用户能够保持匿名。这与其他技术一起，使得当局很难追踪勒索软件黑客。'
- en: '**Cloud account hijacking**: Once a hacker takes over an organization’s cloud
    account, the hacker can freely spin up resources, access sensitive files, and
    use resources inside the account to attack other companies and accounts.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云账户劫持**：一旦黑客接管了一个组织的云账户，黑客就可以自由地创建资源、访问敏感文件，并使用账户内的资源攻击其他公司和账户。'
- en: '**Distributed Denial-of-Service (DDoS) and Denial-of-Wallet (DoW) attacks**:
    During a DDoS attack, an attacker seeks to make an online service unavailable
    by overwhelming and flooding deployed cloud resources with generated traffic.
    During a DoW attack, similar techniques are used to inflict financial damage (due
    to a large bill).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式拒绝服务（DDoS）和钱包拒绝服务（DoW）攻击**：在DDoS攻击中，攻击者试图通过生成的流量淹没和冲击已部署的云资源，使在线服务不可用。在DoW攻击中，使用类似的技术造成财务损失（由于巨额账单）。'
- en: 'Over the years, the quantity and quality of tools focusing on cloud security
    have increased as cloud security threats have evolved and become more widespread.
    More security tools and utilities became available as the number of disclosed
    vulnerabilities increased every year. These tools ranged from simple scripts to
    sophisticated frameworks and modules that can be configured to suit the needs
    of an attacker. Security professionals have seen tools and products evolve over
    time as well. In the past, cloud security products needed to be installed and
    set up by the internal teams of companies. These past few years, more managed
    cloud-based tools and services became available, most of which can be used immediately
    with minimal configuration. Here are some of the more recent security solutions
    that have become available for cloud security:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Various offensive security cloud tools and frameworks
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agentless vulnerability assessment tools for virtual machines in the cloud
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessment tools for container images
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability assessment tools and services for serverless compute resources
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning-powered code security scanner tools and services
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud network security audit tools
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed cloud firewalls
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed cloud threat detection services
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artificial intelligence-powered security tools
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, we should have a better understanding of how cloud computing
    has shaped and influenced the cybersecurity landscape. In the next section, we
    will dive deeper into how modern applications are designed, developed, and deployed
    in the cloud.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Exploring how modern cloud applications are designed, developed, and deployed
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the primary objectives when building our penetration testing labs is
    to prepare a vulnerable-by-design environment that mimics real cloud environments.
    That said, we must have a good understanding of how *modern* cloud applications
    look as this will equip us with the knowledge required to build the right environment
    for our needs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Years ago, most applications that were deployed in the cloud were designed
    and developed as **monolithic applications**. This means that the frontend, backend,
    and database layers of the application’s architecture were built together as a
    single logical unit. Most of the time, multiple developers would work on a single
    code repository for a project. In addition to this, the entire application, along
    with the database, would most likely be deployed together as a single unit inside
    the same server or virtual machine (similar to what’s shown in the simplified
    diagram in *Figure 1**.3*):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B19755_01_3.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Deployment of monolithic applications (simplified)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: From a security standpoint, an attacker that’s able to get **root access** to
    the virtual machine hosting the application server would most likely be able to
    access and steal sensitive information stored in the database running on the same
    machine.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: What do we mean by root access?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Root access** refers to having complete administrative privileges and unrestricted
    control over a computer system or virtual machine. It grants the user the highest
    level of access and authority, enabling them to modify system files, install or
    uninstall software, and perform actions that are typically restricted to other
    users. In the context of security, if an attacker obtains root access to a virtual
    machine hosting an application server, it implies they have gained full control
    of the system. This can potentially lead to unauthorized access to sensitive data
    stored in databases residing on the same machine.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Root访问**是指拥有完全的管理员权限和对计算机系统或虚拟机的无限制控制。它授予用户最高级别的访问权限和操作权限，使其能够修改系统文件、安装或卸载软件，并执行通常限制其他用户执行的操作。在安全性方面，如果攻击者获得了托管应用服务器的虚拟机的root访问权限，这意味着他们已完全控制了该系统。这可能导致未经授权访问存储在同一机器上的数据库中的敏感数据。'
- en: Of course, there are modern applications that are still designed and architected
    as monolithic applications due to the benefits of having this type of architecture.
    However, as we will see shortly, more teams around the world are starting with
    a distributed microservice architecture instead of a monolithic setup. One of
    the notable downsides of having a monolithic architecture is that development
    teams may have problems scaling specific layers of the application once more users
    start to use the system. Once the application starts to slow down, teams may end
    up *vertically scaling* the virtual machine where the application is running.
    With **vertical scaling**, the resources of a single server, such as CPU and RAM,
    are increased by upgrading its hardware or adding more powerful machines. This
    approach allows the server to handle higher workloads and demands by enhancing
    its capacity. In contrast, **horizontal scaling** involves adding more servers
    to distribute the load, allowing each server to handle a portion of the overall
    traffic. Given that vertical scaling is generally more expensive than horizontal
    scaling long-term, cloud architects recommend having a distributed multi-tier
    setup instead since horizontal scaling involves scaling only the infrastructure
    resources hosting the components of the application that require scaling.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，仍然有一些现代应用程序由于具有这种架构的好处，而仍然被设计和架构为单体应用程序。然而，正如我们很快会看到的那样，世界各地的更多团队正在选择从分布式微服务架构开始，而不是单体架构。单体架构的一个显著缺点是，当更多用户开始使用系统时，开发团队可能会面临无法扩展应用程序特定层的问题。一旦应用程序开始变慢，团队可能会选择对运行应用程序的虚拟机进行*垂直扩展*。通过**垂直扩展**，通过升级硬件或添加更强大的机器来增加单个服务器的资源，如CPU和RAM。这种方法通过增强服务器的能力来使服务器处理更高的工作负载和需求。相比之下，**水平扩展**则是通过增加更多的服务器来分担负载，让每个服务器处理部分整体流量。由于垂直扩展通常比水平扩展长期成本更高，因此云架构师建议采用分布式多层架构，因为水平扩展只涉及扩展托管需要扩展的应用组件的基础设施资源。
- en: 'For instance, in a distributed e-commerce application, instead of vertically
    scaling a single monolithic server to handle increased user traffic, the system
    can be designed with separate tiers for the web servers, application servers,
    and databases. By separating different tiers, it becomes possible to independently
    scale each tier based on its specific resource demands. For example, while the
    application server layer can scale horizontally to handle increased user traffic,
    the database layer can scale vertically to accommodate growing data storage requirements.
    This way, when traffic surges, the infrastructure can horizontally scale by adding
    more web servers to handle the increased load, resulting in a more cost-effective
    and scalable solution:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在分布式电子商务应用程序中，系统可以通过为Web服务器、应用服务器和数据库设计独立的层次，而不是对单个单体服务器进行垂直扩展以处理增加的用户流量。通过分离不同的层次，可以根据每一层的具体资源需求独立地扩展每一层。例如，应用服务器层可以水平扩展以处理增加的用户流量，而数据库层则可以垂直扩展以满足日益增长的数据存储需求。这样，当流量激增时，基础设施可以通过增加更多的Web服务器进行水平扩展，从而提供更具成本效益和可扩展的解决方案。
- en: '![](image/B19755_01_4.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_01_4.jpg)'
- en: Figure 1.4 – Autoscaling setup
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 – 自动扩展设置
- en: In addition to this, a distributed multi-tier setup can easily support the **autoscaling**
    of resources due to its inherent architectural design. This flexibility allows
    the system to automatically adjust resource allocation without manual intervention,
    ensuring optimal performance and resource utilization. If the traffic that’s received
    by the application is spiky or unpredictable, a cloud architect may consider having
    an autoscaling setup for specific layers of the application to ensure that the
    infrastructure resources hosting the application are not underutilized.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，分布式多层架构能够轻松支持资源的**自动缩放**，这得益于其固有的架构设计。这种灵活性允许系统在无需人工干预的情况下自动调整资源分配，确保最佳的性能和资源利用率。如果应用程序接收到的流量波动较大或不可预测，云架构师可能会考虑为应用程序的特定层设置自动缩放机制，以确保承载应用程序的基础设施资源不会被闲置使用。
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注
- en: Security professionals must take into account that the downsizing operation
    of an autoscaling setup may delete resources automatically once the traffic received
    by the application goes down. It is important to note that misconfigured or incomplete
    autoscaling implementations generally do not have the recommended log rotation
    setup configured properly in production environments. This would make investigation
    harder since the logs stored in the compromised infrastructure resources or servers
    might be deleted during the automated downsizing operation.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安全专业人员必须考虑到，自动缩放设置的缩减操作可能会在应用程序接收到的流量下降时自动删除资源。需要注意的是，配置错误或不完整的自动缩放实施通常没有在生产环境中正确配置推荐的日志轮转设置。这将使调查变得更加困难，因为存储在受损基础设施资源或服务器中的日志可能会在自动缩减操作过程中被删除。
- en: 'At this point, we should have a good idea of how the initial cloud applications
    were designed and deployed. Fast forwarding to the present, here’s what a modern
    application may look like:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该已经对初始的云应用程序设计和部署有了清晰的了解。快速跳转到现在，现代应用程序可能是这样的：
- en: '![](image/B19755_01_5.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](image/B19755_01_5.jpg)'
- en: Figure 1.5 – What a modern cloud architecture looks like
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5 – 现代云架构的样子
- en: '*Wow! That escalated quickly!* In *Figure 1**.5*, we can see that in addition
    to what was discussed already, modern application architectures may have one or
    more of the following as well:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*哇！情况发展得太快了！* 在*图1.5*中，我们可以看到，除了前面讨论的内容之外，现代应用程序架构还可能包括以下一项或多项内容：'
- en: '**Usage of Infrastructure as Code (IaC) solutions to automatically provision
    cloud resources**: While building a modern cloud application, an organization
    could utilize IaC solutions to streamline the provisioning of cloud resources.
    For example, they might employ tools such as Terraform or AWS CloudFormation,
    defining their infrastructure requirements in code to automatically provision
    and configure resources such as virtual machines, storage, networking, and load
    balancers.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用基础设施即代码（IaC）解决方案来自动化云资源的配置**：在构建现代云应用程序时，组织可以利用IaC解决方案来简化云资源的配置。例如，他们可能会使用像Terraform或AWS
    CloudFormation这样的工具，在代码中定义基础设施要求，从而自动化虚拟机、存储、网络和负载均衡器等资源的配置。'
- en: '**Usage of managed container services to ease the management of Kubernetes
    clusters**: A company may opt to utilize managed container services to simplify
    the management of their Kubernetes clusters. For example, they could choose a
    managed Kubernetes service provided by a cloud platform, which would handle tasks
    such as cluster provisioning, scaling, and monitoring. This allows the company
    to focus on developing and deploying its application without the overhead of managing
    the underlying Kubernetes infrastructure.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用托管容器服务来简化Kubernetes集群的管理**：公司可能选择使用托管容器服务来简化Kubernetes集群的管理。例如，他们可以选择云平台提供的托管Kubernetes服务，该服务将处理集群的配置、扩展和监控等任务。这使得公司能够专注于应用程序的开发和部署，而无需管理底层的Kubernetes基础设施。'
- en: '**A continuous integration and continuous deployment (CI/CD) pipeline**: A
    company could set up a CI/CD pipeline to automate the process of integrating code
    changes, running tests, and deploying the application to the cloud. Developers
    would commit their code changes to a version control system, triggering an automated
    build process that compiles the code, runs tests, and generates artifacts. The
    CI/CD pipeline would then deploy the application to a staging environment for
    further testing and, upon successful validation, automatically promote it to a
    production environment.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function-as-a-Service (FaaS) resources**: An organization implementing a
    modern cloud application could utilize FaaS resources as part of their solution.
    For instance, they might design the application to leverage serverless functions
    to handle specific tasks or workflows. By breaking down the application into smaller,
    independent functions, the company can achieve greater scalability, reduce operational
    overhead, and improve resource utilization.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**APIs consumed by web and mobile applications**: A company could adopt a microservices
    architecture, where APIs are designed and exposed to be consumed by both web and
    mobile applications. In this scenario, the company would develop individual microservices
    that encapsulate specific functionalities and expose well-defined APIs. These
    APIs would then be consumed by the web and mobile applications. With this setup,
    there would be seamless communication and interaction between the frontend clients
    and the backend services.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage of managed firewalls and load balancers**: An organization can leverage
    existing managed firewall services and solutions provided by their cloud provider,
    which would allow them to define and enforce security policies at the network
    level. In addition to this, they could utilize a load balancer service to distribute
    incoming traffic across multiple instances of their application. This will help
    ensure the scalability and high availability of modern cloud systems while removing
    the need to manage the underlying infrastructure and operating systems of these
    managed cloud resources.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Usage of artificial intelligence (AI) and machine learning (ML) services**:
    A company implementing a modern cloud application could utilize AI-powered and
    ML-powered services by leveraging pre-trained models and APIs. For example, they
    could utilize an AI service for sentiment analysis to analyze customer feedback
    and improve user experience. In addition to this, they could also employ managed
    ML services for predictive analytics to enhance decision-making processes within
    the application.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There has also been an observable shift in the use of more managed services
    globally as more companies migrate their workloads to the cloud. The managed services
    provided by cloud platforms have gradually replaced specific components in the
    system that were originally maintained manually by a company’s internal system
    administration team. For instance, companies are leveraging managed services such
    as **Google Cloud Pub/Sub** instead of setting up their own messaging systems
    such as RabbitMQ. This approach allows organizations to focus their valuable time
    and resources on other critical business requirements.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'With managed services, a major portion of the maintenance work is handled and
    automated by the cloud platform instead of a company’s internal team members.
    Here are some of the advantages when using managed services:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Server security patches and operational maintenance work is handled internally
    by the cloud platform when using managed services. This allows the company’s internal
    team members to use their precious time to work on other important requirements.
    A good example would be **Amazon SageMaker**, where data scientists and ML engineers
    can concentrate on training and deploying ML models without having to worry about
    manual maintenance tasks.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling is generally easier when using managed services as a resource launch
    can easily be modified and scaled with an API call or through a user interface.
    In some cases, resources can easily have auto-scaling configured. When it comes
    to scaling, **Azure Kubernetes Service** (**AKS**) would be a great example as
    it enables easy resource scaling and adjustment of the number of pods running
    in the cluster.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generally, cloud resources that are deployed have reliable monitoring and management
    tools installed already. In addition to this, the integration with other services
    from the same cloud platform is seamless and immediately available. At the same
    time, managed cloud services and resources usually have built-in practical automation
    features that are immediately available for use.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Security professionals need to have a good idea of what’s possible and what’s
    not when managed services are used. For example, we are not able to access the
    underlying operating system of certain managed services as these were designed
    and implemented that way. A good example would be the managed **NAT Gateway**
    of the AWS cloud platform. In addition to this, security professionals need to
    be aware of other possible mechanisms available when using managed services. For
    example, in Amazon Aurora (a relational database management system built for the
    cloud), we also have the option to do **passwordless authentication** using an
    **Identity and Access Management** (**IAM**) role. This means that if an attacker
    manages to exfiltrate AWS credentials with the right set of permissions, the database
    records can be accessed and modified even without the database’s username and
    password.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: There has been a significant increase in the usage of containers these last
    couple of years. If you are wondering what containers are, containers are simply
    lightweight, isolated environments that package applications and their dependencies
    to guarantee consistency and portability. Container images, on the other hand,
    act as self-contained executable packages, comprising the necessary files and
    configurations for running specific applications. Companies opt for containers
    because they offer quicker launch times and the capability to host multiple containers
    in one virtual machine and ensure consistent environments throughout various development
    stages. Initially, companies were hesitant in using **Docker** containers for
    deployment in production. However, due to the latest advances and release of production-ready
    tools such as **Kubernetes**, **Docker Compose**, and other similar container
    frameworks, more companies around the world have been using containers to host
    applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you might be wondering, *What are the advantages of using containers?*
    Here are a few reasons why companies would opt to utilize containers:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Launching new containers from container images is generally faster compared
    to creating new virtual machines and servers from images. This is because containers
    leverage lightweight virtualization and share the host system’s operating system,
    allowing them to start quickly without the need to boot an entire operating system.
    In addition to this, containers only require the necessary dependencies and libraries
    specific to the application, resulting in smaller image sizes and faster deployment
    times.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can have multiple containers running inside a virtual machine. Having the
    ability to run multiple containers inside a virtual machine offers significant
    benefits in terms of resource utilization and scalability. Each container operates
    independently, allowing for processes and services to be isolated while sharing
    the underlying resources of the virtual machine. This enables efficient utilization
    of computing resources as multiple containers can run concurrently on the same
    hardware, optimizing the utilization of CPU, memory, and storage.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using containers allows for seamless consistency across different environments,
    such as local development, staging, and production. With containerization, developers
    can package all necessary dependencies and configurations, ensuring that the application
    runs consistently across these environments. This approach promotes early consideration
    of environment consistency, enabling developers to detect and address any compatibility
    or deployment issues at an earlier stage in the development life cycle, leading
    to smoother deployments and reduced chances of environment-related errors.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these, nowadays, more managed cloud services already provide
    support for the usage of custom container environments, which gives developers
    the flexibility they need while ensuring that minimal work is done on the maintenance
    end. By leveraging these managed cloud services, developers can focus on application
    development and innovation while offloading the burden of infrastructure maintenance
    and ensuring optimal performance, scalability, and security for their containerized
    applications.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a company developing a microservices-based application. By leveraging
    containers, they can encapsulate each microservice within its own container, allowing
    for independent development, testing, and deployment. This modular approach enables
    teams to iterate and update specific services without impacting the entire application
    stack. Furthermore, containers facilitate seamless scaling as demand fluctuates.
    When the application experiences increased traffic, container orchestration platforms
    such as Kubernetes automatically spin up additional instances of the required
    containers, ensuring optimal performance and resource utilization. This scalability
    allows businesses to efficiently handle peak loads without overprovisioning infrastructure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: That said, having a solid understanding of container security is critical due
    to the growing popularity of containers. Containers present unique security challenges
    that must be addressed to protect applications and data. By implementing effective
    container security measures, organizations can mitigate risks (such as unauthorized
    access, data breaches, and container breakouts) to ensure the security of critical
    systems and sensitive information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to containers, there’s also been a noticeable increase in the usage
    of FaaS services in the past couple of years. FaaS options from major cloud platforms,
    including **AWS Lambda Functions**, **Azure Functions**, and **Google Cloud Functions**,
    allow developers and engineers to deploy and run custom application code inside
    isolated environments without having to worry about server management. Previously,
    developers had to handle server provisioning and configuration. However, with
    serverless functions, developers can focus on writing and deploying custom application
    code without worrying about infrastructure, resulting in a more efficient and
    streamlined development process. This shift enables rapid iteration, scalable
    deployments, and reduced operational overhead, significantly simplifying the lives
    of developers. Using these along with the other building blocks of event-driven
    architectures, developers can divide complex application code into smaller and
    more manageable components. To have a better understanding of how these services
    work, let’s quickly discuss some of the common properties of these cloud functions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Scaling up and down is automatic
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage follows a pay-per-use model
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The runtime environment gets created and deleted when a function is invoked
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No maintenance is needed since the cloud platform takes care of the maintenance
    work
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are resource limits on maximum execution time, memory, storage, and code
    package size
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions are triggered by events
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The terms **FaaS** and **serverless computing** are sometimes used interchangeably
    by professionals. However, they are two different concepts. FaaS primarily focuses
    on having a platform that speeds up the development and deployment of application
    code functions. On the other hand, serverless computing refers to the cloud computing
    execution model, which is generally characterized by the usage of event-driven
    architecture, managed services, along with per-usage billing. That said, it is
    possible to have a serverless implementation without utilizing a FaaS service
    (for example, a frontend-only **single-page application** (**SPA**) hosted using
    the static website hosting capability of a cloud storage service).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '*How is this relevant to cloud security and penetration testing?* The design
    and implementation of cloud functions impact and influence the offensive and defensive
    security strategies of professionals. Developers and engineers need to make sure
    that the code that’s deployed inside cloud functions is safe from a variety of
    **injection attacks**. For one thing, creating a file and saving it inside a storage
    bucket with a filename that includes a malicious payload may trigger command execution
    once an event triggers the cloud function. In addition to this, security professionals
    must find alternative ways of maintaining persistence (after a successful breach)
    when dealing with cloud functions since the **runtime environment** gets created
    and deleted in seconds.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a good idea of what modern cloud applications
    look like! There is a lot more we could discuss in this section, but this should
    do the trick for now. With everything we have learned so far, we can now proceed
    with diving deeper into what we should consider when designing and building penetration
    testing lab environments in the cloud.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Examining the considerations when building penetration testing lab environments
    in the cloud
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the succeeding chapters of this book, we will be designing and building
    multiple vulnerable-by-design labs in the cloud. After setting up each of the
    lab environments, we will simulate the penetration testing process to validate
    if the vulnerabilities present are exploitable. Before performing a penetration
    testing session in our cloud environments, we must be aware of the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: What activities are allowed without notification or authorization
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the attack traffic will pass through the public internet
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether we will perform network stress-testing
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How our penetration testing lab environment looks like
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What activities we will perform inside the environment
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether we are testing the security of an application inside a server or we
    are testing the security of the configuration of a cloud service
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to these, we must be aware of the activities and actions prohibited
    by the cloud platforms. Here are a few examples of what’s *not* allowed in cloud
    environments:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Attempting social engineering attacks on employees of the cloud platforms
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking resources and trying to gain access to data owned by other account
    owners and users
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cloud services in a way that goes against a platform’s **Acceptable Use
    Policy** and **Terms** **of Service**
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that there’s a long list of prohibited actions and activities in the relevant
    documentation pages available online for each of the cloud platforms. You can
    find the relevant links to resources on the succeeding pages and the *Further
    reading* section of this chapter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: We must also notify and contact the respective support and security teams of
    the cloud platform when needed. This will guarantee that we will not be breaking
    any rules, especially if we are unsure or if it is our first-time performing penetration
    tests in the cloud.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: The best practice is to notify the cloud platform ahead of time to get authorization
    and approval. In some cases, an approval or notification is not required but filing
    a support ticket before performing penetration tests on your resources won’t hurt.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'On some occasions, you might think that you no longer need to get authorization
    from the cloud provider since your penetration testing session will not *harm
    other customers*. However, this is not always the case as there might be actions
    that still require authorization from the cloud provider. *Figure 1**.6* shows
    a sample penetration testing lab environment on AWS:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B19755_01_6.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Sample penetration testing lab environment setup
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'This lab environment has the following components:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: An *attacker* machine inside a VPC that prevents all outbound connections
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *target* machine that contains vulnerable applications and services
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A VPC peering connection that allows traffic between the VPCs where the attacker
    and target EC2 instances are hosted (so that the attack traffic will pass through
    this VPC peering connection)
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An S3 bucket containing files accessed via Private Link
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performing penetration tests on an application running *inside* an EC2 instance
    requires no approval. On the other hand, performing penetration tests on your
    own S3 bucket in your AWS account is not allowed unless you get approval from
    AWS. *Why?* Performing penetration tests on an S3 bucket you own differs from
    penetration tests on an application hosted on S3\. You must complete the **Simulated
    Events Form** and provide the required information to get authorization from AWS
    before performing penetration testing simulations on Amazon S3, along with other
    services not listed under **Permitted Services** of the **Customer Service Policy
    for Penetration Testing** information page. Make sure you check out the following
    links before performing penetration tests on AWS:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '*AWS Customer Support Policy for Penetration Testing, Customer Service Policy
    for Penetration Testing, Other Simulated* *Events*: [https://aws.amazon.com/security/penetration-testing/](https://aws.amazon.com/security/penetration-testing/)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Amazon EC2 Testing* *Policy*: [https://aws.amazon.com/ec2/testing/](https://aws.amazon.com/ec2/testing/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DDoS Simulation Testing* *Policy*: [https://aws.amazon.com/security/ddos-simulation-testing/](https://aws.amazon.com/security/ddos-simulation-testing/)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is important to note that penetration testing policies and guidelines differ
    across cloud platforms. Here are some of the resources and links you need to check
    before performing penetration tests on Azure:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '*Penetration Testing Rules of* *Engagement*: [https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement?rtc=1](https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement?rtc=1)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Penetration* *Testing*: [https://learn.microsoft.com/en-us/azure/security/fundamentals/pen-testing](https://learn.microsoft.com/en-us/azure/security/fundamentals/pen-testing)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Security Test* *Practices*: [https://learn.microsoft.com/en-us/azure/architecture/framework/security/monitor-test](https://learn.microsoft.com/en-us/azure/architecture/framework/security/monitor-test)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the relevant resources and links for GCP:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '*Cloud Security* *FAQ*: [https://support.google.com/cloud/answer/6262505](https://support.google.com/cloud/answer/6262505)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Google Cloud Platform Acceptable Use* *Policy*: [https://cloud.google.com/terms/aup](https://cloud.google.com/terms/aup)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Google Cloud Platform Terms of* *Service*: [https://cloud.google.com/terms/](https://cloud.google.com/terms/)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Note that these policies and guidelines may change in the future, so make sure
    you review the guidelines before doing penetration tests on applications running
    in a cloud environment. Make sure you reach out to the support and security teams
    of the cloud platforms for guidance if you have questions and need clarification.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to what has been discussed already, there are other things we need
    to consider, particularly in terms of security and engineering:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '**The performance requirements when choosing the cloud infrastructure resources
    needed for the lab**: When building penetration testing lab environments in the
    cloud, it is crucial to consider the performance requirements and select the appropriate
    cloud infrastructure resources. This involves assessing factors such as network
    bandwidth, computational power, and storage capabilities to ensure the lab environment
    can effectively simulate real-world scenarios and handle the resource-intensive
    nature of security testing.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The overall cost of setting up, running, and maintaining the penetration
    lab**: The cost of establishing, operating, and maintaining a penetration testing
    lab environment in the cloud should be considered in the context of security and
    engineering. This includes expenses related to resource provisioning, infrastructure
    management, and ongoing monitoring and updates.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The security and auditability of the environment as the penetration testing
    lab must be protected from unwarranted external attacks**: When building penetration
    testing lab environments in the cloud, ensuring the security and auditability
    of the environment is critical. It is crucial to protect the lab from unwarranted
    external attacks by implementing robust security measures and controls. This includes
    utilizing security features offered by the cloud platform, such as network segmentation,
    access controls, and monitoring, to create a secure and auditable testing environment.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The scalability and modularity of the lab environment**: Making lab environments
    scalable and modular allows you to efficiently customize the lab for a variety
    of scenarios and requirements, allowing penetration testers to effectively simulate
    and evaluate diverse attack scenarios.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The manageability of the lab versions**: Utilizing version control systems
    and tools allows penetration testers to efficiently manage and track changes made
    to the lab environment configurations, software versions, and custom scripts.
    This ensures that the lab versions are easily maintainable and reproducible and
    can be rolled back or updated as needed.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The use of automation tools and services for fast rebuilds and setup**: By
    leveraging automation, penetration testers can focus more on the actual testing
    and analysis rather than spending significant time on manual setup and maintenance
    tasks.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could add a few more to this list, but these considerations should do for
    now. We will discuss these security and engineering considerations in detail in
    the next few chapters as we build a variety of vulnerable-by-design lab environments
    across the different cloud platforms.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with a quick discussion on the advantages of setting
    up a penetration testing lab in the cloud. We took a closer look at how cloud
    computing has influenced and shaped the modern cybersecurity landscape. We also
    explored how modern cloud applications are designed, developed, and deployed.
    We wrapped up this chapter by diving deeper into several important considerations
    when designing and building vulnerable environments in the cloud.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will proceed with setting up our first vulnerable lab
    environment in the cloud. After setting up our penetration testing lab, we will
    validate whether the vulnerabilities are exploitable using various offensive security
    tools and techniques.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on the topics covered in this chapter, feel free to check
    out the following resources:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '*How do I run security assessments or penetration tests on* *AWS?* ([https://aws.amazon.com/premiumsupport/knowledge-center/penetration-testing/](https://aws.amazon.com/premiumsupport/knowledge-center/penetration-testing/))'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AWS Shared Responsibility* *Model* ([https://aws.amazon.com/compliance/shared-responsibility-model/](https://aws.amazon.com/compliance/shared-responsibility-model/))'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Penetration Testing Rules of* *Engagement* ([https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement?rtc=1](https://www.microsoft.com/en-us/msrc/pentest-rules-of-engagement?rtc=1))'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Security Test* *Practices* ([https://learn.microsoft.com/en-us/azure/architecture/framework/security/monitor-test](https://learn.microsoft.com/en-us/azure/architecture/framework/security/monitor-test))'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GCP Cloud Security* *FAQ* ([https://support.google.com/cloud/answer/6262505?hl=en](https://support.google.com/cloud/answer/6262505?hl=en))'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GCP Security Best* *Practices* ([https://cloud.google.com/security/best-practices](https://cloud.google.com/security/best-practices))'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
