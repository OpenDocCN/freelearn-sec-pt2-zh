["```\n    gcloud projects list\n    ```", "```\n     ...PROJECT_ID: <PROJECT_ID> NAME: secure-network-environments\n    PROJECT_NUMBER: ...\n    ```", "```\n    gcloud config get-value project\n    ```", "```\n    gcloud config set project <PROJECT_ID>\n    ```", "```\n    cd ~\n    mkdir kali_keys && cd kali_keys\n    ```", "```\n    ssh-keygen -t rsa -C kali -f ./kali-ssh\n    ```", "```\n    cat kali-ssh.pub\n    ```", "```\n module \"module1\" {\n  source = \"./module1\" ... }\nmodule \"module2\" {\n  source = \"./module2\" ... }\n```", "```\n    cd ~\n    mkdir -p pentest_lab && cd pentest_lab\n    ```", "```\n    mkdir -p secure_network\n    mkdir -p target_vm\n    mkdir -p attacker_vm\n    ```", "```\n    touch main.tf\n    touch variables.tf\n    touch outputs.tf\n    touch terraform.tfvars\n    touch versions.tf\n    touch provider.tf\n    ```", "```\n     provider \"google\" {\n      region      = \"us-central1\"\n      zone        = \"us-central1-c\"\n    }\n    ```", "```\n     terraform {\n      required_providers {random = {\n          source = \"hashicorp/random\"\n          version = \"2.3.0\"\n        }\n        google = {\n          source = \"hashicorp/google\"\n          version = \"4.61.0\"\n        }\n      }\n    }\n    ```", "```\n     variable \"my_ip\" {\n        type = string\n    }\n    variable \"my_public_ssh_key\" {\n        type = string\n    }\n    ```", "```\n     my_ip = \"<IP ADDRESS OF YOUR LOCAL MACHINE>\"\n    my_public_ssh_key = \"<PUBLIC SSH KEY>\"\n    ```", "```\n     module \"secure_network\" {\n      source = \"./secure_network\"\n    }\n    module \"attacker_vm\" {\n      source = \"./attacker_vm\"\n    }\n    module \"target_vm\" {\n      source = \"./target_vm\"\n    }\n    ```", "```\n    terraform init\n    ```", "```\n    ... Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see\n    any changes that are required for your infrastructure. All Terraform commands\n    should now work. ...\n    ```", "```\n    terraform fmt\n    ```", "```\n    terraform plan\n    ```", "```\n    No changes. Your infrastructure matches the configuration. Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed. Apply complete! Resources: 0 added, 0 changed, 0 destroyed.\n    ```", "```\n    cd ~/pentest_lab\n    cd secure_network\n    ```", "```\n    touch main.tf\n    touch variables.tf\n    touch outputs.tf\n    ```", "```\n     variable \"my_ip\" {\n        type = string\n    }\n    ```", "```\n     resource \"google_compute_project_metadata\" \"default\" {\n      metadata = {\n        \"serial-port-enable\" = \"TRUE\"\n      }\n    }\n    ```", "```\n     resource \"google_compute_network\" \"vpc_01\" {\n      name = \"vpc-01\"\n      auto_create_subnetworks = \"false\"\n    }\n    resource \"google_compute_subnetwork\" \"subnet_01\" {\n      name          = \"subnet-01\"\n      ip_cidr_range = \"10.1.0.0/20\"\n      region        = \"us-central1\"\n      network       = google_compute_network.vpc_01.name\n    }\n    ```", "```\n     resource \"google_compute_network\" \"vpc_02\" {\n      name = \"vpc-02\"\n      auto_create_subnetworks = \"false\"\n    }\n    resource \"google_compute_subnetwork\" \"subnet_02\" {\n      name          = \"subnet-02\"\n      ip_cidr_range = \"10.2.0.0/20\"\n      region        = \"us-central1\"\n      network       = google_compute_network.vpc_02.name\n    }\n    ```", "```\n     locals {net_01 = google_compute_network.vpc_01.self_linknet_02 = google_compute_network.vpc_02.self_link\n    }\n    ```", "```\n     resource \"google_compute_network_peering\" \"peer_01_to_02\" {\n      name         = \"peer-01-to-02\"\n      network      = local.net_01\n      peer_network = local.net_02\n    }\n    resource \"google_compute_network_peering\" \"peer_02_to_01\" {\n      name         = \"peer-02-to-01\"\n      network      = local.net_02\n      peer_network = local.net_01\n    }\n    ```", "```\n     resource \"google_compute_firewall\" \"allow-all-from-vpc2\" {\n      name    = \"allow-all-from-vpc-2\"\n      network = local.net_01\n      allow {\n        protocol = \"all\"\n      }\n      source_ranges = [\"10.2.0.0/20\"]\n      priority = 10000\n    }\n    resource \"google_compute_firewall\" \"allow-all-from-vpc1\" {\n      name    = \"allow-all-from-vpc-1\"\n      network = local.net_02\n      allow {\n        protocol = \"all\"\n      }\n      source_ranges = [\"10.1.0.0/20\"]\n      priority = 20000\n    }\n    ```", "```\n     resource \"google_compute_firewall\" \"allow-ssh-from-my-ip\" {\n      name    = \"allow-ssh-from-my-ip\"\n      network = local.net_02\n      allow {\n        protocol = \"tcp\"\n        ports    = [\"22\"]\n      }\n      source_ranges = [\"${var.my_ip}/32\"]\n      priority = 30000\n    }\n    resource \"google_compute_firewall\" \"allow-desktop-access-from-my-ip\" {\n      name    = \"allow-desktop-access-from-my-ip\"\n      network = local.net_02\n      allow {\n        protocol = \"tcp\"\n        ports    = [\"8081\"]\n      }\n      source_ranges = [\"${var.my_ip}/32\"]\n      priority = 40000\n    }\n    ```", "```\n     output \"subnet_01\" {\n      value = google_compute_subnetwork.subnet_01.id\n    }\n    output \"subnet_02\" {\n      value = google_compute_subnetwork.subnet_02.id\n    }\n    ```", "```\n    cd ~/pentest_lab\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n     module \"secure_network\" {\n      source = \"./secure_network\"\n    }\n    ```", "```\n     module \"secure_network\" {\n      source = \"./secure_network\"my_ip = var.my_ip }\n    ```", "```\n    terraform plan\n    ```", "```\n    ... Plan: 11 to add, 0 to change, 0 to destroy. ...\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Apply complete! Resources: 11 added, 0 changed, 0 destroyed.\n    ```", "```\n    cd ~/pentest_lab\n    cd target_vm\n    ```", "```\n    touch main.tf\n    touch variables.tf\n    touch outputs.tf\n    ```", "```\n     wget -O target_boot_script.tpl <DOWNLOAD LINK>\n    ```", "```\n    cat target_boot_script.tpl\n    ```", "```\n     wget -O wait_for_boot.tpl <DOWNLOAD LINK>\n    ```", "```\n    cat wait_for_boot.tpl\n    ```", "```\n    echo \"SCRIPT: COMPLETE\"\n    ```", "```\n     variable \"subnet_01\" {\n        type = string\n    }\n    ```", "```\n     resource \"random_string\" \"random_password\" {\n      length           = 12\n      special          = true\n      override_special = \"!#$%&\"\n    }\n    ```", "```\n     locals {\n        vm_username = \"testuser\"\n        vm_password = random_string.random_password.result\n    }\n    locals {\n      script = templatefile(\"${path.module}/target_boot_script.tpl\", {\n        vm_username = local.vm_username\n        vm_password = local.vm_password\n      })\n      subnet_01 = var.subnet_01\n    }\n    ```", "```\n     resource \"google_compute_instance\" \"target_vm\" {\n      name         = \"vm-target\"\n      machine_type = \"f1-micro\"\n      zone         = \"us-central1-c\"\n      boot_disk {\n        initialize_params {\n          image = \"debian-cloud/debian-11\"\n        }\n      }\n      metadata_startup_script = local.script\n      network_interface {\n        subnetwork = local.subnet_01\n        access_config {}\n      }\n    }\n    locals {\n      max_retries = 20\n      retry_delay = 30\n    }\n    ```", "```\n     resource \"null_resource\" \"wait_for_startup_script\" {\n      depends_on = [google_compute_instance.target_vm]\n      provisioner \"local-exec\" {\n        interpreter = [\"bash\", \"-c\"]\n        command = templatefile(\"${path.module}/wait_for_boot.tpl\", {\n            max_retries    = local.max_retries\n            target_vm_name = google_compute_instance.target_vm.name\n            target_vm_zone = google_compute_instance.target_vm.zone\n            retry_delay    = local.retry_delay\n        })\n      }\n      provisioner \"local-exec\" {\n        when    = destroy\n        command = \"true\"\n      }\n    }\n    ```", "```\n     locals {\n        target_vm = google_compute_instance.target_vm\n        target_vm_ni = local.target_vm.network_interface.0\n        target_vm_private_ip = local.target_vm_ni.network_ip\n        target_vm_ac = local.target_vm_ni.access_config.0\n        target_vm_public_ip = local.target_vm_ac.nat_ip\n    }\n    ```", "```\n     output \"target_vm_username\" {\n      value = local.vm_username\n    }\n    output \"target_vm_password\" {\n      value = local.vm_password\n    }\n    output \"target_vm_private_ip\" {\n      value = local.target_vm_private_ip\n    }\n    output \"target_vm_public_ip\" {\n      value = local.target_vm_public_ip\n    }\n    ```", "```\n    cd ~/pentest_lab\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n     module \"target_vm\" {\n      source = \"./target_vm\"\n    }\n    ```", "```\n     module \"target_vm\" {\n      source = \"./target_vm\"subnet_01 = module.secure_network.subnet_01 }\n    ```", "```\n    terraform plan\n    ```", "```\n    ... Plan: 3 to add, 0 to change, 0 to destroy.\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Apply complete! Resources: 3 added, 0 changed, 0 destroyed.\n    ```", "```\n     output \"target_vm_username\" {\n      value = module.target_vm.target_vm_username\n    }\n    output \"target_vm_password\" {\n      value = module.target_vm.target_vm_password\n    }\n    output \"target_vm_private_ip\" {\n      value = module.target_vm.target_vm_private_ip\n    }\n    output \"target_vm_public_ip\" {\n      value = module.target_vm.target_vm_public_ip\n    }\n    ```", "```\n    terraform plan\n    ```", "```\n    Changes to Outputs:\n      + target_vm_password   = \"...\" + target_vm_private_ip = \"...\" + target_vm_public_ip  = \"...\"   + target_vm_username   = \"testuser\"\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    Apply complete! Resources: 0 added, 0 changed, 0 destroyed. Outputs:\n    target_vm_password = \"...\" target_vm_private_ip = \"...\" target_vm_public_ip = \"...\" target_vm_username = \"testuser\"\n    ```", "```\n    sudo docker ps\n    ```", "```\n    curl localhost:80\n    ```", "```\n    https://kali.download/cloud-images/kali-2023.1/kali-linux-2023.1-cloud-genericcloud-amd64.tar.xz\n    ```", "```\n    cd ~\n    mkdir kali-image && cd kali-image\n    ```", "```\n    IMAGE_SOURCE=**https://kali.download/cloud-images/kali-2023.1/kali-linux-2023.1-cloud-genericcloud-amd64.tar.xz**\n    wget -O kl_image.tar.xz $IMAGE_SOURCE\n    ```", "```\n    tar -xf kl_image.tar.xz\n    rm kl_image.tar.xz\n    tar --format=oldgnu -Sczf kl_image.tar.gz disk.raw\n    rm disk.raw\n    ```", "```\n     BUCKET_NAME=<BUCKET NAME> gsutil mb gs://$BUCKET_NAME\n    ```", "```\n    gsutil cp kl_image.tar.gz \\\n    gs://$BUCKET_NAME/kl_image.tar.gz\n    ```", "```\n     IMAGE_NAME=kali-linux-2023-000 gcloud compute images create $IMAGE_NAME \\\n        --source-uri gs://$BUCKET_NAME/kl_image.tar.gz \\\n        --family kali-linux\n    ```", "```\n    gcloud compute images list --no-standard-images\n    ```", "```\n    NAME: kali-linux-2023-000\n    PROJECT: ... FAMILY: kali-linux\n    DEPRECATED:\n    STATUS: READY\n    ```", "```\n    NEW_USER=\"kali\"\n    if ! id -u $NEW_USER > /dev/null 2>&1; then\n        adduser --disabled-password --gecos \"\" $NEW_USER\n    fi\n    mkdir -p /home/$NEW_USER/.ssh\n    chown $NEW_USER:$NEW_USER /home/$NEW_USER/.ssh\n    chmod 700 /home/$NEW_USER/.ssh\n    ```", "```\n     SSH_KEY=\"<SSH PUBLIC KEY VALUE>\"\n    echo $SSH_KEY > /home/$NEW_USER/.ssh/authorized_keys\n    cat /home/$NEW_USER/.ssh/authorized_keys\n    ```", "```\n    chown $NEW_USER:$NEW_USER /home/$NEW_USER/.ssh/authorized_keys\n    chmod 600 /home/$NEW_USER/.ssh/authorized_keys\n    systemctl restart ssh\n    ```", "```\n    usermod -aG sudo $NEW_USER\n    echo '$NEW_USER ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/$NEW_USER-nopasswd\n    chmod 440 /etc/sudoers.d/$NEW_USER-nopasswd\n    ```", "```\n    su kali\n    cd ~\n    ```", "```\n    sudo DEBIAN_FRONTEND=noninteractive dpkg --configure -a\n    sudo apt update\n    sudo apt install -y dbus-x11\n    sudo DEBIAN_FRONTEND=noninteractive apt install -y kali-linux-default\n    ```", "```\n    cd ~\n    wget **https://gitlab.com/kalilinux/recipes/kali-scripts/-/raw/main/xfce4.sh**\n    chmod +x xfce4.sh\n    sudo DEBIAN_FRONTEND=noninteractive ./xfce4.sh\n    ```", "```\n    sudo systemctl enable xrdp --now\n    ```", "```\n    echo kali:kali | sudo chpasswd\n    ```", "```\n    sudo apt install -y tigervnc-standalone-server\n    VNCPASS=kali123\n    printf \"$VNCPASS\\n$VNCPASS\\n\\n\" | vncpasswd\n    sudo DEBIAN_FRONTEND=noninteractive apt install -y novnc\n    ```", "```\n    which vncserver\n    /usr/share/novnc/utils/novnc_proxy --help\n    ```", "```\n    EDITOR=vim crontab -e -u kali\n    ```", "```\n     @reboot sleep 60 && /usr/bin/vncserver @reboot sleep 60 && /usr/share/novnc/utils/novnc_proxy --listen 0.0.0.0:8081 --vnc localhost:5901 >/dev/null 2>&1 &\n    ```", "```\n     http://<ATTACKER VM PUBLIC IP ADDRESS>:8081/vnc.html\n    ```", "```\nssh -L 8081:localhost:8081 -N -i <INSERT KEY NAME> <USER>@<ATTACKER VM IP>\n```", "```\n     projects/<PROJECT ID>/global/machineImages/kali-golden-image\n    ```", "```\n    cd ~/pentest_lab\n    cd attacker_vm\n    ```", "```\n    touch main.tf\n    touch variables.tf\n    touch outputs.tf\n    ```", "```\n     variable \"subnet_02\" {\n        type = string\n    }\n    variable \"kali_machine_image\" {\n        type = string\n        default = \"<INSERT IMAGE>\"\n    }\n    variable \"my_public_ssh_key\" {\n        type = string\n    }\n    ```", "```\n     locals {subnet_02 = var.subnet_02\n    }\n    resource \"google_compute_instance_from_machine_image\" \"kali_vm\" {\n      provider = google-beta\n      name     = \"vm-kali\"\n      machine_type = \"e2-medium\"\n      zone         = \"us-central1-c\"\n      source_machine_image = var.kali_machine_image metadata = {\n        ssh-keys = \"kali:${var.my_public_ssh_key}\"\n      }\n      network_interface {\n        subnetwork = local.subnet_02 access_config {}\n      }\n    }\n    ```", "```\n     locals {\n      kali_public_ip = google_compute_instance_from_machine_image.kali_vm.network_interface.0.access_config.0.nat_ip\n    }\n    output \"attacker_vm_public_ip\" {\n      value = local.kali_public_ip\n    }\n    output \"attacker_vm_access\" {\n      value = \"http://${local.kali_public_ip}:8081/vnc.html\"\n    }\n    ```", "```\n    cd ~/pentest_lab\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n     module \"attacker_vm\" {\n      source = \"./attacker_vm\"\n    }\n    ```", "```\n     module \"attacker_vm\" {\n      source = \"./attacker_vm\"subnet_02 = module.secure_network.subnet_02 my_public_ssh_key = var.my_public_ssh_key }\n    ```", "```\n    terraform plan\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n     output \"target_vm_username\" {\n      value = module.target_vm.target_vm_username\n    }\n    output \"target_vm_password\" {\n      value = module.target_vm.target_vm_password\n    }\n    output \"target_vm_private_ip\" {\n      value = module.target_vm.target_vm_private_ip\n    }\n    output \"target_vm_public_ip\" {\n      value = module.target_vm.target_vm_public_ip\n    }\n    output \"attacker_vm_public_ip\" {\n      value = module.attacker_vm.attacker_vm_public_ip\n    }\n    output \"attacker_vm_access\" {\n      value = module.attacker_vm.attacker_vm_access\n    }\n    ```", "```\n    terraform plan\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    Outputs:\n    attacker_vm_access = \"...\" attacker_vm_public_ip = \"...\" target_vm_password = \"...\" target_vm_private_ip = \"...\" target_vm_public_ip = \"...\" target_vm_username = \"testuser\"\n    ```", "```\n     http://<ATTACKER VM PUBLIC IP ADDRESS>:8081/vnc.html\n    ```", "```\n     TARGET_IP=<PRIVATE IP ADDRESS OF TARGET VM>\n    ```", "```\n    nmap --top-ports 1000 $TARGET_IP\n    ```", "```\n     http://<PRIVATE IP ADDRESS OF TARGET VM>\n    ```", "```\n     SELECT * FROM users WHERE email = '' or 1=1--' AND password = '123';\n    ```", "```\n    cd ~/pentest_lab\n    terraform destroy -auto-approve\n    ```", "```\n    terraform show\n    ```"]