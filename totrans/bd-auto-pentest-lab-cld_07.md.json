["```\n     {    \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": \"*\",\n                \"Resource\": \"*\"\n            }\n        ]\n    }\n    ```", "```\n     {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                     \"Service\": [\n                        \"ec2.amazonaws.com\",\n                        \"cloud9.amazonaws.com\"\n                    ]\n                },\n                \"Action\": \"sts:AssumeRole\"\n            }\n        ]\n    }\n    ```", "```\n    aws sts get-caller-identity --query Arn\n    ```", "```\n    \"arn:aws:sts::...:assumed-role/terraform-environment-role/...\"\n    ```", "```\n    terraform version\n    ```", "```\n    Terraform vX.Y.Z\n    on linux_amd64\n    Your version of Terraform is out of date! The latest version\n    is X.Y.Z. You can update by downloading from https://www.terraform.io/downloads.html\n    ```", "```\n    INSERT INTO books `{\"ID\":\"ABCD\", \"Title\":\"Machine Learning with Amazon SageMaker Cookbook\", \"Notes\":\"Machine Learning\"}`;\n    INSERT INTO books `{\"ID\":\"EFGH\", \"Title\":\"Machine Learning Engineering on AWS\", \"Notes\":\"Machine Learning Engineering\"}`;\n    INSERT INTO books `{\"ID\":\"IJKL\", \"Title\":\"Building and Automating Penetration Testing Labs in the Cloud\", \"Notes\":\"Security\"}`;\n    ```", "```\n    SELECT * FROM books;\n    ```", "```\n    UPDATE books AS b SET b.Flag='Flag # 1!' WHERE b.ID='IJKL';\n    ```", "```\n    SELECT * FROM books;\n    ```", "```\n    DELETE FROM books;\n    ```", "```\n    SELECT * FROM books;\n    ```", "```\n    S3_BUCKET=<S3 BUCKET NAME>\n    ```", "```\n    aws s3 mb s3://$S3_BUCKET\n    ```", "```\n    make_bucket: <S3 BUCKET NAME>\n    ```", "```\n    echo \"FLAG # 2!\" > flag.txt\n    ```", "```\n    aws s3 cp flag.txt s3://$S3_BUCKET/flag.txt\n    ```", "```\n    upload: ./flag.txt to s3://<S3 BUCKET NAME>/flag.txt\n    ```", "```\n    rm flag.txt\n    ```", "```\n     {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"Service\": \"lambda.amazonaws.com\"\n                },\n                \"Action\": \"sts:AssumeRole\"\n            },\n            {\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"Service\": \"sagemaker.amazonaws.com\"\n                },\n                \"Action\": \"sts:AssumeRole\"\n            }\n        ]\n    }\n    ```", "```\n    cd ~/environment\n    ```", "```\n    mkdir -p iam_lab\n    cd iam_lab\n    ```", "```\n    touch main.tf\n    touch outputs.tf\n    touch variables.tf\n    touch terraform.tfvars\n    ```", "```\n    mkdir iam_workshop_user\n    cd iam_workshop_user\n    ```", "```\n    touch main.tf\n    touch outputs.tf\n    touch variables.tf\n    ```", "```\n    cd ~/environment/iam_lab\n    mkdir notebook_instance_role\n    cd notebook_instance_role\n    ```", "```\n    touch main.tf\n    touch outputs.tf\n    touch variables.tf\n    ```", "```\n    cd ~/environment/iam_lab\n    mkdir notebook_instance\n    cd notebook_instance\n    ```", "```\n    touch main.tf\n    touch outputs.tf\n    touch variables.tf\n    touch lifecycle_script.sh\n    ```", "```\n    cd ~/environment/iam_lab\n    ```", "```\n     module \"iam_workshop_user\" {\n      source = \"./iam_workshop_user\"\n    }\n    module \"notebook_instance\" {\n      source = \"./notebook_instance\"\n    }\n    module \"notebook_instance_role\" {\n      source = \"./notebook_instance_role\"\n    }\n    ```", "```\n     variable \"workshop_user_username\" {\n      type    = string\n    }\n    variable \"notebook_instance_name\" {\n      type    = string\n    }\n    variable \"notebook_instance_role_name\" {\n      type    = string\n    }\n    ```", "```\n    workshop_user_username = \"sagemaker-workshop-user\" notebook_instance_name = \"target-notebook-instance\" notebook_instance_role_name = \"notebook-instance-role\"\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n     data \"aws_caller_identity\" \"current\" {}\n    resource \"aws_iam_user\" \"workshop_user\" {\n      name = var.username\n    }\n    resource \"aws_iam_user_policy_attachment\" \"sagemaker_policy_attachment\" {\n      user       = aws_iam_user.workshop_user.name\n      policy_arn = join(\"\", [\n        \"arn:aws:iam::aws:policy/\",\n        \"AmazonSageMakerFullAccess\"\n      ])\n    }\n    resource \"aws_iam_user_login_profile\" \"profile\" {\n      user                    = (\n        aws_iam_user.workshop_user.name\n      )\n      password_length         = 10\n      password_reset_required = false\n    }\n    ```", "```\n     variable \"username\" {\n      type    = string\n    }\n    ```", "```\n     output \"username\" {\n      value = aws_iam_user.workshop_user.name\n    }\n    output \"signin_url\" {\n      value = join(\"\",[\n        \"https://\",\n        data.aws_caller_identity.current.account_id,\n        \".signin.aws.amazon.com/console\"\n      ])\n    }\n    output \"password\" {\n      value = aws_iam_user_login_profile.profile.password\n    }\n    ```", "```\n     module \"iam_workshop_user\" {\n      source = \"./iam_workshop_user\"\n    }\n    ```", "```\n    module \"iam_workshop_user\" {\n      source = \"./iam_workshop_user\"\n      username = var.workshop_user_username }\n    ```", "```\n     output \"iam_workshop_user_username\" {\n      value = module.iam_workshop_user.username\n    }\n    output \"signin_url\" {\n      value = module.iam_workshop_user.signin_url\n    }\n    output \"iam_workshop_user_password\" {\n      value = module.iam_workshop_user.password\n    }\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n    ... Plan: 3 to add, 0 to change, 0 to destroy. ...\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Apply complete! Resources: 3 added, 0 changed, 0 destroyed. ...\n    ```", "```\n     resource \"aws_iam_role\" \"notebook_instance_role\" {\n      name               = var.notebook_instance_role_name\n      assume_role_policy = <<EOF {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Action\": \"sts:AssumeRole\",\n          \"Effect\": \"Allow\",\n          \"Principal\": {\n            \"Service\": \"sagemaker.amazonaws.com\"\n          }\n        }\n      ]\n    } EOF }\n    ```", "```\n     resource \"aws_iam_role_policy_attachment\" \"notebook_instance_role_sagemaker_policy\" {\n      role       = (\n        aws_iam_role.notebook_instance_role.name\n      )\n      policy_arn = join(\"\", [\n        \"arn:aws:iam::aws:policy/\",\n        \"AmazonSageMakerFullAccess\"\n      ])\n    }\n    resource \"aws_iam_role_policy\" \"notebook_instance_role_inline_policy\" {\n      name   = \"create-function-policy\"\n      role   = aws_iam_role.notebook_instance_role.name\n      policy = <<EOF {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Effect\": \"Allow\",\n                \"Action\": [\n                    \"s3:*\",\n                    \"lambda:CreateFunction\",\n                    \"lambda:InvokeFunction\",\n                    \"lambda:DeleteFunction\",\n                    \"iam:PassRole\"\n                ],\n                \"Resource\": \"*\"\n            }\n        ]\n    } EOF }\n    ```", "```\n     output \"notebook_instance_role_arn\" {\n      value = aws_iam_role.notebook_instance_role.arn\n    }\n    ```", "```\n     variable \"notebook_instance_role_name\" {\n      type    = string\n    }\n    ```", "```\n     module \"notebook_instance_role\" {\n      source = \"./notebook_instance_role\"\n    }\n    ```", "```\n    module \"notebook_instance_role\" {\n      source = \"./notebook_instance_role\"\n      notebook_instance_role_name = (var.notebook_instance_role_name )\n    }\n    ```", "```\n     output \"notebook_instance_role_arn\" {\n      value = (\n        module\n          .notebook_instance_role\n          .notebook_instance_role_arn\n      )\n    }\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n    Plan: 3 to add, 0 to change, 0 to destroy.\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Apply complete! Resources: 3 added, 0 changed, 0 destroyed. ...\n    ```", "```\n     #!/bin/bash\n    sudo -u ec2-user -i <<EOF\n      cd /home/ec2-user/SageMaker\n      wget https://raw.githubusercontent.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/main/ch07/Lab%2000.ipynb mkdir -p scripts && cd scripts\n      wget https://raw.githubusercontent.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/main/ch07/scripts/inference.py wget https://raw.githubusercontent.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/main/ch07/scripts/requirements.txt wget https://raw.githubusercontent.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/main/ch07/scripts/setup.py EOF\n    ```", "```\n     resource \"aws_sagemaker_notebook_instance_lifecycle_configuration\" \"lifecycle_config\" {\n      name = \"lifecycle-config\"\n      on_create = (\n        base64encode(\n          file(\"${path.module}/lifecycle_script.sh\")\n        )\n      )\n    }\n    locals {\n      instance_role_arn = var.notebook_instance_role_arnlifecycle_config_name = aws_sagemaker_notebook_instance_lifecycle_configuration.lifecycle_config.name\n    }\n    resource \"aws_sagemaker_notebook_instance\" \"notebook_instance\" {\n      name                  = var.notebook_instance_name\n      instance_type         = \"ml.t3.medium\"\n      role_arn              = local.instance_role_arn\n      lifecycle_config_name = local.lifecycle_config_name\n      tags = {\n        Name = \"notebook-instance\"\n      }\n    }\n    ```", "```\n     variable \"notebook_instance_name\" {\n      type    = string\n    }\n    variable \"notebook_instance_role_arn\" {\n      type    = string\n    }\n    ```", "```\n     module \"notebook_instance\" {\n      source = \"./notebook_instance\"\n    }\n    ```", "```\n    module \"notebook_instance\" {\n      source = \"./notebook_instance\"\n      notebook_instance_role_arn = (module.notebook_instance_role .notebook_instance_role_arn )notebook_instance_name = var.notebook_instance_name }\n    ```", "```\n    terraform init\n    ```", "```\n    terraform plan\n    ```", "```\n    terraform apply -auto-approve\n    ```", "```\n    ... Outputs: iam_workshop_user_password = \"...\" iam_workshop_user_username = \"...\" notebook_instance_role_arn = \"...\" signin_url = \"...\"\n    ```", "```\n     Generate a new Python function called get_caller_id that uses boto3 to return the AWS Account ID\n    ```", "```\n    pip3 install ipython\n    ipython3\n    ```", "```\n    %cpaste\n    ```", "```\n     import boto3\n    def get_caller_id():\n        # ... sts_client = boto3.client('sts')\n        # ... response = sts_client.get_caller_identity()\n        # ...     account_id = response['Account']\n        return account_id\n    ```", "```\n    get_caller_id()\n    ```", "```\n     Generate a new Python function called `generate_random_password` that accepts a parameter `length` with a default value of 16 and returns a randomly generated string value\n    ```", "```\n     Update the previous answer by using `secrets` instead of `random`\n    ```", "```\n     Generate Python code that uses the boto3 library to create a new IAM user with the AdministratorAccess policy attached to it\n    ```", "```\n     Update the previous answer by having the function create an access key id and secret access key as well\n    ```", "```\n     Update the previous answer by:\n    1\\. Specifying a randomly generated password so that we can sign in as the IAM user with the specified username and password\n    2\\. Disabling password reset so that we won't need to change the password upon signing in\n    3\\. Having the function return the access key ID, secret access key, username, and password\n    ```", "```\n    TOKEN=$(curl -X PUT -H \"X-aws-ec2-metadata-token-ttl-seconds: 300\" http://169.254.169.254/latest/api/token)curl -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance\n    ```", "```\n    aws s3 ls\n    ```", "```\n     S3_BUCKET=<S3 BUCKET NAME>\n    aws s3 ls s3://$S3_BUCKET\n    ```", "```\n    aws s3 cp s3://$S3_BUCKET/flag.txt flag.txt\n    ```", "```\n    download: s3://.../flag.txt to ./flag.txt\n    ```", "```\n    cat flag.txt\n    ```", "```\n    DOWNLOAD_URL=**https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/raw/main/ch07/solution/Lab%20Solution.ipynb**\n    cd ~/SageMaker\n    wget $DOWNLOAD_URL\n    ```", "```\n     result = invoke_function(function_name)\n    result\n    ```", "```\n    '{\"statusCode\": 200, \"body\": {\"username\": \"new-iam-user\", \"access_key\": \"...\", \"secret_key\": \"...\", \"password\": \"...\"}}'\n    ```", "```\n    SELECT * FROM books;\n    ```", "```\n    SELECT * FROM history(books);\n    ```", "```\n    cd ~/environment/iam_lab\n    terraform destroy -auto-approve\n    ```"]