["```\n    https://github.com/PacktPublishing/Building-and-Automating-Penetration-Testing-Labs-in-the-Cloud/blob/main/ch06/pentest_lab.zip\n    ```", "```\n     Analyze what this zip file contains\n    ```", "```\n     How many EC2 instances will be created overall (based from all files extracted from the pentest_lab.zip file)? Provide as much details as possible including cost per month. Use the uploaded Amazon EC2 Instance Comparison.csv as a reference when computing the overall cost.\n    ```", "```\n     Instead of a month, I'll be running the resources for 6 hours and then I'll destroy the resources. How much would it cost to run the resources?\n    ```", "```\n     Generate a bar chart comparing the costs per Terraform file\n    ```", "```\n     Identify which Terraform blocks of code have a contribution to the overall cost\n    ```", "```\n     Update the previous answer by changing the instance type of the vm_kali EC2 instance from t3.medium to m5.large\n    ```", "```\n     #!/bin/bash\n    ```", "```\n     BUCKET_NAME=<BUCKET NAME>\n    ```", "```\n     # Create a new Google Cloud Storage bucket using the gsutil command\n    ```", "```\n     echo \"FLAG!\" > flag.txt\n    ```", "```\n     # Upload the flag.txt file to the Cloud Storage bucket\n    ```", "```\n     # Function that uses boto3 to return the STS caller identity\n    ```", "```\n     get_caller_identity():\n    ```", "```\n     # List all resource groups in the Azure account using the Azure CLI\n    ```", "```\n     az group list --output table\n    ```", "```\n     # For each resource group, list down all resources inside\n    ```", "```**), feel free to delete the extra line manually. At this point, we have a small PowerShell script ready for use! It is important to note that the code generated by the AI tool/extension may not always work. Make sure to review, run, and test the code generated thoroughly before using it in a real project.\n\nNote\n\nWe won’t dive deep into the features of Tabnine in this book. Feel free to check the following video (*Become a Tabnine expert in 40 minutes!*) for more information about this topic: [https://www.youtube.com/watch?v=XXERCwezdsQ](https://www.youtube.com/watch?v=XXERCwezdsQ).\n\nAt this point, we should have a good idea of how to use AI-powered tools to accelerate the preparation of automation scripts for building our penetration testing lab environments. Given the time-consuming nature of manually coding automation scripts, these tools will allow us to build complex lab environments faster. In addition to using AI-powered tools that suggest blocks of code automatically for us, we can also utilize various tools that automatically format our code to help us manage and maintain code quality. By using these tools, we can reduce potential errors and enhance the overall readability of our code as well.\n\nIn the next section, we will take a closer look at how AI-powered solutions can automatically generate IaC templates for us. In addition to this, we’ll see how these solutions can also be used to explain existing code prepared by other engineers or developers.\n\n# Using AI-powered solutions to generate and explain IaC template code\n\nIn the previous chapters of this book, we manually prepared the Terraform template code for setting up various penetration testing lab environments on AWS, Azure, and GCP. If you’ve actually worked on the hands-on examples and solutions in the previous chapters, you are probably aware that it takes a significant amount of time to code and prepare these IaC templates from scratch! To accelerate the preparation of IaC template code, we can use AI-powered solutions to generate code automatically using the right set of prompts. In addition to this, we can use these tools to explain existing code as well.\n\nIn this section, we will take a closer look at how AI-powered solutions such as ChatGPT and GitHub Copilot Labs can be used to generate and explain IaC template code. You’ll see how we can use these tools to significantly speed up the process of reading and writing code.\n\nImportant note\n\nMake sure that you have a **ChatGPT Plus** account ready before proceeding. In addition to this, make sure that the **GitHub Copilot Labs** extension is set up (completely), as specified in the *Technical requirements* section at the start of this chapter.\n\nLet’s proceed with using these AI-powered tools in the next set of steps.\n\n## Part 1 of 2 – Using ChatGPT to generate Terraform templates\n\n1.  In a new browser tab, access your **ChatGPT Plus** account using the following URL: [https://chat.openai.com/](https://chat.openai.com/). Ensure that you configure your account to have **Advanced Data Analysis** enabled before proceeding.\n2.  Create a new chat session and select **GPT-4** (or the latest model available exclusively to ChatGPT Plus users):![](image/B19755_09_28.jpg)\n\n    Figure 9.28 – Selecting GPT-4 and Advanced Data Analysis for our chat session\n\n    Make sure that **Advanced Data Analysis** is selected (instead of **Default**), similar to what we have in *Figure 9**.28*.\n\n1.  Now, type the following prompt inside the text bar:\n\n    ```", "```\n\n    Press the *Enter* key afterward to submit the prompt. This should yield a response similar to what is shown in *Figure 9**.29*:\n\n    ![](image/B19755_09_29.jpg)\n\n    Figure 9.29 – Generating Terraform template code using ChatGPT\n\n    Here, we can see that ChatGPT was able to generate the Terraform template code using the prompt we just submitted. Amazing, right?\n\n1.  Let’s build on top of the previous answer and enter the following prompt:\n\n    ```", "```\n\n    This will yield the following response from ChatGPT:\n\n    ![](image/B19755_09_30.jpg)\n\n    Figure 9.30 – Building on top of the previous answer\n\n    We can see in *Figure 9**.30* that we were able to successfully modify the code from the previous answer using the prompt we just entered.\n\n1.  Finally, let’s have ChatGPT draw a diagram for us using the following prompt:\n\n    ```", "```\n\n    This should give us the following output:\n\n    ![](image/B19755_09_31.jpg)\n\n    Figure 9.31 – Network environment diagram\n\n    Here, we can see that ChatGPT is able to draw a simple diagram to help us visualize what our network environment looks like. You may click the **Show work** button to view the code used to construct the diagram.\n\nImportant note\n\nFeel free to use Terraform to convert the generated template code into actual resources in your GCP account. Note that the **Compute Engine API** must first be enabled before using the **terraform apply** command to create the resources.\n\n## Part 2 of 2 – Using GitHub Copilot Labs to explain existing Terraform templates\n\nNow, let’s use GitHub Copilot Labs to explain the existing Terraform template code. Let’s start by making sure that all VS Code extensions are disabled to avoid any conflict that may arise with the newly added AI-powered extensions:\n\n1.  Click on the **Extensions** icon in the sidebar on the left side of the VS Code window. In the **Extensions** view, click the three dots (**···**) button and select **Disable All Installed Extensions** from the list of options available in the context menu.\n2.  Now, let’s enable the GitHub Copilot Labs extension. In the **EXTENSIONS: MARKETPLACE** view, we should see a search bar at the top. Type **GitHub Copilot Labs** in this search bar to locate the extension we need to enable.![](image/B19755_09_32.jpg)\n\n    Figure 9.32 – Enabling the GitHub Copilot Labs extension\n\n    Scroll through the list of extensions to find the **GitHub Copilot Labs** extension. Right-click on the extension and then select **Enable** from the list of options available in the context menu.\n\nNote\n\nMake sure that the setup is complete before proceeding. In some cases, VS Code may prompt you to restart the application. If prompted, go ahead and restart VS Code.\n\n1.  With the extension enabled, let’s proceed by creating a new file in VS Code named **copilot_labs.tf**.\n2.  Navigate to this book’s GitHub repository and locate the resource block for defining the attacker VM instance in *[Chapter 4](B19755_04.xhtml)*, *Setting Up Isolated Penetration Testing Lab Environments on GCP*. Feel free to use the following link to help you locate the ZIP file:\n\n    ```"]