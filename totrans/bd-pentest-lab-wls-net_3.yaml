- en: Chapter 3. Configuring Networking Lab Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already spent enough time on the preparations for building a lab and
    now it is finally time to actually start building it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will show you the configuration of hardware and virtual
    network devices for both the options of building a lab, so you can easily choose
    the one that fits your needs best.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter consists of the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: General lab network communication rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring hardware wired devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring virtual wired network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring WLANs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General lab network communication rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network diagrams are a very convenient way to represent a network topology and
    its architecture. They are widely used by nearly all **small or home office**
    (**SOHO**) and enterprise networks. But this representation often lacks a logical
    layer for providing a better understanding of how network components interact
    and in which directions network traffic flows. It is not an easy task to show
    it in a diagram, so network engineers use a bunch of documentation for that purpose,
    mostly combining tables, flowcharts, and diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: 'But as we have a very simple network diagram and a pretty straightforward understanding
    of how network traffic should flow, we can try to depict it as an additional layer
    on our network diagram, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General lab network communication rules](../images/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The network diagram including a logical layer
  prefs: []
  type: TYPE_NORMAL
- en: 'To extend the diagram and better explain the target access rules, let''s take
    a look at the additional information on the permitted access in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Source | Allowed destination | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Admin workstation |'
  prefs: []
  type: TYPE_TB
- en: All network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All user workstations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Network and system administration |'
  prefs: []
  type: TYPE_TB
- en: '| Servers |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Software installation and updates |'
  prefs: []
  type: TYPE_TB
- en: '| User workstations |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access, access to the internal network services |'
  prefs: []
  type: TYPE_TB
- en: '| Trusted WLAN |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access, access to the internal network services |'
  prefs: []
  type: TYPE_TB
- en: '| Guest WLAN |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access |'
  prefs: []
  type: TYPE_TB
- en: We don't want any access to our lab network from an external network or guest
    WLAN, thus we should not permit it. Also, there is no need to access the user
    subnet from the trusted WLAN and server subnet, so we do not allow it. The last
    rule is that only an administrator should be able to access any services on network
    devices; therefore, we do not allow it to any other lab component.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring hardware wired devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, that is enough theory. Now let's proceed with some practice and finally
    configure the network devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will configure our routers and switches via console ports using a special
    console cable, which in our case has a RJ-45 connector at one end and a DB-9 connector
    at the other end. You are unlikely to find DB-9 ports on contemporary computers,
    thus we need to have a DB-9-USB adapter cable to be able to connect it to a USB
    port. You can see an example of such a cable and an adapter in the following images
    from the Cisco website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring hardware wired devices](../images/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Cisco console cable
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring hardware wired devices](../images/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The DB-9 to USB adapter
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might need to install special drivers for using an adapter, so please check
    your adapter's user manual.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can get a console cable with both RJ-45 and USB connectors,
    for example, on eBay ([http://www.ebay.com/](http://www.ebay.com/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring hardware wired devices](../images/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The RJ-45 to USB console cable
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also need a terminal software to be able to communicate with devices
    via console ports. On Linux or MAC OS X, you can communicate with a Cisco device
    via its console port using, for example, a software "screen." You just need to
    find the interface name using the `dmesg` command after connecting a cable and
    use it as a parameter for screen utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we can see the following message that contains the interface name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we use this name with `screen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are able to communicate with a device's console port.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows, you can use the free PuTTY software. We will show you this variant
    of connection, but all further device configuration steps are the same regardless
    of the OS you are using to communicate with the devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will not provide an extended explanation for every configuration step because
    our goal is not to teach you network device administration, but to get a working
    instance to perform our lab tasks. You can get information about any Cisco command
    using the `?` sign with a command name in the terminal, for example, `show ?`.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the console connection on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step for preparing the console connection on Windows is to determine
    a serial port number to use with the PuTTY software. To do that, you need to turn
    a device on and connect its console port to one of the USB ports on your computer.
    A console port is marked or signed accordingly. Do not get confused and connect
    your console cable to other RJ-45 ports on the router—it will not work as we need
    it to.
  prefs: []
  type: TYPE_NORMAL
- en: If you have newer device models, they probably have USB console ports that you
    can connect to any of your computer's USB ports with a USB cable (Type A to Type
    mini B). In order to be able to communicate via this cable, you need to install
    a Cisco USB console driver that you can find at the official Cisco website.
  prefs: []
  type: TYPE_NORMAL
- en: 'After connecting a console cable and turning the device on, open **Device Manager**
    in Windows and find the COM and LPT ports in the device tree. Under this branch,
    you can find a USB-to-serial-port device and get a COM port number from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the console connection on Windows](../images/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting COM-port number
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know the COM port number, we can open PuTTY and set the **Connection
    type** to **Serial** and the **Serial line** to the right COM port, which is **COM3**
    in our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing the console connection on Windows](../images/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting the COM port number
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to connect and communicate with your devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also save this connection so you do not need to configure it every time
    you want to work with device consoles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the work on your lab network, you will probably meet some configuration
    challenges. Yes, we provide a pretty detailed manual in this book, but as it usually
    happens in the heterogeneous IT world, one just not simply configure something
    serious using a step-by-step manual. There are always some things that do not
    work or work not in the way you desire. There could be various reasons for that,
    such as different software versions or different hardware, so you should have
    no fear of checking Google for a solution on the Internet. We would say, you should
    appreciate such an opportunity to learn and understand your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'For solving any challenges during your lab installation and maintenance, you
    will need to use two important IOS commands: `logging buffered` and `debug`.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also download and read the official *Cisco IOS Configuration Fundamentals
    Command Reference* from the Cisco website and use it as reference material.
  prefs: []
  type: TYPE_NORMAL
- en: Core switch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start by installing and configuring our switch, which will serve as our
    network's core and provide basic connectivity between the lab components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our switch has 12 ports and we should determine a port layout first. We need
    one physical interface for connecting an external untrusted network, one physical
    interface for a router connection, one physical interface for an admin workstation,
    three interfaces for users, four interfaces for servers, and one interface for
    an access point to establish a trusted WLAN. Let''s summarize it in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Interface | Connection |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/1` | Router |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/2` | External router (network) |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/3` | Admin workstation |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/4-fa0/6` | User subnet |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/7-fa0/10` | Server subnet |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/11` | Trusted WLAN |'
  prefs: []
  type: TYPE_TB
- en: Now when you know where to connect what, you can start connecting a router to
    our switch and performing the initial switch configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Initial configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you are using virtual or new network devices, initial configuration
    can be limited to just setting a hostname with the command `hostname`. But if
    you got used devices (this is very likely if you use it for a lab), there could
    be old configurations saved that you obviously do not need. So that we do not
    unintentionally allow anything unsecure to be enabled or disabled, as the first
    initial configuration step, we are going to erase the current config and revert
    the OS to factory settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Device configurations could be password-protected by their previous owners and
    you probably do not know those passwords. In that case, you can use a hardware
    switch to factory reset a device. Such a switch often looks like a button with
    a sign "mode." You need to push and hold it for a while to have an effect. Refer
    to the Cisco website for certain device configuration manuals.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, connect to the device console and first of all get into privileged
    command mode by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that your command invitation ends with a `#` sign which means
    you are in the privileged mode now. Now, we need to start the configuration terminal
    mode with the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, erase an old config and revert to a blank one with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Reloading an OS will take some time. If you have a cable connected to the device''s
    Ethernet port, the switch will try to load a configuration image from a TFTP Server
    attempting to discover it via multicast messages sent to 255.255.255.255\. Most
    likely, you do not have a TFTP Server reachable and you will see error messages
    in the console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%Error opening tftp://255.255.255.255/network-confg (Timed out)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'After reloading the device, an invitation to start an initial configuration
    dialog should appear. We do not recommend using it if you are not sure what you
    are doing, to avoid any differences in our configuration and yours. But if you
    want to use it, just answer yes or run the command `setup` from the privileged
    mode if the dialog has not appeared. This dialog will guide you through the initial
    configuration with simple questions. Here''s a statement from the official Cisco
    documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: If you make a mistake while using the setup command facility, you can exit and
    run the setup command facility again. Press Ctrl-C, and enter the setup command
    at the privileged EXEC mode prompt.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To finish our initial configuration, set a hostname for the core switch with
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `sw` is your chosen name for the device. Of course, you can choose whichever
    name you like, but we recommend using the same names that we provide in this book
    to avoid possible confusion later.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring interfaces and VLANs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the next step, let's configure the switch's interfaces and virtual local
    area networks to logically separate our lab subnets from each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to determine a VLAN to interface with the layout and assign
    VLAN numbers and names, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Interface | Mode | VLAN number | VLAN name |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/1` | trunk | - | - |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/2` | access | 5 | external |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/3` | access | 1 | default |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/4-fa0/6` | access | 3 | users |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/7-fa0/11` | access | 2 | servers |'
  prefs: []
  type: TYPE_TB
- en: '| `fa0/12` | access | 4 | trusted_wlan |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Cisco networks, the trunk mode allows a port to transfer traffic of any VLAN
    accessible on a device opposite to an access mode which transfers traffic only
    for one VLAN assigned to it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's implement it as a switch configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with sequentially entering the privileged and config modes if you are
    not in yet, and then define your VLAN numbers and names with the following console
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining VLANs, we need to set interfaces to the right modes, give them
    descriptions, assign VLAN numbers, and turn them on. We do so using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have accidentally set wrong interface configs, you can easily remove
    them by executing the same command with a preceding `no` statement, for example,
    consider the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be cancelled with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once you have configured VLANs, you can use the commands `show vlan` and `show
    interfaces` to review your configuration. To see the whole configuration, use
    the command `show running-config`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Play with the show command: enter `show ?` and try various commands from the
    displayed list to see various configuration parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, we have a basic working config and we can connect other lab components
    to the core switch, but it is wise to do some basic hardening before as we are
    building a secure lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main purposes of hardening the core switch: protecting our lab
    from external malicious activity and preparing the switch for practicing advanced
    attack techniques. We will show you some basic hardening steps, but we recommend
    you to go further and use the official Cisco IOS device hardening guide available
    at their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html](http://www.cisco.com/c/en/us/support/docs/ip/access-lists/13608-21.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start hardening by setting a password for the privileged mode with the
    following command in the configuration mode (`config t`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can change `secret_password` to your desired password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to disable **Cisco Discovery Protocol** (**CDP**) on the interface
    connected to an external network (`fa0/2`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will limit the information broadcast about our network devices to an external
    untrusted network.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save a new configuration and prevent it from being deleted after rebooting
    the device, we need to copy the running configuration to the startup configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a functioning lab network core and we can proceed to configuring
    our router.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening the core switch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our gateway (that is our core router at the same time) should perform routing
    between subnets, allowing the lab components to communicate with each other. It
    also should provide a DHCP service for the user subnet and the trusted WLAN and
    perform network address translation many-to-one for Internet (external network)
    access.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with every network device, we are going to start with the initial configuration.
    This is similar to the one we have done for the core switch. In this case, we
    just need to connect the router''s port `fa0/0` with the switch''s port `fa0/1`
    using an Ethernet cable, revert router configs to blank, and set a hostname `gw`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can always save a configuration using the same command as for the core
    switch: `copy running-config startup-config`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we are ready to configure the prerequisites for the router''s
    main functionality: subinterfaces and subnets.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring subinterfaces and subnets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our lab, we are implementing the router-on-a-stick scheme to allow all internal
    subnets to be served by only one FastEthernet router interface. To do this, we
    need to create subinterfaces of the interface `fa0/0` for each VLAN in our network
    and assign IP addresses to them. The gateway will have the IP address with the
    last octet equal to 1 in every subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we are in the interface configuration mode after entering the command `interface
    f...`, we need to first set an encapsulation mode and only after that set an IP
    address and a network mask, otherwise we get an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'After finishing the configuration of subinterfaces, let''s activate the parent
    interface to activate all subinterfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can type the command `end` to exit the configuration mode and then
    check our resulting interface configs by entering the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see a list like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring subinterfaces and subnets](../images/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The interface status in a terminal window
  prefs: []
  type: TYPE_NORMAL
- en: We can see all our subinterfaces along with their new IP addresses and states
    from the preceding listing.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring auxiliary services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After configuring router''s subinterfaces, it is time to set up a DHCP server
    on our router for the user subnet and trusted WLANs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's configure NAT on the gateway so the lab network components can access
    external networks for downloading software updates, DNS resolution, e-mail exchange,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to identify the inside and outside NAT interfaces. We want to
    provide Internet access only to our users, admin, and servers, that is, VLANs
    1 to 4 and the router subinterfaces `fa0/0.1`, `fa0/0.2`, `fa0/0.3`, and `fa0/0.4`,
    respectively. These are our inside interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'An outside interface is one which is connected to an external network and this
    is `fa0/0.5` in our case. This interface obtains its IP address from an external
    authority via DHCP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have trouble with the NAT configuration, you can activate the debugging
    mode for NAT with the command `debug ip nat` to be able to track the source of
    your problem and fix it.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the command `show ip nat translations` can also be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's configure a DNS service on the gateway. We will enable the DNS role
    and set Google's DNS server with the IP address 8.8.8.8 as our external name server.
    If you build a lab in a corporate network, you can use the IP address of your
    corporate DNS servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'DNS role configuration can be performed in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the role on the router and allow domain lookup with the following commands
    in the configuration mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assign upstream name servers from which our router will get DNS information
    for requests to the Internet (insert the IP address of your preferred named server
    or add another with the same command):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to assign domain names to your servers or any other hosts in the
    lab network to be able to address them by name instead of IP address, you can
    do so with the following additional command for every host (change the name and
    IP according to your need): `gw(config)# ip host admin 10.1.0.30`.'
  prefs: []
  type: TYPE_NORMAL
- en: Basic gateway hardening
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The router is responsible for the communication control between our lab and
    the external untrusted network, which is assigned to VLAN 5 on the subinterface
    `fa0/0.5`. Thus we have to apply some hardening to the router and this interface.
    As a router-level security feature, we will utilize **access control lists** (**ACLs**)
    (we will talk about this later in [Chapter 5](part0038_split_000.html#147LC2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 5. Implementing Security"), *Implementing Security*) and password protection
    for a privileged mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s harden the security of the external facing subinterface `fa0/0.5`
    by disabling unnecessary and potentially dangerous services. Get into the configuration
    mode of the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s disable CDP and HSRP to reduce the attack surface and information disclosure
    about our devices to the untrusted subnet and enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The first command explicitly disables CDP which can broadcast valuable information
    about our device to the untrusted network.
  prefs: []
  type: TYPE_NORMAL
- en: The second and third commands explicitly disable **Hot Standby Routing Protocol**
    (**HSRP**) and **Virtual Router Redundancy Protocol** (**VRRP**), which could
    be used to carry out attacks from on untrusted network.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the last step in router configuration, save the changes so that you do not
    lose them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Configuring virtual wired network devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's consider how we can implement our lab network using virtual devices.
    The logical topology will be exactly the same as the network topology described
    earlier (implemented on hardware devices) and have the same addressing. The main
    resources will be deployed in virtual machines on a single-host high-performance
    computer. For virtualization resources, we will use the free multiplatform software
    GNS3 and VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: To start off, we need a high-performance computer with the correct operating
    system. In our case, it will be a laptop with an i7 x64 processor, 8 GB RAM, and
    running operating system Windows 8.1.
  prefs: []
  type: TYPE_NORMAL
- en: Network virtualization platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Graphical Network Simulator** (**GNS3**) is a platform for experiments, tests,
    demonstrations, and learning network technologies. GNS3 is a cross-platform tool
    and works on Windows, Linux, and Mac OS X. It has a convenient graphic interface
    and essentially is a GUI for Dynamips. Dynamips is a software emulator for Cisco
    routers, which allows us to emulate the hardware of router, loading, and interacting
    with real images of Cisco IOS. Dynamips supports the following platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: 1700 (1710-1760)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2600 (2610-2650 XM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2691'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3600 (3620, 3640, 3660)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3725'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '3745'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7200 (from NPE-100 to NPE-G1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a virtualization platform, GNS has some disadvantages. The most critical
    limitations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Highly demanding for CPU and memory**: 10 routers will seriously load the
    PC. The CPU usage can be reduced through the "idle PC" mechanism, which will be
    described later in the *Network topology implementation* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Weak L2 support**: There is no full emulation of network switches, only routers.
    But it is possible to set access/trunk ports and set switch modules with limited
    L2 functionality routers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But despite these limitations, a test lab can be built on the GNS engine.
  prefs: []
  type: TYPE_NORMAL
- en: Since GNS is a virtual router, it needs an image of Cisco IOS (or other) router
    operating system to function. You can obtain Cisco IOS images from the Cisco website,
    if you have an account with the necessary rights, or you can download them from
    the Internet. Another option is to download images from respective hardware equipment,
    if you have access to them.
  prefs: []
  type: TYPE_NORMAL
- en: Software installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First of all, we need to download the current version of GNS3 from the official
    website [https://www.gns3.com/](https://www.gns3.com/) after a simple registration
    procedure. After downloading the installation file (it should be named like `GNS3-1.4.4-all-in-one.exe`),
    just run it. The installation process is straightforward. This is a common process
    with the welcome screen, the license agreement window, and finally the checklist
    of components that will be installed. The GNS3 installation package comes with
    a set of necessary third-party software and if you are installing it from scratch,
    then leave it all. If some of them are already installed, you can uncheck those
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Software installation](../images/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: GNS3 components
  prefs: []
  type: TYPE_NORMAL
- en: After several clicks on the **Next** button, we will have a working network
    virtualization platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we are using Microsoft Windows 8.1 as a host operating system,
    so the installation process flows as described. But GNS3 is a multiplatform software,
    so you can also use it on Linux systems where the installation process is different
    but simple too. For example, GNS3 is available in repositories of Ubuntu or Debian
    and to install it you should just execute the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to install GNS3 on Mac OS X, you can find a detailed installation
    guide at the official website: [https://gns3.com/support/docs/quick-start-guide-for-mac-users](https://gns3.com/support/docs/quick-start-guide-for-mac-users).'
  prefs: []
  type: TYPE_NORMAL
- en: Initial configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, it is time for starting and configuring our virtualization platform. For
    that purpose, let's find the shortcut for GNS3 on the desktop and execute it.
    When the application starts, you'll be prompted to save a new project.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the name of the project, the application will open a working
    user interface of our virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initial configuration](../images/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The GNS3 user interface
  prefs: []
  type: TYPE_NORMAL
- en: To set up the program, let's go to **Edit** | **Preferences**. Now, we can configure
    the working environment for own convenience. In the **General** tab, we can choose
    the paths for saving working files, the styles and display settings of the interface,
    and the most important thing at this tab is the console emulation software and
    its settings. But since we are using Microsoft Windows as the host OS, we leave
    the defaults (PuTTY). In the **Server** tab, we can change the server component
    parameters of GNS3, for example, the connection parameters of a remote server.
    But at this step, we leave defaults. In the **Packet capture** tab, we can configure
    our connection to the network traffic analyzer. In the **VPCS** tab, we can choose
    how to use host stubs. Host stubs can be used to validate network schema (for
    example, `ping`, `tracert`, and so on). The default application is installed with
    GNS3\. Here, we can leave the default settings. In the **VirtualBox** tab, we
    should set paths to the VirtualBox management application (`VBoxManage.exe`).
    We won't use the tabs **IOS on Unix** and **QEMU** in our lab, so we will leave
    these tabs without changes too.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we need to do now is to add the Cisco IOS images in the list of used devices
    (if we have already obtained IOS images). This can be done in the **Dynamips**
    tab. At this step, we need to create two virtual devices: switch and gateway.
    After clicking on the **New** button, it will start the wizard for creating a
    virtual device. In the beginning, we are invited to enter the path to the IOS
    image file. After that, the image file will be decompressed and will be followed
    by a series of questions about the device. The specification of the platform should
    be recognized automatically. RAM should be left at the default value. On the **Network
    adapters** page, you should select the adapters that will be used and their slots.'
  prefs: []
  type: TYPE_NORMAL
- en: For the virtual switch device, we should select the switched network adapter.
    In GNS3, it is NM-16ESW. In our case, we use slot 0\. You can choose another,
    but we recommend you to use the same one to match with the *hardware configuration*
    case described earlier. For the virtual gateway device, we should select the interface
    with 1 port, for example, NM-1FE-TX, and put it in slot 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to address is the **Idle PC** value; at this step, leave this
    field blank:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initial configuration](../images/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Virtual IOS devices
  prefs: []
  type: TYPE_NORMAL
- en: So, after these manipulations, we will have two virtual Cisco IOS instances
    in the list of available devices.
  prefs: []
  type: TYPE_NORMAL
- en: Network topology implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, let''s implement our network topology in the GNS3 workspace. The process
    of designing a network diagram is similar to any other designing system: select
    device icons and drag them to the workspace. After that, connect network interfaces
    of the devices with each other using the **Add a link** tool.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the result is similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network topology implementation](../images/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The network diagram
  prefs: []
  type: TYPE_NORMAL
- en: Now, we use stubs **VPCS** as hosts. The switch and the router are our Cisco
    IOS devices created earlier based on IOS images for Dynamips. For connections
    with a SOHO router and a hardware AP, we use the tool called **Cloud**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To match with the *hardware configuration* case described earlier, connections
    between interfaces should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Functional group | Connection type | Device | Interface |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Servers | `Ethernet0` | SW | `F0/7` to `F0/10` |'
  prefs: []
  type: TYPE_TB
- en: '| User hosts | `Ethernet0` | SW | `F0/4` to `F0/6` |'
  prefs: []
  type: TYPE_TB
- en: '| Management | `Ethernet0` | SW | `F0/3` |'
  prefs: []
  type: TYPE_TB
- en: '| Cloud | `nio_gen_eth:Ethernet` | SW | `F0/2` |'
  prefs: []
  type: TYPE_TB
- en: '| GW | `FastEthernet0/0` | SW | `F0/1` |'
  prefs: []
  type: TYPE_TB
- en: After all the components are placed in the project workspace, we need to fill
    in the field **Idle PC** of our IOS devices. The parameter **Idle PC** allows
    us to significantly reduce the CPU usage, but it can be changed only if the device
    is running. Thus we need to start these network devices by clicking on the button
    **Start devices** placed on the toolbar of the main window, or by clicking on
    the item **Start** in the context menu of the device. For each IOS device, we
    need to select the item **Idle PC** in the context menu and in appeared dialog
    we should select the value marked by an asterisk.
  prefs: []
  type: TYPE_NORMAL
- en: Switch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interaction with the device is performed via the console. For this, we just
    need to right-click on the device icon in the project workspace and select **Console**
    from the context menu. After that, the terminal emulator will be launched with
    the established connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create the config for our core switch. First of all, we set the
    hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create the VLANs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we set up the interfaces, set one trunk port to the router,
    and set the access ports for network hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the work with the virtual network device corresponds to the
    work with the hardware configuration case; there is a little difference in the
    way how physical devices are connected to each other.
  prefs: []
  type: TYPE_NORMAL
- en: If you work with virtual network devices, it is not so important to properly
    harden them like hardware devices.
  prefs: []
  type: TYPE_NORMAL
- en: Gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is no significant difference in configuring hardware and virtual devices;
    therefore, we do the same as we did in the case of hardware configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Virtual host emulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we need to check our virtual network's working capacity with host emulators.
    We will show you how to connect VirtualBox VMs to the virtual network in the next
    chapter, but at the moment the functionality of emulators is enough for testing
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Such emulators are already provided by GNS; they are stubs of the type **VPCS**.
    These virtual devices allow us to perform basic operations for emulating real
    devices based on IP connections (ICMP ping and TCP/UDP connections). The interaction
    with such devices is done by the console and manual input of commands. In our
    case, for setting up addresses in the device console, we just need to input a
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, we can use static addresses for this purpose in the device console
    input command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.101 is the host address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 255.255.255.0 is the network mask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0.0.1 is the gateway address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For testing network connectivity and operability, we can use the ICMP-based
    commands `ping` and `tracert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using GNS, we can also easily capture network traffic, for example, with Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 1) Right-click on the link between the two devices.
  prefs: []
  type: TYPE_NORMAL
- en: 2) Choose the item **Сapture** from the context menu.
  prefs: []
  type: TYPE_NORMAL
- en: 3) After that, Wireshark will start (or another application that was set in
    the **Packet capture** tab of GNS3 preferences).
  prefs: []
  type: TYPE_NORMAL
- en: In the Wireshark window, we will have all the intercepted packets.
  prefs: []
  type: TYPE_NORMAL
- en: Wireless hardware devices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only type of network device that we cannot virtualize is a wireless access
    points. Therefore, we will use the physical network devices. As in the case of
    hardware configuration, it will be an access point and a SOHO router.
  prefs: []
  type: TYPE_NORMAL
- en: For interaction with the external world, GNS3 provides a tool **Cloud**, which
    is the built-in connector between the GNS3 virtual infrastructure and the network
    adapter of the host computer.
  prefs: []
  type: TYPE_NORMAL
- en: If your host computer has two Ethernet adapters, you can use two clouds to connect
    to each physical device. But if your host computer is a laptop, as in our case,
    you can use an Ethernet adapter for connecting to the SOHO router and use the
    wireless adapter of your host computer as the access point instead of a hardware
    access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have only one Ethernet adapter and still do not want to use the wireless
    adapter of the host computer, you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually switching between hardware devices (AP and SOHO router)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing an additional VM with a software AP and a USB Wi-Fi interface connected
    to it using the USB-forwarding feature of VirtualBox (we briefly show how to install
    the necessary software and implement such a scenario in [Chapter 7](part0047_split_000.html#1CQAE1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 7. Preparing a Wireless Penetration Testing Platform"), *Preparing a
    Wireless Penetration Testing Platform*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's see how to connect a network adapter of the host computer to our
    virtual infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the icon of the **Сloud** tool and open the configuration window
    of **Cloud** by selecting **Configure** from the context menu. We should specify
    the network adapter that we want to use in the field **Ethernet NIO** in the configuration
    window by navigating to **Cloud** | **Ethernet**. After that, click on the button
    **Add**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireless hardware devices](../images/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Cloud configuration window
  prefs: []
  type: TYPE_NORMAL
- en: Now, **Cloud** is configured. Quite simple, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Configuring WLANs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s consider the creation of a wireless network as part of our test
    infrastructure. Based on the resources that we have, we can create wireless networks
    using three techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: Guest WLAN based on the SOHO router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trusted WLAN based on the hardware access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trusted WLAN based on the software access point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each technique has its own characteristics (advantages and disadvantages) and
    provides a number of choices. We will cover all three options.
  prefs: []
  type: TYPE_NORMAL
- en: Guest WLAN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As our guest WLAN is based on a SOHO router, we will discuss both wired and
    wireless configurations here to build a guest WLAN and provide Internet access
    (external network) for the whole lab network.
  prefs: []
  type: TYPE_NORMAL
- en: All modern SOHO routers (like ASUS, Linksys, and D-Link) provide pretty much
    the same capabilities and configuration options and modes regardless of the model.
    Therefore, we are not going to provide step-by-step instructions on where to click
    and what to type in the web interface of a certain router model (especially because
    it does not make any sense for IT specialists). However, we are going to just
    provide you certain settings instead to assure that we have the same network configs
    with our readers and will not have any compatibility issues in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please enable a DHCP server role for the LAN network if it was not enabled
    yet and set the following configs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Settings | Values |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| LAN IP address | 192.168.0.2 |'
  prefs: []
  type: TYPE_TB
- en: '| DHCP IP pool start | 192.168.0.3 |'
  prefs: []
  type: TYPE_TB
- en: '| DHCP IP pool end | 192.168.0.20 |'
  prefs: []
  type: TYPE_TB
- en: Now, configure the WLAN settings on your SOHO router and set your guest WLAN
    name (SSID) to whatever you like (we just name it `Guest`), set the protection
    type as WPA2, and set a strong passphrase (we assume that as a security specialist
    you know what makes a strong passphrase, so we will not discuss password rules
    here).
  prefs: []
  type: TYPE_NORMAL
- en: As the last steps in the SOHO router configuration, reboot it, connect any client
    device to the guest WLAN, and test the Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the hardware access point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s continue installing and configuring our hardware access point. Now,
    we can connect to the access point device directly via a COM-port and follow the
    instructions given here. Since we are using devices from one manufacturer and
    are working with the same software platform, the configuration process is very
    similar to our previous tasks. Of course, configuring an access point has its
    own nuances, which we will now outline. First, let''s go to privileged mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a hostname for our device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Limit access to the device (only the local access level):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will set a password for the privileged mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we should configure a bridge network interface to allow the trusted
    WLAN to communicate with the rest of our lab infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we just need to save the new configuration and finish the WLAN setup for
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We will leave further hardware AP configuration (as well as software AP) for
    [Chapter 5](part0038_split_000.html#147LC2-3ecab517ca6e4afbb3c20ab15f7b4d82 "Chapter 5. Implementing
    Security"), *Implementing Security*, where we will already have a RADIUS server
    installed to be able to apply proper security to our trusted WLAN.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed the network communication and access rules in
    our lab environment. You saw two options for building your lab network: based
    on hardware Cisco devices and based on virtual ones.'
  prefs: []
  type: TYPE_NORMAL
- en: You can now configure your devices and get a working network for any of the
    two provided options, depending on which one you chose for your lab budget.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you need it, you can go further and add and configure more network
    components/devices/subnets to extend your lab in much the same way as we have
    configured our basic lab network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will show you how to design application lab components
    that will fulfill our main lab task: learning and practicing penetration testing.'
  prefs: []
  type: TYPE_NORMAL
