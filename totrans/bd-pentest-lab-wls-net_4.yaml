- en: Chapter 4. Designing Application Lab Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we prepared a network "basis" for the lab in two options:
    hardware and virtual. Now, it is time to fill the lab network with application-level
    functional components such as web servers and database servers. Those components
    are needed to build a lab network that has most of the capabilities of a real
    enterprise network to let a penetration tester practice the most common and "must-know"
    cases and techniques.'
  prefs: []
  type: TYPE_NORMAL
- en: Usually, applications and network services are the main goal for attackers and
    the main target of their attacks. Such components are usually used to process
    and store financial and private data, trade secrets, and other sensitive confidential
    data. They are often used to manage other network components and accounts, thus
    controlling the access to network resources. Some of them can provide various
    customer services and are therefore one of the key profit or reputation systems
    for a commercial company, so-called business-critical systems (or application/services).
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say, companies place high emphasis on protecting such systems and
    services and often tend to get another third-party opinion, ordering penetration
    tests and other information security consultancy services.
  prefs: []
  type: TYPE_NORMAL
- en: That is why you have to be well-prepared to meet at least some of the popular
    network services and we will see how to reach that goal in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Planning services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating virtual servers and workstations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring domain services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a certification authority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a remote management service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing an e-mail service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing vulnerable network services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As usual, before you start building something, it should be planned and all
    prerequisites should be fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: In the current topic, we are going to define which server will host which services
    and applications. We are going to try to host several applications and services
    at one server, because most of us are limited with computing resources and server
    hardware, remember?
  prefs: []
  type: TYPE_NORMAL
- en: So, depending on your capabilities and budget, you can use relatively powerful
    servers to host several relatively powerful VMs or you can use SOHO computers
    to host VMs with limited RAM and CPUs.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Lab environment flexibility**'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth reminding that it depends on your own needs and preferences which
    hosts to include in your lab and which ones to omit. We just want to show the
    most useful options of installing lab components, but it is totally up to you
    what exactly to use and what to do not use.
  prefs: []
  type: TYPE_NORMAL
- en: A good thing about using virtual machines is that you do not have to keep all
    the servers turned on at the same time. For most of your lab tasks, you do not
    even need to turn on your network devices. In most cases, it is enough to just
    turn one VM on and keep everything else suspended.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already decided in the previous chapters, the IP range for our server
    subnet is 10.0.0.0/24 and the IP address 10.0.0.1 is already assigned to the core
    router's subinterface. Workstations will get their dynamic IP addresses from the
    router via DHCP, so we don't need to plan their address space now, except the
    admin workstation which has the IP address 10.1.0.30.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping all that in mind, let''s draw another table to summarize what and on
    which IP addresses we are going to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '| IP address | OS | Apps and services | Remarks |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 10.0.0.2 | Windows Server 2008 | Directory services | AD, e-mail server,
    certification authority, SSH |'
  prefs: []
  type: TYPE_TB
- en: '| 10.0.0.3 | Linux | Metasploitable 2 | Vulnerable network services |'
  prefs: []
  type: TYPE_TB
- en: '| 10.0.0.4 | CentOS | vulnVoIP | Vulnerable VoIP service |'
  prefs: []
  type: TYPE_TB
- en: '| 10.0.0.5 | Ubuntu Server | Web application server | Liferay Portal CE,OWASP
    WebGoat,DVWA |'
  prefs: []
  type: TYPE_TB
- en: You can always get back to this table to quickly refresh the server subnet's
    layout in your memory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Back up your lab systems**'
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to make snapshots of your VMs after finishing installations. There
    is a big probability of unintentionally breaking something during further hacking
    exercises and it is good to have a backup image which you can quickly restore—a
    snapshot in case of VM.
  prefs: []
  type: TYPE_NORMAL
- en: You will also probably want to have several snapshots of some VMs having various
    configurations or security levels to be able to quickly switch between them according
    to your current lab tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating virtual servers and workstations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we know which services and servers we want to have, but before we install
    them, let's quickly review how we can create VMs and connect them to our lab network.
    We will use Oracle VirtualBox virtualization software for that purpose, because
    it is free and powerful at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox overview and installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we said earlier, we will use Oracle VM VirtualBox as the virtualization platform
    for hosts. VirtualBox is a powerful, feature-rich, high-performance virtualization
    solution for enterprise as well as home use. VirtualBox is freely available as
    open source software under the terms of the GNU **General Public License** (**GPL**)
    Version 2.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can always refer to the official VirtualBox documentation to get more information
    ([https://www.virtualbox.org/wiki/Documentation](https://www.virtualbox.org/wiki/Documentation)).
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox can be launched on different operating systems and supports a large
    number of guest operating systems including but not limited to Windows and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Support for images of hard drives **VMDK** (**VMware**) and **VHD** (**Microsoft
    Virtual PC**) is able to create and use portable virtual hosts. But most importantly,
    VirtualBox supports snapshots, which greatly facilitates the work in our test
    infrastructure. So, that fact makes VirtualBox the best choice for our purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we need to get the distribution packet of VirtualBox. We can download
    it from the [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    website. Choose the binaries packet for your platform and just click on the link.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, execute the obtained file. The installation process is simple
    and does not require specific manipulations.
  prefs: []
  type: TYPE_NORMAL
- en: After starting the VirtualBox application, you will see the Virtual Machine
    management interface window. This interface is pretty straightforward and does
    not require further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: '![VirtualBox overview and installation](../images/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Oracle VM VirtualBox management interface
  prefs: []
  type: TYPE_NORMAL
- en: Creating virtual machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For creating a new virtual machine, we need to click on the **New** button in
    main toolbar of the management interface and the **Create Virtual Machine** wizard
    will start. In the window that opens, we need to set the name of the new virtual
    machine and select the template based on the version of the operating system.
    Once a template is selected, choose the default answers for the following questions
    (such as the location of the virtual machine files and its characteristics). After
    the wizard is done, we should set the installation image of the operating system.
    Click on the **Start** button on the main toolbar to start our new virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can get an image of the operating system on the Microsoft Corporation site.
    For example, for our laboratory, we used Microsoft Windows Server 2008 R2 Evaluation
    as a Windows server operating system. You can download this on [https://www.microsoft.com/en-US/download/details.aspx?id=11093](https://www.microsoft.com/en-US/download/details.aspx?id=11093).
    Of course, you can use your own (purchased earlier) operating system installation
    images.
  prefs: []
  type: TYPE_NORMAL
- en: After starting the virtual machine, a new window will open where you can see
    the screen of our virtual machine and menu options to manage the virtual machine.
    Here, we can interact with the virtual machine like a normal application using
    the keyboard and mouse.
  prefs: []
  type: TYPE_NORMAL
- en: As a regular computer, the virtual machine on startup will attempt to find a
    bootable media and try to boot from it. If we set the image of the installation
    image of the operating system, then the process of the new operating system installation
    will start.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process of installing an operating system is simple, and we will not describe
    it here. Now, we need to install two types of OS: server and workstation. In our
    case, we install Microsoft Windows Server 2008 R2 and Microsoft Windows 7 Professional
    for the demo purposes, but we recommend you to install several various Windows
    versions: the latest ones and a couple of the old ones (not to learn the basics
    of network attacks, but to stay up-to-date).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation of the OS, we should configure basic settings like language
    and regional settings, time, and time zone. In case of virtual machines, the basic
    settings also include the installation of an additional package: **VirtualBox
    Guest Additions**.'
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox Guest Additions ([https://www.virtualbox.org/manual/ch04.html](https://www.virtualbox.org/manual/ch04.html))
    is a set of software installed in the guest operating system and expands its ability
    to interact with the system and the virtualization host system. For example, after
    you install the special driver *virtual video*, it is possible to change the desktop
    resolution of the guest OS in an arbitrary manner after the window size VirtualBox,
    which is running the virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: When our first Windows server and Windows workstation are installed, we should
    shut down the virtual machines and save them (take snapshots). We will continue
    to use them as templates for quick deployment of new instances.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring network settings of lab components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last action that we need to do with our virtual machines is configuring
    network adapters for the virtual machines. We have two main approaches that depend
    on implementation of our network infrastructure (based on hardware network devices
    and based on virtual network infrastructure).
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of network infrastructure based on hardware devices, we need to set
    the network adapter in bridged mode and our virtual machine will interact with
    the outer world via a hardware Ethernet port of the host computer. For this, we
    go to the **Network** tab of the virtual machine settings. The virtual machine
    should be in **Shutdown** state at this moment. Select the **Bridged Adapter**
    item in the **Attached to** combo box. From the **Name** combo box, select your
    network adapter. It is connected to the core switch. In our case, it looks like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring network settings of lab components](../images/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The network interface settings of a virtual machine
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of virtual network infrastructure based on GNS3, we need to perform
    the following steps for each virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Start GNS3 and go to the **VirtualBox VMs** settings tab. We had briefly described
    it in [Chapter 3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 3. Configuring Networking Lab Components"), *Configuring Networking Lab
    Components*, so you should remember. Anyway, this can be achieved by navigating
    to **Edit** | **Preferences**. In the window that opens, select **VirtualBox VMs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **VirtualBox VM Templates** section, we have a list of virtual machines
    (if you access this tab the first time, it should be clean) and three management
    buttons: **New**, **Edit**, and **Delete**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By pressing the **New** button, it will start a wizard to add a new virtual
    machine. In first window, it asks about which existing virtual machine we would
    like to connect to our virtual network infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a virtual machine is selected, GNS3 will automatically create new *linked*
    clone of the virtual machine with special network parameters, for example, we
    have following network settings in our case:![Configuring network settings of
    lab components](../images/00025.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Network interface settings of the virtual machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Installing and configuring domain services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the next step, let''s install and configure the core of any Windows-based
    corporate network: the domain and its services.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a domain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next step, we create a domain and its services based on Microsoft Active
    Directory. It will provide the central services for managing application levels
    of our infrastructure (managing users and computers, name service, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: First, we create a new virtual machine by cloning our Windows server template
    in VirtualBox. For this, we just need to select **Clone…** from the context menu
    of the virtual machine list of the VirtualBox management interface. In the wizard,
    we should check the option **Reinitialize the MAC address of all network cards**
    in the first window and select the **Full clone** option in the second window
    of the wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'After cloning, start the new virtual machine. So, the clean operating system
    is running and we have a basic configuration. For creating a domain, we need to
    configure the domain controller on this virtual server. For this, we should perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Initial Configuration Tasks** page, we need to set the computer name.
    We choose the name **DC**. It is short and clear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we should set the IP configuration of the server network adapter. We
    need to use a static IP address, because this server would be the domain controller
    as well as the DNS server. We should choose the IP address from the previously
    defined address space. Now, our configuration for the IP of the domain controller
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Parameter | Value |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| IP address | 10.0.0.2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Net mask | 255.255.255.0 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Gateway | 10.0.0.1 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| DNS | 10.0.0.2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Next, we should define the **Active Directory Domain Controller** role for our
    server. So, go to **Server Manager** and select **Roles** from the left-hand side
    panel. And next, click on the link **Add Roles** in the right-hand side panel.
    In the opened window **Before You Begin**, we should click on the **Next** button.
    In the next window, check the **Active Directory Domain Services** item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this page, you can also check additional roles to add to our server and install
    additional features, or you can do this later because now we do not need it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It should be noted that Active Directory requires the DNS server, but now we
    do not add this role. Later in the domain installation process, this role will
    be added automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The second main step of creating the domain controller is executing the `dcpromo`
    utility. Now, go to the **Start** menu and type `dcpromo` in the **Run** textbox.
    You will find it in the list. Click on **dcpromo**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result, we run the wizard **Welcome to the Active Directory Domain Service
    Installation Wizard**. We do not need advanced options in this scenario, so just
    click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Operating System Compatibility** page, the wizard warned us that our
    NT and non-Microsoft SMB customers will experience problems with some of the cryptographic
    algorithm used in Windows Server 2008 R2\. We have no such problems in our test
    environment, so just click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Choose a Deployment Configuration** page, we should select **Create
    a new domain in a new forest**. We do this for the simple reason that it is a
    new domain in a new forest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Name the Forest Root Domain** page, we should enter the domain name
    in the **FQDN of the root domain in the forest** textbox. In our case, we call
    the `lab.local` domain. You can name your domain as you like; but if you use a
    name that is already in use on the Internet (a name that has already been registered),
    then you may have a problem with names. Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Set Forest Functional Level** page, select the **Windows Server 2008
    R2** option. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Additional Domain Controller Options** page, we have only one choice:
    DNS server. The Global catalog option is selected and is not an option for selection;
    as long as it is the only DC in the domain, so it must be a global catalog server.
    The option domain controller read-only permission is not checked, since it is
    necessary to have other non-RODCs on the network to enable this option. Let''s
    select the DNS server option and click on the **Next** button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A dialog box appears saying that it is impossible to create a delegation for
    this DNS server, because the authoritative parent zone can not be found or does
    not use the Windows DNS server. The reason is that this is the first DC network.
    So, we just click on the **Yes** button to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next page, let's leave paths to the database, log files, and SYSVOL by
    default, and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Directory Service Restore Mode Administrator Password** page, let's
    enter a strong password in the **Password** and **Confirm password** text fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's check the information on the page **Summary** and click on the **Next**
    button for installing Active Directory. The installation process takes several
    minutes. After installing, we should reboot our server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the installation is complete after you log in. It should be noted that
    the DNS service was installed during the installation of Active Directory, so
    we do not need to worry about it. Now, we have ready the domain controller and
    the `lab.local` domain.
  prefs: []
  type: TYPE_NORMAL
- en: Creating users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s create user accounts in our domain. In Active Directory, it''s
    a very simple process. The method of user creating based on the use of the snap-in
    **Active Directory Users and Computers** is the most convenient, because it uses
    a graphical user interface and wizard. The disadvantage of this method is that
    when you create a user account, you cannot set most of the account attributes
    when you create a user account, and you have to add them by additionally editing
    the created account. In order to create a user account, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the snap-in **Active Directory - Users and Computers**. You can do this
    by navigating to **Start** | **Administrative Tools** | **Active Directory - Users
    and Computers**. You can also use the key combination *Win* + *R* to open the
    dialog **Run** and enter the `dsa.msc` command to execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the tree, expand your domain and go to the folder **Users**. Right-click
    on it and from the context menu, go to **New** | **User**. It will start a wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box **New Object - User**, enter the information about creating
    the user (first name, last name, and logon name). Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next page of the wizard, you have to enter the initial password in the
    **Password** field and re-enter it in the **Confirm** textbox. In addition, you
    can also set the basic parameters of the password policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last page of the wizard, you will see a summary of the parameters you
    entered. If information is entered correctly, click on the **Finish** button to
    create a user account and complete the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the user account is created, you can find it in the user account list
    in the right-hand side panel. By clicking on the **Preferences** item in the context
    menu of the user account, you can configure all the attributes of the user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, now you can create several user accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Adding hosts to the domain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have to create several workstations including the admin one. For this
    purpose, let's create new virtual machines by cloning our Windows workstation
    template in VirtualBox. For this, as in case of the Windows server template, we
    just need to select the **Clone…** item from the context menu of the virtual machine
    list of the VirtualBox management interface. In the wizard, we should check the
    **Reinitialize the MAC address of all network cards** option in the first window
    and select the **Full clone** option in the second window.
  prefs: []
  type: TYPE_NORMAL
- en: After cloning and starting our new virtual machine, let's join it to the domain.
    It would give us the possibility to use all advantages of a domain, such as centralized
    management, group policies, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before joining the computer to the domain, let''s make sure that the following
    prerequisites are met:'
  prefs: []
  type: TYPE_NORMAL
- en: The network adapter of our virtual workstation is working and has the right
    IP address. The operating system settings for the network adapter of our workstation
    is set to DHCP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual workstations have "network visibility" to the domain controller. We
    can check this by a ping utility based on ICMP requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On a virtual workstation, you are logged on as the local administrator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **System Properties** by clicking on **Start**, then right-click on **Computer**
    and click on the **Properties** item from the context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Computer name, domain, and workgroup settings** section, click on the
    **Change settings** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Computer Name** tab, click on the **Change** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Computer name** textbox, enter the hostname of our workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Member of** section, check the **Domain** radio button and enter the
    name of the domain to which you want to connect. In our case, it's `lab.local`.![Adding
    hosts to the domain](../images/00026.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join workstation to domain
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking on the **OK** button, you will be prompted to enter your domain
    administrator name and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successfully joining the computer to the domain, you will be prompted
    to reboot. To finish you should do so.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the admin workstation in the same way, but do not forget that the VM's
    network interface should be in a bridge mode with the static IP address 10.0.1.30
    and it should be connected to the appropriate switch port. Do not forget to create
    an administrative user account on the domain controller and log it in on the admin's
    workstation.
  prefs: []
  type: TYPE_NORMAL
- en: Certification authority services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any modern organization, there is an important security subsystem called
    **cryptography**. This subsystem provides important properties of information
    security such as confidentiality, integrity, and authenticity. All three of these
    are needed in secure transport, management, and access. Cryptography and security
    mechanisms built on it are a vast topic and out of the scope of our book. But
    we are going to briefly demonstrate how to create a certificate system based on
    OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL is a free software utility. You can download a binary copy to run on
    your Windows installation from [https://www.openssl.org/community/binaries.html](https://www.openssl.org/community/binaries.html).
    OpenSSL is all you need to create your own private certificate authority.
  prefs: []
  type: TYPE_NORMAL
- en: So, download this software and extract in a folder on one of your servers. In
    our case, we use `C:\OpenSSL\` directory on our domain controller (`dc.lab.local`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The process for creating our own certificate authority is pretty straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a private key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Self sign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install a root CA on workstations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we do that, every service that we used can be protected by a certificate
    created with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign the certificate with a root CA key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a root certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to generate a root key which will be used further in a root
    certificate. It can be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`2048`: This is our key length in bits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rootCA.key`: This is a filename of our root key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that, we execute a second command for creating a self-signed root certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rootCA.key`: This is our secret key of CA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1200`: This is the validity period of our certificate in days (1,200 days
    approximately equals 3 years)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we are asked a few questions; you can answer them as you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After these manipulations, we have two files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rootCA.crt`: A public key for installation on servers or workstations and
    also for public distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rootCA.key`: A private key, which should be in secret'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we can create certificates for our services and install a root certificate
    to our workstations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a working certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, let''s create a certificate (for example, for some web service) signed
    by our CA. This process is pretty simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate a key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the certificate signing request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, it is important to specify the name of the server: domain or IP (in our
    case, `web.lab.local`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should sign a certificate request by our root certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing a root certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can install a root certificate into our servers and workstations. For
    this, we will need to install the root certificate into trusted host certificate
    repositories. Some browsers use the default operating system repository. For instance,
    in Windows, both Internet Explorer and Chrome use the default certificate management.
    They both take you to the same place, the Windows certificate repository. So,
    we can open Internet Explorer and go to **Internet Options** | **Content** | **Certificates**.
    Now, we can install the root CA certificate under the **Trusted Root Certificate
    Authorities** tab. However, Windows Firefox has its own certificate repository,
    so if you use IE or Chrome as well as Firefox, you will have to install the root
    certificate into both the Windows repository and the Firefox repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good manual about building CAs based on OpenSSL is located at [https://jamielinux.com/docs/openssl-certificate-authority/index.html](https://jamielinux.com/docs/openssl-certificate-authority/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing a remote management service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have prepared servers and the ability to create security certificates,
    let's look at the possibility of installing a secure remote management service
    for our servers. The best solution for this purpose is SSH.
  prefs: []
  type: TYPE_NORMAL
- en: '**SSH** (short for **Secure Shell**) is a network application layer protocol
    that allows remotely managing operating systems and the tunneling of TCP connections
    (for example, to transfer files). It has similar functionality as telnet or rlogin,
    but unlike them, it encrypts all traffic, including transmitted passwords. SSH
    clients and SSH servers are available for most network operating systems.'
  prefs: []
  type: TYPE_NORMAL
- en: While SSH is built-in in all Linux server distributions, Windows does not have
    it by default and we would like to install it in order to make our lab more complicated,
    which is always good for attack practicing.
  prefs: []
  type: TYPE_NORMAL
- en: There are several solutions in the software market, but in our laboratory we
    are using freeSSHd. Like its name says, freeSSHd is a free, simple implementation
    of an SSH server that provides full functionality of SSH protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation packet can be found on the website [http://www.freesshd.com/?ctt=download](http://www.freesshd.com/?ctt=download).
    After downloading and installing freeSSHd, we can start freeSSHd as a normal application
    or as a Windows service. In the management application, we can set up the main
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Start or stop SSH server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select encryption cipher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic tunneling parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage host restrictions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup interface and port number which will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup command shell that will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select encryption key that will be used (this is the most important one)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All parameters are intuitive, so we will not be consider them in detail. But
    we will consider user management as the most important part of it at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Users** tab we have three buttons: **New**, **Edit**, and **Remove**.
    Click on **New** and the **User properties** window appears. Here, we should choose
    the authorization method. We have three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NT authentications** (Use functionality of the operating system)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password stored as SHA1 hash** (Use built-in functionality of freeSSHd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public key (SSH only)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we have a domain and we can use domain user authentication procedures,
    let's select **NT authentication**. We need to specify the domain name in the
    **Domain** textbox; in our case, it is `lab.local`. In the **Login** textbox,
    we should enter the username of the existing domain user. After all of this, let's
    set up rights which will be granted to this user by checking the appropriate fields
    in the **User can use** section (shell, file transfers, and traffic tunneling).
  prefs: []
  type: TYPE_NORMAL
- en: After the user account is created and the service is started, we can try to
    connect to our management service on a remote server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows servers are usually managed using native Windows solutions like Remote
    Desktop, but in our case we want to have a complicated and vulnerable instance.
    Thus, we add excessive functions and software.
  prefs: []
  type: TYPE_NORMAL
- en: Corporative e-mail service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our lab, we simulate a small organization and the base of IT services of
    any organization information infrastructure is the ability to exchange information
    between users. Usually, the interaction between users is organized on the basis
    of e-mail, which has become the de facto standard. So, we cannot miss the e-mail
    service. As a solution to organize e-mail, we will consider free software hMailServer.
  prefs: []
  type: TYPE_NORMAL
- en: hMailServer is a free e-mail server for the Windows platform. It runs as a Windows
    service and includes administration and backup tools. It supports mail protocols
    IMAP, POP3, and SMTP. To store the settings and indexes hMailServer uses a database
    such as MySQL, MS SQL, or PostgreSQL, e-mail messages are stored on the hard drive
    in the MIME format.
  prefs: []
  type: TYPE_NORMAL
- en: hMailServer supports all the basic functions, such as multi-domain, aliases,
    and mailing lists. User authentication can be performed using the local user database
    or through Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: Well, let's start to install hMailServer, but before we start we need to configure
    our DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a DNS server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to receive e-mails, we must set up MX records for our domain. The
    MX records are entries in the DNS server that tells other computers on the net
    which computer (hostname) is hosting the e-mail service for our domain.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this in the DNS management snap-in of our domain controller, which
    serves as our additional DNS server. So, let's interact with the domain controller
    and start the **DNS** snap-in by selecting the **DNS** item in the **Administrative
    Tools** folder of the **Start** menu.
  prefs: []
  type: TYPE_NORMAL
- en: In the DNS tree on the left-hand side panel of the opened snap-in, expand the
    **Forward Lookup Zones** item corresponding to our domain controller (DC). Now,
    select the item that's our domain (`lab.local`). In the right-hand side panel,
    we can see a list of DNS records that exist at this moment. Now, we should check
    for the existing DNS A-record of the server on which we will install hMailServer.
    If such a record does not exist, let's add it. Right-click to open the context
    menu and select **New Host (A or AAAA)…** for creating a DNS A-record. In the
    opened window, we have to enter the name of our mail server and its IP address
    that will be pointed by the name. Then, click on the **Add Host** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we deploy the mail server on the domain controller host, so our
    option looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | FQDN | IP address |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `mail` | `mail.lab.local` | 10.0.0.2 |'
  prefs: []
  type: TYPE_TB
- en: After creating the DNS A-record of the mail server or if A-record already exists,
    we should add MX-record. We can to do this like we added A-record, but select
    the **New Mail Exchanger (MX)…** item instead of **New Host (A or AAAA)…**. In
    the window that opens, we should leave the **Host or child domain** textbox blank
    and enter the name of our mail server (in our case `mail.lab.local`) in the **FQDN
    of mail server** textbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a DNS server](../images/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DNS zone contents
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring hMailServer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So it is time to install hMailServer. The latest version can be downloaded from
    the website ([https://www.hmailserver.com/download](https://www.hmailserver.com/download)).
    The installation process is simple. Run through the installation wizard and it
    should not cause problems. At the end of the installation, the existing wizard
    will prompt for an administrator password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start hMailServer Administrator (management console) and create a new connection
    to localhost. After hMailServer Administrator is launched and the connection to
    a server is established, configure our mail server for our domain (`lab.local`).
    It takes a bit of time and consists of the following basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Domains** tab, click on the **Add** button. In the page that opens,
    enter the name of our domain (`lab.local`) in the **Domain** textbox and click
    on the **Save** button. A new domain will be added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's click on the **Accounts** subitem of the domain tree and click on the
    **Add** button on the right-hand side panel (account's page).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the page that opens, go to the **Active Directory** tab, we should check
    the **Active Directory account** option and enter the domain and user name of
    the existing domain user for whom we create the mail account. In the **General**
    tab, we should enter the address of the mailbox for the current account in the
    **Address** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now on the list of accounts, we have ready sample user mail boxes:![Installing
    and configuring hMailServer](../images/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mail accounts list
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go to **Settings** | **Protocols** | **SMTP** | **Delivery of email** and in
    the hostname setting, enter the hostname of our server (`mail.lab.local`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have a working mail server ready and we can use configured mail client
    software for sending and receiving mail messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you should walk through the mail server settings for creating hardening
    configuration. You can do, for example, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Change standard ports of SMTP, POP3, and IMAP protocols and set connection security
    for using SSL/TLS based on the security certificate, which can be created on our
    certification authority (described earlier)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set to use only TLSv1.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a backup copy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure a built-in anti-spam subsystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about hMailServer is available at [https://www.hmailserver.com/documentation/latest/?page=overview](https://www.hmailserver.com/documentation/latest/?page=overview).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created a working instance of a mail server, other possibilities
    can be explored.
  prefs: []
  type: TYPE_NORMAL
- en: Installing vulnerable services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to prepare most of the servers and network services that you
    will need for your penetration testing trainings is to download preconfigured
    VM images intentionally left vulnerable (vulnerable virtual machines). Such vulnerable
    VMs are the best way to get instances prepared for practicing various attacks
    but save your time on downloading and installing everything on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Staying safe with preinstalled VM images**'
  prefs: []
  type: TYPE_NORMAL
- en: You probably know any sources of preinstalled VM images than those which we
    have mentioned in this chapter and you probably would like to use them for downloading
    and using certain images in your lab. But be careful and check whether the sources
    are trusted enough before using them to obtain an image, as there is a big risk
    that untrusted sources can distribute potentially dangerous images containing
    malware. Such images can pose high security risks not only for your lab, but also
    for the network your lab is connected to.
  prefs: []
  type: TYPE_NORMAL
- en: Let's include the most useful and well-known of them into our lab network.
  prefs: []
  type: TYPE_NORMAL
- en: Installing web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays when a lot of businesses are going online or at least have to be present
    on the Web, penetration testers mostly deal with web applications rather than
    with infrastructure pentests. Therefore, it is essential for a penetration tester
    to acquire web application hacking skills and improve them constantly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Working with limited computing resources**'
  prefs: []
  type: TYPE_NORMAL
- en: If you experience a lack of computing power for creating other virtual servers,
    you can install all web applications on the same server. Alternatively, you can
    install some of them on the "attacker's machine" or the penetration testing machine
    that you are going to use for hacking.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a **LAMP** (**Linux, Apache, and MySQL*PHP**) server based on Ubuntu
    Server 14.03.4 LTS to install web applications. But if you prefer to use Windows
    for some reason, you can use XAMPP—an Apache distribution containing MySQL, PHP,
    and Perl.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will install all our lab web applications on the same web server under Ubuntu
    Server 14.0.3.4 LTS in a NAT mode without connecting the VM to our lab network
    yet. Then, we will change the network interface mode and settings according to
    our lab network settings. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: As a first step, download the latest Ubuntu Server `.iso` installation image
    from the official website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new 64-bit Ubuntu-based VirtualBox VM with 1024 MB RAM and a dynamically
    allocated hard drive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the installation image into the VM's CD/DVD drive and start the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Ubuntu Server by answering the installation dialog questions. The
    process is quite straightforward until you are asked which services to install
    (don't forget the account password that you provided during the installation).![Preparing
    a web server](../images/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Services installation dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Chose OpenSSH and LAMP servers and continue the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a MySQL root password when asked and be sure you don't forget it—you will
    need it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot the VM and log in under the account created during the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to configure the correct networking settings in order to be able
    to access the Internet for software installation and at the same time have a static
    IP to access web applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set up the VM's network interface in a bridge mode and select the physical interface
    to which the virtual one should be bridged.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, we need to switch the Network Manager service into the manually starting
    mode so that it does not reset our networking settings after every reboot. Run
    the following commands to do it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s set the new network settings by editing the file `/etc/network/interfaces`.
    Change or add the following settings for the interface `eth0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the networking service with the following command or just reboot the
    VM to apply the changes and check the interface settings with the `ifconfig` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should be able to plug in a network cable and access the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use a NAT mode to download all the necessary software
    and then switch the VM to a host-only network mode, which allows the host machine
    and other guest machines access to your current one. You can use the VM in this
    mode as a standalone web server for direct web application attacks and perform
    the four networking configuration steps listed in the preceding list when you
    want to connect the VM to your lab network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the necessary prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need Java 6 or higher for our web applications to work. Check if it is installed
    with the command `java -version` and use `apt-get` to install it if not. We are
    installing OpenJDK 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will also need the `unzip` utility installed in order to unpack the web
    application''s archives, so let''s install it first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, our web server is ready for installing web applications.
  prefs: []
  type: TYPE_NORMAL
- en: WebGoat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The OWASP project WebGoat ([https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project](https://www.owasp.org/index.php/Category:OWASP_WebGoat_Project))
    is one the most known vulnerable web applications for learning purposes. The coolest
    thing about WebGoat is that it not only offers you some vulnerabilities for exploitation,
    but also involves you in the fixing process offering to change the application's
    source code. It is extremely helpful for developing really useful effective vulnerability
    fix recommendations when a penetration tester has not much of a web development
    background.
  prefs: []
  type: TYPE_NORMAL
- en: WebGoat is distributed as a web application package rather than a VM image and
    you need to have a prepared server first in order to be able to run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have already prepared a server, let''s get the WebGoat application running:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the web application package from GitHub. You can do it with the `wget`
    utility, but check if you are downloading the latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the web application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check if the app works by opening the browser on another machine and navigate
    to `http://10.0.0.5:8080/WebGoat` (the URI is case sensitive).
  prefs: []
  type: TYPE_NORMAL
- en: '![WebGoat](../images/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: WebGoat login screen
  prefs: []
  type: TYPE_NORMAL
- en: DVWA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another example of a useful web application for penetration testing training
    is **Damn Vulnerable Web Application** ([http://www.dvwa.co.uk](http://www.dvwa.co.uk))
    written in PHP and using MySQL. It contains all the vulnerabilities from the OWASP
    top-10 list and allows us to use the web application in three security levels
    corresponding to different pentesting skill levels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to install and run DVWA:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in and change the current directory to the Apache''s default directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the application''s archive and unpack it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to configure a MySQL connection. Open the file `DVWA-1.0.8/config/config.inc.php`
    in an editor and find the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change `p@ssw0rd` to the MySQL root password that you set during the server
    installation process and save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the DVWA directory''s name (in convenience consideration) and permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Log in into MySQL and create a database for DVWA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you need to navigate from another machine's browser to the DVWA setup interface
    (we use the server's IP 10.0.0.5 assuming you have already set the static networking
    settings) `http://10.0.0.5/dvwa/setup.php` and click on the **Create/Reset Database**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now navigate to `http://10.0.0.5/dvwa/login.php`, log in with the default
    credentials `admin:password`, and use the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![DVWA](../images/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: DVWA is ready to be hacked
  prefs: []
  type: TYPE_NORMAL
- en: Liferay Portal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the web applications that we frequently meet during penetration tests
    is Liferay Portal. It is an open source, portlet-based enterprise **Content Management
    System** (**CMS**) that can be customized to fulfill various business needs. Liferay
    Portal is written in Java and is used for both intranet and external web portals.
  prefs: []
  type: TYPE_NORMAL
- en: Its popularity on the market means that you probably will meet it if you conduct
    commercial penetration tests for your customers and you probably want to know
    in advance how to approach it in the context of hacking. What is especially cool
    with Liferay in our current context is that there is not only a commercial, but
    also a community version of the portal available.
  prefs: []
  type: TYPE_NORMAL
- en: The **Community edition** (**CE**) is distributed for free and you can download
    it at Liferay's website [http://www.liferay.com](http://www.liferay.com) without
    a registration. Since we need it for learning and research purposes, you will
    not have any legal or licensing problems.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to install Liferay Portal CE on a server under the Ubuntu Server
    14 operating system, and it is easier to prepare a server first and then download
    Liferay directly to a VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s list the steps you need to make in order to get your working server
    with a running Liferay Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: Download a zip-archive of the community edition from the official Liferay website
    ([http://www.liferay.com/de/downloads/liferay-portal/available-releases](http://www.liferay.com/de/downloads/liferay-portal/available-releases)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unpack the archive to the `/srv/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start Tomcat with the following command (putting the correct version numbers):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait for a minute or two, depending on the hardware of the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check if the application started successfully and is reachable from other
    hosts, run the following command and check if the application listens on 0.0.0.0
    (all interfaces):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Liferay Portal](../images/00032.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Listening web server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser on another machine and navigate to `http://10.0.0.5:8080`. You
    should see the basic configuration dialog:![Liferay Portal](../images/00033.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Liferay basic configuration page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can change the values if you want, but do not uncheck the **Add Sample Data**
    checkbox because it will be useful when you research the portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish configuration** and wait for a while until the installation
    process is finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, navigate to the portal and read and accept the user agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now Liferay Portal is installed and ready to use in our lab. You can already
    start playing around with the portal in order to understand how it works, review
    the portal's internal structure and configs, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The portal is already filled with some sample data, but you can go further and
    create an account at Liferay's Marketplace ([https://www.liferay.com/marketplace/](https://www.liferay.com/marketplace/))
    to download and install other web applications to your portal.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the popular vulnerable VM images are created to practice web application
    penetration testing, but there are VMs that are targeted more on the system and
    network software level, let's say classic hacking. They are very convenient for
    learning and practicing software and OS exploitation, fuzzing, bruteforcing, tunneling,
    privilege escalation, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: One such VM is Metasploitable 2 (basically, the newer and extended version of
    its ancestor Metasploitable) provided by a well-known IT security company Rapid7
    and we are going to add it to our lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quote the official description of Metasploitable 2 ([https://community.rapid7.com/docs/DOC-1875](https://community.rapid7.com/docs/DOC-1875)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"The Metasploitable virtual machine is an intentionally vulnerable version
    of Ubuntu Linux designed for testing security tools and demonstrating common vulnerabilities.
    Version 2 of this virtual machine is available for download and ships with even
    more vulnerabilities than the original image. This virtual machine is compatible
    with VMWare, VirtualBox, and other common virtualization platforms."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As we understand, Metasploitable was created mainly for learning the popular
    hacking framework Metasploit Framework, but it also fits in a far bigger range
    of various penetration testing learning tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Metasploitable 2 contains the following preinstalled network services:'
  prefs: []
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telnet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rlogin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VNC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following attack techniques can be practiced with the listed services:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buffer and stack overflow exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password guessing / bruteforcing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploit development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP redirection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Man-in-the-middle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The installation process of Metasploitable 2 is pretty straightforward as well
    as for the most of the preinstalled intentionally vulnerable VM images:'
  prefs: []
  type: TYPE_NORMAL
- en: First, unpack the Metasploitable 2 `.zip` archive to the directory where you
    keep your lab VMs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, create a 32-bit Ubuntu Linux VM with 512 MB RAM and network interface
    in a bridge mode, and chose the existing virtual disk from the Metasploitable
    2 directory (`Metasploitable.vmdk`) when VirtualBox asks you about creating a
    virtual disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the VM and log in with the default credentials `msfadmin:msfadmin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set your networking settings similar to what we have done on our Liferay Ubuntu
    Server, but use the correct IP address 10.0.0.3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Practicing direct attacks**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to practice direct attacks with Metasploitable 2, you can switch
    the VM''s network interface into the host-only network mode and hack it from a
    VM running on the same host machine. You can find a tutorial on how to do it at
    the following link: [https://community.rapid7.com/message/4137](https://community.rapid7.com/message/4137).'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, Metasploitable 2 is ready to receive your evil packets, have
    fun!
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerable VoIP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the spread of IP networks and technologies, it became very common to have
    enterprise IP-based telephone networks and it means that you will meet those systems
    from time to time as a part of a scope infrastructure penetration testing project
    or as a separate VoIP pentest project if you are going to work on commercial projects.
  prefs: []
  type: TYPE_NORMAL
- en: In turn, it means that you would like to be well prepared for such systems and
    try to research and attack it in your lab.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for us, there is a preinstalled image of a vulnerable VoIP server based
    on CentOS and Asterisk called **vulnVoIP**.
  prefs: []
  type: TYPE_NORMAL
- en: The official description and the download link can be found at the [http://www.rebootuser.com](http://www.rebootuser.com)
    under the **HackLAB** section. It is a bit old now, but it's still good for understanding
    how the technology and its hacks work.
  prefs: []
  type: TYPE_NORMAL
- en: vulnVoIP is distributed as a VMware image, so you can install a free VMware
    Player software or probably you have a VMware license if you built your lab in
    an enterprise environment and you can run the image as is.
  prefs: []
  type: TYPE_NORMAL
- en: '![Vulnerable VoIP server](../images/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Web interface on vulnVoIP
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer VirtualBox, you can perform the following simple steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Unpack the `.7zip` vulnVoIP archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new 32-bit Linux-based VM. Give it a name and 512 MB RAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked about a hard disk, choose the `vulnVoIP.vmdk` virtual disk file from
    the unpacked vulnVoIP directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developer of vulnVoIP doesn't supply a root password with the image and
    offers to hack the system in order to get the root access. So, we will not deprive
    you of a good lesson and let you acquire root access as it is supposed by the
    vulnVoIP author.
  prefs: []
  type: TYPE_NORMAL
- en: After getting the root access, you can set the static IP 10.0.04 and connect
    vulnVoIP to the rest of your lab network.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you saw how to fill your lab with the useful components that
    actually bring sense to the whole story of building a lab network. We installed
    the common services that you are most likely to meet in the scope of a commercial
    penetration testing project and the ones you most probably would like to be able
    to hack.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to practice some specific skills, you can and should extend your
    lab by installing and configuring additional specific network services or applications
    according to your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find, for example, a lot of preinstalled VM images at the following
    websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://virtualboxes.org/](http://virtualboxes.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://virtualboximages.com/](https://virtualboximages.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to leverage your lab level by installing
    and configuring security solutions.
  prefs: []
  type: TYPE_NORMAL
