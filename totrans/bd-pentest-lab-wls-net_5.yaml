- en: Chapter 5. Implementing Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is dedicated to security solutions, as well as their installation
    and configuration. It will show you how to protect the lab environment from external
    attacks and unauthorized access, and how improve the lab complexity to practice
    advanced penetration testing and hacking techniques at the same time. We are going
    to divide security solutions and measures into two main groups: host-based (protecting
    hosts they are installed on) and network-based (protecting the whole lab network).
    Additionally, we want to have a closer look at a security information and event
    management solution that can be used to work together with the security mechanisms
    in order to identify network attacks and constantly monitor the security of a
    network.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Network-based security measures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host-based security measures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security information and event management system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network-based security solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are not trying to adhere to the levels of the standard
    ISO/OSI model, but we distinguish two main abstract security levels: network and
    host levels.'
  prefs: []
  type: TYPE_NORMAL
- en: The host level is represented with host-based security solutions that are aimed
    towards protecting a certain host. However, network-based solutions are aimed
    towards protecting the whole network or its parts (or groups of hosts). We would
    like to start the chapter with network-based solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring network access control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to imitate a real network and to protect our lab from access from an
    external network, we need to implement access control measures between our various
    lab VLANs on the network level. The access control mechanism that we are going
    to use is called **access control lists** (**ACLs**) and can be implemented on
    the core router.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, ACL is a list of rules determining which traffic is allowed
    or disallowed and in which directions. We are also going to create several ACLs
    that will block or allow network traffic between various VLANs.
  prefs: []
  type: TYPE_NORMAL
- en: You may think that logically it should be done in [Chapter 3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 3. Configuring Networking Lab Components"), *Configuring Networking Lab
    Components* during the network device configuration and you would be right! But
    we decided to put the ACL subtopic in this chapter because it influences the security
    of the whole lab environment and not only devices, and it should be emphasized.
  prefs: []
  type: TYPE_NORMAL
- en: Isolating external and guest networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the security of our lab, we need to isolate untrusted network segments
    as is required according to the communication rules described in [Chapter 3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 3. Configuring Networking Lab Components"), *Configuring Networking Lab
    Components*. Let''s quickly recall them:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Source | Allowed destination | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Admin workstation |'
  prefs: []
  type: TYPE_TB
- en: All network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All user workstations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Network and system administration |'
  prefs: []
  type: TYPE_TB
- en: '| Servers |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Software installation and updates |'
  prefs: []
  type: TYPE_TB
- en: '| User workstations |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access, access to the internal network services |'
  prefs: []
  type: TYPE_TB
- en: '| Trusted WLAN |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access, access to the internal network services |'
  prefs: []
  type: TYPE_TB
- en: '| Guest WLAN |'
  prefs: []
  type: TYPE_TB
- en: Internet (external network)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Internet access |'
  prefs: []
  type: TYPE_TB
- en: 'First, we need to block all the incoming traffic from the external network
    and isolate the guest WLAN. Log in to the router console, start the configuration
    mode, and create an ACL for that purpose called `wan` with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly explain what we have just done:'
  prefs: []
  type: TYPE_NORMAL
- en: The first and the sixth lines create extended named ACLs with the names `wan`
    and `guest` and enter the ACL configuration mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second and seventh commands set the user-friendly comments for the new ACLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third and fourth lines deny all IP and ICMP traffic from the network 192.168.0.0/16
    to any destination. We are using the keyword `log` to write all denied packets
    to the log for a further analysis (it allows us to detect possible attacks on
    our lab).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last two commands deny all IP and ICMP traffic from any source to the 192.168.0.0/16
    network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we need to apply the ACL to the router subinterface, serving communications
    with an external network (in our case it is `fa0/0.5`). Exit the ACL configuration
    mode and get into the interface configuration mode (if you have defined sub-interfaces
    other than the ones we have done, just substitute `fa0/0.5` with the one corresponding
    to your subinterface connected to a SOHO router):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, assign the ACL called `wan` to be applied on network traffic coming to
    the subinterface from outside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, assign the ACL called `guest` to be applied on network traffic coming
    to the subinterface from inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Isolating internal VLANs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following ACL for the rest of the router subinterfaces can be created and
    applied in a similar manner. Therefore, we will put them in a table for convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Subinterface | Direction | ACL | Remark |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `trusted-in` | `fa0/0.4` | `in` | `deny ip 172.16.1.0 0.0.0.255 172.16.0.0
    0.0.0.255``deny ip 172.16.1.0 0.0.0.255 10.1.0.0 0.0.0.255``deny icmp 172.16.1.0
    0.0.0.255 172.16.0.0 0.0.0.255``deny icmp 172.16.1.0 0.0.0.255 10.1.0.0 0.0.0.255``permit
    ip any any``permit icmp any any` | Access from trusted WLANs |'
  prefs: []
  type: TYPE_TB
- en: '| `users-in` | `fa0/0.3` | `in` | `deny ip 172.16.0.0 0.0.0.255 172.16.1.0
    0.0.0.255``deny ip 172.16.0.0 0.0.0.255 10.1.0.0 0.0.0.255``deny icmp 172.16.0.0
    0.0.0.255 172.16.1.0 0.0.0.255``deny icmp 172.16.0.0 0.0.0.255 10.1.0.0 0.0.0.255``permit
    ip any any``permit icmp any any` |   |'
  prefs: []
  type: TYPE_TB
- en: '| `servers-in` | `fa0/0.2` | `in` | `permit ip 10.0.0.0 0.0.0.255 172.16.0.0
    0.0.255.255 established``permit icmp 10.0.0.0 0.0.0.255 172.16.0.0 0.0.255.255
    established``deny ip 10.0.0.0 0.0.0.255 172.16.0.0 0.0.255.255``deny icmp 10.0.0.0
    0.0.0.255 172.16.0.0 0.0.255.255``deny ip 10.0.0.0 0.0.0.255 10.1.0.0 0.0.255.255``deny
    icmp 10.0.0.0 0.0.0.255 10.1.0.0 0.0.255.255``permit ip any any``permit icmp any
    any` | Deny connections to users and trusted WLANs initiated by servers |'
  prefs: []
  type: TYPE_TB
- en: Securing wireless access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to our lab idea, we want to have secure wireless access to the lab
    environment, a trusted WLAN.
  prefs: []
  type: TYPE_NORMAL
- en: As you remember from [Chapter 1](part0014_split_000.html#DB7S2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 1. Understanding Wireless Network Security and Risks"), *Understanding
    Wireless Network Security and Risks*, the best way to secure WLAN access is to
    implement WPA-Enterprise security based on the IEEE 802.1x standard. To be more
    exact, it should be based on **EAP over LAN** (**EAPOL**) and an AAA server.
  prefs: []
  type: TYPE_NORMAL
- en: We decided to choose FreeRADIUS as a suitable solution for an AAA server. FreeRADIUS
    is a software package containing a RADIUS server software and several auxiliary
    libraries and modules. Currently, we are interested only in the RADIUS server,
    which is enough to fulfill our tasks.
  prefs: []
  type: TYPE_NORMAL
- en: FreeRADIUS is a very popular solution with a modular architecture. It works
    really fast and distributes the important services for a lab, free of charge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start implementing the solution, we would like to list our next steps
    to give you a clearer overview of the whole process:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a VM with FreeRADIUS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating certificates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a RADIUS server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring an access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a WLAN client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preparing the RADIUS server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are going to install FreeRADIUS on a Debian-based virtual Linux server and
    put it into the server subnet on IP address 10.0.0.6\. The installation process
    is very similar to the Ubuntu Server installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a VM with 1024 MB RAM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download a Debian Linux 8 (Jessie) image from the official website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Debian Linux using guided installation and don't forget to set strong
    passwords for the root and non-root users during the installation, as this server
    will provide lab's security and we don't want it to be vulnerable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation, start the VM and log in under the root account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the VM can access the Internet. Use NAT if is not connected to
    the lab network or configure IP settings if it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check whether the `/etc/apt/sources.list` file contains the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If not, add this line to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the packages list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install FreeRADIUS using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alternatively, you can download the newest version of FreeRADIUS from the official
    FTP server and compile it (change the package version number to the current one
    and make sure that the `gcc` compiler is installed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Preparing the certificates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every authorized user in our lab will have a personal certificate for the trusted
    WLAN connections, and it is logical to prepare certificates before we start to
    put their paths into the server's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the lab certificate authority installed in [Chapter 4](part0029_split_000.html#RL0A1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 4. Designing Application Lab Components"), *Designing Application Lab
    Components*, to create all the necessary certificates. We already have a CA certificate
    created, so we only need to create server and client certificates and sign them
    with the CA:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a server key and a certificate request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a `lab_ca.srl` file with a two-digit serial number in it, for example,
    01.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sign the server certificate request using the CA (you will need to provide
    a path to the CA certificate and key files if they are not in the current directory)
    and create a server certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a client key and certificate request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you should fill the certificate's field **Common name** with the identity
    of the user that will hold the certificate, for example, `attacker1` or `alex`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Sign the client certificate using the certificate authority:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the client certificate in the PKCS#12 format for a Windows client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can create multiple client certificates for as many users as you would like
    to allow access to your lab via the trusted WLAN. Copy the server and CA certificates
    into the `/etc/freeradius/certs/lab` directory on the FreeRADIUS server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring RADIUS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, it is time to configure FreeRADIUS for our needs. The configuration files
    can be found in the `/etc/freeradius` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are interested in the following configuration files now:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clients.conf`: This defines connection settings between authenticators (Cisco
    access point in our case) and an authentication server (FreeRADIUS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eap.conf`: This defines **extensible authentication protocol** (**EAP**) types
    and settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: clients.conf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We need to add the following lines to the file to set the connection parameters
    for the authenticator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `secret` parameter contains a password used by an AP to connect to the RADIUS
    server, so you might want to use a strong combination of symbols to raise the
    security of your lab.
  prefs: []
  type: TYPE_NORMAL
- en: eap.conf
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we set all the necessary parameters for the EAP-TLS authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `certdir` and `cadir` parameters set the directory where FreeRADIUS will
    search for server and CA certificates. In our case, they are both in `/etc/freeradius/certs/lab`.
  prefs: []
  type: TYPE_NORMAL
- en: The `private_key_password` parameter is the password that you typed when creating
    the server's private key.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the access point
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have already configured the Ethernet interface of the access point in [Chapter
    3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82 "Chapter 3. Configuring
    Networking Lab Components"), *Configuring Networking Lab Components*, but we have
    omitted the wireless interface configuration because it is highly dependent on
    a RADIUS server which we didn''t have before the current chapter. Now it is time
    to fill this gap:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the AP's console port and enter the privileged mode with the `enable`
    command and the password that you set during the initial AP configuration in [Chapter
    3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82 "Chapter 3. Configuring
    Networking Lab Components"), *Configuring Networking Lab Components* (the default
    password is `Cisco`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s configure the authentication server (RADIUS) settings first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change `YourSecret` to the value that you have set in `clients.conf` during
    the FreeRADIUS configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to configure the radio interface called `dot11radio`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`lab_private` is the SSID for our trusted WLAN and you can change it to anything
    you like.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As the next step, we will configure the WLAN settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can omit the `guest-mode` command to disable SSID broadcasting, making your
    WLAN slightly more secure (but not really raising the security level).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After configuring the radio interface and the SSID, we can assign the SSID
    to the interface and turn the interface on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have chosen to set a software AP for the trusted WLAN, you can use the
    following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in tools or `hostapd` software on Linux (we will show how to install and
    configure it in [Chapter 7](part0047_split_000.html#1CQAE1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 7. Preparing a Wireless Penetration Testing Platform"), *Preparing a
    Wireless Penetration Testing Platform*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special software (for example, Connectify or ARPMiner) on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After installing and configuring the chosen software, you will need to add a
    link between a wireless network and the virtual lab infrastructure using the tool
    Cloud of the GNS3 system, as described earlier in [Chapter 3](part0024_split_000.html#MSDG1-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 3. Configuring Networking Lab Components"), *Configuring Networking Lab
    Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the WLAN client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a closing step, we need to test our newly created WLAN by connecting a client
    machine to it. Let''s do it on a Windows 8.1 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to copy the attacker's certificate in the PKCS#12 format to
    a client machine and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then you need to click on the networking icon in the system tray to get a list
    of available wireless networks, as with WEP- or WPA-PSK-protected networks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **lab_private** option in the wireless network list and click on
    the **Other ways to connect** link:![Configuring the WLAN client](../images/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click on **Certificate**, choose the lab certificate, and click on **OK**:![Configuring
    the WLAN client](../images/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you are connected to the trusted WLAN and can penetrate our vulnerable
    servers. So far, we have reliably secured our trusted WLAN and the whole lab network
    from an unauthorized network access. We have almost reached the main goal of the
    book: building a lab with wireless access protected from attacks from outside.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing a network intrusion detection system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how we go ahead with installing the system in our network to
    detect any intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: Activating SPAN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cisco devices have a feature called **Switched Port Analyzer** (**SPAN**), which
    basically mirrors network traffic from selected source ports to a selected destination
    port. We need this feature to copy network traffic coming through the server VLAN
    to our network-based IDS for further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to monitor the whole server traffic (ports `fa0/7`-`fa0/10`) on
    the `fa0/11` port, so let''s configure SPAN on our core switch with the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Snort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Snort is a free, open source network **Intrusion Detection System** (**IDS**)
    capable of performing packet logging and real-time traffic analysis in IP-based
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other alternatives to Snort that you might want to explore, for example,
    Suricata.
  prefs: []
  type: TYPE_NORMAL
- en: 'This IDS identifies the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Attacks on network protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning (ports and services)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DoS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks on services such as FTP, DNS, e-mail, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks on databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks on the Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploits and various malwares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Taking into account the following points, we have a system with powerful features
    for security monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: Ability to write their own rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced functionality by using the connectivity modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible system of warning about the attacks (log files, output devices, or
    a database ID)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Snort can be executed on various operating systems: Windows and Unix-like.
    In our case, we are using Ubuntu Server 14 and we will consider the Linux distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Snort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'So, the installation process is pretty simple in Ubuntu Linux. We should just
    execute one command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few minutes, installation will be complete and we can start the Snort
    service on our system using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's update the Snort rules set. You can get the latest version of the
    rules from the official website at [https://www.snort.org/downloads](https://www.snort.org/downloads)
    in the **Rules** section. We will use the **Registered user release** set, because
    it is the most up-to-date one. However, it needs registration. You can sign up
    at [https://www.snort.org/users/sign_up](https://www.snort.org/users/sign_up).
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading, let''s unpack the downloaded archive file and copy the rules
    directories `so_rules` and `preproc_rules` in `/etc/snort`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to restart Snort:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: After all these manipulations, we have a working instance of the IDS Snort system.
    Next, let's configure our intrusion detection system in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Snort
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The main configuration of Snort is located in the `snort.conf` file in the
    `/etc/snort/` directory. Initially, this file is based on the example configuration.
    It is big but very well commented, so it should not make you seriously confused.
    The configuration file consists of nine sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Network variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration of the decoder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration of the base detection engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration of dynamic loaded libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration of preprocessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration of output plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customization of your rule set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customization of preprocessor and decoder rule set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customization of shared object rule set
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start with basic variables that will describe our infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Variable | Value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `HOME_NET` | [10.0.0.0/24,10.1.0.0/24] | Home network, from which
    attacks are possible. It is a host or a list of hosts whose traffic will analyze
    Snort. |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `EXTERNAL_NET` | [172.16.0.0/24,192.168.0.0/24,172.16.2.0/24] |
    The network from which the attack could begin. |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `DNS_SERVERS` | 10.0.0.2 | It is a list of DNS servers. |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `HTTP_SERVERS` | 10.0.0.3,10.0.0.5 | It is a list of web servers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `SQL_SERVERS` | 10.0.0.3 | It is a list of SQL servers. |'
  prefs: []
  type: TYPE_TB
- en: '| `portvar` | `HTTP_PORTS` | 80,443 | It is a list of web ports. |'
  prefs: []
  type: TYPE_TB
- en: '| `ipvar` | `SIP_SERVERS` | 10.0.0.4 | It is a list of SIP servers. |'
  prefs: []
  type: TYPE_TB
- en: We leave the default values for the other settings in this file. Of course,
    you can configure Snort to work in the way that best suits your needs. Since this
    is a learning laboratory, settings in a particular case may be quite different.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order for the changes to take effect, we need to restart the Snort daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can try to run Snort:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After starting the daemon, we will check the network interface that Snort is
    listening to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If the interface is in promisc mode, everything is fine.
  prefs: []
  type: TYPE_NORMAL
- en: Snort rules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Writing your own rules is not difficult but is often necessary, because vulnerabilities
    are found every day, and in the case of a test laboratory, infrastructure is changing
    for the needs of tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure of the rules corresponds to the following scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: <Action> <Protocol> <Port> <Direction> <Port> ([metadata] [content of the package]
    [Data] [Action after detection])
  prefs: []
  type: TYPE_NORMAL
- en: 'Actions are divided into the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `alert` | Create an alert using the selected method, and pass the information
    to the system log. |'
  prefs: []
  type: TYPE_TB
- en: '| `log` | Use the system log to record information about the package. |'
  prefs: []
  type: TYPE_TB
- en: '| `pass` | Ignore the package. |'
  prefs: []
  type: TYPE_TB
- en: '| `activate` | Use another dynamic rule. |'
  prefs: []
  type: TYPE_TB
- en: '| `dynamic` | After you have made the active rule, a rule is activated with
    the procedure logging. |'
  prefs: []
  type: TYPE_TB
- en: '| `drop` | Discard packet using a firewall, and pass information to the system
    log. It works only in the inline mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `sdrop` | Discard the packet using software firewall and do not use the system
    log. It works only in the inline mode. |'
  prefs: []
  type: TYPE_TB
- en: '| `reject` | Using firewall, discard the packet if the protocol is TCP, or
    record a message in the log file: ICMP port is not available if the package comes
    over UDP. It works only in the inline mode. |'
  prefs: []
  type: TYPE_TB
- en: 'Next, follow the protocol. This parameter can take the following values: TCP,
    UDP, IP, and ICMP.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next three parameters determine the source and destination IP addresses
    and port numbers for the rule to be applied to. They can be set as a certain value,
    a range, or any value. A range of IP addresses can be set with a CIRD block mask
    starting with `/`, for example: `/24`. A range of ports can be set with the start
    and end port numbers separated with a colon, for example: `25 : 445`.'
  prefs: []
  type: TYPE_NORMAL
- en: It also important to specify the traffic direction in which the rule should
    be applied with the symbols `->` for the direction from source to destination
    or `<>` for a bidirectional traffic flow.
  prefs: []
  type: TYPE_NORMAL
- en: After specifying all the parameters of a rule, you can also set several options
    that follow the rule header in brackets and should be separated from each other
    with a semicolon. The option keywords should be separated from their values with
    a colon.
  prefs: []
  type: TYPE_NORMAL
- en: 'All options can be divided into four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Category | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `meta-data` | These options are not specified for a data validation package.
    It contains information about the type of attack, the possible vulnerability of
    the materials, links, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `payload` | Parameters of this category contain information about the data
    itself, which contains a package. |'
  prefs: []
  type: TYPE_TB
- en: '| `non-payload` | This category contains official information about the packet
    (header). |'
  prefs: []
  type: TYPE_TB
- en: '| `post-detection` | It specifies the tasks to be carried out after finding
    the information in the package. |'
  prefs: []
  type: TYPE_TB
- en: For effective monitoring of activities, you should learn the language rules
    of Snort. Unfortunately, the full description of all rules is beyond the scope
    of this book, but you can find more information on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: For now, we have a working network intrusion detection system and we can develop
    it for specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: Host-based security solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second class of security solutions that we are going to cover in the current
    chapter is host-based solutions. Such solutions are installed on the same hosts
    which they have to protect.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to have a host-based security solution in your lab mainly for two
    purposes: to practice firewall/IPS evasion techniques and to test the detectability
    and obfuscation of your exploits (payloads) and malware. But, as always, there
    could be other personal reasons for having such security measures.'
  prefs: []
  type: TYPE_NORMAL
- en: Workstation security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To better imitate a real enterprise network and create a possibility for testing
    various evasion techniques, we are going to install free endpoint security solutions
    on our lab workstations.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend that you create snapshots of your workstations before installing
    any host-based security solutions, as they will definitely make penetrating workstations
    a bit problematic and you don't need it before you proceed to an advanced hacking
    level. Using snapshots allows quick switching between the various system states
    of a VM and you can always fall back if you have broken something.
  prefs: []
  type: TYPE_NORMAL
- en: EMET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first workstation security solution in our list is the **Enhanced Mitigation
    Experience Toolkit** (**EMET**) from Microsoft. This tool helps to protect applications
    from being exploited if they contain software vulnerabilities. The tool uses a
    lot of protection techniques, including memory randomization and protection techniques
    as well as certificate pinning feature to withstand man-in-the-middle attacks.
    It can be obtained from the official website at [http://www.microsoft.com/emet](http://www.microsoft.com/emet).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to install EMET 5.2 on a Windows 7 workstation. The installation
    process using graphical interface is not complicated, so we will use a lot of
    screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to a Windows 7 workstation and download EMET 5.2 (or newer if it is already
    available) from the official webpage:![EMET](../images/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EMET 5.2 download menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the installation wizard and follow the dialog-based instructions:![EMET](../images/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EMET 5.2 installation process
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the recommended settings:![EMET](../images/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EMET 5.2 settings choice
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the installation, you can find the EMET icon in the taskbar. Right-click
    on it and open EMET:![EMET](../images/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EMET 5.2 main window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can click on the **Apps** button in the menu to see which protection setting
    is set for which applications:![EMET](../images/00041.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EMET 5.2 application protection settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we can proceed with installing a host-based intrusion prevention system.
  prefs: []
  type: TYPE_NORMAL
- en: HIPS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like EMET, we need a HIPS and antivirus mostly for evasion testing purposes
    and for advanced attacks or research scenarios. You can choose any of the popular
    software and the more solutions you have in the lab, the better it is because
    it will allow you to test your payloads and evasion techniques against a wider
    range of detection and protection tools. This will give you a better chance of
    a successful attack.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Normally, it is not recommended to install a lot of security solutions of one
    type from different vendors as they can conflict and cause system instability.
    In our example, we have tested the proposed solution, but if you want to do the
    same thing with other software, we recommend you test it properly.
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, it will be enough to install just one solution,
    and preferably it should be free. We have chosen Comodo Internet Security 2015.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comodo **Internet Security** (**IS**) is a solution that combines antivirus,
    firewall, and auto-sandbox software and has a free version available at Comodo''s
    website. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The installation process is also simple, as in the case of EMET. But it has
    some peculiarities. You should not miss the small link **Customize Installation**
    in the bottom-left corner of the second installation dialog:![HIPS](../images/00042.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessing the Comodo IS installation customization dialog
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For our purposes, we don't need the GeekBuddy component or the Chromodo browser,
    so just uncheck the corresponding checkboxes:![HIPS](../images/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choosing Comodo IS components to install
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also do not want Comodo to change our DNS settings, so uncheck the appropriate
    checkbox on the next dialog too. It is up to you to decide if you want to help
    Comodo by setting Yahoo! as the default search engine. However, in the case of
    a lab workstation, it will not help Comodo anyhow so we uncheck the option:![HIPS](../images/00044.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comodo IS installation customization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finish the installation and restart the workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comodo Internet Security 2015 is installed and working now. The last thing left
    to do is to create a snapshot of the VM state:![HIPS](../images/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comodo IS main window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Web application firewall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web application firewall is a class of security solutions that is dedicated
    to protecting web applications by inspecting HTTP/S requests and responses and
    taking various actions based on special patterns (rules). Those actions can be
    blocking or logging or some more complicated actions can be taken.
  prefs: []
  type: TYPE_NORMAL
- en: 'When talking about free web application firewalls, the first one that comes
    to our mind is definitely ModSecurity. To better explain what is it, we are going
    to quote the description from the official ModSecurity website ([https://www.modsecurity.org/](https://www.modsecurity.org/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"ModSecurity is an open source, cross-platform web application firewall (WAF)
    module. Known as the "Swiss Army Knife" of WAFs, it enables web application defenders
    to gain visibility into HTTP(S) traffic and provides a power rules language and
    API to implement advanced protections."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We think we will not be wrong if we say that it is the most popular free web
    application firewall in the world and we would like to show you how to prepare
    it for lab usage on our web server. So, let's start.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we should install ModSecurity. There are several ways to install ModSecurity,
    but the fastest and the easiest one in our case is installing it from the Ubuntu
    package repository using **Advanced Packaging Tool** (**APT**). Log in to the
    web server and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether ModSecurity was successfully installed and loaded, you can
    use the `apachectl` utility with the option `-M` and `grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You should see something similar to `security2_module` (shared), which indicates
    that ModSecurity was successfully integrated to Apache.
  prefs: []
  type: TYPE_NORMAL
- en: 'ModSecurity keeps its configs in the `/etc/modsecurity/` directory and it is
    distributed with a sample of predefined rules and configs. The default configuration
    file is `modsecurity.conf-recommended`. It is a good idea to keep a backup of
    that file so that we will create a copy that will serve as a working config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to restart Apache web server in order to make it load with
    the new ModSecurity config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: ModSecurity can work as an intrusion detection system and as an intrusion prevention
    system. When working in the detection mode, ModSecurity just logs activities that
    were determined as malicious according to a current rule set. In the prevention
    mode, it can actually block attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The mode settings (as well as a lot of other ModSecurity settings) can be changed
    in `/etc/modsecurity/modsecurity.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For initial web hacking training, you probably don''t want your attacks to
    be blocked, and in this case you can leave ModSecurity in an IDS mode (detection
    mode), leaving the `SecRuleEngine` option with the following value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This will allow you to practice various attacks without any interference from
    the WAF. At the same time, it allows you to understand how WAF works with a current
    rule set by inspecting its logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you want to practice advanced attacks with WAF evasion techniques, you
    can switch WAF into the prevention mode by changing the value of the `SecRuleEngine`
    option to `On`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also another interesting configuration option that is important in
    case of limited processing resources on VMs: `SecResponseBodyAccess`. This option
    enables and disables server response body inspection, which does not makes a lot
    of sense in a lab environment unless you need it for specific tasks. It also consumes
    additional processing resources that can slow down the server a bit. Our recommendation
    is to turn the response body inspection off in the meantime and turn it on when
    it is really necessary. The feature is turned on by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To make use of ModSecurity, it should have rules set, according to which it
    will inspect requests (and/or responses). There is a predefined rule set distributed
    with ModSecurity and called **Core Rule Set** (**CRS**). You can find it in `/usr/share/modsecurity-crs/`.
    To activate the rule set, we need to explicitly include their directories in Apache''s
    configuration in the file `/etc/apache2/mods-enabled/mod-security.conf` file and
    create symlinks to the rules that we would like to activate in `/usr/share/modsecurity-crs/activated_rules/`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/etc/apache2/mods-enabled/security2.conf` file in the editor and
    put the following lines in the `<IfModule security2_module> </IfModule>` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create symlinks in `/usr/share/modsecurity-crs/activated_rules/`. Go to the
    directory and execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Reload the Apache service for the changes to take effect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the configuration phase is finished, we need to check if ModSecurity works
    and detects malicious requests. Let''s use DVWA for that. Open a browser on another
    machine and navigate to `http://10.0.0.5/dvwa/login.php`. Enter an obvious SQL
    injection pattern in the username field, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Click on the **Login** button or just hit *Enter*. Go back to the web server
    and check the content of the ModSecurity''s log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The log should contain an alert indicating that the request matched a pattern
    from the SQL injection rule set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web application firewall](../images/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: ModSecurity has detected an SQL injection
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just an example, but we strongly recommend you go beyond the examples
    and experiment by tweaking WAF rules and other WAFs in order to acquire outstanding
    penetration testing skills.
  prefs: []
  type: TYPE_NORMAL
- en: ClamAV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we have protected workstations based on the Windows operating system from
    virus threats. Now, it's time to protect our Linux servers and e-mail services
    from malicious code.
  prefs: []
  type: TYPE_NORMAL
- en: To build a multi-tier protection, we must protect not only Windows platform
    hosts, but also Linux servers, as well as transfer and store file services. So,
    we create automatic scans for viruses for all incoming and outgoing e-mail messages.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, as an antivirus solution, we consider ClamAV. ClamAV is antivirus
    software that runs on many operating systems, including Unix-like OSes, OpenVMS,
    Microsoft Windows, and Apple Mac OS X. ClamAV is produced under the GNU General
    Public License and is a free software.
  prefs: []
  type: TYPE_NORMAL
- en: The main objective of ClamAV is integration with e-mail servers to verify the
    files attached to messages. The package includes a scalable multi-threaded daemon
    clamd, which is controlled from the command line scanner clamscan, as well as
    a module signature that updates via the Internet freshclam.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the ClamAV features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Command-line management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be used with most e-mail servers, including the implementation of milter-interface
    with Sendmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanner implemented as a C library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning files and e-mail on the fly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definition of over 850,000 viruses, worms, Trojans, and phishing messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis of compressed files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for scanning mbox, Maildir, and raw mail files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analysis file formats, such as portable executable, packed UPX, FSG, and Petite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Well, let''s start with solution''s installation. For obtaining the ClamAV
    distribution package, please visit the manufacturer''s website [http://www.clamav.net/download.html](http://www.clamav.net/download.html).
    Or, as in our case, you can use built-in operating system tools. Since we are
    using the Ubuntu Linux operating system 14.04.3, we just run following command
    in the console on behalf of the root user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer to use a normal user, you can execute following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: After this, we will have a working instance of ClamAV. To start or stop the
    service, you can use the built-in tools of your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the next step, we need to reconfigure ClamAV so that the ClamAV daemon uses
    TCP connections instead of a local Unix socket. For this, just execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will start a configuration wizard. Let''s leave all the answers
    at the default values, except for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Socket type (set it to `TCP` instead of `Unix`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TCP port `clamd` will listen on (you can set your own TCP port address for
    listening to incoming messages, but we recommend you leave it as `3310`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IP address `clamd` will listen on (here, we should set the IP address of
    the used network interface, but you can also set it as any)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can check or clarify your configuration of ClamAV by editing the configuration
    file `/etc/clamav/clamd.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the reconfiguration process is completed, we need to restart the ClamAV
    daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we should update the database. For this, we need to execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Usage and integration with the mail server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have installed the antivirus solution and updated the database. Now we need
    to check how it works. For example, to check a directory, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This command will check the entire filesystem if it is necessary to check any
    particular directory; instead of `/`, specify the directory name. To check a suspicious
    file, just type `clamscan FILENAME`. Let's check our antivirus with an **EICAR**
    (**European Institute for Computer Antivirus Research**) test file. It is a standard
    file that is used to check whether the antivirus and inherently is not a virus.
    You can get this file at [http://www.eicar.org/download/eicar.com.txt](http://www.eicar.org/download/eicar.com.txt).
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot shows the output of ClamAV:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Usage and integration with the mail server](../images/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The ClamAV output
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to check the open port for connecting third-party applications.
    It''s enough to execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After checking that it works, let''s make sure that our mail server scans all
    messages for viruses. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the management console of hMailServer and go to **Settings** | **Anti-virus**.
    In the right-hand pane, go to the **General** tab to determine what to do with
    infected messages:![Usage and integration with the mail server](../images/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: hMailServer settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the **ClamAV** tab, we should set connection options for the ClamAV server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hostname (`10.0.0.107`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP/IP port (`3310`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To check the connection, click on the **Test…** button:![Usage and integration
    with the mail server](../images/00049.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: hMailServer settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now all the traffic of the `lab.local` e-mail accounts is scanning on the ClamAV
    server.
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already set up a network intrusion detection system and HIPS for Windows
    hosts. Let's now consider another option for Linux platform hosts.
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC ([http://ossec.github.io/](http://ossec.github.io/)) is a host system
    intrusion detection system (HIDS), and it is free and open source. It conducts
    analysis of system logs, integrity checking, monitoring the registry of Windows,
    rootkit detection, and alerting at a particular time and event. It provides the
    function of intrusion detection for most operating systems, including Linux, BSD-like,
    Mac OS, Solaris, and Windows. Its cross-platform architecture makes it easy to
    manage and monitor for multiple operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: OSSEC consists of a main application (server), agents, and the web management
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Installing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Well, let''s start with OSSEC by installing it in our infrastructure. First
    of all, we need to satisfy some requirements. OSSEC requires `gcc`, `libc`, and
    `apache` with `php5` support. For this, we should execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to obtain OSSEC. For this purpose, we should execute the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have installation packages, let''s install them using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'It starts a wizard with a few questions that we should answer. The most important
    question is about the type of installation. Here, we should create two different
    types of installation: for agents and for the server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s install the web part of OSSEC. Move the `ossec-wui` directory
    to the folder where it can be accessed by the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the setup script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The wizard will start, so we should answer questions such as login and password
    to gain access to the web interface of OSSEC.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OSSEC stores all the files in `/var/ossec`. Let's open the `/var/ossec/ossec.conf`
    file and give it the form we need. Here, we set sending alerts to e-mail by selecting
    the server address, mailing address, and the maximum possible number of messages
    per hour.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there is a block of rules that describes what and how OSSEC will react.
  prefs: []
  type: TYPE_NORMAL
- en: The `syscheck` section sets the integrity check. Its meaning lies in the fact
    that the system calculates a hash of each file in the specified directory and
    checks them periodically. Here, we set what we will monitor in a directory and
    how long it will be checked for. The section describes the command scripts that
    can be used by the system under certain conditions.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we set log files that need to be analyzed and compared with the
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the coarse settings of the OSSEC server are finished and we can run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If successful, you will receive an e-mail with a message on startup in the mailing
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we need to add the user account of the web server (`www-data`)
    to the OSSEC group. Open the `/etc/group` file in editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Find the line `ossec:x:1002` and change it to `ossec:x:1002:www-data`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we need to set permissions for the `tmp` directory of our OSSEC
    instance and restart Apache service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can access the OSSEC web interface using the following link: `http://localhost/ossec-wui/`.'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting OSSEC agents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s install an OSSEC agent from the same distribution. We choose the agent
    mode in the wizard. For the question "What''s the IP Address or hostname of the
    OSSEC HIDS server?" we input the IP address of our OSSEC server. Now, we need
    to associate the OSSEC agent with our server. For this, we should go to the server
    and launch the manager working with the agents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In the interactive mode, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select *A* to add an agent (A).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the name of our agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the IP address of our agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose an agent ID. We can leave the ID that OSSEC suggests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '"Confirm adding it? (Y / n)" Answer with *y*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the *E* key to extract an agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the ID of our new agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the base64 string and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Q output from the manager to work with agents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the server for the successful addition of the agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s go to our agent and go in the manager working with the agents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In the interactive mode, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the *I* key to import from the server to add a key that we copied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the key, add the agent, and exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we can run our agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'It should come in the mail notification that a new agent is connected. Go to
    the server to check whether the agent is connected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will see the list of our agents with the status `Active`. Also, `/var/ossec/logs/alerts.alerts.log`
    should have an event like that.
  prefs: []
  type: TYPE_NORMAL
- en: So the OSSEC agent is connected. Now, we can see our agent in the web interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to learn more about OSSEC, the official documentation is available
    at [http://ossec.github.io/docs/](http://ossec.github.io/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: SIEM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SIEM** (**Security information and event management**) is the union of two
    terms denoting the application areas **Security Information Management** (**SIM**)
    and **Security Event Management** (**SEM**). The SIEM technology provides real-time
    analysis of events (alarms), security emanating from network devices, and applications.'
  prefs: []
  type: TYPE_NORMAL
- en: In our environment, SIEM solutions allows us to track security events and to
    better correlate the actions of the simulated attacker and security specialist.
  prefs: []
  type: TYPE_NORMAL
- en: The field of knowledge about SIEM is very broad and requires several books.
    In this book, we will only touch on this subject and show how to install the popular
    free solution OSSIM.
  prefs: []
  type: TYPE_NORMAL
- en: '**OSSIM** (**Open Source Security Information Management**) is a management,
    control, and information security system. Out of the box, OSSIM includes the following
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: The collection, analysis, and correlation of events—SIEM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **host intrusion detection system** (**HIDS**)—OSSEC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network intrusion** **detection system** (**NIDS**)—Suricata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wireless Intrusion** **Detection System** (**WIDS**)—Kismet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring sites networks—Nagios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An analysis of network anomalies—P0f, PADS, FProbe, Arpwatch, and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability scanner—OpenVAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A powerful system of exchange of information about threats among users OSSIM—OTX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 200 plugins for parsing and correlating logs from various external
    devices and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OSSIM is distributed in the form of a distribution image on a CD and at the
    same time, it only uses the 64-bit version of the software.
  prefs: []
  type: TYPE_NORMAL
- en: The distribution ISO image can be downloaded from the official website at [https://www.alienvault.com/products/ossim](https://www.alienvault.com/products/ossim).
  prefs: []
  type: TYPE_NORMAL
- en: Installing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An OSSIM system is installed with the help of the installation image containing
    a complete Debian system and all the necessary components and modules.
  prefs: []
  type: TYPE_NORMAL
- en: The system requires a fairly productive machine with multiple processors and
    at least 3 GB of RAM. After creating the VM and connecting the downloaded ISO
    image, we can start the VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation is not different from installing Debian: just insert the OSSIM
    disk image into the DVD drive of your virtual machine, boot from it and follow
    the installation guide. Upon completion of the installation, a console window
    will appear.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go to the link printed in the console and enter user credentials. After
    these steps, installing OSSIM is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration wizard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let's configure OSSIM. For this purpose, enter the credentials specified
    in the previous step. Again, we will get the configuration wizard.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to configure network interfaces with the IP setting of
    the server where you installed OSSIM.
  prefs: []
  type: TYPE_NORMAL
- en: On the next tab, OSSIM will automatically scan the network and prompts us to
    specify the types of the found hosts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we can automatically install the host intrusion detection
    system (OSSIM provides OSSEC). Let's try to install it on Windows hosts. To do
    this, we have to select the host name and credentials (for example, a domain administrator)
    and click on **Deploy**.
  prefs: []
  type: TYPE_NORMAL
- en: After these steps, OSSIM will congratulate us with a message for successfully
    installing and configuring it.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring HIDS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To configure HIDS, go to **Environment** | **Detection** | **HIDS** | **Agents**
    and you will see two hosts. The first host is OSSIM itself and the second one
    is a Windows Server, which we deployed by clicking on **Deploy HIDS** in the **Setup
    Wizard**. So, go to the menu **HIDS agents**.
  prefs: []
  type: TYPE_NORMAL
- en: Agent installation on a Windows host is performed automatically and requires
    no additional input or any information. A setting on a Linux host fully corresponds
    to the previously described process in the *OSSEC* section.
  prefs: []
  type: TYPE_NORMAL
- en: The HIDS installation is finished now, so go to **Environment** | **Detection**
    and you can see the logs of OSSEC now.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have shown readers how to protect the lab network from an
    unauthorized access and external attacks by installing and configuring network-
    and host-based security solutions. In addition to securing the lab network, we
    have prepared it to practice such important penetration testing topics as bypassing
    and evading security mechanisms and assessing their effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: The lab environment is ready for practicing now and in the next chapter we would
    like to give a brief overview of various penetration testing and security assessment
    frameworks and toolkits along with some examples of their usage in the lab.
  prefs: []
  type: TYPE_NORMAL
