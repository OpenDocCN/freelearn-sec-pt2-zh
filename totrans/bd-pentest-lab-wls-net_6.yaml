- en: Chapter 6. Exploring Hacking Toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you probably know, hackers and penetration testers use not only small standalone
    utilities in their work, but also (probably more often) various sets of security
    tools and whole OS distributions built for penetration testing and filled with
    necessary tools.
  prefs: []
  type: TYPE_NORMAL
- en: In the course of this chapter, we are going to review toolkits, frameworks,
    and distributions and provide examples of their utilization in our lab environment
    in order to familiarize you with them and help you choose the toolkits you would
    like to learn in more depth for your tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Wireless hacking tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure hacking tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application hacking tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless hacking tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logically following our assertion that our book is about creating a lab for
    wireless networks, we are going to start reviewing penetration testing frameworks
    and toolkits with a topic dedicated to wireless hacking.
  prefs: []
  type: TYPE_NORMAL
- en: Aircrack-ng
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we talk about an approach and tools for Wi-Fi hacking, the first thing
    that comes in our minds is Aircrack-ng ([http://www.aircrack-ng.org](http://www.aircrack-ng.org)).
    Although there is a standalone tool for cracking WEP, WPA, and WPA2 security with
    the same name, the whole set of tools is called Aircrack-ng and the cracking tool
    is included in this set among the others.
  prefs: []
  type: TYPE_NORMAL
- en: We will not exaggerate by saying that Aircrack-ng is our favorite and the must-use
    toolkit in Wi-Fi penetration testing projects, though we do not always use all
    of the tools included in it.
  prefs: []
  type: TYPE_NORMAL
- en: The toolkit is primarily developed for Linux and command line usage and despite
    the fact that it can also be used under Windows, we would recommend to use it
    only under `*nix`-like systems because there are a lot of limitations under Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways of using Aircrack-ng:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Aircrack-ng on your Linux host from source code or with a package
    manager, for example, on a Debian-like system (it is already preinstalled in penetration
    testing distributions like Kali Linux):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Booting from a live CD with Aircrack-ng installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading a VMware VM image with Aircrack-ng installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following list shows you the tools of this the framework and provides you
    with a short description of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Airbase-ng**: This tool is used to create software APs and attack wireless
    clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aircrack-ng**: This is actually the cracking tool for WEP and WPA/WPA2 key
    recovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airdecap-ng**: This is used for decrypting WEP and WPA/WPA2 wireless traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airdecloak-ng**: This tool is used for beating WEP cloaking, a method used
    in WEP to fool cracking tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Aireplay-ng**: This generates supplementary wireless traffic to allow performing
    various attack types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airmon-ng**: This switches a wireless interface into monitor mode, which
    allows low-level wireless traffic manipulations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airodump-ng**: This tool is used for 802.11 monitoring and sniffing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airodump-ng-oui-update**: As suggested by the name, this tool is used to
    update the **Organizationally Unique Identifier** (**OUI**) database of Airodump-ng.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airolib-ng**: This tool is useful for maintaining a local database of ESSIDs,
    passphrases and precomputed PMKs to use in cracking (the idea is very similar
    to using rainbow tables).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airserv-ng**: This allows multiple applications to access the Wi-Fi interface
    via TCP connections as a server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Airtun-ng**: This is the tool for creating virtual tunnel interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Besside-ng**: This is the automated WEP and WPA attacking tool to crack all
    reachable WEP-protected networks and record all available WPA-handshakes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easside-ng**: This tool allows us to communicate via an WEP-protected AP
    without a WEP-key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packetforge-ng**: As its name suggests, this tool is used to create forged
    wireless packets used in other attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tkiptun-ng**: As per the official documentation, this tool is very useful:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This tool is able to inject a few frames into a WPA TKIP network with QoS.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: But the authors of this book have not used it yet and are not sure if this tool
    is released or is still under development.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Wesside-ng**: This is the automated WEP-attacking tool for cracking all reachable
    WEP-protected networks without user interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a detailed description of the tools and their documentation, refer to the
    official Aircrack-ng website ([http://www.aircrack-ng.org/](http://www.aircrack-ng.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s complete a short exercise with Aircrack-ng utilization under Linux.
    As an example, we will crack a WPA2 key:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the very first step in a Wi-Fi penetration test, we need to switch our Wi-Fi-interface
    into a promiscuous monitor mode to allow the system to "hear" all the Wi-Fi packets
    and allow it to inject wireless traffic working on a low-level interface level.
    Assuming that our wireless interface is `wlan1`, it can be done with the `airmon-ng`
    utility as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, we can see the report that the interface is turned into the monitor
    mode:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00050.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The preceding command turns the wireless interface into a monitor mode and
    creates a virtual interface `wlan1mon`, which we will use in the next steps. You
    can see that `airmon-ng` warns you about possible conflicts with some processes
    and provides you a list of them. If you want to quickly kill all those processes,
    just execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s listen to the air to find out what do we have around and choose
    a target. It can be done with the `airodump-ng` tool with the monitoring virtual
    interface''s name as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let the tool work for a while (5 minutes should be enough) and you can see
    two tables, updated in a real-time mode. Check out the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00051.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You can see both our lab WLANs along with their security types in the first
    table which lists accessible APs. So, let's attack the guest WLAN as we own this
    network and do not need any additional permission to attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to obtain a WPA handshake to crack it and a handshake can be sniffed
    by just passively waiting for a device establishing a connection with the AP.
    But to extend our example and show you how the `aireplay-ng` tool works, we are
    going to use an active attack in order to force a device, already connected to
    the WLAN, to disconnect and try to connect again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To perform a targeted attack, we need to restart `airodump-ng` with more parameters
    in order to sniff only the communications of our Guest WLAN. The parameters are
    target BSSID, target Wi-Fi channel, and the capture filename. Values for the first
    two parameters come from the first `airodump-ng` capture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the result, you''ll get a much cleaner output that shows the information
    about only the target WLAN, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00052.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'When `airodump-ng` is not jumping from channel to channel, it can better detect
    associated clients. We need to choose a device associated with the AP and perform
    a deauthentication attack on it using `aireplay-ng` on behalf of the AP (forgery).
    Let''s attack a client with the hardware address `C8:F7:33:0E:73:38` from the
    preceding screenshot. Open a new terminal window and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the following screenshot, you can see `aireplay-ng` performing the attack
    and `airodump-ng` capturing a WPA-handshake from a client, that is trying to re-authenticate:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00053.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Alternatively, you can do it less gently and perform a broadcast deauthentication
    attack to all associated clients with the command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the device is configured to automatically reconnect to the WLAN, we will
    be able to capture the next WPA-handshake and see the corresponding message in
    the top right corner of the `airodump-ng` terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's create a short wordlist and add our guest WLAN PSK there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After that, just start the `aircrack-ng` tool with the dump file and the wordlist
    as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Cracking time can vary depending on the size of your wordlist, but if the correct
    PSK is in the wordlist, it will be found and displayed to you as shown on the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00054.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At this point, you can connect to the WLAN using the recovered PSK and the WLAN's
    security is bypassed.
  prefs: []
  type: TYPE_NORMAL
- en: Mana
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mana is another interesting Wi-Fi penetration testing toolkit mainly aimed towards
    attacking wireless clients rather than wireless networks. It can perform man-in-the-middle
    attacks with a rogue access point and harvest credentials with fake Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mana is a Linux toolkit based on a modified version of Hostapd software (used
    to create software access points) and contains the following start scripts for
    launching Mana in various attacks modes (the description is taken from the original
    readme file):'
  prefs: []
  type: TYPE_NORMAL
- en: '`start-nat-full.sh`: This will fire up MANA in NAT mode (you''ll need an upstream
    link) with all the MitM bells and whistles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-nat-simple.sh`: This will fire up MANA in NAT mode, but without any
    of `firelamb`, `sslstrip`, `sslsplit`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-noupstream.sh`: This will start MANA in a "fake Internet" mode. This
    is useful for places where people leave their Wi-Fi on, but there is no upstream
    Internet. Also contains the captive portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-noupstream-eap.sh`: This will start MANA with the EAP attack and `noupstream`
    mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Mana toolkit can be downloaded and installed in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Git repository [https://github.com/sensepost/mana](https://github.com/sensepost/mana)
    (`git clone + make install`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By starting one of the scripts `ubuntu-install.sh` or `kali-install.sh` from
    Mana archive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using `apt-get`: `apt-get install mana-toolkit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After installation, the Mana software can be found in `/usr/share/mana-toolkit/`
    and its configuration files can be found in `/etc/mana-toolkit/`.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s set up an evil AP with Mana toolkit in order to attempt to sniff client
    traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the Mana toolkit on your Linux attacker machine if you have not done
    it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect a wireless interface to the attacker machine and find out its name
    with the `iwconfig` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the command output, we can see that (in our case) it is `wlan1`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we need to adjust the script that we are going to utilize and the corresponding
    config files. We are going to use `start-nat-full.sh`. Open the script file in
    editor and change the value of the `phy` parameter to the name of your Wi-Fi interface
    (`wlan1` in our case).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The corresponding config file name can be found in the beginning of the script
    and it is `/etc/mana-toolkit/hostapd-karma.conf`. You also need to check if the
    values of the parameters `interface` and `driver` correspond to your Wi-Fi interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, just run the script and Mana will set up a rogue AP with all the necessary
    tools needed to imitate a Wi-Fi hotspot offering free Internet access and logging
    client traffic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if an EvilAP was successfully created. Open available wireless networks
    and see if **Internet** (or your evil SSID if you have changed it in the config
    file) is among them:![Exercise](../images/00055.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the evil WLAN from another host and try to visit various websites.
    You should see the victim's connections data and attack details in the terminal:![Exercise](../images/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mana automatically tries to perform man-in-the-middle attacks for SSL and forces
    web connections to work via HTTP instead of HTTPS using the `sslstrip` tool. You
    can find gathered information in `/var/lib/mana-toolkit/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mana also uses the tool Firelamb to capture victims' cookies. You can see all
    the captured cookies with the `/usr/share/mana-toolkit/run-mana/firelamb-view.sh`
    script. The tool will even open browser sessions with intercepted cookies for
    you:![Exercise](../images/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Infrastructure hacking tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infrastructure hacking is such a broad topic including so many subtopics that
    each of them could be distinguished into a separate huge security domain. Therefore,
    there are so many hacking toolsets, frameworks, and software packs for various
    tasks and scenarios that it would need a whole book to describe all of them. Instead
    of that, we are going to just review probably the most popular, free, and well-known
    hacking tool and framework **Metasploit Framework** (also known as **MSF**) maintained
    by the company Rapid7.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap is the most popular network security tool used by hackers and pentesters
    (and our favorite). This is an excellent tool for discovery and enumeration of
    available live hosts, open ports and network services, and much more. It can be
    used for security checks, to determine a service running on the host, to identify
    the OS and applications, and even to determine the type of firewall used on a
    scanned node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code and binaries of Nmap are available at the official website
    ([http://nmap.org/download.html](http://nmap.org/download.html)). A Windows version
    is also available. If you are using Linux, you can find Nmap packages in the repositories
    for most distributions. For example, in Debian Linux, you can type the following
    command in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After a few seconds, you'll have a ready binary on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is a console application, but before we talk about work in the console,
    it should be noted that there is a GUI for Nmap that you can use to input commands
    and run scan tasks. It is Zenmap. Zenmap allows you to select targets, run scan
    tasks, display results, save results, and compare results with others.
  prefs: []
  type: TYPE_NORMAL
- en: GUI Zenmap is a good way to get acquainted with Nmap, but it is better to know
    how to use Nmap in the console with command line arguments if you're going to
    work with it efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Nmap command line has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nmap [Scan Type(s)] [Options] {target specification}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The definitions for the terms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Scan Type`: This is a technique of scanning. It can be a simple ping scan
    (`-sn`), TCP ACK scan (`-sS`), UDP scan (`-sU`), exotic Xmas scan (`-sX`), or
    TCP Null scan (`-sN`) for trying firewall bypass. Nmap is not limited to these
    techniques and there are others as well. You can get the full list by executing
    Nmap help:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Options`: This is a set of scan parameters. The full description of Nmap options
    is more than 100 pages long. Thus, we are providing only a few examples here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ports to scan (`-p`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Probe open ports to determine service/version info (`-sV`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve DNS name of target hosts or not
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable OS detection (`-O`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall/IDS evasion and spoofing techniques
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Output parameters (Nmap has three basic output formats: Normal, XML, and Grepable
    format; this gives greater freedom in processing of the results)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target specification`: This is the parameter where we set our targets. The
    user can set the target address by typing it as a parameter of an execution command
    or as a file (using the option `-iL`), where each line is a host address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the options can be combined with each other. Some options are for selecting
    a scan method, while others point to the use of additional features or are used
    to adjust various settings for scanning. Nmap warns the user about an invalid
    combination of options. As mentioned earlier, for a brief overview of all options,
    you should run Nmap with the `-h` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the detailed list of options, you can refer to the home page of Nmap ([https://nmap.org/book/man-briefoptions.html](https://nmap.org/book/man-briefoptions.html))
    or use the `man` command on Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Nmap is a very powerful tool that provides a lot of information such as the
    operating system running on the target host, open ports, MAC address of the device,
    and so on depending on the scan options and the target itself.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the completion of the review of this great software, we will consider why
    many experts call Nmap a Swiss army knife. **Nmap Scripting Engine** (**NSE**)
    is a result of the decision to empower Nmap by writing additional functionality
    in the language LUA.
  prefs: []
  type: TYPE_NORMAL
- en: To use the scripts, it needs to use the `--script` key with the name of the
    script as a parameter `(--script=<script name>`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, there is a huge variety of readymade scripts included in the Nmap
    distribution package, which can be used for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deep hosts and network services discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication processes checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bruteforce attacks such as password guessing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DoS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability identification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploitation of vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full list of the available scripts and descriptions can be found at [http://nmap.org/nsedoc](http://nmap.org/nsedoc).
  prefs: []
  type: TYPE_NORMAL
- en: If the functionality you need is not there in the standard package, you can
    write your own scripts to fit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we would like to show you the power of Nmap. For demonstration purposes,
    we are going to scan a Windows 7 machine in our user network segment. The machine
    has MS SQL Express and MS IIS7.5 servers installed, while its Windows Firewall
    is turned off. For this, we execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-sS`: This is used for TCP Syn scan'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sV`: This is used for determination of the network service version of open
    ports (this is a very "noisy" option)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O`: This is used for detecting the OS version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-sC`: This is equivalent to `--script=default`, that is, all scripts of the
    **Default** category'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-T4`: This is used for setting the fast timing template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`172.16.0.102`: This is the IP address of our target'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After a couple of minutes, we will get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example](../images/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the output is sufficiently detailed and clear.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap author *Gordon "Fyodor" Lyon* wrote the book *Nmap Network Scanning: The
    Official Nmap Project Guide to Network Discovery and Security Scanning*, *Nmap
    Project*. If you want to get the full power of Nmap, we strongly recommend that
    you read it. It is available on Amazon ([http://www.amazon.com/dp/0979958717?tag=secbks-20](http://www.amazon.com/dp/0979958717?tag=secbks-20)).'
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the course of hacking network infrastructure, **man-in-the-middle** (**MitM**)
    type attacks are often used. Such attacks are usually as easy to perform as they
    are easy to identify, because they are very "noisy" due to the large amount of
    auxiliary traffic they generate. But as a result, you can get a lot of useful
    information and get the possibility to manage a victim.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of tools for MitM attack execution. For operating systems of
    the Microsoft Windows family, the most popular ones are Cain ([http://www.oxid.it/cain.html](http://www.oxid.it/cain.html))
    and Intercepter-NG ([http://sniff.su/](http://sniff.su/)). They have a simple
    graphical user interface and rich features. The execution of the attack is reduced
    to a few mouse clicks. Another similar tool worth mentioning is a multiplatform
    tool Bettercap ([https://www.bettercap.org/](https://www.bettercap.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: As a classic and one of our favorite tools for performing MitM attacks (especially
    for ARP-spoofing), we are going to review Ettercap ([http://ettercap.github.io/ettercap/](http://ettercap.github.io/ettercap/)).
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap is a tool to analyze the security of the network, which has a wide
    variety of features, such as listening to network traffic, content filtering,
    and more for analysis of networks and hosts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ettercap supports different protocols (Telnet, FTP, POP3, IMAP, SMB, HTTP,
    and many others) and can be used for:'
  prefs: []
  type: TYPE_NORMAL
- en: OS fingerprinting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resetting network connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering network traffic based on a set of parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing spoofing-attacks of various protocols, such as DNS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete list of possibilities is much greater. Ettercap has many features
    and expands due to the large number of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In the result of the attack, obtained data can be viewed online (for example,
    if there were passwords in the network traffic, they would be shown immediately)
    and stored in a file.
  prefs: []
  type: TYPE_NORMAL
- en: The installation package of Ettercap is available on the official website ([https://ettercap.github.io/ettercap/downloads.html](https://ettercap.github.io/ettercap/downloads.html)),
    where you can download it.
  prefs: []
  type: TYPE_NORMAL
- en: Ettercap is a Linux software, so it has a convenient console management with
    all the consequences. But it also has a graphical user interface. To run in graphical
    mode, you should execute Ettercap with the `-G` key.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ettercap](../images/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So let's try Ettercap.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s try to start Ettercap in a couple of modes to see what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Ettercap in the sniffing mode, we should execute the Ettercap binary
    file specifying the network interface to work with (`-i eth0` or `-iface eth0`
    in our example) and one of the following keys to determine the type of user interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-T` (`--text`): This key uses text only GUI'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-C` (`--curses`): This key uses curses GUI'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-D` (`--daemon`): This key daemonizes Ettercap (no GUI)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-G` (`--gtk`): This key uses GTK with GUI'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The following command starts Ettercap in a sniffer mode:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see an output similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00060.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As you can see, Ettercap''s output is also very informative like Nmap''s output.
    Just press *q* when you want to stop Ettercap and it reports if it was terminated
    correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ettercap has acquired its popularity for the opportunity to perform ARP-spoofing
    attacks. Let''s assume that we want to use Ettercap to intercept traffic (man-in-the-middle
    attack) between a workstation which connects to a web interface on another workstation.
    Here''s an example of using Ettercap to perform an ARP-spoofing MitM attack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`--text`: This is the text mode user interface'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--iface eth0`: This is the used network interface'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--write traffic.pcap`: This is the dump of network traffic in PCAP file format
    (or you can use `-L log.txt` to log in Ettercap format)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--mitm arp:remote`: This is the MitM attack and its type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/172.16.0.91/ /172.16.0.102/`: Targets of the attack'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can see the intercepted HTTP traffic along with the login and password:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Exercise](../images/00061.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to learn more about Ettercap (and we believe you might, because
    it is a great tool) we recommend you, as always, read the official documentation
    and pay additional attention to the "etterfilters" functionality that significantly
    extends the power and abilities of Ettercap. You can get both descriptions of
    Ettercap and its etterfilters using the `man` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Metasploit Framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit is a great penetration testing tool that consists of hundreds of
    modules and exploits and allowing users to quickly write and integrate their own
    modules and extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Through written code (mainly in Ruby), Metasploit is cross-platform, that is,
    it has no specific reference to any OS.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit can be downloaded from the official website [http://www.metasploit.com](http://www.metasploit.com)
    and from the GitHub repository at [https://github.com/rapid7/metasploit-framework](https://github.com/rapid7/metasploit-framework).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download various versions of Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metasploit Framework**: This is for users of the Metasploit Framework command-line
    tools only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metasploit Community**: This is a limited-feature, community edition for
    students and small businesses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metasploit Pro**: This is the commercial edition for penetration testers
    and security professionals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will consider only the Framework version because it is fully
    functional and free. The functionality modules are divided into five categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Auxiliary**: This category contains tools for performing support of exploitation
    processes. It contains discovery modules, information gathering modules, scanners,
    servers, and many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploits**: This category contains modules for exploiting vulnerabilities.
    The exploits category divided on several platform subcategories, such as Windows,
    Linux, Solaris, OS X, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Payloads**: This category contains various types of payload, which can be
    used with exploits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoders**: This category contains tools to encode exploits and payloads
    to bypass security mechanisms of the target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post**: This category contains post-exploitation tools, which can be used
    when network connection with a target host is established, such as escalation
    of privilege, information gathering on remote hosts, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Metasploit has several main user interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: Shell (`msfconsole`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web interface (available in Community and Pro versions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party GUI (Armitage and more advanced Cobalt strike)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But the basic functionality of the Framework is implemented via the following
    executable files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msfrpc`: This is used for remote server implementation (based on remote procedure
    calling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfconsole`: This is the main utility for interaction with Metasploit via
    the console command line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfd`: This utility allows spawning of an instance of msfconsole and allows
    remote users to connect to and use it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfupdate`: This is an update utility'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfvenom`: This utility is used for creation of payloads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The standard user interface is an interactive console command line, which can
    be run by executing the `msfconsole` command. In this interface, the user can
    feel the power of Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Working with the Metasploit Framework consists of the following key steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering and vulnerability conditions identification (auxiliary
    modules).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting and configuring an exploit for remote target object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting and configuring the payload that will be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting and configuring the encoding that will be used to bypass security
    mechanisms (such as Intrusion Detection System).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploiting remote systems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maintaining access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-exploitation actions (post modules).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Metasploit is easy to use. It was created with the purpose to assist and facilitate
    the work of penetration testing specialists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most popular commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use`: This is used to select a module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search`: This command is used for searching modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show options`: These are used to view the settings of the module to configure.
    After selecting an exploit, you can see what options are available for customization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show payloads`: Metasploit comprises a lot of payloads. This command shows
    all the available payloads. By using this command, you can also see the recommended
    payloads for a particular operating system or exploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`: This is used to view information about the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set`: This command sets the parameters, for example, RHOST (remote), LHOST
    (local), or payload for exploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exploit`: This is used for module execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Metasploit Framework is really a very convenient way to show someone''s vulnerabilities,
    but unfortunately it is not possible to describe all the capabilities of Metasploit
    in one short review topic and it is beyond the scope of our book. If you decide
    to use Metasploit in your own work, we strongly recommend that you read the following
    books:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Metasploit Unleashed* by Offensive Security ([https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Metasploit Penetration Testing Cookbook* by Abhinav Singh ([https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook](https://www.packtpub.com/networking-and-servers/metasploit-penetration-testing-cookbook))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Metasploit* by Nipun Jaswal ([https://www.packtpub.com/networking-and-servers/mastering-metasploit](https://www.packtpub.com/networking-and-servers/mastering-metasploit))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning Metasploit Exploitation and Development* by Aditya Balapure ([https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development](https://www.packtpub.com/networking-and-servers/learning-metasploit-exploitation-and-development))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meterpreter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Meterpreter ([https://github.com/rapid7/meterpreter](https://github.com/rapid7/meterpreter))
    is a part of Metasploit and one of the most popular payloads in Metasploit. In
    the context of Metasploit, Meterpreter is a flexible, scalable, full-featured,
    and unified basis for post-exploitation, as an alternative to the classic shellcode.
    It has a lot of features: shell, migration processes, encryption to bypass intrusion
    detection systems, antivirus, DLL injection, pivoting, and automation possibilities.'
  prefs: []
  type: TYPE_NORMAL
- en: By the way, we can also use `metsvc` as the payload, which will install Meterpreter
    on a remote system as a service of the operating system on a remote Windows host
    (like a backdoor).
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful exploitation of the vulnerability on a remote host and loading
    the payload (Meterpreter in our case) in the interactive console of Metasploit,
    we obtain the full-featured console command line of Meterpreter and we can execute
    the command. All commands of Meterpreter can be divided into different categories
    (you can get this information by executing the `help` command):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core commands**: These are basic commands for Meterpreter session management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stdapi—filesystem commands**: These are commands for moving on remote filesystems,
    file manipulation commands, download and upload file commands, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stdapi—networking commands**: These are commands for displaying information
    about network components, viewing and modifying the routing table, and managing
    forwarding a local port to a remote'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stdapi—system commands**: These commands are useful for manipulating a remote
    system and processes of that system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not describe all commands of Meterpreter now, because it would require
    many pages of text. It is better to show a real-world example of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an example of Metasploit usage, we consider the case when Meterpreter is
    packed into an executable file that is executed at a Windows workstation of an
    incautious user. As a result, Meterpreter establishes a connection to a predefined
    IP address (the attacker''s machine) that allows an attacker to execute commands
    at the victim''s workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, let''s create our payload. For this, we should execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '-`p windows/meterpreter/reverse_tcp`: This specifies the payload we are going
    to use (for a full list of supported payloads, just execute the command `msfvenom
    –l payloads`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lhost=10.0.0.191`: This specifies the address of the attacker''s host to connect
    back to'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lport=8888`: This specifies the port number for connecting back'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a x86`: This specifies the architecture of the target system'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--platform win`: This specifies the platform of the target system'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-e x86/shikata_ga_nai`: This specifies the encoding algorithm to be applied
    to our payload in order to try to avoid detection by an antivirus software'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '-`i 3`: This specifies the required number of encoding iterations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-x calc.exe`: This specifies a custom executable file to use as a template'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f exe-only`: This specifies the output format'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`payload_fake_calc_enc.exe`: This is the output filename of our generated malicious
    executable'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of this command should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we have the `payload_fake_calc_enc.exe` file and we need to get this file
    to the victim host. You can just copy it there and assume that a victim/user has
    downloaded it from the Internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to start listening for incoming connections at the attacker's machine.
    To do this, run Metasploit Framework on the attacker's machine by executing in
    console command `msfconsole`. After few seconds, Metasploit will be loaded, started,
    and invite us to command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start listening, let''s choose the necessary module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the payload type for which connections to await:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should see the following confirmation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, we need to set a few options required by this certain payload (local
    address and port for listening):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Metasploit will confirm that both options are set:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start listening, we need to execute the `exploit` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If everything went well, we should see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'So, everything is set up and ready for an attack. Let''s execute our generated
    malicious file `payload_fake_calc_enc.exe` on the victim host. In the console
    of Metasploit, we will see something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To start interacting with the Meterpreter session, we need to execute the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, we will find ourselves in an interactive console of Meterpreter
    session. Now, we can execute commands inside our session, which will be executed
    on the remote victim host. For example, we need to execute the command `getuid`
    to see which user environment started our session and to get the identifier of
    our current process, we can use the `getpid` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These commands produce the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To escalate privilege, we can use the `getsystem` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command produces the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then check the result with the `getuid` command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we have system privileges which we can see from the command''s output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To list all processes running on the remote system, we can use the `ps` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output lists all running processes along with their identifiers and the
    other useful information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can also migrate to another process to avoid losing the connection of our
    malicious process. We can do it with the `migrate` command, specifying the target
    process identifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Meterpreter can also obtain hashes of the local user passwords on a hacked
    machine with the `hashdump` command (to successfully execute this command, we
    need to obtain system privileges before):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Meterpreter has a variety of functionalities and we can even take a screenshot
    of a victim''s desktop session with the `screenshot` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When executed successfully, it reports the path where the screenshot was saved
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To terminate a session when you are done with the victim, execute the `exit`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Armitage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is necessary to mention the graphical interface for the Metasploit Framework,
    which is called **Armitage**. It is a graphical interface for Metasploit Framework
    to simplify working with it. Armitage represents host targets in the visual mode
    and it also gives tips and recommendations for exploits in each case. For advanced
    users, Armitage offers remote management and cooperation with Metasploit sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Although Armitage is a graphical user interface that is mostly managed by a
    mouse, you cannot work completely without using the console. Thus, you have to
    learn how to use console commands anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Download the installation archive from the official website [http://www.fastandeasyhacking.com/](http://www.fastandeasyhacking.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, start Armitage by running the Armitage executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you will get the screen of Armitage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Armitage](../images/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The program's interface is simple enough to understand, and it does not pose
    any difficulty if you know how Metasploit Framework works.
  prefs: []
  type: TYPE_NORMAL
- en: Veil-Evasion framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any defense system can be cheated and this applies to anti-virus too. It is
    a question of time needed to bypass the defense. In this case, a tool that automates
    the process of creating an encrypted payload is very useful. The most popular
    tool for this purpose is Veil-Evasion framework. It works as an add-on to Metasploit
    that has a wide range of functionality and is easy to use. Its only drawback is
    that it is "from the box" and supported only in the Kali Linux operating system
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most obvious features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Modularity of framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All generated `msfvenom` payloads for Windows can be integrated into the Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu interface has been designed according to the principles of usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocompletion and autosubstitution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost all options have been well documented (`./Veil.py -h`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After successful installation of Framework on your workstation, you can execute
    it with a simple command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you are welcomed by the Veil-Evasion framework main menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To create an encrypted payload, you should perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the `use` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the list that appears, select the payload index that you want to generate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you should set the required options with the `set` command. After all
    the options are set, input the `generate` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, you need to choose which shellcode will be used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`msfvenom` (default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom shellcode string
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: File with shellcode (raw)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you choose `msfvenom`, it will ask you about which payload to use (for example,
    Meterpreter) and the options while generating shellcode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, Framework will ask you about the name of the output file that will
    be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end, Veil-Evasion framework shows the summary information about the
    generated payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This concludes our review of the Veil-Evasion framework. In the end, we suggest
    you to try it in action.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, hashing is a basic security mechanism of most IT services. Overall, hashing
    transforms data of arbitrary length into the output bit string of a fixed length
    in a non-recoverable way (that is why it also called a one-way conversion). Hashes
    are often used for authentication purposes (to store and compare hashes of user
    passwords instead of storing passwords in clear text what is insecure), for integrity
    control (checksums).
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, we cannot imagine technologies that do not use encryption. Therefore,
    the question of the restoration of hashed data is one of the most important in
    today's IT security world. In this section, we will look at some of the popular
    tools that can be useful in performing this security analysis.
  prefs: []
  type: TYPE_NORMAL
- en: John The Ripper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**John The Ripper** (**JTR**) is a free program designed to recover passwords
    from their hashes. The main purpose of the program is to audit weak passwords
    on Unix systems. The program can also perform an audit of NTLM hashes (Microsoft
    Windows), Kerberos, and others. There are a variety of implementations of JTR
    for different operating systems. JTR is popular because it supports a lot of hash
    types. Several additional types of hashes are available with the additional updates.'
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of JTR is available on the official website [http://www.openwall.com/john](http://www.openwall.com/john).
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation in Debian or Ubuntu Linux can be performed by the standard method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: To restore password from hash, just run JTR with the path to the file (that
    contains the hash) as an input parameter. JTR automatically detects the type of
    hash and starts the necessary procedures.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several modes of JTR for more efficient results:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single**: This mode is very fast, but this mode should be used only if we
    have usernames. Usernames are used as passwords with prepared rules that are stored
    in the configuration file of JTR. For this mode, we execute the command `john
    -single hashes.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wordlist**: In this mode, JTR uses a dictionary and rules. Here, we can use
    the rules in the configuration file (`john -w=dictionary.txt -rules hashes.txt`)
    and the rules of a particular file (`john -w:dictionary.txt -rules=Rules.txt hashes.txt`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incremental**: This is a bruteforce attack and not a straight style counter
    (that is not 1, 2, 3 ...), but it is based on rules. Rules are defined in the
    `*.chr` files. To run it in the incremental mode, use the command `john -i:Alpha
    hashes.txt`, where `Alpha` is a type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Builtin**: This is a bruteforce mode for the built-in set. For example, `john
    -i=uld8 -builtin = ld hashes.txt`, where `-i = uld8` indicates that it will use
    charset `uld` 8 characters long and `-builtin = ld` denotes that words are generated
    from a mixed set of letters and numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External**: Here, words will be generated in accordance with the rules described
    in the appropriate section of the configuration file. For example, `john -e=Paralel01
    hashes.txt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mask**: This is an attack based on mask. For example, `john -mask=\u\l\l\d\d\d
    hashes.txt` means words will be like `Abc123`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can choose the required mode in your own case as per your needs.
  prefs: []
  type: TYPE_NORMAL
- en: One of the important features of JTR is that it supports work sessions, so it
    is possible to run multiple instances of JTR and restore work after JTR stops.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, start JTR with the `-session=<SESSION NAME>` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, when working with the Metasploit Framework, we have received hashes
    of local user passwords. Let's try to carry out an attack on a hash to restore
    a password using JTR.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, first of all, let''s put the hash string of user John to a separate
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute JTR on this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the sixth line of output, we can see our password `12345678`. So, in our
    case, the password was weak and JTR restores it quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Hashcat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hashcat is a multifunctional tool for restoring passwords from their hashes.
    Hashcat became so popular thanks to the support of the vast number of algorithms
    of hashing data, speed of work, and ease of configuring and use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hashcat has the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Multithreaded
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross platform (Linux, Windows, and OS X)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 90 hashing algorithms (MD5, SHA1, NTLM, MySQL, WPA, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expandable attack modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JTR compatible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wide set of settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But the most important feature is the ability to work on graphical processors,
    which gives a significant boost in speed compared to the work of the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get Hashcat from the official website ([http://hashcat.net](http://hashcat.net)).
    In most popular Linux distributions, it is available in their repositories. For
    example, in Debian, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Hashcat contains many executable files with different prefixes and postfixes:
    `hashcat`, `oclHashcat`, `oclHashcat-plus`, `oclHashcat-lite`, and `cudaHashcat`.
    Each executable file performs its task, so you should choose one depending on
    your requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '`./hashcat`: This is the main program that uses the CPU. It is slow, but it
    supports the largest number of hashing algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prefix `ocl` (`oclHashcat`): It uses the GPU of ATI. It supports a limited
    amount of hashing algorithms and it has built-in support for dictionary attacks,
    mask attacks, and bruteforce attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prefix `cuda` (`cudaHashcat`): It is like prefix `ocl`, but it uses the GPU
    of NVIDIA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Postfix `plus` (`oclHashcat-plus`): It supports the largest number of hashing
    algorithms from all Hashcat(s) using GPU. It is optimized for dictionary attacks
    for many hashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Postfix `lite` (`oclHashcat-lite`): It is optimized for a single hash attack.
    The fastest executable Hashcat, but it supports a minimum number of hashing algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be noted that for `cuda` and `ocl` versions of Hashcat, we need to
    install appropriate proprietary drivers that support the conduct of GPU computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hashcat is executed with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hashcat [options] hashfile [mask|wordfiles|directories]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`options`: These are parameters such as attack mode, hash type, rules and others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hashfile`: This is the file on the local filesystem that contains the target
    hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask|wordfiles|directories`: This is the source of passwords'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can get the full list of Hashcat parameters by executing the `help` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, for speed benchmarking, we can use the `-b` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's repeat the restore procedure for the password of user John, as we did
    in the case of JTR, but using Hashcat. As in the case of JTR, first we need to
    put hash into a separate file, but the requirements of Hashcat are a little different.
    From the obtained hash string `John:1001:aad3b435b51404eeaad3b435b51404ee:259745cb123a52aa2e693aaacca2db52:::`,
    we need get only the NT part of the NTLM hash. It is the fourth field separated
    by a colon character hash string, that is, `259745cb123a52aa2e693aaacca2db52`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'And execute Hashcat on this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-m 1000`: This points out that this is a NTLM hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hashdump.hc`: This is the file that contains the hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passwords.list`: This is the dictionary file with passwords for iterating;
    in our case (for testing purposes), it contains the correct password for our hash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the executed command will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The output is informative enough and we can see our recovered password.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try to crack the WPA handshake which we obtained when we met with
    `aircrack-ng`. We have the WPA handshake in the `guest_dump-01.cap` file. Before
    we get started with Hashcat, we need to format the handshake in an acceptable
    form for Hashcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, first we need to clean the `*.cap` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Here
  prefs: []
  type: TYPE_NORMAL
- en: '`clear.cap`: This is the name of new cap-file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`guest_dump-01.cap`: This is the file that contained our handshake'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we need to convert the CAP file into a Hashcat format CAP file (`.hccap`).
    To do this, use the `aircrack-ng` command with the `-J` key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: As a result, we get the `output_file.hccap` file. Please note that the used
    *J* is in uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can execute Hashcat with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--force`: This ignores warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m 2500`: The hash type is WPA/WPA2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--session=session05`: This is the name of the session (for possible continuation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the text of the password was `Test!!!800`. At the beginning of
    the output, you can see which GPU is supported by the program. If you have multiple
    GPUs, even if they are not united, the software will detect them automatically.
    If the GPU is not found, you will have to check whether the proprietary drivers
    and additional libraries are installed.
  prefs: []
  type: TYPE_NORMAL
- en: Web application hacking tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Needless to say, with every new day web applications play a bigger role in the
    life of the modern Internet than they have ever played before and their security
    stays among the most important and complicated tasks for various companies.
  prefs: []
  type: TYPE_NORMAL
- en: Most of them are custom written proprietary applications developed without proper
    application security management processes in place and often without security
    considerations and controls. That is why probably the most demanded penetration
    testing service nowadays is web application security analysis and we are going
    to review the most popular tool used by web hackers and pentesters.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Burp Suite is a tool of the class called intercepting or attacking proxy, which
    allows its users to inspect and manipulate web traffic passing through it.
  prefs: []
  type: TYPE_NORMAL
- en: There are other free and non-free intercepting (attack) proxies available. However,
    the authors of this book got used to and stuck to Burp Suite, and that is why
    we are going to describe this framework.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main functions and capabilities of various attack proxies are the same (or
    at least, very similar), so you can treat the following Burp Suite review more
    or less as a review of the whole class of tools, rather than a certain software.
  prefs: []
  type: TYPE_NORMAL
- en: You can find comparisons of various attack proxies using Google search and choose
    the one that fits your needs best and is the most comfortable for you personally
    to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other alternative intercepting proxies that are worth trying could be:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP **Zed attack proxy** (**ZAP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP WebScarab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watobo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite is a cross-platform Java framework with various tools combined in
    one GUI, which works under any OS with appropriate Java software installed. One
    of the main advantages of the Burp Suit is its extensibility through a special
    API and numerous extensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two variants of Burp Suite available on the official website ([https://portswigger.net/burp/](https://portswigger.net/burp/)):
    free and Pro versions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The free version contains the same tools as the Pro version, but with limited
    capabilities and less automation. Those tools are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Intercepting proxy**: This allows you to review and modify web traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information aggregation tool**: This represents gathered information about
    targets in a convenient way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spider**: Spiders inspects all links and pages of target web resources to
    determine their structures and pass this information to the aggregation tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeater**: This allows us to send customized requests and analyze responses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intruder**: This is the attack automation and customization tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decoder**: This is helpful to encode-decode character blocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sequencer**: This analyzes the entropy of various tokens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Comparer**: This compares requests and responses in a convenient way'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extender**: This allows installation and management of numerous Burp extensions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When talking about the most significant distinctions between the free and Pro
    versions, the Pro version also allows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Carrying out passive security analysis of web traffic and active web vulnerability
    scans using the Scanner tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and restoring framework state including all requests and responses (especially
    useful for big projects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using various built-in attack payloads for automated attacks with the Intruder
    tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing search and various analysis types of targets and captured web traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking advantage of a better performance in the Intruder tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing some extensions available only for the Pro version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After introducing Burp Suite, we would like to show you an example of a sample
    web application testing. Let's work with DVWA in our lab environment. We assume
    that you have already downloaded and started a free version on an attacking machine.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another useful tool for web pentesting is a **proxy switching browser extension**.
    Since most of the web application testing activities are done in a browser, it
    is not very convenient to always change browser or OS settings when you need to
    switch between proxies or turn off passing traffic through a proxy at all. The
    better and faster way is to have a button on a toolbar provided by special browser
    extensions. We use the FoxyProxy extension for Mozilla Firefox and Google Chrome
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the example:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the DVWA VM and set the appropriate network interface settings according
    to the way your attacking machine is connected to the lab environment (in our
    case, we don't start the whole lab network but just start the DVWA VM with an
    interface in host-only mode and attack it from the host machine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Burp Suite, go to **Proxy** | **Options**, and check if there is an activated
    proxy listener on `localhost:8080` (activate it if not). It should look like this:![Example](../images/00063.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Proxy** | **Intercept** tab and check whether the **Intercept**
    button is selected. It will intercept web requests instead of just recording them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure a local proxy on port 8080 in your browser or create and activate
    it in the FoxyProxy browser extension:![Example](../images/00064.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open DVWA in browser with the `http://10.0.0.5/DVWA` link and you will see the
    request in Burp:![Example](../images/00065.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just inspect the request and turn interception off. It will allow to forward
    the next request to its target and not intercept the following requests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the application in the browser, switch to the **Proxy** | **HTTP History**
    tab in Burp, find the initial request to DVWA in the list, right-click on it,
    and click on **Add** to scope in the context menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Target** tab. Here, you will see domains and hosts (targets) that
    your browser has requested since you have started intercept. On the **Target**
    | **Scope** tab, you will see which targets are currently added to the scope of
    your security assessment. Check whether `10.0.0.5/dvwa/` is among them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you can make Burp hide everything that is not in the scope. It will still
    capture all web traffic, but it will not bother you by displaying it. To hide
    everything not in scope, just click on the filter line under tab menu and select
    the **Show only in-scope items** checkbox:![Example](../images/00066.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the **Proxy** | **HTTP history** tab.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Turn intercept on again and log into DVWA with empty credentials and go to the
    **Proxy** | **Intercept** in Burp. You will see the `username` and `password`
    parameters without values in the `POST` request body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the request body and choose **Send to intruder** in the context
    menu. Switch to the **Intruder** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will perform a dictionary guessing attack on the authentication subsystem
    of DVWA. We will try to guess the correct credentials. Go to the **Positions**
    subtab and click on the **Clear §** button to reset all positions suggested by
    Burp.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor after `username=` and type in the `§` character twice or click
    on the **Add §** button twice. Do the same with the password parameter. You should
    have the following:![Example](../images/00067.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the attack type **Cluster bomb** and go to the next **Payloads** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add several words to the **Payload Options** section and add the real DVWA username
    too:![Example](../images/00068.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the payload set to 2 and add several words for the password payload,
    including the real password:![Example](../images/00069.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Options**, scroll down, and select the **In-scope only** radio button
    in the **Redirections** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, scroll back up and click on the **Start attack** button in the top-right
    corner and a new window will open. It will show you the progress of the attack
    and all sent and received requests and responses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sort the list by response length by clicking on the corresponding column and
    you will see which payloads have succeeded (successful logon and failure responses
    will be of different lengths in the current example):![Example](../images/00070.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authentication credentials are guessed! Of course, in real projects you
    will not have a guarantee that correct credentials are in your payload list, so
    the success of an attack will depend on your dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: It was just a quick and short lab example, but there are numerous ways of intercepting
    proxy utilization and they are different for different targets. Take your time
    and properly learn manuals for the tools that you choose for work.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you saw an overview of several popular security assessment
    toolkits used in numerous hacking tasks and projects along with examples of their
    utilization in the lab environment. You now have a brief understanding of their
    capabilities and a foundation for further learning.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from that, there are a variety of other frameworks and standalone tools
    for almost every task that a penetration tester can encounter or imagine during
    a project. So, do not hesitate to explore new tools when you have time and try
    them in your lab—that is one of the reasons why you have built it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a huge number of tools for wireless security analysis, yet sometimes
    it is hard to find one on the Internet when needed. But there is a repository
    that we recommend you to visit: [https://github.com/0x90](https://github.com/0x90).
    It has a collection of a massive amount of software and scripts in one place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are new to penetration testing and still not sure which tools should
    be in your arsenal, a good place to start is getting a preinstalled penetration
    testing distribution already containing most of the necessary tools. Normally,
    we use Kali Linux as a distribution, but there are a lot of others:'
  prefs: []
  type: TYPE_NORMAL
- en: Parrot Security OS ([http://www.parrotsec.org/](http://www.parrotsec.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pentoo ([http://www.pentoo.ch/](http://www.pentoo.ch/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matriux ([http://www.matriux.com/](http://www.matriux.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BackBox Linux ([https://www.backbox.org/](https://www.backbox.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackArch Linux ([http://blackarch.org/](http://blackarch.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Samurai Web Testing Framework ([http://samurai.inguardians.com/](http://samurai.inguardians.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will help you prepare your wireless hacking station
    and show you which tools you have to deploy to be prepared for a wireless penetration
    test.
  prefs: []
  type: TYPE_NORMAL
