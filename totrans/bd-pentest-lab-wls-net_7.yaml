- en: Chapter 7. Preparing a Wireless Penetration Testing Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is always necessary to be well prepared for a penetration test and have
    all your tools installed and your scripts tested to not lose valuable project
    time on downloading and making everything work. This is especially true when you
    don''t have Internet access working on-site. In this chapter, we will help you
    to prepare for a wireless pentest exploring the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Commonly known variants of pentesting platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a suitable Wi-Fi hardware interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing necessary Wi-Fi penetration testing software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing important configuration files and scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a bootable pentesting USB stick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common variants of the pentesting platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Preparing a penetration testing platform is not a complicated topic, but it
    should be properly considered in order to produce good results for your work.
    Normally, such a platform is based on a laptop, but not necessarily a specially
    prepared laptop. We consider three main options to prepare a pentesting platform
    and you can choose whichever you like:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Linux and all necessary tools (or just a prepared pentesting distribution)
    as the main or second operating system on a laptop's hard drive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a virtual machine with all necessary tools installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a bootable USB stick with a special penetration testing Linux distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we talk about a Wi-Fi penetration testing machine, we always assume Linux
    OS by default. It does not mean that Windows or Mac OS cannot be used for that
    purpose. In our opinion, Linux is the most convenient OS for Wi-Fi penetration
    testing because it allows you to work with hardware interfaces on a low level
    without a lot of additional, sometimes commercial, software or hardware.
  prefs: []
  type: TYPE_NORMAL
- en: The process of preparing a Mac OS should be more or less similar to Linux and
    the only problem for us is Windows. The Wi-Fi penetration testing tools that we
    saw under Windows are distributed as shareware or work only with special devices
    that cost a lot, while everything that we use under Linux is free and open source.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Linux is a simple topic already described a lot of times, so we will
    not repeat it here and we will just mention that the processes of installing it
    on physical and virtual machines are similar. It is mostly dependent on the availability
    of drivers for your hardware. In this chapter, we will help you to choose the
    right software and give you some automation hints for your future pentesting platform.
  prefs: []
  type: TYPE_NORMAL
- en: Using a virtual machine is a convenient option, especially if your main system
    is Windows and a physical Wi-Fi USB interface used for testing can be forwarded
    to the VM with the standard VirtualBox's USB forwarding feature. But as our experience
    shows, it cannot always be reliable and work well. That is why we would recommend
    using this option only when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Using a USB stick with a prepared pentesting distribution is a very good option
    when you use the system only for tests and do not want to change the main OS of
    the laptop, or you don't have full control over the laptop (for example, when
    you use somebody's else laptop).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will tell you which software you will most probably need
    and how to install it. We will prepare some configurations and scripts for your
    pentesting platform and also show you how to create a bootable Kali Linux 2.0
    USB stick. First, let's see how to choose a physical Wi-Fi interface suitable
    for penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start preparing an instance, we need to care about a hardware Wi-Fi
    interface as probably the most important part of the pentesting platform. There
    are three main criteria for hardware Wi-Fi interfaces important for penetration
    testing and thus influence our choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chipset**: The chipset of a Wi-Fi interface should be able to support packet
    injection mode, which allows us to interact with an interface on a low level and
    customize transmitted packets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Power and sensitivity**: This parameter determines the distance between you
    and your targets—the higher the power and sensitivity, the farther you can stay.
    But you should take into consideration that higher power consumes more energy
    and shortens a laptop''s battery life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proportions**: This parameter does not influence the quality of penetration
    testing, but it influences the ease of your work. The bigger an interface and
    the more wires you have, the less comfortable it is to use on-site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s review two typical hardware interface options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in laptop interface**: In some cases, you can use a laptop''s built-in
    Wi-Fi interface, especially if you install OS and software on a host, not a VM
    instance or use a bootable USB stick.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage is that it can save you some money on buying an additional interface
    and makes the whole platform more compact and less suspicious (a laptop with some
    strange wires and devices or external interfaces always brings more unnecessary
    questions if somebody operates it in public). Suspiciousness is actually less
    important for us, because we act as ethical hackers with permission to attack,
    but the comfort of work is usually very valuable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The disadvantage is that such interfaces almost always have poor signal strength
    and can have a chipset that does not support the necessary mode and features,
    so they're not applicable for penetration testing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**External USB interface**: Typical external USB interface form factors are
    dongles that should be inserted directly into a USB port or a device that should
    be connected to a USB port with a cable. Often, external USB interfaces also have
    external removable antennas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantage is that this type of interface usually provides better transmitting/receiving
    capabilities and has higher signal power and sensitivity. In contrast to built-in
    interfaces, UBS interfaces are easily changeable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The disadvantages of external Wi-Fi interfaces are additional cost, higher battery
    consumption, and reduced work comfort.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you choose an interface, the most important parameter should be the chipset.
    If it does not support packet injection mode, you don't need it. The other two
    criteria we leave to your taste.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily find lists of chipsets that support packet injection mode on
    many websites and forums in Internet, but we would recommend you first get familiar
    with the manuals written by the Aircrack-ng team at their website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.aircrack-ng.org/doku.php?id=compatible_cards](http://www.aircrack-ng.org/doku.php?id=compatible_cards)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.aircrack-ng.org/doku.php?id=compatibility_drivers](http://www.aircrack-ng.org/doku.php?id=compatibility_drivers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our experience, the most popular suitable chipsets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Atheros AR9271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralink RT3070
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ralink RT3572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realtek 8187L
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you don''t want to spend time on comparing various Wi-Fi interfaces and
    their parameters, we can recommend our favorites from the company Alpha Network:'
  prefs: []
  type: TYPE_NORMAL
- en: Alfa AWUS 036 H on RTL8187 chipset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alfa AWUS 036 NHR (v.2) on RTL8188RU chipset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TP-Link TP-WN722N is a very good USB dongle interface. You can see all those
    three interfaces in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing an interface](../images/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our "workhorses" for Wi-Fi pentesting
  prefs: []
  type: TYPE_NORMAL
- en: 'If you already have a Wi-Fi interface and you are not sure if it supports the
    packet injection mode, you can test it with the Aircrack-ng suite using the following
    manual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.aircrack-ng.org/doku.php?id=injection_test](http://www.aircrack-ng.org/doku.php?id=injection_test)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the necessary software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The provided information should be enough to successfully choose an interface
    and we can move on to the software part of preparing a Wi-Fi hacking platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that you have already installed a Debian-based Linux distribution
    on a hard drive or on a VM and want to prepare tools for a Wi-Fi penetration test.
    Here''s the list of the necessary tools which we recommend you install first:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aircrack-ng suite**: This is a great wireless hacking toolkit, which we have
    reviewed in [Chapter 6](part0042_split_000.html#181NK2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 6. Exploring Hacking Toolkits"), *Exploring Hacking Toolkits*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostapd**: This is the software for installing rogue access points. It works
    well for WPA-Enterprise attacks when used with FreeRADIUS-WPE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hostapd-WPE**: This is the software for installing rogue access points and
    mounting various attack types, including attacks on WLANs protected with WPA-Enterprise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FreeRADIUS-WPE**: This is a modification of the FreeRADIUS software that
    we have used to secure our WLAN. This modification saves usernames and password
    hashes in a log file during RADIUS authentication. It is now obsolete, and Hostapd-WPE
    is recommended instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mana**: This is the toolkit for attacking wireless clients (we have also
    reviewed it in [Chapter 6](part0042_split_000.html#181NK2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 6. Exploring Hacking Toolkits"), *Exploring Hacking Toolkits*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSLstrip**: This is the utility from the famous guy Moxie Marlinspike for
    man-in-the-middle attacks on SSL connections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wireshark or tcpdump**: These are great tools for network traffic analysis,
    which is a standard for the majority of pentesters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reaver**: This is a useful tool for attacking WPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap**: This is a popular network scanner, another well-known tool valued
    by thousands pentesters all over the world (you will already be familiar with
    it from [Chapter 6](part0042_split_000.html#181NK2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 6. Exploring Hacking Toolkits"), *Exploring Hacking Toolkits*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wifite**: This is a Python script that automates Wi-Fi hacking tasks. It
    requires Aircrack-ng to be installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WiFi Honey**: This is a bash script for Wi-Fi hacking automation, and it
    also requires Airckrack-ng.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**coWPAtty**: This is a WPA-PSK cracking software that is able to crack with
    a regular dictionary attack and also using a precomputed PMK file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dnsmasq**: This is a DNS and DHCP server software that will be useful for
    rogue APs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list can be extended and you probably will have your own favorite useful
    tools that were not included (for example, Karmetasploit), but the tools listed
    here are the essential ones that we use in our regular work. Needless to say that
    you can always install whichever tools you consider you need or would like to
    try.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the software from our list can be installed using `apt-get` with the
    following command combination:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The parameter `-y` makes `apt-get` assume that you answer `yes` to all installation
    prompts so it does not bother you several times.
  prefs: []
  type: TYPE_NORMAL
- en: 'But you need to download and install the other tools manually. In the following
    table, you can find the links to the official sources of the other software distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tools | Sources |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| FreeRADIUS-WPE | [https://github.com/brad-anton/freeradius-wpe](https://github.com/brad-anton/freeradius-wpe)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Hostapd-WPE | [https://github.com/OpenSecurityResearch/hostapd-wpe](https://github.com/OpenSecurityResearch/hostapd-wpe)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Mana Toolkit | [https://github.com/sensepost/mana](https://github.com/sensepost/mana)
    |'
  prefs: []
  type: TYPE_TB
- en: '| WiFi Honey | [https://digi.ninja/projects/wifi_honey.php](https://digi.ninja/projects/wifi_honey.php)
    |'
  prefs: []
  type: TYPE_TB
- en: '| coWPAtty | [http://www.willhackforsushi.com/?page_id=50](http://www.willhackforsushi.com/?page_id=50)
    |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find additional information on installing and using a lot of wireless
    penetration testing tools in the book *Kali Linux: Wireless Penetration Testing
    Beginner''s Guide*, *Vivek Ramachandran and Cameron Buchanan*, *Packt Publishing*
    ([http://www.amazon.com/Kali-Linux-Wireless-Penetration-Beginners/dp/1783280417](http://www.amazon.com/Kali-Linux-Wireless-Penetration-Beginners/dp/1783280417)).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with installing FreeRADIUS-WPE. Although it is already obsolete,
    we have used it a lot and still appreciate it, thus we want to show you how to
    install and configure it in case you want to try it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we use a Debian-based Linux distribution, you can download the latest
    available `.deb` file `freeradius-server-wpe_2.1.12-1_i386.deb` ([https://github.com/brad-anton/freeradius-wpe/raw/master/freeradius-server-wpe_2.1.12-1_i386.deb](https://github.com/brad-anton/freeradius-wpe/raw/master/freeradius-server-wpe_2.1.12-1_i386.deb))
    and install it using the DPKG packet manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'FreeRADIUS-WPE is now installed and you can check it by typing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To run FreeRADIUS-WPE server, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: But before you run it, you need to prepare certificates and change configuration
    files according to your target WLAN parameters. We will discuss it in the next
    topic. Now, let's proceed with installing Hostapd-WPE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Hostapd-WPE actually means patching Hostapd 2.2 with a special patch
    that adds attack functionality to it. So, we first need to install Hostapd itself.
    It can be installed from a repository with `apt-get`, but the current available
    version is v.2.1 whereas we need v.2.2\. So we need to download v.2.2 directly
    from the website and install it manually, but it requires some prerequisites to
    be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, download and unpack the necessary files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go into the new directory and patch Hostapd:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, go into the `hostapd` directory and use the `make` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The software is now installed. To start it, run the following command from
    the directory `hostapd-2.2/hostapd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can find the results of authentication attempts in the `hostapd-wpe.log`
    file in the same directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you work with Wi-Fi interfaces in Debian-based Linux, you will experience
    trouble because of interference with the networking service. To avoid this, edit
    its configuration file, `/etc/NetworkManager/NetworkManager.conf`, and append
    the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `xx:xx:xx:xx:xx:xx` is the hardware address of your Wi-Fi interface (you
    can find it, for example, in the output of the command `ifconfig -a`).
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you need to restart the networking service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will exclude your Wi-Fi interface from the devices managed by the networking
    service and will get rid of interference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we recommend checking interference with other services and software
    using the `airmon-ng` feature `check`. If you add `kill` to the command, it will
    also kill all possibly interfering processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it is Mana''s turn. Start with downloading the Mana archive from GitHub
    and unpack it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go into the Mana directory and edit the installation script for Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can update packages info and run the installation script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It will show you a warning that the installer assumes you use Ubuntu 14.04.
  prefs: []
  type: TYPE_NORMAL
- en: This script will automatically install all necessary dependencies and you just
    need to answer `yes` during the installation and it will do everything. Now, the
    Mana Toolkit is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'WiFi Honey does not need an installation. But it requires the prerequisite
    software Screen and Aircrack-ng to be installed. We have already installed Aircrack-ng
    and you can install Screen with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, just download the archive, put it into the directory you prefer, and
    unpack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And make it executable with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: WiFi Honey is ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last software in our list is coWPAtty. First, we need to install OpenSSL
    and libpcap, which are required by coWPAtty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can download the latest version archive from the official website
    to a folder you prefer and unpack it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go into the directory and compile coWPAtty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It should compile coWPAtty in the same directory where you can start it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have finished with the software installation and can go to the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing configs and scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed the necessary tools in our Wi-Fi pentesting system, but it
    is just a part of the preparation work. In order to be able to use some of them,
    we need to prepare some configuration files and develop a script to automate some
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might need to tweak some of the configs and scripts given in this chapter
    in order to make them work with your hardware and software setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to start with Hostapd. We mostly use it in two situations: when
    we need to install a fake AP to attack clients'' traffic and to set an AP with
    FreeRADIUS-WPE when we attack WPA-Enterprise protected networks.'
  prefs: []
  type: TYPE_NORMAL
- en: Standalone Hostapd-based APs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install a rogue AP for client traffic or phishing attacks you can use Hostapd
    in a standalone mode without connecting it to a RADIUS server. Mostly, we need
    it open, but sometimes there are situations when we need it to be WPA/WPA2 protected,
    for example, when you need to imitate a certain WPA/WPA2-protected AP. Thus, we
    should prepare two configuration file templates for both situations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the content of `open.conf` for an open AP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the content of `wpa.conf` for a WPA2-protected AP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you use those templates, you need to modify some values for a certain
    situation:'
  prefs: []
  type: TYPE_NORMAL
- en: Driver value should be changed to the one corresponding to your Wi-Fi interface
    (in terms of Hostapd, you can get it from the sample configuration file, distributed
    with Hostapd)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interface value should be changed to the name of your Wi-Fi interface if it
    is not connected as `wlan0`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need the `ssid` value to change the WLAN's name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The channel can have any value between 1 and 11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need the WPA passphrase if you are setting up a WPA-protected AP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can then start an AP with Hostapd and one of the previously mentioned configs,
    for example, `open.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In your Linux terminal, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standalone Hostapd-based APs](../images/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Starting an open AP
  prefs: []
  type: TYPE_NORMAL
- en: 'At the same time, you can see your open WLAN in the list of available networks
    on another device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standalone Hostapd-based APs](../images/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our open AP is listed among available WLANs
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any trouble with an AP on Hostapd, the option `-d` can be very helpful.
    It makes Hostapd display debug information in the terminal. The option `-f` will
    forward debug output into a file instead of standard output. You might want to
    also use `-t` and `-K` options to include some additional information in debug
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go further and prepare a configuration for a DHCP server in order to
    use it to make your rogue APs more attractive and real. We use the Dnsmasq software
    to set up a DHCP server and it needs a configuration file, `/etc/dnsmasq.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You need to change the interface parameter value if your Wi-Fi interface is
    not `wlan0`. With the DHCP options 3 and 6, we set the IP addresses of a router
    and a DNS server to be distributed in DHCP responses. With the last two lines,
    we configure log output to be able to debug our setup in case of problems.
  prefs: []
  type: TYPE_NORMAL
- en: Automating the AP setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, during a penetration test you do not want to spend time on changing
    configuration files and you could forget to change some parameters. Therefore,
    it is wise to automate the process. We have prepared a bash script, `hostapd_auto.sh`,
    for you, which automatically creates a temporary configuration file containing
    necessary parameters and then starts Hostapd with this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You just need to make the script executable (`chmod +x hostapd_auto.sh`) and
    start it without parameters to see the possible options. It will automatically
    delete the temporary configuration file when you stop Hostapd. Don't forget to
    use `sudo` when you start the script, because it will need to change system parameters
    requiring root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration for WPE-Enterprise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's talk about a scenario with a WPE-Enterprise-protected WLAN. For that
    scenario, we need to use either Hostapd and FreeRADIUS-WPE, or Hostapd-WPE. In
    the first case, you'll need to configure a RADIUS server and create an additional
    configuration file for Hostapd.
  prefs: []
  type: TYPE_NORMAL
- en: But first, it does not matter what you use, you need to configure RADIUS certificate
    parameters and create certificates before you start attacking WPA-Enterprise-protected
    WLANs in both cases with FreeRADIUS-WPE and also with Hostapd-WPE. This can be
    done by changing the parameters in the `[certificate_authority]` section of the
    `ca.cnf` file and the `[server]` section of the `server.cnf` file. Depending on
    your tasks, you will probably want to also change the values in the `[client]`
    section of the `client.cnf` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting the parameters to the values corresponding to the same parameter values
    of your target WLAN will make attacks less visible and less suspicious. Just execute
    the bootstrap script from the same directory to generate certificates after changing
    all necessary parameter values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration process of FreeRADIUS-WPE is similar to the configuration
    process of FreeRADIUS described in [Chapter 5](part0038_split_000.html#147LC2-3ecab517ca6e4afbb3c20ab15f7b4d82
    "Chapter 5. Implementing Security"), *Implementing Security*. Thus, we will not
    describe it in this chapter, but we will show you a configuration file, `wpa-e.conf`,
    that allows Hostapd to work together with FreeRADIUS-WPE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, you will need to change the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `interface` and `driver` parameters and set values according to your
    hardware Wi-Fi interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the `ssid` parameter. It should be identical to the SSID of your target
    WLAN.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change `auth_server_shared_secret` that is the secret (passphrase) for connecting
    Hostapd to the RADIUS server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last three lines configure logging; you can comment them and use them when
    you need to debug your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can start FreeRADIUS-WPE first and then Hostapd to have a WPA-Enterprise-protected
    AP. But you can also do it with just Hostapd-WPE using a configuration file with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: But like Hostapd, Hostapd-WPE is distributed along with a sample configuration
    file called `hostapd-wpe.conf`, which contains information about all possible
    parameters as well as their default values. You can just change the `interface`
    and `ssid` parameters in this file and use it. Anyway, we recommend you look through
    it to understand how to create your own configuration files or modify existing
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As an exercise, you can modify the automation script from the previous subtopic
    to make it also work with the WPA-Enterprise configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a Kali USB stick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All that's written in the preceding sections is interesting for people who want
    to have a "clean" penetration testing platform with only the tools they have chosen
    and installed. But in the most cases, it is not necessary and we would say is
    often not worth the time you can spend on it. The convenient solution in this
    case is using a prepared penetration testing distribution. We have already mentioned
    it in the beginning of the chapter when we talked about a VM, but let's review
    the process of creating a **bootable penetration testing USB stick**.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we will show you how to create a bootable USB stick with the
    Kali 2.0 penetration testing distribution on both Windows and Linux systems. If
    you want to do it quickly and you don't want additional complexity on your USB
    stick, we would recommend creating it under Windows. But if you want to create
    a **persistent encrypted USB stick**, you will need to use Linux and do everything
    manually. We recommend this because the software that we use for image recording
    under Windows creates only one partition on a USB drive, and you'll need to have
    three partitions in the case of a bootable USB with encrypted persistent storage.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to have a USB drive with at least an 8 GB capacity for an encrypted
    persistent storage.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a USB stick under Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the simplest option and create a non-persistent USB stick under
    Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to have a persistent USB stick, you can directly proceed to the
    next subtopic and see how to create it under Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use the **Universal USB Installer** (**UUI**) software ([http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/](http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/))
    for image recording. We assume you have already downloaded the latest version
    of the Kali Linux 2.0 image from the official website and started UUI. The process
    is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the desired Linux distribution from the drop-down menu, as it is shown
    in the following screenshot:![Creating a USB stick under Windows](../images/00074.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a bootable Kali USB stick
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the OS image file you want to record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the target USB disk from the drop-down menu. If it does not show your
    USB drive in the drop-down menu, set the **Show all drives** checkbox and it will
    show all system-available drives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option to format the USB drive before recording and click on **Create**.
    Your settings should look like this:![Creating a USB stick under Windows](../images/00075.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Final UUI settings for Kali USB stick image recording
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The software will show you the summary of what it is going to do and will ask
    you again if you agree with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Agree and wait until the recording process is finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enjoy your bootable Kali Linux 2.0 USB stick.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Alternatively, you can use Win32 Disk Imager to write bootable images to a USB
    stick or a disk. You can download the software from [https://sourceforge.net/projects/win32diskimager/](https://sourceforge.net/projects/win32diskimager/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a USB stick under Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you decide that you want to have an encrypted persistent USB stick or you
    just use Linux and not Windows normally, we will show you how to create a Kali
    USB stick under this system. You can also use a Linux VM with a USB forwarding
    feature on Windows if you don't have Linux installed as a host system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have downloaded a Kali image file called `kali-linux-2.0-amd64.iso` and
    if yours has the same name, you can leave it like that in the following guide.
    But if it has a different name, make sure to replace it in the commands you enter.
    The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert a USB drive or attach it to a VM. Find out the device name of the USB
    stick with `fdisk -l` (use `sudo` if necessary). In our case, it is `/dev/sdb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the cloning `dd` command in Linux to copy the image to the USB drive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Wait until the image is fully copied to the USB drive. Depending on your software
    and hardware setup, it can take some time. In our case (using a VirtualBox VM
    with only USB 1.0 support), it took almost 20 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the process is finished, you will see a summary of how many bytes were
    copied and how much time it took. The image recording is finished at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can run `fdisk -l` again to check the partitions on the USB drive. There
    should be two partitions:![Creating a USB stick under Linux](../images/00076.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Information about partitions on a bootable Kali USB stick
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can boot from your newly created Kali Linux 2.0 USB stick using any
    laptop; this is especially convenient if you travel a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Making an encrypted persistent partition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Having a bootable Kali USB stick is convenient, but it has a big disadvantage:
    you cannot save anything in the system to keep after a reboot. Even system settings
    will be reset to default every time you reboot. It is especially awkward when
    you need to save project data in order to process it later on another computer,
    for example, crack hashes at a special powerful cracking server. In this subtopic,
    we are going to fix this issue and make our USB drive able to store our data.
    The manual is based on an official manual from the Kali Linux team, but we think
    some additional comments will help you.'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping in mind the fact that ethical hackers almost always work with sensitive
    customer data that has to be treated carefully, and USB drive is a small thing
    that is easy to lose, we will also secure it with encryption against unauthorized
    reading using Cryptsetup software. The idea is not to encrypt the whole USB stick,
    but to create an additional partition on it where you will keep your data **persistent**
    and **encrypted**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have used a USB drive larger than 4 GB, there should be some unallocated
    space left after recording the Kali image on it. We will use this space for our
    persistent partition. The steps are as follows (we will continue doing it on a
    Kali Linux VM):'
  prefs: []
  type: TYPE_NORMAL
- en: Insert the USB drive and check the partitions with `fdisk -l`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the space occupied by Kali image in bytes (it is 3,167 in our case):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the third partition on the USB drive starting right after Kali image
    (use your Kali image size value):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Say **Yes** if parted offers you another allocation and ignore the following
    warning. The process should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Making an encrypted persistent partition](../images/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The partition creation process
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Check the partitions again with `fdisk -l` and you should see the new one (`/dev/sdb3`
    in our case).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prepare a strong password and then continue encrypting the new partition with
    the `cryptsetup` software. The following prompt can be seen on the screen, and
    install it if you don''t have it yet (`sudo apt-get install cryptsetup-bin`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the new partition with the mapping name `kali_stor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, build a filesystem labeled `persistence` on the new partition. The filesystem
    type should be `ext3` (this process can also take several minutes):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, you need to mount the new filesystem. However, to be able to do it, first
    you need to create a mount point in `/mnt/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a `persistence.conf` file in `/mnt/kali_stor` with the content
    `/ union`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, you can unmount the storage and encrypt it (close):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's check the persistent storage. Unplug the USB drive from the Linux machine
    and boot from it. When you boot, choose the **Live USB Encrypted Persistence**
    boot option and enter your encryption passphrase when prompted:![Making an encrypted
    persistent partition](../images/00078.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kali Linux 2.0 USB stick boot menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When Kali starts, create a file on the desktop with random content and reboot.
    The file should still be there after reboot, which means persistence works well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to prepare a "battle" laptop for wireless penetration
    testing, listed the criteria for choosing a Wi-Fi interface, reviewed the list
    of the necessary software, and developed the useful scripts and configuration
    files to speed up the active phase of penetration tests. Now, you can load your
    device and start pentesting. Before you start with a project, we strongly recommend
    you learn how to use the tools and practice using them in your lab—that is what
    it's for!
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you are almost ready to start learning penetration testing and
    practicing it in your lab, but one thing is still missing. We are going to cover
    it in the final chapter: suggested next steps for your further penetration testing
    skills development.'
  prefs: []
  type: TYPE_NORMAL
