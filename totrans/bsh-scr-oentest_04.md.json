["```\n variable_name=value\n```", "```\n my_variable=\"Hello, World!\"\n```", "```\n current_date=`date`\n```", "```\n current_date=$(date)\n```", "```\n ~ $ ./myscript.sh arg1 arg2 arg3\n```", "```\n #!/usr/bin/env bash\nmy_string=\"Welcome to Bash Scripting for Pentesters!\" echo $my_string\n```", "```\n Welcome to Bash Scripting for Pentesters!\n```", "```\n #!/usr/bin/env bash\nname=$1\nage=$2\necho \"Hello $name, you're $age years old!\"\n```", "```\n ~ $ bash ch03_variables_02.sh Steve 25\nHello Steve, you're 25 years old!\n```", "```\n #!/usr/bin/env bash\na=5\nb=3\nc=$((a + b))\nlet d=a+b\nlet e=a*b\necho \"a = $a\"\necho \"b = $b\"\necho \"c = $c\"\necho \"d = $d\"\necho \"3 = $e\"\n```", "```\n ~ $ bash ch03_variables_03.sh\na = 5\nb = 3\nc = 8\nd = 8\n3 = 15\n```", "```\n my_var=\"Hello, World!\" export my_var\n```", "```\n export MY_DEEP_DIRECTORY=\"/this/is/a/very/long/path/that/I/use/often\"\n```", "```\n export PATH=$PATH:/path/to/my/program\n```", "```\n #!/usr/bin/env bash\n# What is the name of this script? echo \"The name of this script is $0.\" # Assign command line arguments to variables\nname=$1\nage=$2\n# Use the first two parameters. echo \"The first argument was $1, the second argument was $2.\" # How many parameters did the user enter? echo \"The number of parameters entered was $#.\" # What is the current process ID? echo \"The current process id of this shell is $$.\" # Print the array of command line arguments. echo \"The array of command line arguments: $@\"\n```", "```\n ~ $ bash ch03_variables_04.sh \"first arg\" 2nd 3rd fourth\nThe name of this script is ch03_variables_1.sh. The first argument was first arg, the second argument was 2nd. The number of parameters entered was 4. The current process id of this shell is 57275. The array of command line arguments: first arg 2nd 3rd fourth\nThe first argument is: first arg\nThe second argument is: 2nd\nThe first and second arguments are: first arg 2nd\n```", "```\n ~ $ ls -l ch03_variables_04.sh\n-rw-r--r-- 1 author author 714 Mar 20 09:28 ch03_variables_04.sh\n```", "```\n ~ $ chmod +x ch03_variables_04.sh\n~ $ ls -l ch03_variables_1.sh\n-rwxr-xr-x 1 author author 714 Mar 20 09:28 ch03_variables_04.sh\n```", "```\n ~ $ ./ch03_variables_04.sh 1 2 3 4\n```", "```\n #!/usr/bin/env bash\nUSER=\"$1\"\nif [ $USER == 'steve' ]; then\n  echo \"Welcome back, Steve!\" fi\n```", "```\n if [ \"$USER\" == 'steve' ]; then echo \"Welcome back, Steve!\"; fi\n```", "```\n #!/usr/bin/env bash\nUSER=\"$1\"\nif [ $USER == 'steve' ]; then\n  echo \"Welcome back, Steve!\" else\n  echo \"Access denied.\" fi\n```", "```\n ~ $ bash ch03_conditionals_02.sh Somebody\nAccess denied.\n```", "```\n #!/usr/bin/env bash\nif [ $USER == 'steve' ]; then\n  echo \"Welcome back, Steve!\" elif [ $USER == 'admin' ]; then\n  echo \"Hello, admin.\" else\n  echo \"Access denied.\" fi\n```", "```\n $ bash ch03_conditionals_03.sh\nWelcome back, Steve!\n```", "```\n #!/usr/bin/env bash\nif [ -f \"/path/to/file.txt\" ]; then\n  echo \"File exists. Proceeding with read operation.\" else\n  echo \"File does not exist. Aborting.\" fi\n```", "```\n #!/usr/bin/env bash\nnum1=10\nnum2=20\n# Compare if num1 is equal to num2\nif [ $num1 -eq $num2 ]; then\n    echo \"num1 is equal to num2\"\nelse\n    echo \"num1 is not equal to num2\"\nfi\n```", "```\n num1 is not equal to num2\n```", "```\n num1=10; num2=20; [ $num1 -eq $num2 ] && echo \"num1 is greater\" || echo \"num2 is greater\"\n```", "```\n num2 is greater\n```", "```\n #!/usr/bin/env bash\nnum1=10\nnum2=20\nif [ $num1 -lt $num2 ]; then\n    echo \"num1 is less than num2\"\nelse\n    echo \"num1 is not less than num2\"\nfi\n```", "```\n num1 is less than num2\n```", "```\n #!/usr/bin/env bash\nnum1=10\nnum2=20\nif [ $num1 -ge $num2 ]; then\n    echo \"num1 is greater than or equal to num2\"\nelse\n    echo \"num1 is not greater than or equal to num2\"\nfi\n```", "```\n num1 is not greater than or equal to num2\n```", "```\n #!/usr/bin/env bash\n# Declare string variables\nstr1=\"Hello\"\nstr2=\"World\"\nstr3=\"Hello\"\n# Compare if str1 is equal to str2\nif [ \"$str1\" == \"$str2\" ]; then\n    echo \"str1 is equal to str2\"\nelse\n    echo \"str1 is not equal to str2\"\nfi\n# Compare if str1 is not equal to str3\nif [ \"$str1\" != \"$str3\" ]; then\n    echo \"str1 is not equal to str3\"\nelse\n    echo \"str1 is equal to str3\"\nfi\n# Lexicographical comparison if str1 is less than str2\nif [[ \"$str1\" < \"$str2\" ]]; then\n    echo \"str1 is less than str2\"\nelse\n    echo \"str1 is not less than str2\"\nfi\n```", "```\n str1 is not equal to str2\nstr1 is equal to str3\nstr1 is less than str2\n```", "```\n #!/usr/bin/env bash\nif [ $USER == 'steve' ] && [ -f \"/path/to/file.txt\" ]; then\n  echo \"Hello, Steve. File exists.\" elif [ $USER == 'admin' ] || [ -f \"/path/to/admin_file.txt\" ]; then\n  echo \"Admin access granted or admin file exists.\" else\n  echo \"Access denied or file missing.\" fi\n```", "```\n #!/bin/bash\nread -p \"Enter your favorite fruit: \" fruit\ncase $fruit in\n  apple) echo \"Apple pie is classic!\" ;;\n  banana) echo \"Bananas are full of potassium.\" ;;\n  orange) echo \"Orange you glad I didn't say banana?\" ;;\n  *) echo \"Hmm, I don't know much about that fruit.\" ;;\nesac\n```", "```\n ~ $ bash ch03_conditionals_10.sh\nEnter your favorite fruit: pear\nHmm, I don't know much about that fruit.\n```", "```\n for variable in list\ndo\n  command1\n  command2\n  ... done\n```", "```\n for file in *.txt\ndo\n  echo \"Text file: $file\"\ndone\n```", "```\n ~ $ for file in *.txt;do echo \"Text file: $file\";done\nText file: example.txt\nText file: sample.txt\n```", "```\n ~ $ for n in {1..5};do echo \"Current value of n: $n\";done\nCurrent value of n: 1\nCurrent value of n: 2\nCurrent value of n: 3\nCurrent value of n: 4\nCurrent value of n: 5\n~ $ for n in {a..d};do echo \"Current value of n: $n\";done\nCurrent value of n: a\nCurrent value of n: b\nCurrent value of n: c\nCurrent value of n: d\n```", "```\n while [ condition ]\ndo\n  command1\n  command2\n  ... done\n```", "```\n #!/usr/bin/env bash\ncount=5\nwhile [ $count -gt 0 ]\ndo\n  echo \"Countdown: $count\"\n  count=$((count-1))\ndone\n```", "```\n ~ $ bash ch03_loops_01.sh\nCountdown: 5\nCountdown: 4\nCountdown: 3\nCountdown: 2\nCountdown: 1\n```", "```\n until [ condition ]\ndo\n  command1\n  command2\n  ... done\n```", "```\n #!/usr/bin/env bash\nuntil [ -f done.txt ]\ndo\n  echo \"Waiting for done.txt...\"   sleep 1\ndone\n```", "```\n #!/usr/bin/env bash\necho \"What's your favorite programming language?\" select lang in Python Bash Ruby \"C/C++\" Quit; do\n  case $lang in\n    Python) echo \"Great choice! Python is versatile.\" ;;\n    Bash) echo \"Bash is great for shell scripting and automation!\" ;;\n    Ruby) echo \"Ruby is used in the Metasploit Framework.\" ;;\n    \"C/C++\") echo \"C/C++ is powerful for system-level programming.\" ;;\n    Quit) break ;;\n    *) echo \"Invalid option. Please try again.\" ;;\n  esac\ndone\n```", "```\n ~ $ bash ch03_loops_03.sh\nWhat's your favorite programming language? 1) Python\n2) Bash\n3) Ruby\n4) C/C++\n5) Quit\n#? 2\nBash is great for shell scripting and automation!\n```", "```\n #!/usr/bin/env bash\nfor i in {1..3}\ndo\n  for j in {1..3}\n  do\n    echo -n \"$i$j \"\n  done\n  echo \"\" # New line after each row\ndone\n```", "```\n ~ $ bash ch03_loops_04.sh\n11 12 13\n21 22 23\n31 32 33\n```", "```\n #!/usr/bin/env bash\nfor i in {1..20}; do\n  if ! [[ $(($i%2)) == 0 ]]; then\n    continue\n  elif [[ $i -eq 10 ]]; then\n    break\n  else echo $i\n  fi\ndone\n```", "```\n ~ $ bash ch03_loops_05.sh\n2\n4\n6\n8\n```", "```\n my_array=(apple banana cherry)\n```", "```\n ${array_name[index]}\n```", "```\n ${my_array[0]}\n```", "```\n my_array+=(date)\n```", "```\n my_array[1]=blueberry\n```", "```\n #!/usr/bin/env bash\nmy_array=(apple banana cherry)\nfor fruit in \"${my_array[@]}\"\ndo\n  echo \"Fruit: $fruit\"\ndone\n```", "```\n ~ $ bash ch03_arrays_01.sh\nFruit: apple\nFruit: banana\nFruit: cherry\n```", "```\n #!/usr/bin/env bash\n# Declare the associative array. declare -A my_assoc_array\n# Assign new keys/value pairs to the associative array. my_assoc_array[apple]=\"green\"\nmy_assoc_array[banana]=\"yellow\"\nmy_assoc_array[cherry]=\"red\"\n# The whole associative array is accessed as follows:\nfor key in \"${!my_assoc_array[@]}\"\ndo\n  # A key/value pair is accessed as shown:\n  echo \"$key: ${my_assoc_array[$key]}\"\ndone\n```", "```\n ~ $ bash ch03_arrays_02.sh\ncherry: red\napple: green\nbanana: yellow\n```", "```\n {my_assoc_array[key]}\n```", "```\n #!/usr/bin/env bash\n# Declare the associative array. declare -A my_assoc_array\n# Assign new keys and values to the associative array. my_assoc_array[apple]=\"green\"\nmy_assoc_array[banana]=\"yellow\"\nmy_assoc_array[cherry]=\"red\"\n# The whole associative array is accessed as follows:\nfor key in \"${!my_assoc_array[@]}\"\ndo\n  # A key/value pair is accessed as shown:\n  echo \"$key: ${my_assoc_array[$key]}\"\ndone\n# Access a specific value from the associative array:\necho \"The color of an apple is: ${my_assoc_array[apple]}\"\n```", "```\n ~ $ bash ch03_arrays_03.sh\ncherry: red\napple: green\nbanana: yellow\nThe color of an apple is: green\n```"]