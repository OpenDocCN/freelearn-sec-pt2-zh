["```\n $ sudo apt install libxml2-utils jq sqlite3 texlive-base xmlstarlet\n```", "```\n $ go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\n$ go install -v github.com/projectdiscovery/mapcidr/cmd/mapcidr@latest\n```", "```\n awk 'pattern {action}' input_file\n```", "```\n IP,Hostname,Port,Service,Version\n192.168.1.1,gateway,80,http,Apache 2.4.41\n192.168.1.10,webserver,443,https,nginx 1.18.0\n192.168.1.20,database,3306,mysql,MySQL 5.7.32\n192.168.1.30,fileserver,22,ssh,OpenSSH 8.2p1\n```", "```\n awk -F',' '{print $1 \",\" $3}' nmap_results.csv\n```", "```\n IP,Port\n192.168.1.1,80\n192.168.1.10,443\n192.168.1.20,3306\n192.168.1.30,22\n```", "```\n awk -F',' '$3 == 80 || $3 == 443 {print $1 \",\" $2 \",\" $3}' nmap_results.csv\n```", "```\n 192.168.1.1,gateway,80\n192.168.1.10,webserver,443\n```", "```\n awk -F',' 'BEGIN {print \"Open Web Servers:\"} $3 == 80 || $3 == 443 {print $1 \",\" $2 \",\" $3} END {print \"End of list\"}' nmap_results.csv\n```", "```\n Open Web Servers:\n192.168.1.1,gateway,80\n192.168.1.10,webserver,443\nEnd of list\n```", "```\n IP,Vulnerability,Severity\n192.168.1.1,SQL Injection,High\n192.168.1.1,XSS,Medium\n192.168.1.10,Outdated SSL,Low\n192.168.1.20,Weak Password,High\n192.168.1.30,Information Disclosure,Medium\n```", "```\n awk -F',' 'NR>1 {gsub(/\\r/,\"\"); if($3!=\"\") count[$3]++} END {for (severity in count) print severity \": \" count[severity]}' vulnerability_scan.csv\n```", "```\n Low: 1\nMedium: 2\nHigh: 2\n```", "```\n IP,Owner,Department\n192.168.1.1,John,IT\n192.168.1.10,Alice,Marketing\n192.168.1.20,Bob,Finance\n192.168.1.30,Carol,HR\n```", "```\n $ awk -F',' 'NR==FNR {owner[$1]=$2; dept[$1]=$3; next}{print $11 \",\" $2 \",\" $3 \",\" owner[$1] \",\" dept[$1]}' asset_info.csv vulnerability_scan.csv\n```", "```\n IP,Vulnerability,Severity,Owner,Department\n192.168.1.1,SQL Injection,High,John,IT\n192.168.1.1,XSS,Medium,John,IT\n192.168.1.10,Outdated SSL,Low,Alice,Marketing\n192.168.1.20,Weak Password,High,Bob,Finance\n192.168.1.30,Information Disclosure,Medium,Carol,HR\n```", "```\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE nmaprun>\n<nmaprun scanner=\"nmap\" ...>\n  <scaninfo .../>\n  <verbose .../>\n  <debugging .../>\n  <host ...>\n    <status .../>\n    <address .../>\n    <hostnames>...</hostnames>\n    <ports>\n      <port ...>\n        <state .../>\n        <service .../>\n        <script .../>\n      </port>\n      ... </ports>\n    ... </host>\n  ... </nmaprun>\n```", "```\n $ xmllint --xpath \"//host/address[@addrtype='ipv4']/@addr\" nmap.xml\n```", "```\n $ xmllint --xpath \"//host[ports/port[@portid='80' and state/@state='open' and service/@product='Microsoft IIS httpd']]/address[@addrtype='ipv4']/@addr\" nmap.xml\n```", "```\n echo 10.2.10.0/24 | mapcidr -silent | httpx -silent -j > httpx.json\n```", "```\n {\"timestamp\":\"2024-08-24T17:17:41.515583292-04:00\",\"port\":\"80\",\"url\":\"http://10.2.10.10\",\"input\":\"10.2.10.10\",\"title\":\"IIS Windows Server\",\"scheme\":\"http\",\"webserver\":\"Microsoft-IIS/10.0\",\"content_type\":\"text/html\",\"method\":\"GET\",\"host\":\"10.2.10.10\",\"path\":\"/\",\"time\":\"91.271935ms\",\"a\":[\"10.2.10.10\"],\"tech\":[\"IIS:10.0\",\"Microsoft ASP.NET\",\"Windows Server\"],\"words\":27,\"lines\":32,\"status_code\":200,\"content_length\":703,\"failed\":false,\"knowledgebase\":{\"PageType\":\"nonerror\",\"pHash\":0}}\n```", "```\n cat httpx.json | jq .\n```", "```\n #!/usr/bin/env bash\n# Function to parse a single JSON object\nparse_json() {\n    local json=\"$1\"\n    # Extract specific fields\n    local timestamp=$(echo \"$json\" | jq -r '.timestamp')\n    local url=$(echo \"$json\" | jq -r '.url')\n    local title=$(echo \"$json\" | jq -r '.title')\n    local webserver=$(echo \"$json\" | jq -r '.webserver')\n    local status_code=$(echo \"$json\" | jq -r '.status_code')\n    # Print extracted information\n    echo \"Timestamp: $timestamp\"\n    echo \"URL: $url\"\n    echo \"Title: $title\"\n    echo \"Web Server: $webserver\"\n    echo \"Status Code: $status_code\"\n    echo \"---\"\n}\n# Read JSON objects line by line\nwhile IFS= read -r line; do\n    parse_json \"$line\"\ndone\n```", "```\n    local user_name=$(echo \"$json\" | jq -r '.user_name')\n    ```", "```\n    local first_tech=$(echo \"$json\" | jq -r '.tech[0]')\n    ```", "```\n {\n  \"parent\": {\n    \"name\": \"Family Tree\",\n    \"child\": {\n      \"name\": \"John\",\n      \"age\": 10\n    },\n    \"siblings\": [\n      {\n        \"child\": {\n          \"name\": \"Emma\",\n          \"age\": 8\n        }\n      },\n      {\n        \"child\": {\n          \"name\": \"Michael\",\n          \"age\": 12\n        }\n      }\n    ]\n  }\n}\n```", "```\n #!/usr/bin/env bash\nDB_NAME=\"pentest_results.db\"\nsqlite3 $DB_NAME <<EOF\nCREATE TABLE IF NOT EXISTS nmap_scans (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    ip_address TEXT,\n    hostname TEXT,\n    port INTEGER,\n    protocol TEXT,\n    service TEXT,\n    version TEXT,\n    scan_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    vulnerability TEXT\n);\nEOF\n```", "```\n #!/usr/bin/env bash\nDB_NAME=\"pentest_results.db\"\nxmlstarlet sel -t -m \"//host\" \\\n    -v \"address/@addr\" -o \"|\" \\\n    -v \"hostnames/hostname/@name\" -o \"|\" \\\n    -m \"ports/port\" \\\n        -v \"@portid\" -o \"|\" \\\n        -v \"@protocol\" -o \"|\" \\\n        -v \"service/@name\" -o \"|\" \\\n        -v \"service/@version\" -n \\\n    \"$1\" | while IFS='|' read -r ip hostname port protocol service version; do\n    sqlite3 $DB_NAME <<EOF\nINSERT INTO nmap_scans (ip_address, hostname, port, protocol, service, version)\nVALUES ('$ip', '$hostname', '$port', '$protocol', '$service', '$version');\nEOF\ndone\n```", "```\n $ ./ch13_nmap_to_db.sh nmap.xml\n```", "```\n $ sqlite3 pentest_results.db \"UPDATE nmap_scans SET vulnerability = 'VULNERABILITY_DESCRIPTION' WHERE ip_address = 'IP_ADDRESS' AND port = PORT_NUMBER AND vulnerability IS NULL;\"\n```", "```\n $ sqlite3 pentest_results.db \"UPDATE nmap_scans SET vulnerability = 'SQL Injection vulnerability' WHERE ip_address = 10.2.10.10 AND port = 80 AND vulnerability IS NULL;\"\n```", "```\n $ sqlite3 pentest_results.db \"UPDATE nmap_scans SET vulnerability = 'SQL Injection vulnerability' WHERE ip_address = 10.2.10.10' AND port = 80;\"\n```", "```\n #!/usr/bin/env bash\nDB_NAME=\"pentest_results.db\"\n# Function to truncate strings to a specified length\ntruncate() {\n    local str=\"$1\"\n    local max_length=\"$2\"\n    if [ ${#str} -gt $max_length ]; then\n        echo \"${str:0:$max_length-3}...\"     else\n        printf \"%-${max_length}s\" \"$str\"\n    fi\n}\n# Print header\nprintf \"%-15s | %-15s | %-5s | %-8s | %-15s | %-20s | %s\\n\" \\\n    \"IP Address\" \"Hostname\" \"Port\" \"Protocol\" \"Service\" \"Version\" \"Vulnerability\"\nprintf \"%s\\n\" \"$(printf '=%.0s' {1..109})\"\n# Query and format the results\nsqlite3 -separator \"|\" \"$DB_NAME\" \"SELECT ip_address, hostname, port, protocol, service, version, vulnerability FROM nmap_scans ORDER BY ip_address, port;\" |\nwhile IFS='|' read -r ip hostname port protocol service version vulnerability; do\n    ip=$(truncate \"$ip\" 15)\n    hostname=$(truncate \"$hostname\" 15)\n    port=$(truncate \"$port\" 5)\n    protocol=$(truncate \"$protocol\" 8)\n    service=$(truncate \"$service\" 15)\n    version=$(truncate \"$version\" 20)\n    vulnerability=$(truncate \"$vulnerability\" 20)\n    printf \"%-15s | %-15s | %-5s | %-8s | %-15s | %-20s | %s\\n\" \\\n        \"$ip\" \"$hostname\" \"$port\" \"$protocol\" \"$service\" \"$version\" \"$vulnerability\"\ndone\necho \"Query completed.\"\n```", "```\n #!/usr/bin/env bash\nDB_NAME=\"pentest_results.db\"\n# Function to query the database and format results\nquery_db() {\n    sqlite3 -header -csv $DB_NAME \"$1\"\n}\n# Get all unique IP addresses\nip_addresses=$(query_db \"SELECT DISTINCT ip_address FROM nmap_scans;\")\n# Create LaTeX content\ncreate_latex_content() {\n    echo \"\\\\documentclass{article}\"\n    echo \"\\\\usepackage[margin=1in]{geometry}\"\n    echo \"\\\\usepackage{longtable}\"\n    echo \"\\\\usepackage{pdflscape}\"\n    echo \"\\\\begin{document}\"\n    echo \"\\\\title{Penetration Test Report}\"\n    echo \"\\\\author{Your Name}\"\n    echo \"\\\\maketitle\"\n    echo \"\\\\section{Scan Results}\"\n    IFS=$'\\n'\n    for ip in $ip_addresses; do\n        echo \"\\\\subsection{IP Address: $ip}\"\n        echo \"\\\\begin{landscape}\"\n        echo \"\\\\begin{longtable}{|p{2cm}|p{2cm}|p{1.5cm}|p{1.5cm}|p{3cm}|p{3cm}|p{4cm}|}\"\n        echo \"\\\\hline\"\n        echo \"Hostname & IP & Port & Protocol & Service & Version & Vulnerability \\\\\\\\ \\\\hline\"\n        echo \"\\\\endfirsthead\"\n        echo \"\\\\hline\"\n        echo \"Hostname & IP & Port & Protocol & Service & Version & Vulnerability \\\\\\\\ \\\\hline\"\n        echo \"\\\\endhead\"\n        query_db \"SELECT hostname, ip_address, port, protocol, service, version, vulnerability\n                  FROM nmap_scans\n                  WHERE ip_address='$ip';\" | sed 's/,/ \\& /g; s/$/\\\\\\\\ \\\\hline/'\n        echo \"\\\\end{longtable}\"\n        echo \"\\\\end{landscape}\"\n    done\n    echo \"\\\\end{document}\"\n}\n# Generate LaTeX file\ncreate_latex_content > pentest_report.tex\n# Compile LaTeX to PDF\npdflatex pentest_report.tex\n```", "```\n $ chmod +x ch13_generate_report.sh\n./generate_report.sh\n```", "```\n create_latex_content() {\n    # ... (previous content)\n    echo \"\\\\section{Executive Summary}\"\n    echo \"This penetration test was conducted to assess the security posture of the target network. The scan revealed multiple vulnerabilities across various systems, including outdated software versions and misconfigured services. Detailed findings are presented in the following sections.\" # ... (rest of the content)\n}\n```"]