- en: Privilege Escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous chapters have explained the process of performing an attack to
    a point where the attacker can compromise a system. The previous [Chapter 7](9871410e-395d-4fcf-afe0-04e82f7883d3.xhtml),
    *Lateral Movement,* discussed how an attacker can move around in the compromised
    system without being identified or raising any alarms. A general trend was observable,
    where legitimate tools were being used to avoid alerts. A similar trend may also
    be observed in this phase of the attack life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, close attention will be paid to how attackers heighten the
    privileges of the user accounts that they have compromised. The aim of an attacker
    at this stage is to have the required level of privileges to achieve a greater
    objective. It could be mass deletion, corruption, or theft of data, disabling
    of computers, destroying hardware, and so many other things. An attacker requires
    control over access systems so that he can succeed with all of his plans. Mostly,
    attackers seek to acquire admin-level privileges before they start the actual
    attack. Many system developers have been employing the least privilege rule, where
    they assign users the least amount of privileges that are needed to perform their
    jobs. Therefore, most accounts do not have sufficient rights that can be abused
    to access or make changes to some files. Hackers will normally compromise these
    low-privileged accounts and, thus, have to upgrade them to higher privileges in
    order to access files or make changes to a system.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Infiltration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding alerts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infiltration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Privilege escalation normally occurs deep into an attack. This means that the
    attacker will have already done reconnaissance and successfully compromised a
    system, thereby gaining entry. After this, the attacker will have traversed the
    compromised system through lateral movement and identified all the systems and
    devices of interest. In this phase, the attacker wants to have a strong grip on
    the system. The attacker may have compromised a low-level account and will, therefore,
    be looking for an account with higher privileges, in order to study the system
    further or get ready to give the final blow. Privilege escalation is not a simple
    phase, as it will at times require the attacker to use a combination of skills
    and tools in order to heighten the privileges. There are generally two classifications
    of privilege escalation: horizontal and vertical privilege escalation.'
  prefs: []
  type: TYPE_NORMAL
- en: Horizontal privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In horizontal privilege escalation, the attacker uses a normal account to access
    the accounts of other users. It is a simple process since the attacker does not
    actively seek to upgrade the privileges of an account, they are granted to him.
    Therefore, no tools are used to upgrade the accounts in this type of privilege
    escalation. There are two main ways through which a horizontal privilege escalation
    can occur. The first one is through software bugs, whereby a normal user is able
    to view and access files of other users due to an error in the coding of a system.
    As can be seen, no tools have been used and yet an attacker is able to access
    files that should have otherwise been protected from the eyes of normal users.
  prefs: []
  type: TYPE_NORMAL
- en: Another instance is that wherein the attacker is lucky to compromise an administrator's
    account. In this scenario, there will be no need to use hacking tools and techniques
    to escalate the privileges of the account that the user has hacked. Already adorned
    with the admin-level privileges, attackers can go on with the attack by creating
    other admin-level users or just use the already hacked account to execute the
    attack. Horizontal privilege escalation attacks are normally facilitated by tools
    and techniques that steal login credentials at the phase where hackers compromise
    a system. A number of tools were discussed in the chapter on compromising the
    system, where it was shown that a hacker can recover passwords, steal them from
    users, or crack directly into accounts. In fortunate scenarios for the hacker,
    the user accounts compromised will belong to users with high-level privileges.
    Therefore, they will not have to face any hardships of having to upgrade an account.
  prefs: []
  type: TYPE_NORMAL
- en: Vertical privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The other type of privilege escalation is vertical privilege escalation. It
    consists of more demanding privilege escalation techniques and includes the use
    of hacking tools. It is complex, but not impossible, since an attacker is forced
    to perform admin-or kernel-level operations in order to elevate access rights
    illegally. Vertical rights escalation is more difficult but it is also more rewarding
    since the attacker can acquire system rights on a system. A system user has more
    rights than an administrator and, therefore, can do more damage. The attacker
    also has a higher chance of staying and performing actions on a network system
    whilst remaining undetected. With superuser access rights, an attacker can perform
    actions that the administrator cannot stop or interfere with. Vertical escalation
    techniques differ from system to system. In Windows, a common practice is to cause
    a buffer overflow to achieve vertical privilege escalation. This has already been
    witnessed in a tool called EternalBlue which is alleged to be one of the hacking
    tools in the possession of the NSA. The tool has however been made public by a
    hacking group called the Shadow Brokers.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux, vertical escalation is done by allowing attackers to have root privileges
    that enable them to modify systems and programs. On Mac, vertical escalation is
    done in a process called **jailbreaking**, allowing the hackers to perform previously
    disallowed operations. These are operations that manufacturers restrict users
    from so as to protect the integrity of their devices and operating systems. Vertical
    escalation is also done on web-based tools. This is normally through the exploitation
    of the code used in the backend. At times, system developers unknowingly leave
    channels that can be exploited by hackers, especially during the submission of
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like in the preceding phases, it is in the interests of the hacker to avoid
    raising any alarms that the victim system has been compromised. Detection, especially
    at this phase, would be costly, as it would mean that all the efforts that an
    attacker had made will have been for nothing. Therefore, before the attacker performs
    this phase, it is normal to disable security systems if possible. The methods
    of privilege escalation are also quite sophisticated. Most of the time, the attacker
    will have to create files with malicious instructions, rather than use a tool
    to execute malicious actions against the system.
  prefs: []
  type: TYPE_NORMAL
- en: Most systems will be coded only to allow privileges to legitimate services and
    processes. Therefore, attackers will try to compromise these services and processes
    in order to be given the benefit of executing with heightened privileges. It is
    challenging for hackers to use brute force to get admin privileges and therefore
    they often opt to use the path of least resistance. If it means creating files
    identical to the ones a system recognizes to be legitimate, they will do so.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to avoid alerts is by using legitimate tools to perform the attack.
    As mentioned in previous chapters, the use of PowerShell as a hacking tool is
    growing because of its power, and also because many systems will not raise alerts
    since this is a valid, built-in OS tool.
  prefs: []
  type: TYPE_NORMAL
- en: Performing privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Privilege escalation can be done in a number of ways, depending on the level
    of skill that the hacker has and the intended outcome of the privilege escalation
    process. In Windows, administrator access should be rare and normal users should
    not have administrative access to systems. However, sometimes it becomes necessary
    to give remote users admin access to enable them to troubleshoot and solve some
    issues. This is something that system administrators should be worried about.
    When giving remote users admin access, admins should be cautious enough to ensure
    that this type of access is not used for privilege escalation. There are risks
    when normal employees in an organization maintain admin access. They open a network
    to multiple attack vectors.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, malicious users can also use this access level to extract password
    hashes that can, later on, be used to recover the actual passwords or be used
    directly in remote attacks through pass-the-hash. This has already been exhaustively
    discussed in [Chapter 7](9871410e-395d-4fcf-afe0-04e82f7883d3.xhtml), *Lateral
    Movement*. Another threat is that they can use their systems for packet capturing.
    They can also install software which might turn out to be malicious. Lastly, they
    can interfere with the registry. Therefore, it is assumed that it is bad for users
    to be given admin access.
  prefs: []
  type: TYPE_NORMAL
- en: Since admin access is a closely guarded privilege, attackers will mostly have
    to fight their way into getting the access using a number of tools and techniques.
    Apple computers have a somewhat more reliable operating system when it comes to
    security. However, there are a number of ways that attackers have discovered that
    can be used to perform privilege escalation in OS X.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some of the commonly used privilege escalation methods.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting unpatched operating systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows, like many operating systems, keeps tabs on ways through which hackers
    can compromise it. It keeps on releasing patches to fix those avenues. However,
    some network administrators fail to install these patches in time. Some administrators
    forgo patching altogether. Therefore, there is a highly likely chance that an
    attacker will find machines that are unpatched. Hackers use scanning tools to
    find out information about the devices in a network and to identify the ones that
    are not patched. The tools that can be used for this have been discussed in the
    reconnaissance chapter; two of the most commonly used are Nessus and Nmap. After
    identifying the unpatched machines, hackers can search for exploits from Kali
    Linux that can be used to exploit them. Searchsploit will contain the corresponding
    exploits that can be used against unpatched computers. Once the exploits are found,
    the attacker will compromise the system. The attacker will then use a tool called
    PowerUp to bypass Windows privilege management and upgrade the user on the vulnerable
    machine to an admin.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the attacker wants to avoid using scanning tools to verify the current system
    state, including patches, it is possible to use a WMI command-line tool called
    `wmic` to retrieve the list of updates installed, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cd04d02-332e-43fd-8dbf-ae76af38eed1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is to use the PowerShell command `get-hotix`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bdf5e8a-5d71-4885-99dd-f4b1af3b8813.png)'
  prefs: []
  type: TYPE_IMG
- en: Access token manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Windows, all processes are started by a certain user and the system knows
    the rights and privileges that the user has. Windows normally makes use of access
    tokens to determine the owners of all running processes. This technique of privilege
    escalation is used to make processes appear as if they were started by a different
    user than the one that actually started them. The way that Windows manages admin
    privileges is exploited. The operating system logs in admin users as normal users,
    but then executes their processes with admin privileges. Windows uses the `run
    as administrator` command to execute processes with the privileges of an administrator.
    Therefore, if an attacker can fool the system into believing that processes are
    being started by an admin, the processes will run without interference with full-level
    admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Access token manipulation occurs when attackers cleverly copy access tokens
    from existing processes using built-in Windows API functions. They specifically
    target the processes that are started by admin users in a machine. When they paste
    an admin's access tokens to Windows as it starts a new process, it will execute
    the processes with admin privileges. Access token manipulation can also occur
    when hackers know an admin's credentials. These can be stolen in different types
    of attacks and then used for access token manipulation. Windows has an option
    of running an application as an administrator. To do this, Windows will request
    for a user to enter admin login credentials, so as to start a program/process
    with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, access token manipulation can also occur when an attacker uses stolen
    tokens to authenticate remote system processes provided that the tokens stolen
    have the appropriate permissions on the remote system.
  prefs: []
  type: TYPE_NORMAL
- en: Access token manipulation is highly used in Metasploit, a hacking and penetration
    testing tool that was discussed in [Chapter 5](d07abf73-093e-4004-b690-1aa70db11902.xhtml),
    *Compromising the System*. Metasploit has a Meterpreter payload that can perform
    token stealing and use the stolen tokens to run processes with escalated privileges.
    Metasploit also has a payload called *The Cobalt Strike* that also takes advantage
    of token stealing. The payload is able to steal and create its own tokens, which
    have admin privileges. The bottom line in this type of privilege escalation method
    is that there is an observable trend where attackers take advantage of an otherwise
    legitimate system. It could be said to be a form of defensive evasion on the side
    of an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting accessibility features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows has several accessibility features that are supposed to help users to
    interact better with the OS and more attention is given to users that may have
    visual impairments. These features include; the magnifier, screen keyboard, display
    switch, and narrator. These features are conveniently placed on the Windows login
    screen so that they can be supportive to the user from the instant that he/she
    logs in. However, attackers can manipulate these features to create a backdoor
    through which they can log into the system without authentication. It is quite
    an easy process and can be executed in a matter of minutes. An attacker will be
    required to have compromised a Windows computer using a Linux LiveCD. This tool
    will allow the attacker to boot the computer with a temporary Linux Desktop OS.
    Once in the machine, the drive containing the Windows OS will be visible and editable.
    All these accessibility features are stored as executables in the `System32` folder.
    Therefore, a hacker will go and delete one or more of these and replace them with
    a command prompt or a backdoor. Once the replacement is done and the hacker has
    logged out, all will seem normal when the Windows OS is started. However, an attacker
    will have a walk-around to bypass the login prompt. When the OS displays the password
    prompt, the attacker can simply click on any of the accessibility features and
    launch the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: The command prompt that will display will be executing with system access, which
    is the highest level of privilege for a Windows machine. The attacker can use
    the command prompt to achieve other tasks. It can open browsers, install programs,
    create new users with privileges, and even install backdoors. An even more unique
    thing that an attacker can do is to launch the Windows Explorer by supplying the
    command `explorer.exe` into the command prompt. Windows Explorer will open on
    the computer that the attacker has not even logged into and it will open as a
    system user. This means that the attacker has exclusive rights to do whatever
    he pleases on the machine, without being requested to log in as an administrator.
    This method of privilege escalation is very effective, but it requires the attacker
    to have physical access to the target computer. Therefore, it is mostly done by
    insider threats or malicious actors that enter into an organization's premises
    through social engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Application shimming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Application shimming is a Windows Application Compatibility framework that
    Windows created to allow programs to run on versions of the OS that they were
    not initially created to run on. Most applications that used to run on Windows
    XP can today run on Windows 10 due to this framework. The operation of the framework
    is quite simple: it creates a shim to buffer between a legacy program and the
    operating system. During execution of programs, the shim cache is referenced to
    find out whether they will need to use the shim database. If so, the shim database
    will use an API to ensure that the program''s codes are redirected effectively,
    so as to communicate with the OS. Since shims are in direct communication with
    the OS, Windows decided to add a safety feature where they are designed to run
    in user mode.'
  prefs: []
  type: TYPE_NORMAL
- en: Without admin privileges, the shims cannot modify the kernel. However, attackers
    have been able to create custom shims that can bypass user account control, inject
    DLLs into running processes, and meddle with memory addresses. These shims can
    enable an attacker to run their own malicious programs with elevated privileges.
    They can also be used to turn off security software, especially the Windows Defender.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the use of a custom shim against a new version
    of the Windows OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/66661c7d-9da7-422f-83ea-b30b512ca0f9.png)'
  prefs: []
  type: TYPE_IMG
- en: It is good to look at an example of how a shim is created. First, you need to
    start the Compatibility Administrator from the Microsoft Application Compatibility
    Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'This following figure shows Microsoft''s application compatibility toolkit
    (12)^:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6762f948-2c0a-4ace-8560-77845b96e969.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you have to create a new database in Custom Databases by right-clicking
    on the New Database(1) option and selecting to create a new application fix.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the process of creating a new application fix (12):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e1fd731b-099f-4598-a5d0-9fadecfabf63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to give details of the particular program you want to create
    a shim for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4c20cbb-6c29-4914-a8ba-0c3ee3e681e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you have to select the version of Windows that the shim is being created
    for. After selecting the Windows version, a number of compatibility fixes will
    be shown for the particular program. You are at liberty to choose the fixes that
    you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/879a9a1b-ab3a-4bf1-8820-880cef44e705.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on Next, all the fixes you''ve chosen will be shown and you
    can click on Finish to end the process. The shim will be stored in the new database.
    To apply it, you need to right-click on the new database and click on install.
    Once this is done, the program will be run with all the compatibility fixes you''ve
    selected in your shim:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/400bac80-f100-462b-b564-1408d2ee2d7b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bypassing user account control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows has a well-structured mechanism for controlling the privileges of all
    users in a network and on the local machine. It has a Windows User Account Control (**UAC**)
    feature that acts as a gate between normal users and admin level users. The Windows
    UAC feature is used to give permissions to the program, to elevate their privileges,
    and to run with admin-level privileges. Therefore, Windows always prompts users
    to permit programs that want to execute with this level of access. It is also
    notable that only admin users can allow programs to run with these privileges.
    Therefore, a normal user will be denied permission to allow a program to execute
    a program with admin privileges.
  prefs: []
  type: TYPE_NORMAL
- en: This looks like a failure-proof mechanism, whereby only administrators can allow
    programs to run with heightened privileges since they can easily tell the malicious
    programs from the genuine ones. However, there are some gaps in this mechanism
    of securing the system. Some Windows programs are allowed to elevate privileges
    or execute COM objects that are elevated without prompting a user first.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, `rundl32.exe` is used to load a custom DLL that loads a COM object
    that has elevated privileges. This performs file operations even in protected
    directories that would normally require a user to have elevated access. This opens
    the UAC mechanism to compromise from knowledgeable attackers. The same processes
    used to allow Windows programs to run unauthenticated can allow malicious software
    to run with admin access in the same way. Attackers can inject a malicious process
    into a trusted process and thereby gain the advantage of running the malicious
    processes with admin privileges without having to prompt a user.
  prefs: []
  type: TYPE_NORMAL
- en: There are other ways that black hats have discovered that can be used to bypass
    UAC. There have been many methods published on GitHub that can potentially be
    used against UAC. One of these is `eventvwr.exe`, which can be compromised since
    it is normally auto-elevated when it runs and can, therefore, be injected with
    specific binary codes or scripts. Another approach to defeating the UAC is simply
    through the theft of admin credentials. The UAC mechanism is said to be a single
    security system and, therefore, the privileges of a process running on one computer
    remain unknown to lateral systems. Therefore, it is hard to nab attackers misusing
    the admin credentials to start processes with high-level privileges.
  prefs: []
  type: TYPE_NORMAL
- en: To bypass UAC in Windows 7, you can also use the `uacscript`, which you can
    download from [https://github.com/Vozzie/uacscript](https://github.com/Vozzie/uacscript).
  prefs: []
  type: TYPE_NORMAL
- en: DLL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DLL injection is another privilege escalation method that attackers are using.
    It also involves the compromising of legitimate processes and services of the
    Windows operating system. DLL injection is used to run malicious code using the
    context of a legitimate process. By using the context of a process recognized
    to be legitimate, an attacker gains several advantages, especially the ability
    to access the processes memory and permissions. The attacker's actions are also
    masked by the legitimate processes. There has recently been a discovery of a rather
    sophisticated DLL injection technique called **reflective DLL injection** (13).
    It is more effective since it loads the malicious code without having to make
    the usual Windows API calls and therefore bypassing DLL load monitoring (13).
    It uses a clever process of loading a malicious library from the memory onto a
    running process. Instead of following the normal DLL injection process of loading
    a malicious DLL code from a path, a process that not only creates an external
    dependency and degrades the stealth of an attack, reflective DLL injection sources
    its malicious code in the form of raw data. It is more difficult to detect, even
    on machines that are adequately protected by security software. DLL injection
    attacks have been used by attackers to modify the Windows Registry, create threads
    and to do DLL loading. These are all actions that require admin privileges, but
    attackers sneak their way into doing them without such privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is a short illustration of how DLL injections work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51cafabe-4537-464d-a858-c4155d2e6e2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to keep in mind that DLL injection is not only used for privilege
    escalation. Here are some examples of malware that use the DLL injection technique
    to either compromise a system or propagate to others:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Backdoor.Oldrea**: injects itself in the `explore.exe` process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BlackEnergy**: injects as a DLL into the `svchost.exe` process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duqu**: injects itself in many processes to avoid detection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DLL search order hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DLL search order hijacking is another technique used to compromise DLLs and
    allow attackers to escalate their privileges, so as to progress with an attack.
    In this technique, attackers try to replace legitimate DLLs with malicious ones.
    Since the locations where programs store their DLLs can easily be identified,
    attackers may place malicious DLLs high up in the path traversed to find the legitimate
    DLL. Therefore, when Windows searches for a certain DLL in its normal location,
    it will find a DLL file with the same name but it will not be the legitimate DLL.
    Often, this type of attack occurs to programs that store DLLs in remote locations,
    such as in web shares. The DLLs are therefore more exposed to attackers and they
    no longer need physically to get to a computer so as to compromise files on hard
    drives.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach to DLL search order hijacking is the modification of the ways
    in which programs load DLLs. Here, attackers modify the *manifest* or the *local
    direction* files to cause a program to load a different DLL than the intended
    one. The attackers may redirect the program to always load the malicious DLL and
    this will lead to a persistent privilege escalation. The attackers can also change
    the path to the legitimate DLLs back when the compromised program behaves abnormally.
    The targeted programs are the ones that execute with a high level of privileges.
    When done to the right program, the attacker could essentially escalate privileges
    to become a system user and, therefore, have access to more things.
  prefs: []
  type: TYPE_NORMAL
- en: DLL hijacking is complex and it requires lots of caution to prevent abnormal
    behavior by the victim program. In an unfortunate, or fortunate, event where a
    user realizes that an application is behaving erratically, he or she can simply
    uninstall it. This will consequently thwart a DLL hijacking attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'The diagram below shows an illustration of search order hijacking where an
    attacker has placed a malicious DLL file on the search path of a legitimate DLL
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7f5eb5c3-752c-44de-878c-6d2ad2561873.png)'
  prefs: []
  type: TYPE_IMG
- en: Dylib hijacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dylib hijacking is a method that is used against Apple computers. Computers
    that have Apple's OS X use a similar search method for finding dynamic libraries
    that should be loaded into programs. The search method is also based on paths
    and, as was seen in DLL hijacking, attackers can take advantage of these paths
    for privilege escalation purposes. Attackers conduct research to find out the
    dylibs that specific applications use and they then place a malicious version
    with a similar name high up in the search path. Therefore, when the operating
    system is searching for an application's dylib, it finds the malicious one first.
    If the targeted program runs with higher-level privileges than the user of the
    computer has, when it is started, it will auto-elevate the privileges. In this
    instance, it will have also have created an admin level access to the malicious
    dylib.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the process of the dylib hijacking where
    attackers place a malicious dylib on the search path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1b882856-3e52-49a6-b202-778d42e9c9c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploration of vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploration of vulnerabilities is one of the few horizontal privilege escalations
    that gets used today. Due to the strictness in the coding and securing of systems,
    there tend to be fewer cases of horizontal privilege escalation. This type of
    privilege escalation is done on systems and programs that have programming errors.
    These programming errors may introduce vulnerabilities that attackers can exploit
    to bypass security mechanisms. Some systems will accept certain phrases as passwords
    for all users. This could probably be a programming error to allow system developers
    to quickly access systems. However, attackers may quickly discover this flaw and
    use it to access user accounts that have high privileges. Other errors in coding
    may allow attackers to change the access levels of users in the URL of a web-based
    system. In Windows, there was a programming error that allowed attackers to create
    their own Kerberos tickets with domain admin rights using regular domain user
    permissions. This vulnerability is called **MS14-068**. Even though system developers
    may be extremely careful, these errors show up at times and they provide attackers
    an avenue to quickly escalate privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, an attacker will take advantage of how the operating system works
    to exploit an unknown vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'A classic example of that is the use of the registry key `AlwaysInstallElevated`,
    which is present in the system (set to 1) and will allow the installation of a
    Windows Installer package with elevated (system) privileges. For this key to be
    considered enabled, the following values should be set to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The attacker can use the `reg` query command to verify if this key is present;
    if it is not, the following message will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/771f212f-ae0f-4de6-94c4-d72aeabe98f4.png)'
  prefs: []
  type: TYPE_IMG
- en: This might sound harmless, but if you think deeply you will notice the problem.
    You are basically giving system-level privileges to a regular user to execute
    an installer. What if this installer package has malicious content? Game over!
  prefs: []
  type: TYPE_NORMAL
- en: Launch daemon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a launch daemon is another privilege escalation method applicable to Apple-based
    operating systems, especially OS X. When OS X boots up, `launchd` is normally
    run to end system initialization. The process is responsible for loading the parameters
    for the daemons from the `plis`t files found in `/Library/LaunchDaemons`. The
    daemons have property list files that point to the executables to be auto-started.
    Attackers may take advantage of this auto-start process to perform privilege escalation.
    They may install their own launch daemons and configure them to start during the
    bootup process using the launched process. The attackers' daemons may be given
    disguised names from a related OS or application. Launch daemons are created with
    admin privileges but they execute with root privileges. Therefore, if the attackers
    are successful, they will have their daemons auto-started and their privileges
    escalated from admin to root. It can be noted that again, attackers are relying
    on an otherwise legitimate process in order to perform privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on example of privilege escalation on a Windows 8 target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This hands-on illustration works on Windows 8 and has also been reported to
    be effective in Windows 10\. It makes use of some techniques that have been discussed,
    that is, PowerShell and Meterpreter. It is a cunning technique that drives the
    user of the target machine to unknowingly allow a legitimate program to run which
    in turn does the privilege escalation. Therefore, it is the user that unknowingly
    allows malicious actors to escalate their privileges. The process starts within
    Metasploit and particularly on Meterpreter. Meterpreter is first used to establish
    a session with a target. This session is what the attackers use to send commands
    to the target and effectively control it.
  prefs: []
  type: TYPE_NORMAL
- en: The following is a script called `persistence` that an attacker can use to start
    a session with a remote target. The script creates a persistent listener on the
    victim's system that runs upon boot.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command starts a handler on the target (`A`), places Meterpreter at the
    `C` drive of the victim machine (`L c:\`) and instructs the listener to start
    on boot (`X`), make a check in intervals of 30 seconds (`i 30`), and to connect
    to port `443` of the victim's IP address. A hacker may check whether the connection
    was simple by sending a `reboot` command to the target machine and observing its
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `reboot` command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If satisfied with the connection, the attacker may background the session and
    begin the privilege escalation attempt. Meterpreter will run the session in the
    background and allow Metasploit to carry out other exploits.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is issued in the Metasploit terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a command that works on all versions of Windows. It is used to request
    that the user on the target machine unknowingly escalates the execution level
    of the attacker. The user has to click OK on a non-suspicious looking prompt on
    their screen requesting permission to run a program. The user consent is required
    and if it is not given, the privilege escalation attempt is not successful. Therefore,
    the attacker has to request the user to allow for the running of a legitimate
    program and this is where PowerShell comes in. Attackers, therefore, have to set
    the `ask` technique to be through PowerShell. This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, a popup will appear on the target user''s screen prompting them
    to allow the running of PowerShell, a completely legitimate Windows program. In
    most instances, the user will click OK. With this permission, the attacker can
    use Powershell to migrate from being a normal user to a system user, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, `1340` is listed as a system user on Metasploit. When this is successful,
    the attackers will have successfully acquired more privileges. A check on the
    privileges the attackers have should show that they have both admin and system
    rights. However, the `1340` admin user only has four Windows privileges and these
    are insufficient to perform a big attack. An attacker has to escalate his or her
    privileges further so as to have sufficient privileges to be able to perform more
    malicious actions. The attackers can then migrate to `3772` which is an `NT AuthoritySystem`
    user. This can be carried out using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The attackers will still have the admin and root user rights and they will have
    additional Windows privileges. These additional privileges, 13 in number, can
    allow the attackers to do a myriad of things to the target using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion and lessons learned
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has discussed one of the most complex phases of an attack. Not
    all of the techniques used here are complex though. As has been said, there are
    two techniques; horizontal and vertical privilege escalation. Some attackers will
    use the horizontal privilege escalation methods because they are less tasking
    and easier to perform. However, veteran hackers who have a good understanding
    of the systems that they target use vertical privilege escalation methods. This
    paper has gone through some of these privilege escalation methods. It was clear
    from most methods that hackers had to target legitimate processes and services
    in order to escalate privileges. This is because most systems are built using
    the least privilege concept. Users are purposefully given the least privileges
    that they require to accomplish their roles. Only the legitimate services and
    processes are given high-level privileges and, therefore, attackers have to compromise
    them in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A. Gouglidis, I. Mavridis and V. C. Hu, *Security policy verification for multi-domains
    in cloud systems*, International Journal of Information Security, vol. 13, (2),
    pp. 97-111, 2014\. Available: [https://search.proquest.com/docview/1509582424\.
    DOI: http://dx.doi.org/10.1007/s10207-013-0205-x](https://search.proquest.com/docview/1509582424.%20DOI:%20http://dx.doi.org/10.1007/s10207-013-0205-x).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'T. Sommestad and F. Sandström, *An empirical test of the accuracy of an attack
    graph analysis tool*, Information and Computer Security, vol. 23, (5), pp. 516-531,
    2015\. Available: [https://search.proquest.com/docview/1786145799](https://search.proquest.com/docview/1786145799).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'D. A. Groves, *Industrial Control System Security by Isolation: A Dangerous
    Myth*, American Water Works Association.Journal, vol. 103, (7), pp. 28-30, 2011\.
    Available: [https://search.proquest.com/docview/878745593](https://search.proquest.com/docview/878745593).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'P. Asadoorian, *Windows Privilege Escalation Techniques (Local) - Tradecraft
    Security Weekly #2 - Security Weekly*, Security Weekly, 2017\. [Online]. Available:
    [https://securityweekly.com/2017/05/18/windows-privilege-escalation-techniques-local-tradecraft-security-weekly-2/](https://securityweekly.com/2017/05/18/windows-privilege-escalation-techniques-local-tradecraft-security-weekly-2/).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'C. Perez, *Meterpreter Token Manipulation*, Shell is Only the Beginning, 2017\.
    [Online]. Available: [https://www.darkoperator.com/blog/2010/1/2/meterpreter-token-manipulation.html](https://www.darkoperator.com/blog/2010/1/2/meterpreter-token-manipulation.html).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'S. Knight, *Exploit allows command prompt to launch at Windows 7 login screen*,
    TechSpot, 2017\. [Online]. Available: [https://www.techspot.com/news/48774-exploit-allows-command-prompt-to-launch-at-windows-7-login-screen.html](https://www.techspot.com/news/48774-exploit-allows-command-prompt-to-launch-at-windows-7-login-screen.html).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Application Shimming*, Attack.mitre.org, 2017\. [Online]. Available: [https://attack.mitre.org/wiki/Technique/T1138](https://attack.mitre.org/wiki/Technique/T1138).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Bypass User Account Control*, Attack.mitre.org, 2017\. [Online]. Available:
    [https://attack.mitre.org/wiki/Technique/T1088](https://attack.mitre.org/wiki/Technique/T1088).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*DLL Injection*, Attack.mitre.org, 2017\. [Online]. Available: [https://attack.mitre.org/wiki/Technique/T1055](https://attack.mitre.org/wiki/Technique/T1055).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*DLL Hijacking Attacks Revisited*, InfoSec Resources, 2017\. [Online]. Available:
    [http://resources.infosecinstitute.com/dll-hijacking-attacks-revisited/](http://resources.infosecinstitute.com/dll-hijacking-attacks-revisited/).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Dylib-Hijacking Protection*, Paloaltonetworks.com, 2017\. [Online]. Available:
    [https://www.paloaltonetworks.com/documentation/40/endpoint/newfeaturesguide/security-features/dylib-hijacking-protection.html](https://www.paloaltonetworks.com/documentation/40/endpoint/newfeaturesguide/security-features/dylib-hijacking-protection.html).
    [Accessed: 16- Aug- 2017].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'T. Newton, *Demystifying Shims - or - Using the App Compat Toolkit to make
    your old stuff work with your new stuff*, *Blogs.technet.microsoft.com*, 2018\.
    [Online]. Available: [https://blogs.technet.microsoft.com/askperf/2011/06/17/demystifying-shims-or-using-the-app-compat-toolkit-to-make-your-old-stuff-work-with-your-new-stuff/](https://blogs.technet.microsoft.com/askperf/2011/06/17/demystifying-shims-or-using-the-app-compat-toolkit-to-make-your-old-stuff-work-with-your-new-stuff/).
    [Accessed: 03- Jan- 2018].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*DLL Injection - enterprise*, *Attack.mitre.org*, 2018\. [Online]. Available:
    [https://attack.mitre.org/wiki/Technique/T1055](https://attack.mitre.org/wiki/Technique/T1055).
    [Accessed: 03- Jan- 2018].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has gone through the privilege escalation phase. It has noted
    that there are two broad classifications of privilege escalation: vertical and
    horizontal. It has also brought to light that horizontal privilege escalation
    is the best luck that an attacker can hope for. This is because the methods used
    for horizontal privilege escalation tend not to be very complex. It has gone through
    most of the sophisticated vertical privilege escalation methods that attackers
    use against systems. It is noteworthy that most of the discussed techniques involve
    attempts to compromise legitimate services and processes in order to get higher
    privileges. This is probably the last task that the attacker will have to perform
    in the entire attack.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain how the attackers deliver the final blow and,
    if successful, how they reap the rewards of their efforts.
  prefs: []
  type: TYPE_NORMAL
