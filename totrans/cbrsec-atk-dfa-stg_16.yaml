- en: Log Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 13](b0ad8ba7-b36c-4f99-bf90-f67f89256170.xhtml), *Investigating
    an Incident,* you learned about the investigation process, and some techniques
    for finding the right information while investigating an issue. However, to investigate
    a security issue, it is often necessary to review multiple logs from different
    vendors and different devices. Although each vendor might have some custom fields
    in the log, the reality is that, once you learn how to read logs, it becomes easier
    to switch vendors and just focus on deltas for that vendor. While there are many
    tools that will automate log aggregation, such as a SIEM solution, there will
    be scenarios in which you need to manually analyze a log in order to figure out
    the root cause.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Data correlation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web server logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data correlation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no doubt that the majority of organizations will be using some sort
    of SIEM solution to concentrate all of their logs in one single location, and
    using a custom query language to search throughout the logs. While this is the
    current reality, as a security professional, you still need to know how to navigate
    throughout different events, logs, and artifacts to perform deeper investigations.
    Many times, the data obtained from the SIEM will be useful in identifying the
    threat, the threat actors, and narrowing down the compromised systems but, in
    some circumstances, this is not enough; you need to find the root cause and eradicate
    the threat.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, every time that you perform data analysis, it is important
    to think about how the pieces of the puzzle will be working together.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows an example of this data correlation approach to
    review logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/71ec888d-00e7-425c-910f-c055b2c78714.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how this flowchart works:'
  prefs: []
  type: TYPE_NORMAL
- en: The investigator starts reviewing indications of compromise in the operating
    system's logs. Many suspicious activities were found in the OS and, after reviewing
    a Windows prefetch file, it is possible to conclude that a suspicious process
    started a communication with an external entity. It is now time to review the
    firewall logs in order to verify more information about this connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The firewall logs reveal that the connection between the workstation and the
    external website was established using TCP on port `443` and that it was encrypted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During this communication, a callback was initiated from the external website
    to the internal web server. It's time to review the web server log files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The investigator continues the data correlation process by reviewing the IIS
    logs located in this web server. He finds out that the adversary tried a SQL injection
    attack against this web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see from this flowchart, there is a logic behind which logs to access,
    what information you are looking for, and most importantly, how to look at all
    this data in a contextualized manner.
  prefs: []
  type: TYPE_NORMAL
- en: Operating system logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The types of logs available in an operating system may vary; in this book, we
    will focus on core logs that are relevant from a security perspective. We will
    use Windows and Linux operating systems to demonstrate that.
  prefs: []
  type: TYPE_NORMAL
- en: Windows logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a Windows operating system, the most relevant security-related logs are
    accessible via Event Viewer. In [Chapter 13](b0ad8ba7-b36c-4f99-bf90-f67f89256170.xhtml),
    *Investigating an Incident*, we spoke about the most common events that should
    be reviewed during an investigation. While the events can be easily located in
    Event Viewer, you can also obtain the individual files at `Windows\System32\winevt\Logs,`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/043c3b2b-92a6-402f-80aa-5d10bf6d0abb.png)'
  prefs: []
  type: TYPE_IMG
- en: However, log analysis in an operating system is not necessarily limited to the
    logging information provided by the OS, especially in Windows. There are other
    sources of information that you could use, including prefetch files (Windows Prefetch).
    These files contain relevant information regarding process execution. They can
    be useful when trying to understand if a malicious process was executed and which
    actions were done by that first execution.
  prefs: []
  type: TYPE_NORMAL
- en: In Windows 10, you also have `OneDrive` logs (`C:\Users\<USERNAME>\AppData\Local\Microsoft\OneDrive\logs`),
    which can be useful. If you are investigating data extraction, this could be a
    good place to look to verify if any wrongdoing was carried out. Review the `SyncDiagnostics.log`
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: To parse Windows Prefetch files, use this Python script at [//github.com/PoorBillionaire/Windows-Prefetch-Parser](https://github.com/PoorBillionaire/Windows-Prefetch-Parser).
  prefs: []
  type: TYPE_NORMAL
- en: Another important file location is where Windows stores the user mode crash
    dump files, which is `C:\Users\<username>\AppData\Local\CrashDumps`. These crash
    dump files are important artifacts that can be used to identify potential malware
    in the system.
  prefs: []
  type: TYPE_NORMAL
- en: One common type of attack that can be exposed in a dump file is the code injection
    attack. This happens when there is an insertion of executable modules into running
    processes or threads. This technique is mostly used by malware to access data
    and to hide or prevent its removal (for example, persistence). It is important
    to emphasize that legitimate software developers may occasionally use code injection
    techniques for non-malicious reasons, such as modifying an existing application.
  prefs: []
  type: TYPE_NORMAL
- en: To open these dump files you need a debugger, such as *WinDbg* ([http://www.windbg.org](http://www.windbg.org))
    and you need the proper skills to navigate through the dump file to identify the
    root cause of the crash. If you don't have those skills, you can also use *Instant
    Online Crash Analysis* ([http://www.osronline.com](http://www.osronline.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The results that follow are a brief summary of the automated analyses from
    using this online tool (the main areas to follow up are in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`EXCEPTION_CODE: (NTSTATUS) 0xc0000409`:'
  prefs: []
  type: TYPE_NORMAL
- en: The system detected an overrun of a stack-based buffer in this application.
    This overrun could potentially allow a malicious user to gain control of this
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this crash analysis done by Instant Online Crash Analysis, we have an overrun
    of a stack-based buffer in Microsoft Edge. Now, you can correlate this log (the
    day that the crash occurred) with other information available in Event Viewer
    (security and application logs) to verify if there was any suspicious process
    running that could have potentially gained access to this application. Remember
    that, in the end, you need to perform data correlation to have more tangible information
    regarding a specific event and its culprit.
  prefs: []
  type: TYPE_NORMAL
- en: Linux logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Linux, there are many logs that you can use to look for security-related
    information. One of the main ones is the `auth.log`, located under `/var/log`,
    which contains all authentication related events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of this log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding logs were collected from a Kali distribution; RedHat and CentOS
    will store similar information at `/var/log/secure`. If you want to review only
    failed login attempts, use the logs from `var/log/faillog`.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The firewall log format varies according to the vendor; however, there are
    some core fields that will be there regardless of the platform. When reviewing
    the firewall logs, you must a focus on primarily answering the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Who started the communication (source IP)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where is the destination of that communication (destination IP)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of application is trying to reach the destination (transport protocol
    and port)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was the connection allowed or denied by the firewall?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code is an example of the `Check Point` firewall log; in this
    case, we are hiding the destination IP for privacy purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, rule number 9 was the one that processed all these requests
    and dropped all connection attempts from `10.10.10.8` to a specific destination.
    Now, using the same reading skills, let''s review a `NetScreen` firewall log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: One important difference between the Check Point and the NetScreen firewall
    logs is how they log information about the transport protocol. In the Check Point
    log, you will see that the `proto` field contains the transport protocol and the
    application (in the above case, HTTP). The NetScreen log shows similar information
    in the `service` and `proto` fields. As you can see, there are small changes,
    but the reality is that, once you are comfortable reading a firewall log from
    one vendor, others will be easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use a Linux machine as a firewall by leveraging `iptable`s. Here
    is an example of what the `iptables.log` looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to review Windows Firewall, look for the `pfirewall.log` log file
    at `C:\Windows\System32\LogFiles\Firewall`. This log has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Web server logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When reviewing web server logs, pay particular attention to the web servers
    that have web applications interacting with SQL databases. The IIS Web Server
    log files are located at `\WINDOWS\system32\LogFiles\W3SVC1` and they are `.log`
    files that can be opened using Notepad. You can also use Excel or Microsoft Log
    Parser to open this file and perform basic queries.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Log Parser from [https://www.microsoft.com/en-us/download/details.aspx?id=24659](https://www.microsoft.com/en-us/download/details.aspx?id=24659).
  prefs: []
  type: TYPE_NORMAL
- en: 'When reviewing the IIS log, pay close attention to the `cs-uri-query` and `sc-statu*s*`
    fields. These fields will show details about the HTTP requests that were performed.
    If you use Log Parser, you can perform a query against the log file to quickly
    identify if the system experienced a SQL injection attack. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of a potential output with the keyword CAST located in the
    `cs-uri-query` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that, in this case, the error code was `500` (internal server error);
    in other words, the server was not able to fulfil the request. When you see this
    type of activity in your IIS log, you should take action to enhance your protection
    on this web server; one alternative is to add a WAF.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are reviewing an Apache log file, the access log file is located at
    `/var/log/apache2/access.log` and the format is also very simple to read, as you
    can see in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are looking for a particular record, you can also use the `cat` command
    in Linux, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Another alternative is to use apache-scalp tool, which you can download from
    [https://code.google.com/archive/p/apache-scalp](https://code.google.com/archive/p/apache-scalp).
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'iptables: [https://help.ubuntu.com/community/IptablesHowTo](https://help.ubuntu.com/community/IptablesHowTo)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log Parser: [https://logrhythm.com/blog/a-technical-analysis-of-wannacry-ransomware/](https://logrhythm.com/blog/a-technical-analysis-of-wannacry-ransomware/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SQL Injection Finder: [http://wsus.codeplex.com/releases/view/13436](http://wsus.codeplex.com/releases/view/13436)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SQL Injection Cheat Sheet: [https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/](https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the importance of data correlation while
    reviewing logs in different locations. You also read about relevant security-related
    logs in Windows and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned how to read firewall logs using Check Point, NetScreen, iptables,
    and Windows Firewall as examples.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you learned about web server logs, using IIS and
    Apache as examples.
  prefs: []
  type: TYPE_NORMAL
- en: As you finish reading this chapter, and this book, it's time to step back and
    reflect on this cybersecurity journey. It is very important to take the theory
    that you learned here, aligned with the practical examples that were used throughout
    this book, and apply it to your environment or to your customer's environment.
    While there is no such thing as one size fits all in cybersecurity, the lessons
    learned here can be used as a foundation for your future work. The threat landscape
    is changing constantly and, by the time we finished writing this book, a new vulnerability
    was discovered. Probably, by the time you have finished reading this book, another
    one has been discovered. It's for this reason that the foundation of knowledge
    is so important, because it will assist you in rapidly absorbing new challenges
    and applying security principles to remediate threats. Stay safe!
  prefs: []
  type: TYPE_NORMAL
