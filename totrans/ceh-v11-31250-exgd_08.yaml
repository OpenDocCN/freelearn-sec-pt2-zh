- en: '*Chapter 10*: Sniffing and Evading IDS, Firewalls, and Honeypots'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：嗅探与规避 IDS、防火墙和蜜罐'
- en: Sniffing is an old method with new technology. Back in the day—before smartphones—we
    had telephones. There was a method used to tap into the phone line and listen
    in on conversations. You could record traffic, as well as intercepting data going
    across the line.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嗅探是一种古老的方法，但现在配上了新技术。在智能手机之前，我们使用的是电话。当时有一种方法可以监听电话线并窃听对话。你可以录制流量，也可以拦截通过线路的数据。
- en: This required you to select a target and then connect with a listening or recording
    device. This was typically achieved by unofficial or official channels—depending
    on the legality—as well as a direct line mechanism. You could also use radio wiretaps.
    The whole purpose here was to listen in on conversations or record data that was
    flowing.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这要求你选择一个目标，并连接到监听或录音设备。通常通过官方或非官方渠道实现——取决于合法性——以及直接连接机制。你还可以使用无线电监听。其目的是窃听对话或录制流动的数据。
- en: An attacker can intercept and read any network packet containing plaintext information.
    This information could include usernames, passwords, personal codes, banking information,
    or anything else valuable to the attacker.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以拦截并读取任何包含明文信息的网络数据包。这些信息可能包括用户名、密码、个人代码、银行信息，或任何对攻击者有价值的内容。
- en: Packet sniffing has the same concept as wiretapping—just on a different platform.
    Instead of listening to audio, we're listening to ones and zeros. The attacker's
    goal is to look at all traffic and packets that go across your network.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包嗅探与监听类似——只不过是在不同的平台上。我们不是监听声音，而是监听二进制数据。攻击者的目标是查看所有通过网络的流量和数据包。
- en: By the end of this chapter, you should understand what a sniffing attack is
    and its role in extracting meaningful insights from the complex and large sets
    of data all around us.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你应该能够理解什么是嗅探攻击，以及它在从我们周围复杂的大数据集中提取有意义信息中的作用。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is sniffing?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是嗅探？
- en: Types of sniffing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嗅探的类型
- en: Hardware versus software sniffing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件与软件嗅探
- en: '**Dynamic Host Configuration Protocol** (**DHCP**) assaults'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态主机配置协议** (**DHCP**) 攻击'
- en: '**Media access control** (**MAC**) attacks'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体访问控制** (**MAC**) 攻击'
- en: '**Address Resolution Protocol** (**ARP**) poisoning'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地址解析协议** (**ARP**) 欺骗'
- en: '**Domain Name System** (**DNS**) poisoning'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名系统** (**DNS**) 欺骗'
- en: Detecting sniffing methods
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测嗅探方法
- en: Evading **intrusion detection systems** (**IDSs**)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规避 **入侵检测系统** (**IDSs**)
- en: Moving around firewalls
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绕过防火墙
- en: Honeypots
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蜜罐
- en: What is sniffing?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是嗅探？
- en: Using sniffing tools, an attacker can monitor and capture packets passing through
    a network and spy on what is going on with internet activity.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用嗅探工具，攻击者可以监视并捕获经过网络的数据包，并监听互联网活动。
- en: Let's talk more specifically about what sniffing is and how to leverage it in
    an attack.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更具体地讨论一下什么是嗅探，以及如何在攻击中利用它。
- en: 'There are two types of wiretaps out there, as outlined here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所述，有两种类型的监听：
- en: '**Active wiretapping** allows an attacker to manipulate and force themselves
    into the middle using a **Man-in-the-Middle** (**MITM**) attack, which allows
    the attacker to record and monitor traffic. As an active channel, it can allow
    the attacker to change the data flowing through or inject information. When it
    comes to ethical hacking, *active* means we''re going to do something extremely
    aggressive by forcing a communication. You can see a depiction of a MITM attack
    in the following diagram:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主动监听** 允许攻击者通过 **中间人攻击** (**MITM**) 进入通信中间并加以操控，从而记录和监控流量。作为一种主动通道，它还可以让攻击者更改流经的数据或注入信息。在道德黑客中，*主动*意味着我们将采取极为激进的方式，强制干预通信。你可以在以下示意图中看到
    MITM 攻击的表现：'
- en: '![Figure 10.1 – MITM attack'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – MITM 攻击'
- en: '](Images/B17486_10_001.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_10_001.jpg)'
- en: Figure 10.1 – MITM attack
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – MITM 攻击
- en: '**Passive wiretapping** allows an attacker to eavesdrop or listen into conversations—nothing
    malicious; it''s only for gathering information. We can use passive tapping to
    record that same information, but we''re not manipulating anything or anyone.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**被动监听** 允许攻击者窃听或监听对话——没有恶意；只是为了收集信息。我们可以利用被动监听记录相同的信息，但我们不会操控任何事物或人。'
- en: Is this legal? Well, it depends on your environment, so you should always know
    the rules. Lawful interception or wiretapping is implemented by lawful authority
    via a warrant or if you have an agreement with a company and you're doing a penetration
    test with them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这合法吗？这取决于你的环境，所以你应该始终了解规则。合法的拦截或窃听是由合法的授权机构通过搜查令实施的，或者如果你与某家公司有协议并且正在与他们进行渗透测试时。
- en: Most of the time, these activities are extremely useful for things such as management,
    protection, and even monitoring infrastructure. Lawfulness is always determined
    by whether there is permission granted.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，这些活动对管理、保护甚至监控基础设施等方面非常有用。合法性总是由是否获得许可来决定。
- en: Lately, the big thing is terrorist activities being monitored around the world.
    We have government agencies sniffing or looking at the network passively for certain
    keywords or key traffic that flows through the internet, which could then raise
    flags if certain criteria are met.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，全球各地都在监控恐怖活动。我们有政府机构通过被动嗅探或查看网络，寻找某些关键词或关键流量，这些流量通过互联网传输，如果满足某些标准，可能会引发警报。
- en: There's a lot of debate as to whether governments should be involved in this
    kind of thing. I find it hard to debate because I see it as a *catch-22*. I understand
    the reason behind it, but I also like my privacy. Whatever you do, know the rules
    of your environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 关于政府是否应该参与这类事情有很多争议。我觉得很难辩论，因为我把它看作是一个*两难困境*。我理解背后的原因，但我也喜欢我的隐私。不管你做什么，了解你环境中的规则。
- en: If you're thinking we have a switch network, well, trust me—I can get past that.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为我们有一个交换网络，那你相信我——我可以绕过这个。
- en: The concept here is that the attacker is going to try to look at information
    that passes through a segment by monitoring both hardware and software. Software
    will be our protocols, while hardware will be network devices.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的概念是，攻击者会通过监控硬件和软件，试图查看通过某个分段的信息。软件是我们的协议，而硬件是网络设备。
- en: If the attacker can compromise one of these devices, they can start monitoring
    all the information that's flowing through it. And what is the attacker looking
    for? Well, believe it or not, there are some applications that transmit passwords
    and usernames in cleartext. Guess what? Email is cleartext. And you'd be surprised
    how many times people send credit card information over email. If the web application
    is not locked down correctly, we may be transmitting in cleartext, and of course,
    any type of sensitive data will be a treasure chest for an attacker.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者能够妥协其中一个设备，他们就可以开始监控通过它流动的所有信息。那么攻击者在寻找什么呢？相信不相信，这里有一些应用程序传输密码和用户名是以明文方式传输的。猜猜怎么着？电子邮件是明文的。而且你会惊讶地发现有多少次人们通过电子邮件发送信用卡信息。如果网络应用没有正确地锁定，我们可能也在以明文方式传输，当然，任何类型的敏感数据都会成为攻击者的宝藏。
- en: Sniffing dangers
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嗅探的危险
- en: So, how dangerous is this? Very dangerous because it's on your network—it's
    all there for them. And what can I see as I'm sniffing?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这有多危险呢？非常危险，因为它就在你的网络上——一切都在那里，攻击者可以轻易获得。而我在嗅探时能看到什么呢？
- en: 'Well, I can see things such as this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我可以看到这样的事情：
- en: DNS traffic
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS 流量
- en: A client machine requesting a DNS name resolution to a DNS server
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台客户端机器请求 DNS 服务器进行 DNS 名称解析
- en: Email traffic
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件流量
- en: '**File Transfer Protocol** (**FTP**) passwords'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件传输协议**（**FTP**）密码'
- en: Web traffic
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络流量
- en: Telnet passwords
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Telnet 密码
- en: Router configuration
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器配置
- en: Chat sessions
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 聊天会话
- en: I'll also be able to see Telnet passwords if it's not properly locked down;
    unless you're using FTPS—the secured FTP—the password and username are going to
    go across as cleartext. I might also be able to pick up router configurations,
    as well as email traffic. And I'm not just talking about the emails themselves,
    but everything dealing with your email system. Exchange servers communicate with
    other Exchange servers, and all that traffic—if you don't lock it down—could expose
    quite a bit about your infrastructure. We all know that **HyperText Transfer Protocol**
    (**HTTP**) is cleartext, and as a matter of fact, there's a big push now to make
    everybody go **HTTP Secure** (**HTTPS**). I agree. Most chat session environments
    can be sniffed, as well as **System Logging Protocol** (**syslog**) traffic.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有正确锁定，我还可以看到 Telnet 密码；除非你使用 FTPS——安全的 FTP——否则密码和用户名会以明文方式传输。我也可能能够捕获路由器配置以及电子邮件流量。我说的可不只是电子邮件本身，而是与电子邮件系统相关的一切。Exchange
    服务器与其他 Exchange 服务器之间会进行通信，所有这些流量——如果没有加以保护——可能会暴露出你的基础设施的许多信息。我们都知道**超文本传输协议**（**HTTP**）是明文的，实际上，现在有一个强烈的推动力要求大家都使用**安全超文本传输协议**（**HTTPS**）。我同意。大多数聊天会话环境都可以被嗅探到，**系统日志协议**（**syslog**）流量也是如此。
- en: Syslog can be used for system management and security auditing, as well as getting
    general information and looking at analysis and debugging messages. Now, think
    about that going across cleartext; not just software, but devices can have their
    own syslog files that are going to report back to a syslog endpoint. That can
    be printers, routers, and so on, and typically, these logs have information such
    as timestamps, hostnames, and even the **Internet Protocol** (**IP**) address
    of the device.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Syslog 可以用于系统管理和安全审计，也可以用于获取一般信息、查看分析和调试消息。现在，想象一下这些数据以明文方式传输；不仅是软件，设备也可能有自己的
    syslog 文件，并将其报告回 syslog 端点。可能是打印机、路由器等，通常这些日志会包含时间戳、主机名，甚至是设备的**互联网协议**（**IP**）地址。
- en: 'How is this done? Well, it''s *à la mode*. See, I had the Big Mac earlier,
    and now I want some ice cream! What I mean by *à la mode* is this: you have a
    **network interface card** (**NIC**) that is hooked up to a switch, which is then
    hooked up to multiple systems that are out there. This is the standard network
    environment.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何实现的呢？嗯，这就像是*时髦*一样。看看，我之前吃了大麦克，现在我想吃点冰淇淋！我所说的*时髦*意思是这样的：你有一个**网络接口卡**（**NIC**），它连接到一个交换机，再通过交换机连接到多个系统，这就是标准的网络环境。
- en: Typically, a network card operates by sending data from one location to another,
    and normally, a network card picks up all traffic it sees on the network and just
    simply disregards or dumps the packets that are not destined for its IP address,
    but it still sees it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网络卡的工作原理是将数据从一个位置发送到另一个位置，通常，网络卡会接收它在网络上看到的所有流量，并且只会忽略或丢弃那些不发送到其 IP 地址的数据包，但它仍然能看到这些数据包。
- en: We can change the way the NIC is going to work by placing it into promiscuous
    mode. This causes the network card to pass all the traffic it sees to the **central
    processing unit** (**CPU**) rather than discarding the frames that are intended
    only for that NIC. In non-promiscuous mode, the network card does not have as
    much fun. No—the NIC receives a frame and will drop it unless the frame is addressed
    to that NIC's MAC address.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将网络接口卡切换到混杂模式来改变它的工作方式。这会导致网络卡将它看到的所有流量传递给**中央处理单元**（**CPU**），而不是丢弃那些只针对该
    NIC 的帧。在非混杂模式下，网络卡就不那么“有趣”了。不是的——网络卡接收到一个帧，除非该帧是针对该 NIC 的 MAC 地址的，否则会丢弃它。
- en: There are many **operating systems** (**OSs**) that require admin-level or superuser
    privileges to enable promiscuous mode, and normally, a network card only sees
    traffic that's on the same port, especially if it's in a switched environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多**操作系统**（**OS**）需要管理员权限或超级用户权限来启用混杂模式，通常情况下，网络卡只会看到与其在同一端口上的流量，尤其是在交换环境中。
- en: I know I just mentioned something as ancient as the **video cassette recorder**
    (**VCR**), but that was the problem with the hub. It transmitted data through
    all the different ports. A lot of companies have moved to switched environments
    that are used to combat the use of promiscuous mode; if I did the same, I'd only
    be able to see data that was still destined for myself.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我刚才提到了一个像**视频录像机**（**VCR**）一样古老的东西，但这正是集线器的问题。它通过所有不同的端口传输数据。许多公司已经转向交换式环境，来对抗混杂模式的使用；如果我做同样的事情，我只能看到那些仍然发送给我的数据。
- en: Next, let's talk about some options we can use when sniffing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来讨论一些我们在嗅探时可以使用的选项。
- en: Types of sniffing
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗅探的类型
- en: So, what are the different types of sniffing? Please don't say, "*It depends
    whether you're trying to figure out a scent or whether you have a cold*." To us,
    sniffing is where we talk about the actual vectors available to us, and there
    are several different vectors we can look at.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，嗅探攻击有哪些类型呢？请不要回答，“*这取决于你是想分辨气味，还是因为感冒*。” 对我们来说，嗅探是指我们可以利用的实际攻击向量，而我们可以探讨的嗅探向量有好几种。
- en: Spoofing attacks
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欺骗攻击
- en: In this type of attack, the attacker pretends to be someone else by modifying
    or falsifying the information or data. By doing so, they can gain access to the
    resources or even steal personal information.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的攻击中，攻击者通过修改或伪造信息或数据冒充他人。通过这种方式，他们可以访问资源，甚至窃取个人信息。
- en: These types of attacks can be done in several different ways. The attacker can
    use an IP address that's associated with a victim, which would allow them to send
    out fraudulent emails or set up websites, try to get passwords or account information,
    and so on. There is no limit when it comes to spoofing attacks and what attackers
    can accomplish. You can even set up a fake access point for wireless connectivity
    and pretend to be legitimate users connecting through illegitimate connections.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的攻击可以通过几种不同的方式进行。攻击者可以使用与受害者关联的 IP 地址，这样就可以发送虚假邮件或设置虚假网站，试图获取密码或账户信息等。关于欺骗攻击，攻击者能做的事几乎没有限制。你甚至可以设置一个虚假的接入点用于无线连接，并假装是通过不合法的连接连接的合法用户。
- en: DHCP starvation attack
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DHCP 饥饿攻击
- en: In a starvation attack, we deplete the number of IP addresses by chewing up
    everything except the DHCP server. So, you've got your DHCP server and it's going
    to have a scope or multiple scopes representing different subnet ranges. In this
    case, we're going to go with **192.168.0.1**, all the way up to **254**. It's
    just simply a list or a database of IP addresses it can issue out to client machines.
    Now, as the network comes up, a client makes a request, and that information is
    passed through the switch, and then sent to the DHCP server to get their IP address.
    We'll talk more about this later in the chapter.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在饥饿攻击中，我们通过占用除 DHCP 服务器之外的所有 IP 地址来消耗可用的 IP 地址数量。假设你的 DHCP 服务器有一个范围或多个范围，代表不同的子网地址段。在这个例子中，我们选择**192.168.0.1**到**254**的范围。这个范围实际上就是
    DHCP 服务器可以分配给客户端的 IP 地址列表或数据库。随着网络的启动，客户端发起请求，信息通过交换机传递，并发送到 DHCP 服务器以获取 IP 地址。我们将在本章后面进一步讨论这个过程。
- en: DHCP server attack
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DHCP 服务器攻击
- en: In this type of attack, the attacker will set up their own DHCP server. Matter
    of fact, as an attacker, I'll use these two techniques together. I'll set up a
    rogue DHCP server, do a starvation attack, and have everybody start getting their
    IP addresses from my rogue DHCP server. This will allow me to do fun things such
    as a **denial-of-service** (**DoS**) attack because now, they don't have a legitimate
    gateway where I could then implement DNS poisoning. We'll also talk more about
    this later in the chapter.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的攻击中，攻击者会设置自己的 DHCP 服务器。事实上，作为攻击者，我会将这两种技术结合起来使用。我会设置一个恶意 DHCP 服务器，进行饥饿攻击，并让所有设备开始从我的恶意
    DHCP 服务器获取 IP 地址。这将使我能够做一些有趣的事情，比如发起**拒绝服务**（**DoS**）攻击，因为现在，受害者没有合法的网关，而我可以利用这一点实施
    DNS 欺骗。我们将在本章后面进一步讨论这个话题。
- en: MAC flooding attack
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAC 泛洪攻击
- en: You might think MAC flooding is what happens at an Apple store when Macs go
    on sale. To help you understand this better, let's figure out what a switch does.
    Now, a switch has a MAC table inside of it, and a MAC address is associated with
    network cards on nodes—or computers if you think of them that way—or printers.
    The switch keeps a list of the MAC addresses that are in each physical port on
    the switch, and this allows us to reduce broadcast traffic on our network. It
    also protects us from sniffing attacks.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为 MAC 泛洪是指在苹果商店当 Mac 开售时发生的事情。为了帮助你更好地理解这一点，我们先了解一下交换机的作用。交换机内部有一个 MAC
    表，而 MAC 地址与节点上的网络卡相关联——如果你把节点当作计算机或打印机来看。交换机会记录每个物理端口上所有设备的 MAC 地址，这样可以减少网络中的广播流量，也能保护我们免受嗅探攻击。
- en: With a typical MAC flood, the switch is fed a ton of Ethernet frames, and each
    frame contains different source MAC addresses sent by the attacker. The effects
    of this on the switch can vary depending on what the attacker is trying to accomplish.
    However, the big goal for most attackers is to force a legitimate MAC address
    out of the MAC table and inject a rogue MAC address to force traffic to go to
    a specific system they may be using for monitoring or for sniffing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的MAC洪泛攻击中，交换机接收大量以太网帧，每个帧包含攻击者发送的不同源MAC地址。这对交换机的影响可以根据攻击者的目标有所不同。然而，大多数攻击者的主要目标是迫使一个合法的MAC地址从MAC表中被清除，并注入一个伪造的MAC地址，将流量引导到他们可能用于监控或嗅探的特定系统。
- en: DNS poisoning
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DNS欺骗
- en: DNS poisoning is simply what it sounds like. It poisons the DNS entry, which
    resolves a name to an IP address. If I can tell you Citibank's IP address is my
    malicious website versus you going to Citibank's site, and I can inject that,
    I'm going to have a lot of fun with you. This is especially true if my malicious
    website looks just like Citibank's, including a username and login entry.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: DNS欺骗简单来说就是它听起来的那样。它会污染DNS条目，将域名解析为IP地址。如果我能告诉你，某银行的IP地址实际上是我恶意网站的IP地址，而不是你去银行网站的IP地址，我就能大肆玩弄你。特别是当我的恶意网站看起来和银行网站一模一样，包括用户名和登录入口时，这一点尤为真实。
- en: ARP poisoning
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ARP欺骗
- en: ARP poisoning is very similar to what we see with MAC flooding, but with ARP
    poisoning, we're going to try to associate the attacker's MAC address with the
    victim's address. This way, the traffic that is destined for the victim gets sent
    to the attacker instead.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ARP欺骗与MAC洪泛攻击非常相似，但在ARP欺骗中，我们试图将攻击者的MAC地址与受害者的地址关联。这样，本应发送到受害者的流量就会被发送到攻击者。
- en: Password sniffing
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密码嗅探
- en: As the name suggests, password sniffing is the ability to sniff packets going
    across, looking for passwords that are being transmitted in cleartext or without
    any type of encryption. In cases where passwords are encrypted, the attacker can
    use a decryption algorithm to try to decrypt that password, and I'm guessing you
    know what's going to happen after that, right?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，密码嗅探是指嗅探网络中的数据包，寻找以明文或未加密形式传输的密码。如果密码是加密的，攻击者可以使用解密算法尝试解密密码，而你应该知道之后会发生什么，对吧？
- en: Switch-port stealing technique
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交换机端口盗取技术
- en: This is extremely useful to sniff in a switched environment when ARP poisoning
    can't be done. It floods the **local area network** (**LAN**) with ARP packets.
    The destination MAC address of each stealing packet is the same as the attacker's,
    while the source MAC address is one of the victim's MAC addresses. By doing this
    to the switch, it steals the port from the victim.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当ARP欺骗无法实现时，在交换机环境中嗅探是非常有用的。这种方法通过ARP数据包淹没**局域网**（**LAN**）。每个欺骗数据包的目标MAC地址与攻击者相同，而源MAC地址则是受害者的其中一个MAC地址。通过这种方式，攻击者从交换机偷取了受害者的端口。
- en: What does this accomplish? All the packets destined for the victim's MAC address
    are received by the attacker, and when the attacker receives the packet of the
    stolen host, they stop the flooding process and perform an ARP request for the
    real destination of the packet. When they receive the ARP reply, they know that
    the victim has taken back their port, so the Ether cap can resend the packet to
    the destination as is. After that, we just loop that process over and over. It's
    quite tricky.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做有什么效果？所有目标为受害者MAC地址的数据包都会被攻击者接收，当攻击者收到被盗主机的数据包时，他们会停止洪泛过程并发起一个ARP请求，查询数据包的真实目的地。当他们收到ARP回复后，他们就知道受害者已收回其端口，因此Ether
    cap可以将数据包按原样重新发送到目标。之后，我们只需不断重复这个过程。这非常复杂。
- en: Hardware versus software sniffing
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件与软件嗅探
- en: 'You may be thinking, how do we sniff? Well, we have both hardware and software
    solutions to deal with. I''m going to warn you ahead of time, the hardware side
    is not cheap. On the hardware side of things, we have protocol analyzers. These
    devices are designed to monitor network traffic. This would be the poor man''s
    version:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，我们如何嗅探？实际上，我们有硬件和软件两种解决方案。我提前提醒你，硬件方面并不便宜。在硬件方面，我们有协议分析仪。这些设备专门用于监控网络流量。以下是比较简易的版本：
- en: '![Figure 10.2 – Various sniffing devices'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2 – 各种嗅探设备'
- en: '](Images/B17486_10_002.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_10_002.jpg)'
- en: Figure 10.2 – Various sniffing devices
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 各种嗅探设备
- en: I had an opportunity to play around with one, the Fluke pictured in the middle
    and at the bottom in the preceding figure. It's such a fantastic little device.
    They're not only used to monitor but also analyze the data. With the Fluke, we
    can see how long the cable run is. If there were a break, we would see how far
    down the cable it was broken. You could also analyze the top protocols being used
    on the network. A multi-port testing system device such as the *N2XN5540A* would
    allow you to monitor and verify the performance of networks and devices.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾有机会玩过其中一个设备，前面图中间和底部所展示的 Fluke。它真是一个非常棒的小设备。它们不仅用来监控，还用来分析数据。使用 Fluke，我们可以看到电缆的长度。如果发生断裂，我们可以看到电缆断裂的位置。你还可以分析网络中使用的顶级协议。像*N2XN5540A*这样的多端口测试系统设备，可以帮助你监控并验证网络和设备的性能。
- en: Again, as mentioned earlier, not only can we analyze data, but we can also capture
    data and play it back later if we want to. The attacker can see the individual
    data bytes of each packet as it passes through the cable.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提到，正如之前所说，我们不仅可以分析数据，还可以捕获数据并在以后播放。如果攻击者愿意，他们可以看到每个数据包通过电缆时的单独数据字节。
- en: These devices are very expensive, and most run-of-the-mill attackers won't have
    that type of budget. The cheaper alternative is software. One of the more popular
    products out there is Wireshark, originally known as Ethereal. It is a cross-platform
    product that uses **Packet Capture** (or **PCAP**) as an **application programming
    interface** (**API**) that captures live network packet data to capture your packets.
    If you know me, you know I believe nothing is for free, but trust me—this product
    is completely free. It supports being able to look at data from Ethernet to the
    **Institute of Electrical and Electronics Engineers** (**IEEE**) *802.11 PPP*,
    as well as running from a **graphical user interface** (**GUI**) or a **command-line
    interface** (**CLI**).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备非常昂贵，大多数普通的攻击者都无法承担这样的预算。更便宜的替代方案是软件。市场上较为流行的产品之一是 Wireshark，最初称为 Ethereal。它是一个跨平台的产品，使用**数据包捕获**（或**PCAP**）作为**应用程序接口**（**API**），捕获实时网络数据包来捕捉你的数据包。如果你了解我，你就会知道我相信没有什么东西是免费的，但相信我——这个产品是完全免费的。它支持从以太网到**电气和电子工程师协会**（**IEEE**）*802.11
    PPP*的数据查看，并且可以通过**图形用户界面**（**GUI**）或**命令行界面**（**CLI**）来运行。
- en: I had an opportunity to see Laura Chappell, the Wireshark expert, in a presentation,
    and she blew me away at how quickly she was able to recover passwords and look
    at the data. It's kind of where I got my start. This was back in the old days
    when *Novell* had a big market share of the networking world. That just tells
    you how old I am, right?
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾有机会看到 Wireshark 专家 Laura Chappell 的演讲，她让我惊叹于她恢复密码和查看数据的速度。这就是我开始接触这一领域的地方。这是在很久以前，当*Novell*在网络世界占有大量市场份额的时候。那就说明了我有多老，对吧？
- en: In your immediate future, you will see some questions concerning some of the
    filters for Wireshark, so I highly recommend you study up. You don't need to dive
    in too deep—just look at the basic ones out there. And there are other products
    out there such as OmniPeek, which has a nice little GUI.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在你不久的未来，你会遇到一些关于 Wireshark 过滤器的问题，所以我强烈建议你好好研究一下。你不需要深入钻研——只需要了解一些基础的过滤器就行。市面上也有其他类似的产品，如
    OmniPeek，它有一个不错的 GUI。
- en: 'There''s also SoftPerfect''s **Network Protocol Analyzer** (**NPA**). Microsoft
    has its own product too: the Microsoft Network Monitor. If you saw it a long time
    ago, it''s gotten a facelift, so you may want to look at it again.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 SoftPerfect 的**网络协议分析仪**（**NPA**）。微软也有自己的产品：Microsoft 网络监控器。如果你很久以前看过它，它已经有了改进，所以你可能要再看一眼。
- en: And just to use my favorite word, there are a plethora of network sniffers out
    there that are used for the dark side. Some of them are extremely small—they can
    run off **Universal Serial Bus** (**USB**) drives, Raspberry Pis, and Cain and
    Abel, which happens to be one of my favorite ones because it's quick and dirty.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 说到我最喜欢的词，市场上确实有大量的网络嗅探器被用于“黑暗面”。其中一些非常小巧——它们可以从**通用串行总线**（**USB**）驱动器、树莓派运行，甚至
    Cain and Abel，后者是我最喜欢的工具之一，因为它快捷而简便。
- en: We also have AirSnort, which I'm sure you can figure out. There's one called
    Snort. AirSnort was Snort for Wi-Fi. Snort was extremely powerful. I used it with
    my **internet service provider** (**ISP**) service as well. It's so powerful—it
    sniffed the traffic, and if we saw DoS attacks coming in from a specific address,
    we had a Snort rule that executed off and automatically blocked that IP address
    at the router.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有 AirSnort，我相信你能猜到它的用途。还有一个叫 Snort 的工具。AirSnort 是为 Wi-Fi 设计的 Snort。Snort
    非常强大，我曾与我的**互联网服务提供商**（**ISP**）服务一起使用。它非常强大——它能嗅探流量，如果我们发现来自某个特定地址的 DoS 攻击，我们会设置一个
    Snort 规则，自动在路由器上阻止该 IP 地址。
- en: Now, not all of these are used for the dark side—I just want you to know there's
    a wide variety of products out there used for both good and evil, therefore bringing
    balance to the force. See how I got that one in?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，并非所有这些应用都用于“黑暗面”——我只想让你知道，市面上有许多不同的产品，它们既可用于正当用途，也可能用于恶意用途，从而带来平衡。看，我是如何巧妙地将这句引入的？
- en: Sniffing mobile apps
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嗅探移动应用
- en: There may be situations where you may not have access to a laptop or you're
    just trying to be a little bit more discreet in your pen test, or the attacker's
    trying to be a little bit more discreet instead of walking around your environment
    with a laptop. That's okay. If you don't have one, there are mobile apps out there.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况，你没有笔记本电脑可用，或者你只是想在渗透测试中保持更加低调，或者攻击者试图在不带笔记本的情况下保持低调，而不是在环境中四处走动。没关系，如果你没有笔记本，市面上也有移动应用可以使用。
- en: What I find interesting is, I looked on the Apple Store and I couldn't find
    anything that wasn't rated anything higher than one star, which is kind of weird.
    But then again, I'm not an Apple guy, so maybe you can find some of your own products
    out there for the Apple side.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得有趣的是，我在 Apple Store 上查看时，找不到任何评分高于一星的应用，这有点奇怪。不过，说实话，我不是苹果用户，也许你可以找到一些适合
    Apple 的产品。
- en: On the Android side, though, there are a plethora of options, and that's one
    of the reasons I prefer Android. One of the most popular ones is Wicap 2, and
    it comes in two different versions. There's the demo version, which is just a
    demo of their product. It gets really good reviews and has a good following. However,
    it requires rooting of your phone.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 端，选择非常多，这也是我偏爱 Android 的原因之一。最受欢迎的应用之一是 Wicap 2，它有两个不同版本。一个是演示版，仅仅是他们产品的演示。它得到了非常好的评价，也有相当多的用户跟随。不过，它需要对手机进行
    root。
- en: This company also makes a full product, which is the one that really gets rave
    reviews. It comes at a price, but it's extremely popular as far as its ratings
    are concerned, and a lot of people have good things to say about it.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这家公司还生产一款完整的产品，这款产品真正获得了广泛好评。虽然价格不便宜，但就其评价而言，它非常受欢迎，很多人对它赞不绝口。
- en: Another one is PCAP, and it's kind of scary. Not only does it work as a network
    sniffer, but it also includes **Secure Sockets Layer** (**SSL**) decryption, which
    it does through a MITM attack. It does not require root access, which could be
    why it's a little more popular as well, but the interface is very similar to what
    we see coming from Wireshark.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个工具是 PCAP，它有点吓人。不仅它能作为网络嗅探工具使用，而且它还包括**安全套接字层**（**SSL**）解密功能，这是通过中间人攻击实现的。它不需要
    root 权限，这也许是它更受欢迎的原因之一，但它的界面与我们从 Wireshark 上看到的非常相似。
- en: Once you learn one sniffing technique, you'll see similarities through the different
    product lines out there. Again, mobile apps are an option to go with when you're
    trying to sniff a network.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你掌握了一种嗅探技术，你会发现不同产品之间有许多相似之处。再次强调，当你想嗅探网络时，移动应用是一个不错的选择。
- en: Next, let's take a deeper look into what DHCP assaults are.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们更深入地了解一下 DHCP 攻击。
- en: DHCP assaults
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DHCP 攻击
- en: '*DHCP Assaults* sounds like a cool title for a movie, doesn''t it? DHCP is
    such an integrated technology throughout our network infrastructure, it is an
    extreme target for an attacker to get to because we can control so many things
    when it comes to the use of this technology.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*DHCP 攻击* 听起来像是一部很酷的电影标题，对吧？DHCP 是我们网络基础设施中如此集成的技术，它是攻击者的极大目标，因为我们可以控制很多与这种技术相关的内容。'
- en: So, what is DHCP and what is it for? If you don't know what it is, I'll give
    you a quick overview of what it's designed to do.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是 DHCP，它的作用是什么？如果你不知道它是什么，我会简要介绍它的功能。
- en: DHCP is a specialized server role we install on a server. We do this because
    any computer that needs to connect to the network or gain access to resources,
    whether internal or external (such as the internet), needs some way of connecting,
    and we do that via IP addresses.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 是我们安装在服务器上的一个专门服务器角色。我们这么做是因为任何需要连接到网络或访问资源的计算机，无论是内部的还是外部的（比如互联网），都需要某种连接方式，而我们通过
    IP 地址来实现这一点。
- en: DHCP oversees assigning IP addresses to computers as they hit the network. It
    does that by creating a scope—basically, a database of IP addresses.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 负责在计算机连接到网络时分配 IP 地址。它通过创建一个范围——基本上就是一个 IP 地址的数据库——来实现这一点。
- en: One of the main responsibilities of the DHCP server is to keep track of which
    computer has which IP address. This way, we don't get a lot of duplication going
    on.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 服务器的主要职责之一是跟踪哪个计算机拥有哪个 IP 地址。这样，我们就不会出现重复的情况。
- en: DHCP is what we refer to as a client-server model, and being a protocol, it
    has its own set of messages it exchanges between the client and the server as
    they're trying to get an IP address. Once we assign an IP address to the client
    machine—workstations, printers, your cell phone, tablet, or other servers—there
    are certain servers we want to make sure are statically assigned an IP address.
    That would be, obviously, the DHCP server itself. You can't really get an IP address
    from yourself when you haven't even fired off yet, so the other thing we do, besides
    assigning IP addresses, is assign other **Transmission Control Protocol** (**TCP**)/IP
    settings.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 是我们所说的客户端-服务器模型，作为一种协议，它有一套在客户端和服务器之间交换的消息，用于获取 IP 地址。一旦我们为客户端计算机分配了 IP
    地址——无论是工作站、打印机、手机、平板，还是其他服务器——有些服务器我们希望确保其 IP 地址是静态分配的。显然，最重要的是 DHCP 服务器本身。你不可能从自己这里获取一个
    IP 地址，尤其是在你还没有启动的情况下，所以除了分配 IP 地址，我们还会分配其他 **传输控制协议**（**TCP**）/IP 设置。
- en: Those settings would include things such as a DNS server. Where do I go to discover
    what *Yahoo.com* is equated to as far as an IP address? Or, where do I go to find
    out where the bat cave is located as far as an IP address is concerned?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置包括 DNS 服务器。我要去哪里查找 *Yahoo.com* 对应的 IP 地址呢？或者，我要去哪里找到蝙蝠洞的 IP 地址呢？
- en: 'Another type of setting we could assign would also be a default gateway, which
    is: how do I get out of this network? If I''d like to go to Yahoo, I''ve got a
    DNS server that tells me Yahoo is equal to this address, but how do I get there
    from here? That''s what the default gateway is designed to do.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可以设置的类型是默认网关，它的作用是：如何从这个网络出去？如果我想去 Yahoo，我有一个 DNS 服务器告诉我 Yahoo 对应的地址是什么，但我如何从这里到达那里呢？这就是默认网关的设计目的。
- en: 'Now, granted—you could type these on individual computers if you would like,
    but imagine being an IT person in charge of 50 computers (which is actually a
    low number), and you must go type in the IP address, the DNS IP, the default gateway,
    and a subnet mask. Typing in that information over and over, even just 50 times,
    let alone thousands of times, could lead to a serious illness that''s out there
    that I want to draw your attention to: fat fingers, which is something I have.
    I don''t know how many times I''ve fat-fingered an IP address; I''ll reverse it—instead
    of typing in **192**, I''ll type in **129**, just because I''m going so fast and
    typing in that information over and over.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，承认这一点——你当然可以在单独的计算机上输入这些信息，但想象一下你是负责 50 台计算机的 IT 人员（这其实是一个很小的数字），你必须反复输入
    IP 地址、DNS IP、默认网关和子网掩码。反复输入这些信息，哪怕只有 50 次，更不用说上千次，可能会导致一种我想提醒大家注意的严重疾病：手指胖，这也是我有的症状。我不知道我多少次因为输入太快，手指一滑，反而把
    IP 地址输入错了——比如我把 **192** 输入成 **129**。
- en: DHCP starvation attacks
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DHCP 饿死攻击
- en: 'DHCP starvation reminds me of the famous scene in *Oliver!* where the little
    boy goes up and says: *More, please*. And of course, the word *starvation* sounds
    so ominous. The concept is, you have your DHCP server and it''s going to have
    a scope or multiple scopes that represent different subnet ranges. In this case,
    we''re going to go with **192.168.0.1**, all the way up to **254**. It''s simply
    a list or a database of IP addresses it can issue out to client machines.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: DHCP 饿死攻击让我想起了 *雾都孤儿* 中那个著名的场景，那个小男孩走上前说：“*再来一些*”。而且，单词 *饥饿* 听起来非常不祥。这个概念是，你有一个
    DHCP 服务器，它将拥有一个范围或多个范围，代表不同的子网地址范围。在这种情况下，我们将选择 **192.168.0.1**，一直到 **254**。这仅仅是一个
    IP 地址的列表或数据库，它可以分配给客户端计算机。
- en: As the network comes up, a client makes a request. That information is passed
    through the switch and then sent to the DHCP server to get their IP address. Along
    with that information comes information such as its default gateway, the DNS server,
    and how long the lease is going to be.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that with a lease, the client itself will check when
    50% of the **time to live** (**TTL**) of the lease has been expired back with
    the DHCP server to find out whether it's okay if it uses that IP address. This
    is all well and good in a normal environment, but enter our attacking machine,
    which basically goes and floods the network with DHCP requests or discovers and
    the DHCP server thinks it's different client machines requesting those IP addresses.
    In fact, the program is so sophisticated that it shows the different MAC addresses
    associated with those requests.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: What ends up happening? The DHCP server thinks it's sent out all the different
    IP addresses and the scope is then depleted, meaning the client machine is then
    denied access to get an actual IP address, or it is starved.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: There are several programs you can use to accomplish this type of attack. Two
    of the more famous ones are Gobbler and Yersinia.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Going rogue
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to going rogue, what we're doing is making sure you understand
    the standard DHCP environment. What we end up doing is a starvation attack on
    that machine.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: In a rogue attack, the attacker will introduce their own server that's going
    to issue out DHCP.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here, I have my client machines, and we''ve got our standard nifty little
    DHCP server that''s legit for the network, hooked up with our switch:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Normal network with a DHCP server'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17486_10_003.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Normal network with a DHCP server
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Again, normally, they would send their DHCP discovers to the switch, which would
    then get approved by the DHCP server. However, when it comes to a rogue DHCP server
    attack, the attacker introduces a rogue DHCP server to the network.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the client machines to get their information from the rogue server,
    they simply must do the starvation attack against the DHCP server—the legitimate
    one. It goes offline, and then the requests automatically get redirected because
    the DHCP server is just looking for discovers, and it responds back to the client
    machines and issues them away from the settings that could compromise the box,
    as illustrated here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Attack inserts a rogue DHCP server'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17486_10_004.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Attack inserts a rogue DHCP server
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: For example, I could say your DNS is equal to my attacking DNS server, and in
    it, I have Citibank is equal to my malicious site that looks just like Citibank
    or eBay or PayPal or Amazon. I can totally control the environment. If you type
    in **Yahoo**, I could send you to Google.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The other result is all the traffic from the client will be sent to the attacker's
    IP address because I could also list it as the default gateway, which would then
    allow me to sniff the network. The client will simply assume everything is functioning
    correctly. I may be forwarding them from my rogue server out to the legitimate
    sites, but again, I'm going to have all the traffic pass through me.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, we get a rogue server on the network nobody meant to get up there.
    We have a developer or somebody who's doing a test environment who fires up a
    DHCP server. Them placing this server on the network can interfere with the environment,
    and this type of attack is also extremely difficult to detect on the network unless
    you're taking some countermeasures.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Countermeasures
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll start with stopping a DHCP starvation attack. Considering the attacking
    machine sends a DHCP discover request to the switch, one of the things we can
    do is implement port security, a feature of the switch designed to set the maximum
    number of MAC addresses per port.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: If I know I only have five computers down this one line on this switch, I will
    want to set my port security to **5**, which should prevent a starvation attack
    that would be implemented through that port.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: On configuring port security, you will want to reference the manufacturer of
    your switch, but when we look at one of the most popular products out there, which
    would be Cisco, the port security is turned off by default. The switch itself
    must be a **level 2** (or **L2**), and when you need to enable port security,
    you simply type in **switchport port-security**, which activates port security.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: You can also do things such as setting the maximum to **1**, the maximum number
    of MAC addresses on a switch. You can also specify how many MAC addresses the
    switch can have on one interface at a time. The number could be anywhere from
    **1** to **6200** or so.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Something else we can do is set the action that's going to take place when a
    violation occurs on that interface. The default is to shut down the interface,
    effectively stopping any traffic from coming from the suspected system, but you
    can also use **switchport**. Port security violation is restricted, which just
    means it discards the traffic and sends a **Simple Network Management Protocol**
    (**SNMP**) message but keeps the port up and running.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the *protected* option on the switch, which discards all traffic,
    keeps the port up, but doesn't send an SNMP message. And of course, *shut down*
    does exactly what it says it's going to do.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Another option is setting the aging for port security. This would allow you
    to set the time, as well as the type for all secure addresses on the port or how
    long the port stays off. The aging time can go from 2 minutes to almost 1,500—the
    famous 1,440 minutes or 1,400 and 40 minutes. You can specify the type using **absolute**
    or **inactive**. For absolute aging, all the secured addresses on this port go
    out exactly after the minutes we specified and are removed from the secure address
    list. For inactive aging the secure addresses on this port go out only if there's
    no data traffic from the secured source for that specific amount of time.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: To stop a rogue attack, we implement DHCP snooping, a feature that's going to
    be available on your switch. It stops ports from responding to DHCP offers. For
    example, if I had a DHCP server and it were connected physically to port **1**,
    I would turn off snooping on ports **2** through **8**.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: What happens if an attacker manages to build up a DHCP server and puts it under
    the switch? They won't be able to get any responses or to respond to DHCP discover
    packets because it's only allowed to go down the ports your legitimate DHCP server
    is on.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft also did some interesting things—they started us up with Server 2008\.
    If you had an **Active Directory** (**AD**) environment, you had to authorize
    the DHCP server in AD, which means it would come up. So, if you went and installed
    DHCP, that was one of the steps you had to do. If you didn't have the rights to
    do it, even though you had the role installed, it would never actually fire off.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: This is great for the Microsoft world, but it doesn't stop somebody from firing
    up a Linux DHCP server, and that is where I would implement DHCP snooping on my
    switches.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss MAC attacks next.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: MAC attacks
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are from the **United States** (**US**) and grew up around *McDonald's*
    back in the good old 1970s before it became the worldwide phenomenon it is now,
    you'll remember their interesting commercial with the phrase describing a Big
    Mac attack, which was two all-beef patties, special sauce, lettuce, cheese, onions,
    all on a sesame seed bun. However, we're not talking about food. MAC is short
    for **media access control**, and every single NIC we get has a MAC address.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Packets sent on Ethernet are always coming from a MAC address, and they''re
    also sent to a MAC address. I know you''re thinking: wasn''t that the job of IP?
    Well, TCP/IP deals with MACs, but when we get down to it, it''s the MAC address
    that is utilized for the transmission and receiving of packets. Each port, whether
    it''s on a NIC or on a printer or a laptop, is going to be unique.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: If the network adapter is receiving a packet, it's comparing the packet's destination
    MAC address to the adapter of this MAC address that's on its own card. If it matches,
    it then allows the packet to proceed. If it doesn't match, it just drops it.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The MAC address is typically a 12-digit number. As with an IP address, the MAC
    address also has a syntax to it, in the aspect the first 6 characters are what
    we refer to as the *prefix*. Those first 6 characters are uniquely assigned to
    different vendors. So, in those 12 digits, the first 6 are listed as a prefix,
    and the prefixes are assigned to specific vendors. As an example, there are several
    prefixes assigned to Linksys, so if I saw a prefix of a MAC address of **00:13:10**
    or **00:25:9C** or **68:7f:74**, I would know this was a Linksys device.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: There's a MAC address out there that is unique. It is simply 12 Fs—that is,
    **FF:FF:FF:FF:FF:FF**. It is very similar to my report card in high school… It's
    a broadcast address and addresses every adapter in the network itself.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: CAM
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CAM is MAC spelled backward, but of course, that's not what it represents. **CAM**
    is short for a **content-addressable memory** table and every switching device
    it has inside of it. As packets pass through the switch, they include a destination
    and a source MAC address, meaning this is the destination I'm trying to get to
    and it's coming from this source.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'As traffic passes through the switch, the CAM table simply tracks the MAC addresses''
    locations and specifies which port each MAC address is assigned to. So, in this
    case, you can see the switch knows I''m not going to read off the full MAC address
    here, I''ll just do the last two letters, but you''ll notice in the following
    diagram that **FF** is in the first port and the MAC address ending in **TT**
    is in the sixth port:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – CAM tables on a switch tracks MAC addresses'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17486_10_005.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – CAM tables on a switch tracks MAC addresses
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Now, when a packet goes through the switch, the switch does a broadcast using
    the **FF:FF:FF:FF:FF:FF** MAC address. It shoots out a Bulk API broadcast, trying
    to find the MAC address that ends with **A1**. When it reports back, it simply
    makes a notation in the CAM table, and that note is located on a given port. The
    CAM table is in the memory of the switch, so if you power off a switch or reboot
    a switch, the CAM table is cleared out. This feature of a switch, of learning
    where the different MACs are located, helps us in reducing broadcast traffic,
    as well as traffic destined for one computer not getting sent to the wrong port—at
    least, that's the goal.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'It doesn''t stop with a single switch because most networks have more than
    one switch. Here, I''ve got two switches, and of course, each one''s going to
    have its own CAM:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Each device will have its own CAM](Images/B17486_10_006.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Each device will have its own CAM
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: In this case here, we're trying to find a destination ending in **FF**; you
    can see in *Figure 10.7* my destination MAC address and my source MAC address.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: If in the actual network environment, the MAC address that's associated with
    **FF** is located on the second switch, that switch will know where that MAC address
    or that computer is located. However, this first router doesn't have any idea
    where that's located, and so if a computer is trying to send a packet or a piece
    of data to a machine on the secondary switch and it's located on the first switch,
    we must somehow resolve this.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在实际网络环境中，与**FF**相关联的MAC地址位于第二个交换机上，那么该交换机将知道该MAC地址或计算机的位置。然而，这个第一个路由器不知道它的位置，所以如果一台计算机试图发送数据包或数据片段到次级交换机上的一台机器，而它位于第一个交换机上，我们必须解决这个问题。
- en: 'Again, the first switch will have MAC addresses for systems that it''s aware
    of, as well as the MAC address of the ports on the switch itself—in this case
    here, the uplink port:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，第一个交换机将了解它所知道的系统的MAC地址，以及交换机本身端口的MAC地址—在这种情况下，上行端口：
- en: '![Figure 10.7 – CAMs track which port a MAC is on'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – CAM跟踪MAC地址所在的端口'
- en: '](Images/B17486_10_007.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17486_10_007.jpg)'
- en: Figure 10.7 – CAMs track which port a MAC is on
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – CAM跟踪MAC地址所在的端口
- en: 'Here, the uplink port is ending in **21**, and the switch is smart enough to
    know that this port is associated with the MAC address over here on the secondary
    switch in its uplink port:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，上行端口以**21**结尾，交换机足够聪明，知道这个端口与次级交换机上的MAC地址相关联：
- en: '![Figure 10.8 – Uplink ports know where to forward based on the CAM](Images/B17486_10_008.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 上行端口根据CAM知道要转发到哪里](Images/B17486_10_008.jpg)'
- en: Figure 10.8 – Uplink ports know where to forward based on the CAM
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 上行端口根据CAM知道要转发到哪里
- en: As the first switch does a broadcast, the second switch responds and says, "*Hey,
    I know about that one, so just forward all the packets to me*," and that's what
    happens.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一个交换机广播时，第二个交换机会回应并说，“嘿，我知道那个，所以把所有数据包都转发给我”，然后就会发生这种情况。
- en: The CAM table on this first switch says anytime you want to send something to
    **FF**, just forward it to **21**, and then **21** will take care of it because
    it has the MAC address of that secondary switch. Now, did I clear up the water
    there or did I muddy it up?
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个交换机的CAM表说，每当你想发送东西给**FF**，只需转发到**21**，然后**21**会处理，因为它有那个次级交换机的MAC地址。现在，我是澄清了还是搞混了？
- en: This is also true with that secondary switch. It would be aware of the ports
    it's connected to back to switch **1**, and this is how we have a fully switched
    networked environment. The whole process is quite efficient, which should tell
    you the government is not involved.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于次级交换机也是如此。它会知道它连接到交换机**1**的端口，这就是我们拥有完全交换网络环境的方式。整个过程非常高效，这应该告诉你政府没有参与。
- en: Flooding
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 洪泛
- en: Now that we understand how a switch works and how packets move across the network,
    our whole goal is to look at MAC attacks. Part of that attack is referred to as
    flooding.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了交换机的工作原理以及数据包如何在网络中传输，我们的整个目标是研究MAC攻击。这种攻击的一部分被称为洪泛。
- en: You may be thinking it's cool the switch does all that, but as I said before,
    you can't sniff a network that is switched, and that is true unless you get the
    switch too full that it can't get any more notations of where MAC addresses are
    located. This kind of goes back to the old days of what different network devices
    do, and typically, as we move up the scale in our network device, we start off
    with a hub and a hub sends a broadcast out to every single port, then we move
    up to a switch. A switch will do what a hub does, but it does it on steroids,
    meaning it's going to start monitoring and directing traffic, which is what we
    saw with that CAM, and then you get into routing.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为交换机能做到这一切很酷，但正如我之前所说的，你无法嗅探到交换网络，除非你让交换机变得太满，无法再获取MAC地址的位置信息。这有点回到了不同网络设备的旧日子，通常情况下，随着我们在网络设备中的升级，我们从集线器开始，集线器向每个端口发送广播，然后我们升级到交换机。交换机会执行集线器的功能，但是它会更强大，意味着它会开始监视和引导流量，这就是我们在CAM中看到的，然后你会进入路由。
- en: The overall concept is some switches go backward in time. If I have my switch
    and my CAM table, and I know where my different MACs are located on which port,
    a very common trick for an attacker to implement is to fire up their box. If I
    overload that switch with too many records for it to keep track of what's going
    on with which MAC, which we call flooding the switch, it does something interesting—it
    dumbs itself down and becomes a hub.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Every single packet will be broadcasted across all the ports. It's the default
    feature of most switches, especially consumer-rated switches because you don't
    want to lose connectivity.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: As a side note, there are other ways you can sniff a network on a switch. Besides
    a MAC attack, there are actual ports on a switch, or a lot of managed switches
    referred to as **Switched Port Analyzers** (**SPANs**) or SPAN ports. These ports
    mirror and allow an attacker or a network administrator to monitor all traffic
    going across.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The MAC flooding method is extremely noisy on the network and very easily detected.
    However, it's only going to be detected by some of the more advanced switches
    out there, which is why it's always important to know about your inventory and
    what you've got running where (loading).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Countermeasures
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to protecting yourself, you'll see a lot of repeats of what we've
    already talked about, and the reason we see this over and over is that it's all
    done at the network layer. There are some cool things you can use, such as Cisco's
    port security feature. You can use it to secure a port. So, if you assign a MAC
    address to the secure port, the port will only forward packets to the machine
    that's destined on that port.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: What's cool about this technology is you can set up alerts to do that. For example,
    if something suspicious starts happening on the network, such as a MAC address
    of a machine trying to access a port that doesn't match an identifiable secure
    MAC address or any type of violations, we can be alerted of those things.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: We also have the option of using an **authentication, authorization, and accounting**
    (**AAA**) server, which we often refer to as a RADIUS server.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: These servers require computers and users to authenticate themselves and track
    what they're doing and where they're going automatically. Typically, this is done
    either by somebody logging in or possibly via a certificate. I had an AAA server
    with my ISP, and we did it for the accounting portion of it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: If you remember, back in the old days, you got charged for the time you were
    on the internet, right? As with the old *AOL* days. We didn't charge people; we
    wanted to be able to get a breakdown to our users saying, "*Hey, this is how much
    time you spent on the internet; this is how much data you've downloaded through
    our services*," and we were able to do that because we could match that up to
    the MAC address of their antennas and their routers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: We'll discuss ARP poisoning next.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: ARP poisoning
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARP poisoning is a mechanism we can use during the sniffing process, and its
    capability is quite scary. The concept is… we're going to trick people into doing
    something or going to a place they don't intend to, and we do this at a computer
    level.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Growing up, my father would tell me: "*You can only trick people for so long,
    but until then, take advantage of the situation.*" Of course, he would say this
    in a light-hearted way—he didn''t really believe this. It always seemed to him
    people were trying to do this to him. He was working for a movie theater chain
    and his job entailed going to different areas to find where managers and employees
    were stealing from the company. He always said people thought they could come
    up with a new way of finding "*a way around the system*" so that they wouldn''t
    be detected, but technically, it was never a new way. It was just a new path using
    an old mechanism, and that old mechanism was just theft.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: ARP takes us back to the old *Network+* days, possibly *A+* days, and if you're
    old enough, you'll remember the old *Networking Essentials* days. ARP is a protocol
    that has been around for some time. If you have gone through previous chapters,
    you'll remember we discussed network cards and how they had a MAC address associated
    with them. We also talked about how MAC addresses are the true way computers or
    nodes communicate with each other.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The computer needs to be able to resolve a MAC address to an IP address, which
    is very similar to what we refer to as name resolution. If you remember, we also
    mentioned in the other chapters that DNS gives us the ability to resolve a name
    such as *Yahoo.com* to an IP address.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Well, because computers or nodes are giving these physical addresses, ARP is
    what's responsible for resolving it to the IP address.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: I know this totally blew your mind, and that's what ARP does for us. It's a
    protocol designed to map an internet IP address to a physical machine address.
    Typically, all of this is done via a table. Now, it's not a table such as a spreadsheet,
    but you can kind of think of it that way. We refer to it as an **ARP cache**,
    and because it's cached, it is information that is stored in memory.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, the information does not stay in memory for a long time, which is
    kind of the downside to it. Besides, it''s easily manipulated because when a packet
    is destined for a host machine on a particular LAN, it arrives at the gateway,
    which then asks ARP to find the physical host or MAC address that matches that
    IP address. If it doesn''t have it in the cache, it does a broadcast if a node
    wants to update the switch or the router its MAC address has changed. This is
    kind of what we''re going to do with an ARP poison: we''ll trick the switch or
    the computer into thinking its ARP table is no longer valid.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: ARP spoofing
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ARP spoofing is another name for poisoning—we use the names interchangeably.
    This is all under the concept that the machine that sends the ARP request assumes
    the ARP reply comes from the correct machine, which we know in our case is not
    going to happen.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of you are now thinking: he''s about to scare me again. No—it''s time
    to put the big pants on and seek to understand what''s happening here.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Here is what we can do to implement this type of attack. We send forged data—or,
    how I like to put it, forge our way. The attacker can create what we refer to
    as a malformed ARP reply containing the spoofed IP address and MAC address.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the target's machine blindly accepts the ARP entry into its ARP
    table. The attacker then overloads the switch, forcing the switch to go into a
    new mode, referred to as forwarding mode. They do this by sending a ton of ARP
    requests and reply packets to the switch.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: After doing that, the attacker floods the target's ARP cache with the forged
    entries, which is what we refer to as spoofing or poisoning the target.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing or poisoning the target
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spoofing or poisoning the target looks like a complicated technique, but it's
    not that bad, because guess what? We have some really cool tools out there, including
    **dsniff**, which is actually a set of password-sniffing and network traffic-analyzing
    tools. And it has some other tools in there besides **dsniff**. There's **filesnarf**,
    **mailsnarf**, **messagesnarf**, and **arpspoof**—which simply allows us to poison
    a target.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Another tool out there is the Ettercap. It's also an open source security tool
    we can use for MITM attacks, and it does some protocol analysis as well as security
    auditing.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: We also have Cain and Abel, which is a suite of tools we can use to do poisoning.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, you can use these tools for good, but remember: all tools can be used
    for evil.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: How to poison the network via ARP
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's time to break out the brothers! I mean, install and try out Cain and Abel.
    Cain and Abel gets its name from a biblical story of two brothers, one that slays
    the other, therefore bad versus good. That's exactly what you see with this product.
    Sometimes, it's just referred to as Cain because it's mostly evil.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, raise your hand and say the oath that you will not do anything with some
    of these tools, and you will never tell law enforcement that *Dale told you it''s
    okay to run this on a live network!* This tool can easily spoof and poison a device''s
    ARP table and trick all the devices on the network to send their traffic through
    an attacker''s system. You can see an overview of the tool''s interface in the
    following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Cain and Abel interface](Images/B17486_10_009.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Cain and Abel interface
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Cain and Abel has some additional tools to it that can grab hash tables and
    crack the different passwords that may pass through, and the good thing is, it's
    not limited to capturing Microsoft passwords. It can capture some **802.11** captures,
    **Wi-Fi Protected Access-Pre-Shared Key** (**WPA-PSK**) hashes, Cisco IOS-**Message
    Digest 5** (**MD5**) hashes, and so on.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: It's quite an interesting little program, and as I always say, knowing is half
    the battle. If you do a software inventory scan on your systems and see somebody
    running Cain and Abel, you will have a good idea of what they're doing with it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: IRDP attacks
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Internet Control Message Protocol (ICMP) Router Discovery Protocol** (**IRDP**)
    spoofing is an interesting routing protocol that allows a host to discover the
    IP address of active routers and get out to the internet. The routers must be
    on their own subnet. They do this by listening for router advertisements and solicitation
    messages on the network. When they discover those messages, they simply record
    who their router is and put that into their table.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: An attacker can add a default routing entry to the system remotely by spoofing
    a router advertisement message and sending it directly to the victim. What's interesting
    is that IRDP doesn't require any authentication. The target host will prefer the
    default route defined by the attacker and update their table so that everything
    is passed through the router they have defined, even if they're using DHCP and
    a default router has been provided for them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: This is accomplished when the attacker goes and sets a preference level and
    a lifetime of the route at a very high level to make sure the target host will
    choose it as the preferred route. The downside of this one is that the protocol
    only looks for routers on its own subnet. The attacker must be on the subnet,
    but it can be done.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Using this type of spoofing allows the attacker to passively sniff the network
    and to implement a MITM attack, or even a DoS attack. So, yes—this one is not
    very good either.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Dangers of ARP attacks
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, what kinds of threats do ARP attacks create? ARP poisoning presents different
    threats.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the different dangers and risks of ARP attacks, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '**DoS attack**: If you were to go through and link many IP addresses with a
    single MAC address of the target, it would be overloaded with a ton of traffic
    destined for different IP addresses.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Voice over IP (VoIP) conversations**: We can tap into these as well. If we
    were to do a port mirror, this would allow us to record VoIP conversations between
    the two systems.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MITM attack**: The attacker is going to stay right smack in the center between
    the target and the victim. Again, this is where the attacker''s machine is going
    to be placed in between the two systems, or multiple systems, and intercept all
    the traffic that''s going to pass through.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I was teaching ethical hacking at a school district and a couple of people came
    from a different school district in Utah, including two gentlemen from the same
    school district—a boss and his sidekick who were good friends. They were staying
    in separate hotel rooms, so once the sidekick was back in his room after a lesson
    on sniffing and a demo, he jumped onto the Wi-Fi network, watched his boss log
    in to the **virtual private network** (**VPN**), and captured his VPN username
    and credentials. He then went over and showed him what he was able to do. I know
    what's running in your mind and, no—he didn't get fired.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Of course, he should have had permission to do that, but it was quite interesting.
    Both came in the next morning kind of perplexed and dumbfounded that this type
    of information can go across. Again, I'm very leery about what I do on Wi-Fi networks.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Session hijacking**: This can be done actively or passively. Basically, if
    you''re being passive, you ride along in the session and get all the information.
    Being active makes it possible for you to bump that person off and take over the
    session they may have created with PayPal or their bank.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data interception**: You can get IP address ranges, MAC addresses, computer
    names, and even **virtual LANs** (**VLANs**) connected to the switch.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection hijacking**: This is where the attacker manipulates the client''s
    connection to take total control of their connection.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data manipulation**: This is where the attacker decides to manipulate data.
    If we''re able to be the go-between, the attacker can capture and modify packets,
    or even stop the flow of information between systems, which gets us back to that
    DoS issue. And, of course, we can also steal passwords.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A connection reset**: You know that ARP entries are stored inside of the
    cache for a specific period, even if the connection is not active, right? Well,
    if the host fails to initiate a connection, it should inform the ARP table it
    needs to delete that information. It stays in that cache to make resolution faster
    if it needs to talk to that same system.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we do ARP poisoning, we're technically doing a connection reset so that
    it deletes that entry—at least, that's what Cain and Abel does. It can tell your
    Server 2008 R2 box that you need to delete the entry that's in there for the Windows
    8 box, and when you do an ARP request, you're going to put it in a particular
    MAC address.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Countermeasures
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many things that you can have in place to protect yourself from attacks.
    You just can't assume anything. One of the things you can do is implement **Dynamic
    ARP Inspection** (**DAI**). DAI is a feature with a lot of different switches
    and routers. It's a feature we're going to turn on for switches and routers as
    it looks at or intercepts all the ARP requests and responses that go across the
    network. Each of these intercepted packets is then verified with a valid MAC address,
    as well as a valid IP address they've been bound to. Any invalid ARP packages
    are just simply dropped.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: DAI determines whether a packet is valid by looking at a trusted database that's
    created, and most of your switches and routers have this built in.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: We can also take advantage of DHCP snooping. So, those IP addresses are assigned
    to a system (remember—IP addresses are assigned to machines when they come online),
    and the DHCP server records the MAC address that the IP address was assigned to.
    By combining these two features or technologies, we can create a more secure environment.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: The long way of doing this is typing them all in by doing static ARP tables,
    but that's not something I'm really excited about doing.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Other software is out there, such as **arpwatch**, which is probably one of
    the more popular ones. It's a software tool that looks at ARP traffic on a network.
    It logs a pairing of IP addresses and MAC addresses, along with a timestamp of
    when it was paired up—when those two were paired up—and it will notify an administrator
    when someone is trying to spoof those paired IPs and MAC addresses.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at DNS poisoning.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: DNS poisoning
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS poisoning is one of my favorite subjects, just in the aspect of how effective
    it can be. You have nothing to fear… but an attacker with your DNS cache. DNS
    is simply there because humans are ill-advised and, in some cases, ill-equipped.
    It's hard for humans to remember a number. Can you imagine if you had to remember
    the IP address of a website instead of simply typing in a name? We associate and
    remember names better than we do numbers.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: We're all familiar with the **Uniform Resource Locator** (**URL**) box where
    we type in the name of a website we'd like to go to. DNS oversees taking the name
    and converting it down to an IP address using tables. These tables can be distributed
    across multiple systems. Some of them are internal, while others are external
    names.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: A DNS server typically hosts these databases. If the DNS server oversees looking
    at internal names and names of servers in your environment, that would be your
    internal DNS name server. For a DNS server in charge of looking at publicly available
    websites such as *Yahoo.com*, your DNS server is not authoritative for it; it's
    not in charge of it, so that would be referred to as an external DNS.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: The overall concept is when we do DNS poisoning (spoofing), the attacker is
    simply going to try to get the user to think they're going to **gotham.com**,
    but they're going to be sent to a different IP address. You can type in the IP
    address instead of a DNS name in the URL bar and still get to the same place.
    Again, DNS is just there to make things convenient for us.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens is, a user hops onto their machine. Their computer has been configured
    to a specific method of DNS name resolution. The user then types in, I''d like
    to go to **gotham.com**, and the computer says: I need the IP address to go to
    **www.gotham.com**. This request gets forwarded to the user''s local DNS server,
    and that local DNS server says: I''m part of **gotham.city**. I have nothing to
    do with **gotham.com**. I''m not in charge of it because I''m just inside their
    network. So, I''m going to forward this out, and we''re going to forward this
    to a root server—our servers that are maintained by the internet and have their
    own records to point requests to the top-level domain.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: The root server of the internet knows how to help resolve this whole namespace
    because **.com** servers have registered with it, so it tells (in this case) the
    local DNS server to contact the **Component Object Model** (**COM**) servers.
    COM servers are not aware of **www.gotham.com** but they are aware of **gotham.com**,
    so they have an entry because Gotham has registered their DNS name with—say—GoDaddy,
    and the local DNS server that would then contact the **gotham.com** DNS server.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then look for—in the case here—an entry for **www**, which just points
    to a folder located on a web server somewhere. The Gotham server would then say:
    I''m aware of **www**, and it''s going to return that information to the local
    server. The local server will then send it back to the user''s computer and say:
    Here is its IP address—go ahead and communicate with it.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Intranet poisoning
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is poisoning from within, and trust me, you need to be afraid. First,
    we know we have our switch on the network and we have our client machine. In this
    case, the client machine is making a request for an internal resource called **portal.gotham.com**.
    This request gets sent to the switch, and the switch then forwards it via the
    MAC address, an ARP resolution, to the local DNS server for Gotham. Gotham says:
    I''m authorized for it. Let me go find that server for you. It then finds the
    real web server and sends the information or IP address back to the client.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: The problem we have here is when the black box comes into effect. An attacker
    sets up their machine and uses the ARP poisoning technique to look for the **identifier**
    (**ID**) of DNS requests from the internet. This infects the client machine, their
    target. Instead of going to the Gotham DNS server, the client goes to the attacker's
    black DNS server, which tells it the IP address—which is, in fact, their own fake
    website—that the attacker has set up.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: If the attacker is good, they'll have a web page just like the real web server.
    It could be where people type in their credentials, and they're doing this on
    a fake server. Of course, if the attacker is good, they'll forward that credential
    back to the real web server after they type in their credentials. This way, the
    end user will have no idea they have been spoofed or poisoned.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: The tools we use for this type of attack include **arpspoof**, a subcomponent
    of our DNS spoofing toolset, and of course, we've talked about Cain and Abel before.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Internet poisoning
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Internet DNS poisoning is where we really have fun. This is your nightmare scenario
    because if I accomplish this, I'm going to have the whole network. And there are
    different ways we can accomplish an internet DNS poison attack.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of things that are checked during normal name resolution.
    First, when you type in **www.gotham.com**, the first thing the computer does
    is check its cache to see whether it's been there before. The next thing the computer
    checks is a file on the local machine called the **hosts** file. Yes—it is plural,
    not singular, and there is no extension; it's not a **.txt** file, but you can
    edit it with a text file. If there's no entry there, the computer goes off and
    checks its IP address settings, most of which are assigned by DHCP. However, we
    can override those settings, and this could be done at the client level or at
    the server level if the target is a server.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Another mechanism used for DNS name resolution is the local DNS server. The
    concept—as a matter of fact, this happens with almost all DNS spoofing and/or
    poisoning attacks—is that the attacker is going to somehow get a piece of malware
    to modify one of these locations, so as the user gets infected, if the attacker's
    malware infects the **host** file, we'll put an entry in there that **Citibank.com**
    is equal to the IP address of their hacker's box. Alternatively, as I mentioned
    before, the attacker can modify the preferred DNS server, so it goes to their
    black hacker's box and, of course, the local DNS server.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'Any of these targets, especially that local DNS server, is a high-value target
    because instead of just saying, "*I want one name going to a particular IP address*,"
    we can say "*I want all DNS resolution to come to me*," and that''s because instead
    of just affecting one DNS entry, we are actually directing all DNS traffic destined
    for the outside world: Citibank, PayPal, eBay, and so on.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Imagine what would happen if somebody got a hold of the DNS entries on your
    home router or your business router and says that PayPal is equal to this IP address.
    Everybody in the network would go to that fake site being controlled by the attacker.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Proxy server poisoning
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proxy server poisoning is a specific technique where the attacker can set up
    their own proxy server. A proxy server caches up websites or goes out in lieu
    of a user''s request. So, we''re going to have our victim''s machine in the **Internet
    Explorer** (**IE**) browser settings, which is where we see this. You''ve seen
    this before, right? This interface says: use a proxy server for your LAN. It''s
    not used for dial-up or VPN connections. This is telling your browser to go and
    use this IP address for DNS information. So, the attacker will send a piece of
    malware—hopefully, to change up these settings on the victim''s machine, which
    would then force all DNS traffic from the victim to go to the hacker''s proxy
    server. This would then allow them to sniff for information such as credit card
    information and redirect to the legit site.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: You can make sure this is disabled, and there are many **group policy objects**
    (**GPOs**) out there or settings we can implement and push out to all of our client
    machines. One of them is to make sure this setting can't be changed. With Windows
    10, there is a section for it. It's no longer a part of IE—it's part of the whole
    OS.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Poisoning the cache
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you remember how DNS operated, you saw how a client machine goes out to request
    the IP address of **Microsoft.com**. You know it's going to make a request for
    **xbox.microsoft.com** to the local DNS server. If it doesn't know anything about
    it, if it's the first time it's seeing this request, the first thing it does is
    to check its cache to see whether it's been there before from a previous request.
    It also checks to make sure it's not in charge of **Microsoft.com**. It's not,
    so it goes through the process of looking for a COM server. We hit a root server,
    a COM server, then the **Microsoft.com** server, and then finally, we get to **xbox.microsoft.com**,
    and that information gets sent back to the local DNS server.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'The interesting thing is that cache memory has information in there for **Microsoft.com**,
    as well as for **xbox.microsoft.com** and a COM server, because the root servers
    kept redirecting it around. This is designed for faster name resolution. If somebody
    else comes online and requests to find **office.microsoft.com**, we don''t want
    to have to repeat this whole process. Instead, the request hits the local DNS
    server, which then says: I haven''t been to **office.microsoft.com**, but I do
    have an entry in here for **Microsoft.com**. It''s still in my cache; I can make
    a connection directly to it and query the **Microsoft.com** server to find out
    where the IP address is for Office.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: The problem is the cache is stored in memory on that machine and can be edited
    and updated at any time. An attacker can simply poison the cache on that server,
    not making modifications to the database itself or any host files, just the cache.
    And in doing so, they direct everybody to the wrong or fake site.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: This is what drives me bonkers when it comes to malware. Many will get infected,
    and one of the worst things you could ever do is to be on a server and surf the
    internet to sites that may be malicious where you might get a piece of malware.
    An attacker who has gone through all the steps we've talked about will know where
    your DNS server is and can simply write up a script saying to always inject this
    domain name to this IP address, and just pop in that DNS cache and keep it refreshed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: So, after hearing this, do you still want to play with me, or do you want to
    take your ball and go home?
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Detecting sniffing methods
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different ways to detect sniffers on a network. Typically, a sniffer
    won't leave any type of trace because it doesn't transmit any data—it's only collecting
    data. So, knowing that, we need to look for devices or network interfaces on our
    network running in promiscuous mode.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Promiscuous mode simply means as packets go across the network, when they hit
    a computer, if that packet is not destined for that computer, the normal response
    is for it to ignore that packet altogether. If the packet goes out and reaches
    its destination, that computer holds the information or retains the packet. A
    NIC in promiscuous mode will see the packet, but instead of discarding it, it
    will add it to its tables or tracking mechanism.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, sniffers are easier to find because they may be running in active
    mode. If you remember, passive is just listening while active sniffing is injecting,
    as with Cain and Abel or **dsniff**.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: When we have attackers who run those types of software programs on their machines,
    if you know what to look for, you might be able to find them. The big issue we
    have is with what we refer to as standalone sniffers or hardware-based sniffers,
    and this is because they neither transmit data traffic nor respond to some of
    the detection methods we'll be talking about here.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: The upshot is most attackers don't like to spend money—they always run pirated
    software or free software because hardware-based sniffers are relatively expensive.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Various techniques to detect sniffing attacks
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different ways we can detect sniffers on the network.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Detecting via a ping request
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By sending a ping request to a suspected machine with its IP address and incorrect
    MAC address, the network adapter on a machine that's not in promiscuous mode or
    just a standard desktop machine will simply discard the packet. However, if we
    use the same method to a machine running in promiscuous mode, it will respond
    back; it doesn't reject the packet even though there's a different MAC address
    listed. So, at this point, I would know this device is running a sniffing program.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: The ARP method
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you remember how ARP works, you'll know that ARP oversees remembering IP
    addresses to MAC addresses. Here, we simply use that mechanism to detect which
    machines are running in promiscuous mode.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we do is send out a non-broadcast ARP packet. This is simply
    an ARP request that has gone out, but instead of having a broadcast MAC address
    associated with it, we assign a MAC address to it. The machines will then record
    that information, for each of the nodes on the network. After we've done that,
    we then send out a ping message. This ping message needs to have an invalid MAC
    address.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Now, think about what's going to happen. The machines not running in promiscuous
    mode will simply respond back with an ARP request because they'll be thinking
    your MAC address was this, as packets come across to make a request to the new
    MAC address. The box that's running in promiscuous mode because it's absorbing
    packets is not really verifying; it just responds to the ping reply and we can
    pick that up on the network. Therefore, it identifies that machine as being a
    box that shouldn't be doing what it's doing.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Using DNS
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you remember, when we talked about Cain and Abel, one of the options you
    had was to resolve the IP address to a hostname, and a lot of sniffing programs
    do that for us automatically. Well, how does it do that? It does that via reverse
    DNS. Now, knowing that, you can simply look at which machines in your network
    are doing a bunch of reverse queries to your DNS server. Another way we can do
    this is by simply sending out an ICMP packet, which would be a ping, and ping
    a non-existing IP address, so that it goes out across the entire network.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing attacks countermeasures
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s look at some of my top ways to help protect you from sniffing attacks,
    starting with the basic ones. Here we go:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '**Encryption**: This will be at the data level. We want to make sure we protect
    any confidential information we might have from being detected on the network.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Static MACs**: You can take advantage of gateways or your gateways on the
    network. This will help you, in as far as not being a victim of a MITM attack
    is concerned.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set physical access level**: If you have ports throughout your network infrastructure
    that are not being utilized, make sure you disconnect them from your patch panels.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'll tell you a story real fast. I was working on a military base and talking
    about physical access and security with them. They told me they cut the wires
    behind the network jack as well as at the patch panel in case somebody plugged
    in the wrong patch panel, and the network wiring behind the physical jack in the
    room was totally cut. Curious, I asked, *"Okay, so what do you do when you need
    to hook that up?*" They said, *"Oh, we just, you know, re-splice it*." They had
    what looked like an extra 10 feet of cabling in the wall so that they could always
    be pulling it through. And then, of course, if they ever ran too short on cabling,
    they'd have to run whole new cable lines, which was kind of interesting. That
    was several years ago. Hopefully, by now, they have policies in place about patch
    panels.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '**Upgrade to IP version 6 (IPv6)**: Again, one of the biggest advantages for
    IPv6 is that **IP Security** (**IPsec**) is implemented, which means packets are
    encrypted as they''re transmitted. Also, if your network device is supported,
    switch off network ID broadcasts.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set static IP addresses and static ARP entries**: Do this on targeted machines
    to prevent attackers from adding spoof ARPed entries on the network.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How about using HTTPS? There's a big movement today on the internet trying to
    make it possible for every connection we make to websites to use some type of
    secure layer or SSL connection. This would help protect our usernames and passwords
    when we're visiting different sites. However, there are other protocols that are
    considered more secure than the native protocol itself. Instead of FTP, we can
    use SFTP, VPNs, and IPsec.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: I have already mentioned SSL and TLS, and there's also a case to be made for
    **Pretty Good Privacy** (**PGP**) here, as well as **Secure/Multipurpose Internet
    Mail Extensions** (**S/MIME**), and of course **Secure Shell** (**SSH**). All
    these different protocols will make it extremely hard for a sniffer to pick up
    your information.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: And we can't forget about that wireless stuff, right? We must make sure we're
    always using some type of encryption protocol such as WPA or WPA2\. If not, go
    ahead and use **Wired Equivalent Privacy** (**WEP**) and let me know your **Service
    Set ID** (**SSID**), I'd love to come visit you!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '**Direct MAC retrieval**: We do this from the NIC instead of getting it from
    the OS itself. For example, in Windows, we can say we want to change the MAC address;
    we''re not physically changing it on the NIC—we''re changing it inside of the
    OS itself to report back. By implementing this technology, getting the MAC directly
    from the NIC would help to prevent MAC address spoofing.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And you guessed it—there are several other tools out there we can use to detect
    whether any of our NICs on the network are operating in promiscuous mode.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Evading IDS
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hackers will attempt to bypass firewalls and **network IDSs** (**NIDSs**) when
    it comes to sniffing. NIDSs function by checking every packet that passes through
    the network, checking whether it's part of an established connection (such as
    a web page request) or whether it's trying to establish new network connections
    (such as someone trying to log in to your wireless router). It generates alerts
    when it spots any suspicious traffic, which is what an attacker wants to avoid.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Host-based IDS (HIDS)
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HIDSs are installed on the host machine and monitor for processes that are attempting
    to gain unauthorized access or use of data. Again, they generate alerts when they
    spot anything suspicious.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: HIDSs can be very effective with LANs, but most wireless connections do not
    require a login (such as Wi-Fi), so HIDSs are only applicable if you're on a network
    you trust.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: IPS
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An **intrusion prevention system** (**IPS**) is yet another solution. These
    are designed to check packets in real time, looking for any suspicious activity.
    They allow known good traffic through while dropping anything that appears to
    be malicious.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: IPSs are different from firewalls and IDSs because they can stop an attack in
    progress instead of just trying to detect one after the fact. Another difference
    between IPSs and firewalls and IDSs is that an IPS will block all *bogon* traffic
    (any traffic it doesn't know about). If this kind of blocking occurs, the default
    response from the attacker will be to turn off whatever service they're using
    to launch attacks.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: How do these different systems work? Well, the easier ones (firewalls and IDSs)
    will examine packets to determine whether they are allowed to pass or not. They
    use rules that define specific traffic characteristics, which you create when
    installing the software on your computer. Firewalls and IDSs are designed to prevent
    unauthorized network connections, whereas IPSs are designed to catch known bad
    traffic before it reaches its destination.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: If you're using a wireless connection, IPSs are more effective than firewalls
    and IDSs because they detect known malicious traffic before the client machine
    can complete its network handshake. Firewalls and IDSs rely on rule-based detection
    methods, which means they must *learn* what bad traffic looks like first by intercepting
    some of it and inspecting the packets. That process can take anywhere from a few
    minutes to several hours.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Host-based IPS (HIPS)
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An IDS monitors an individual system for suspicious activity, whereas an IPS
    looks for suspicious traffic targeting a particular network and attempts to block
    it.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: An IPS can prevent 100% of attacks in specific environments, but the drawback
    is that if the source or target computer isn't running an IPS, there could be
    false positives—events that look like attacks but aren't really.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: To bypass firewalls, hackers will try to exploit the security vulnerability
    of the network protocol that is being used. They can also use ICMP packets instead
    of using TCP packets because many network administrators trust ICMP traffic and
    do not bother to protect their networks from these packets. For IDSs, hackers
    can hide their attacks by modifying data in the packets they send out. In some
    cases, they will even change the source address as well. Hackers know that it
    is not possible for most IDSs to evaluate both the source address and data simultaneously.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to bypass NIDSs and HIDSs, but one of the most popular
    is a technique known as ARP cache poisoning.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: So, how do hackers evade IDSs?
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some attackers will send out packets with random data to evade IDSs. This is
    called *white noise* and makes it difficult for a device to determine whether
    an attack has happened.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: Insertion attack
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is when the attacker inserts extra packets into the flow, such as fake
    TCP resets, to confuse the IDS. The IDS (being confused) accepts the packet an
    end system rejects. This allows the attacker to insert data into the IDS. This
    type of attack is normally only possible in less strict packet processing.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Evasion attack
  id: totrans-310
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This happens when the IDS can't determine what the traffic is doing. The IDS
    might think it's an attack, while it's legitimate packets in a stream. For example,
    if the IDS doesn't look at all parts of TCP connections but only looks at headers
    and payloads, then it'll most likely be fooled by the statement "*I'm an FTP session*"
    without having any idea how many packets it really consists of.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: The IDS can't tell that those packets are spoofed and therefore sees no attacks
    and lets all packets through to the end system. When this happens, it's called
    a false negative, while false positives happen when an attacker sends out packets
    that look like normal traffic but the IDS decides it's an attack. False negatives
    are better than false positives because at least you can see attacks.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Insertion and evasion attacks are still possible if hackers use uncommon protocols
    or use old techniques that aren't really used anymore (such as FTP). On top of
    this, inserting data into the IDS is especially difficult because it will cause
    an overload for the IDS, which might drop packets.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: DoS attack
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If an attacker hits your IDS with a DoS attack, the attack could chew up all
    the resources of the IDS and therefore slow it down so much that it can't do its
    job. If this happens, the IDS won't be able to distinguish between real attacks
    and false alarms because it simply doesn't have enough processing power left to
    check every packet.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the IDS is storing activity logs on a drive. If drive space runs
    out, it's game over. "*Why*?", you ask. Well, the IDS will no longer be able to
    store the actual actions/events that the attacker is doing. If the IDS can't see
    what's happening, it can't stop it.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Note that some IPSs can counter all these types of attacks (at least the basic
    ones). IPS devices are placed inline between the client and server so that they
    can detect and stop attacks.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscating
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The technique is used to encode the data so the IDS can't see what's *inside*
    but the destination system can still decode the packet. An example of obfuscating
    is when the attacker encodes the binary data (0s and 1s) using **eXclusive OR**
    (**XOR**).
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say you've got a string of **10011100**, which in hexadecimal
    would be **E4**. An IPS could interpret this as code or other malicious stuff.
    An attacker could use an XOR encoder to turn that string into **4F**, which is
    much harder to detect.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: A less-known trick is using subliminal channels. Hackers can encode data inside
    normal-looking packets (for example, the length of the packet might be slightly
    larger than it should be). This isn't really used much anymore since newer IDSs
    are aware of this trick.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: Moving around firewalls
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firewalls come in several different flavors. Software- and hardware-based systems
    are designed to work with different network setups. If you are running a business,
    for example, your firewall unit will be entirely internal. This means that everything
    is locked down on one side of the computer's firewall, and everything outside
    of the network is locked down on the other side. Your firewall will also block
    all communication between users of your LAN. They do this by locking down your
    IP addresses so that only certain users can access certain sites based on the
    specific rules you have established.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Bastion host
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are designed to protect services on other machines and are often used
    to protect databases. Each time a request comes in, the bastion host checks whether
    it knows how to communicate with that service (and will allow that service to
    share back), then passes the request on.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Screened subnet (or demilitarized zone (DMZ))
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are used to protect internal networks with one or more bastion hosts that
    have access to the outside world. For example, a mail server is in a network.
    You can lock down specific IP addresses so that only your web server has access
    to the internet. This way, you know exactly which traffic is coming into your
    web server and can keep everything organized. A screened subnet is not designed
    to protect the machine itself.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Multi-homed firewall
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These are typically systems with more than one interface and act as a router
    between networks. They are configured to manage traffic between the networks.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: So, firewalls are used to protect our networks from external threats. They can
    be hardware- or software-based, and they come in different flavors, depending
    on how they are set up. Firewalls are generally placed in either a DMZ or screened
    subnet configuration. A bastion host can also help minimize an attack.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Software firewalls
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These bad boys are typically installed onto desktops or servers via the OS and
    control traffic into and out of your network. They can be expensive and take up
    a fair amount of system resources, so they do not offer much protection for mobile
    or embedded devices.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Hardware firewalls
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is typically how we see firewalls configured. They're installed on hardware
    devices and typically run in an **application-specific integrated circuit** (**ASIC**)
    or **random-access memory** (**RAM**). These types of firewalls are usually used
    with larger, more expensive devices.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Application proxy
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An application proxy is kind of like a proxy server, but it's designed to allow
    traffic through for specific services only. Application proxies require fewer
    resources than full-blown proxy servers, and they come with the added advantage
    that the user does not need to configure their web browser settings or email client
    settings because those connections are filtered at the application proxy. Unfortunately,
    application proxies are only good for traffic that is related to specific applications.
    This means that if you want to use your web browser to watch YouTube videos, it's
    not going to work (not right away, at least).
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a summary of what you need to know: an IPS detects known bad traffic
    before the client starts its handshake but doesn''t work for unknown threats because
    it will drop all anonymous traffic.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Firewalls and IDSs detect after the client has completed its handshake so that
    they can detect unknown threats, but it's not an instant process because the signature
    of the known bad traffic is needed to be effective.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: A few techniques to evade firewalls
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An easy way to evade a firewall is by using decoy packets. If you send out packets
    that look as though they belong together but don't do anything, the firewall doesn't
    know what it should be looking for. It'll just see a group of packets and accept
    them (because they look normal).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: This is mostly used with encrypted protocols such as HTTPS. Because firewalls
    can't decrypt the packet, they only know that it's an encrypted stream and will
    simply let it pass through.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Another way to evade firewall detection is by fragmenting your packets. This
    is the default fragmentation type in the TCP protocol. If you split packets into
    smaller chunks, then it's much harder for a firewall to detect that something
    malicious is going on.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: To defeat this technique, all firewalls must be configured to reassemble fragmented
    packets before processing them to avoid attacks such as session-splicing insertion.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: If you want to make sure a firewall or IDS is configured properly, you can send
    out packets that aren't fragmented. If they're reassembled before being inspected,
    then you know it works!
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: The last method is source address rewriting, which basically means that the
    sender's address in a packet is rewritten to another value. This is mostly used
    by attackers who want to hide their true location. If you change the sender's
    address in the IP header, then routers and firewalls will send data back to that
    address.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: To defeat this attack, all firewalls and IDSs must check the integrity of a
    packet by checking its hashes (in other words, make sure it hasn't been tampered
    with).
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Using ICMP tunneling to bypass firewalls
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ICMP is a protocol that's used for some nifty tricks. One of the neatest things
    it can do is help you bypass firewalls and IDSs. This is done by encoding your
    packets inside ICMP echo requests (or just ping packets).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: If the firewall isn't configured to only pass through valid ICMP packets (most
    aren't), you can send your IP packets inside an ICMP echo request (ping) packet
    to an external host. The firewall will most likely let it pass since it looks
    like normal traffic (it's considered good because the destination address is the
    target system, not the attacker).
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: After bouncing through the firewall, another device on the trusted network (such
    as the DMZ) will send out an ICMP echo reply packet. The attacker can intercept
    this and extract their original data from the ICMP packet.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Honeypots
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to using scanners or IDSs, companies can also install honeypots
    on their networks to attract external people who just want to get in and break
    things. Honeypots give security managers and law enforcement an opportunity to
    get a close-up view of hacker methods and tools. Typically, after hackers enter
    honeypots through hacking techniques such as software bugs or vulnerabilities,
    their activities are carefully monitored until they access the systems that they
    really want or reveal other interesting information.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: After falling into a honeypot, hackers find themselves in a special network
    that may be completely isolated from the company's own network or is set up to
    mimic certain important servers and services. Then, they can't connect to the
    usual ports of the usual services, and therefore cannot proceed with their work.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Detecting a honeypot
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is relatively easy. Just become friends with Winnie the Pooh. He'll tell
    you right away if there's a honeypot nearby. Come on—you knew a joke was coming
    your way!
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Being able to identify and defeat honeypots without being detected is a basic
    task of a high-level hacker.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Honeypots will capture everything you do, so if you manage to get on a system
    without being detected it's pretty much game over.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: First, the OS is usually outdated (so, unpatched), which means lots of software
    vulnerabilities can be exploited. Most honeypots are also running custom network
    services that aren't used anywhere else, which means that exploits can probably
    be found for those as well.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: If you're on a honeypot and start doing some port scanning, the firewall will
    likely pick it up. This is because honeypots are usually placed in the DMZ where
    the internal network interfaces are exposed to internet scans.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: A better way would be to think of all the things you shouldn't be able to do
    once inside a network. If you manage to do them, then it's likely that you're
    on a honeypot.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: For example, scanning internal hosts from outside of an organization should
    never be possible because firewalls block these connections by default. If it
    does happen, then you must have found a way around the firewall. This would be
    a red flag, so keep your eyes peeled for more clues!
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: A quick and easy way to find out if you're on a honeypot is by simply SSHing
    into the system and checking its uptime. If it's less than 30 minutes, then that
    might be suspicious (systems usually run for months or years before being rebooted).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Honeypot tools
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes—there are some tools out there that can help you. Send-Safe Honeypot Hunter
    ([send-safe.com](http://send-safe.com)) is a great tool for the job.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: It can fingerprint a honeypot system by sending it some specially crafted packets
    and checking how they're handled on the target machine. If you get an unusual
    response back, then that's your sign!
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: If you want to go all out, then use a tool such as Amun, which helps by performing
    checks on fingerprinted honeypot systems as well.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Honeypots don't have to be connected to the internet; in fact, they can also
    be used as a defense against attackers who attempt to break into machines via
    the internet. In those cases, they would be called *honeynets* as opposed to just
    *honeypots*.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have defined and introduced what sniffing is and how it
    can be used in an attack and to protect ourselves from an attack. We discussed
    the different types of sniffing available to us. We discussed how to leverage
    sniffing in our efforts to attack actively and passively. We also gave a quick
    refresher on DHCP and covered a lot of information on ARP. We talked about hardware
    versus software. We also covered the various types of assaults and attacks, such
    as DHCP assaults, MAC attacks, ARP poisoning, and DNS poisoning.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Up next, we'll dive into hacking wireless networks and devices.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: If an attacker is trying to see all the traffic traveling through a switch,
    which of the following protocols prevents them from seeing any sensitive data?
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FTP
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: IMAP
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Telnet
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: POP
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SMTP
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SSH
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following methods can be used to collect data from a fully switched
    network or disable some of the switch's traffic isolation features? (Select two.)
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ARP spoofing
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Promiscuous mode
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: DHCP starvation
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: MAC flooding
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In terms of sniffer discovery on a network, which of the following is true?
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send ARP messages to all systems and wait for NOARP answers to find the sniffer.
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ping all addresses and look for a lag in answers to find the sniffer.
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding the sniffer on the network is somewhat impossible.
  id: totrans-389
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the IDS to look for promiscuous NICs to find the sniffer.
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following preventive measures against DHCP starvation attacks are
    the most effective? (Select two.)
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring DHCP filters on a switch
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Blocking all UDP port **67** and port **68** traffic
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling DHCP snooping on a switch
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Using port security on a switch
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
