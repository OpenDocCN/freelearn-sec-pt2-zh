- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pentesting AWS Features through Serverless Applications and Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ve been a very patient reader so far. Understanding concepts and theory
    is important before you start learning how to conduct the practical aspect of
    pentesting. You’ve now reached the first chapter of the book where we’ll not just
    be theorizing but also putting our knowledge into action.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter features step-by-step guides to using the **Amazon Web Services**
    (**AWS**) first-party security tools to check security configurations and conduct
    vulnerability assessments to configure the most popular third-party AWS pentesting
    tools. We will also discuss the pentesting steps to find credentials, enumerate
    AWS services, conduct vulnerability scans, and discover exposed services with
    Prowler and Pacu.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter comprises the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get an AWS network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AWS PowerShell and the AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring AWS native security tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and preparing AWS pentesting tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting AWS applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be working with Microsoft’s infrastructure. Massive Azure data centers
    will be doing the bulk of the computer processing work for the exercises in this
    chapter, so, fortunately, you don’t need to have a top-of-the-line workstation.
    You will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A desktop or laptop PC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Android or iPhone smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good reliable internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to view the Code in Action: [https://bit.ly/3Qo5Ewg](https://bit.ly/3Qo5Ewg)'
  prefs: []
  type: TYPE_NORMAL
- en: How to get an AWS network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we prepare to pentest AWS services, we need AWS services to pentest!
    There are two things you could do:'
  prefs: []
  type: TYPE_NORMAL
- en: You can acquire AWS credentials from the organization you work for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or if you’re just learning and you’re not working for an organization yet, you
    can set up your own AWS instance free of charge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon allows people to do a lot of things on its infrastructure through free
    services and free trials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind that whether you’re using your organization’s paid AWS instance
    or your own free AWS instance, the same AWS pentesting policies apply. Refer to
    *Chapters 2* and *3* for more details. You may also review AWS’s pentesting policies
    here: [https://github.com/prowler-cloud/prowler](https://github.com/prowler-cloud/prowler).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to set up a free AWS instance, I’ll walk you through the setup
    process. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://aws.amazon.com/](https://aws.amazon.com/) in your web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the orange button on the upper-right side of the web page that says
    **Create an** **AWS Account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Root user email address**, enter an email address that you have reliable
    access to. I would recommend that you use your main personal email account so
    that you can keep your AWS account even if you switch employers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **AWS account name**, enter a unique name that’s memorable to you. Make
    sure it’s not something you’d be embarrassed to show a company you’re working
    for. Also, make sure your account name doesn’t reveal any of your passwords or
    other sensitive data. Don’t put your social security number in there!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be sent a verification code to the email address you used. Check your
    email to retrieve the verification code, input it into the form field, and click
    **Verify**. Be quick—it expires in 10 minutes!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new password and enter it in both form fields for verification. Your
    password should be long and complex. I would recommend using a password manager
    to generate a secure password and remember it for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **How do you plan to use AWS?**, select **Personal**. Enter your full
    name, phone number, and mailing address in the rest of the form. Make sure that
    the phone number is connected to a smartphone that belongs to you, in case you
    need to use it for **multi-factor authentication** (**MFA**). Check the **I have
    read and agree to the terms of the AWS Customer Agreement** box and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be asked to enter your credit card number. AWS will warn you if you
    try to do something that will result in a credit card charge, and you can always
    verify whether or not you’ve been charged for something in the billing section
    of your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: None of the tutorials in this chapter will result in a credit card charge, but
    some of the services I will demonstrate in this chapter (such as Amazon Inspector)
    have a limited free trial. Be sure to cancel your AWS account before your free
    trials expire if you don’t want to be billed. See the *AWS Free Tier* guide for
    more details ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)).
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve set up your AWS account or have acquired access to your organization’s
    AWS account, you’re ready to move on with the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using AWS PowerShell and the AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lot of the exercises in this chapter can be executed directly from AWS CloudShell.
    As long as you have a Windows, Linux, or Mac computer with internet access and
    a web browser, AWS CloudShell is easy to access. Your computer doesn’t need to
    have a workstation or gaming PC hardware specifications, because all the virtualization
    and computation are conducted on Amazon’s infrastructure. But I would definitely
    recommend that you use some sort of desktop or laptop computer, and not a phone
    or tablet. AWS CloudShell’s UI works best with a physical keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re logged in to your AWS account in your web browser, you can access
    AWS CloudShell at any time by clicking on an icon at the top of your screen. The
    AWS CloudShell icon looks like a small square with a command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – AWS CloudShell icon](image/B18672_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – AWS CloudShell icon
  prefs: []
  type: TYPE_NORMAL
- en: If you would prefer to access the AWS CLI without AWS CloudShell, you can install
    the **aws-shell** application from GitHub ([https://github.com/awslabs/aws-shell](https://github.com/awslabs/aws-shell)).
    It requires the **Bourne Again Shell** (**Bash**) command line, so a Linux OS
    or macOS works best.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'All demonstrations in this book use CloudShell. But if you’d prefer to install
    the AWS CLI desktop application, you can find it here: [https://aws.amazon.com/cli/](https://aws.amazon.com/cli/).'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a handy guide to commands you can use at the AWS CloudShell command prompt.
    These commands will also work directly in the AWS CLI application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you’re in AWS CloudShell or the AWS CLI application, you should always
    check which command line you have installed first with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The command line will display information about your OS (in AWS, not on your
    own computer), the version of Python that’s installed, and so on. The output will
    look something like this, but it may say something different depending on what
    you have installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you have a version of Linux or Mac installed, you can use Bash commands.
    The particular Bash commands I mention here also work in **Z Shell** (**Zsh**),
    which is the default for Mac. If you have Windows installed in AWS, you can use
    Windows PowerShell Command Prompt commands. Bash, Zsh, and Windows PowerShell
    support is all built into AWS CloudShell and the separate AWS CLI application.
    You don’t need to install anything extra in order to use any of these commands.
  prefs: []
  type: TYPE_NORMAL
- en: Bash commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some handy Bash (and Zsh) commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will list all of the files and folders in your current directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ls**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will change which directory you have open. Don’t use the brackets! Enter
    the path of the directory in that space:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cd <insert directory** **name here>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will show which directory you’re in, in case you get lost:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pwd**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re unsure of what a command does, this will tell you. Don’t use the brackets!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**man <****command name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This handy command will get you out of a shell script you’ve executed, an SSH
    session, or will exit you out of AWS PowerShell or the AWS CLI:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**exit**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get information about whichever processes are running, complete with their
    **process** **IDs** (**PIDs**):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ps**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If there’s a process you’d like to stop and you know its PID, use this command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kill <****process ID>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you forget which commands you’ve used during your session, this command
    will show you:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**history**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Move or rename a directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mv <current directory name> <new** **directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make a new directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mkdir <new** **directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new file with a new filename:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**touch <****new filename>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Read the contents of a file. This will only work for text files and scripts,
    not for things without text such as media files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**less <filename>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type **sudo** before your command if you need to do something that requires
    root permissions. You may need to enter your password afterward:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo <command>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use these commands to install programs that are in one of your repositories,
    or a Python program with the **pip** package installer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo install <program name** **in repository>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo pip3 install <****program name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sudo <name of package manager here, such as apt or yum> install <****program
    name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at a few PowerShell commands next.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your AWS server is running Windows, here are some handy Windows PowerShell
    commands you can use. As long as your AWS instance is running Windows, these commands
    will work both in AWS PowerShell and the AWS CLI application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is probably the most important Windows command to remember. It’ll show
    you a list of other commands you can use and what they do:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**help**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Just as in Bash (and Zsh), this will change the directory you have open:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cd <****directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The command for making a new directory in PowerShell is the same as in Bash
    and Zsh:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mkdir <new** **directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command moves a file to a new destination:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**move <file or directory> <****destination directory>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This command changes which directory you have open:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**chdir <directory>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See which processes are running and their PIDs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ps**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get information about your currently open directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pwd**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remove a file or directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rm <filename>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rmdir <****directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Displays some of the contents of a file. This works best with text files or
    files that are scripts:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cat <filename>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new file or directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ni <new filename or new** **directory name>**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you create a new file, the file may have no contents. However, you can then
    open the file in a text editor or **integrated development environment** (**IDE**)
    and create contents in the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have looked into AWS and the AWS CLI, it is time to learn about
    the tools AWS provides us to help us with cybersecurity.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring AWS-native security tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS provides you with two native tools that will be especially useful to you
    as a pentester: AWS Security Hub and Amazon Inspector.'
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s take a look at AWS Security Hub.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Security Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Security Hub is an easy way to view all of your AWS security configurations,
    AWS-native security scan reports, and security alerts. It can combine data from
    Amazon GuardDuty, Amazon Inspector, Amazon Macie, and AWS Network Firewall.
  prefs: []
  type: TYPE_NORMAL
- en: If there are any major security problems in your AWS instance, AWS Security
    Hub will notify you! You can mention data you find in AWS Security Hub in your
    pentest report. But by conducting vulnerability scans and pentests with third-party
    applications, you may be able to find additional vulnerabilities. I recommend
    using both the tools AWS provides and third-party tools to get the most thorough
    data about the security posture of your AWS instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at AWS Security Hub for the first time. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve logged in to your AWS account from your web browser, you can find
    AWS Security Hub by searching for **AWS Security Hub** in the search bar at the
    top. It’s to the left of the icon that you use to launch AWS CloudShell. If you
    have a Free Tier AWS account, you can sign up for a 30-day free trial. Alternatively,
    you can find AWS Security Hub under the **Services** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Warning!
  prefs: []
  type: TYPE_NORMAL
- en: Be careful to go to your billing to cancel AWS Security Hub before your free
    trial expires if this is your own free AWS account for educational purposes.
  prefs: []
  type: TYPE_NORMAL
- en: On the right, click on **Go to Security Hub**. If you’re setting it up for the
    first time, you will need to select **Enable AWS Config**. Next, where it says
    **You can enable resource recording manually from the AWS Config console**, click
    on the **AWS Config** **console** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, you’ll be taken to a page for AWS Config. On the right-hand side, click
    on **1-click setup**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The 1-click setup option](image/B18672_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – The 1-click setup option
  prefs: []
  type: TYPE_NORMAL
- en: Review the default settings, and then click on the orange **Confirm** button
    on the lower-right side. An **Amazon Simple Storage Service** (**S3**) bucket
    will be created for you. This may take a few moments.
  prefs: []
  type: TYPE_NORMAL
- en: When the bucket has been created, you will be taken to the main **AWS Security
    Hub** dashboard. For now, we can leave all the defaults as they are. Go to your
    web browser tab that says **Enable AWS** **Security Hub**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Security standards** heading, leave the defaults selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enable AWS Foundational Security Best** **Practices v1.0.0**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable CIS AWS Foundations** **Benchmark v1.2.0**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – AWS Security Hub setup screen](image/B18672_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – AWS Security Hub setup screen
  prefs: []
  type: TYPE_NORMAL
- en: If this was the AWS network for the company you’re working for, they may have
    their own security benchmarks they need to be compliant with. But if you’re just
    using a free AWS account to learn for yourself, you can just leave the default
    benchmarks as they are. For that reason, also leave **AWS Integrations** and **Delegated
    Administrator** (the default is no integrations and no additional delegated administrator)
    as they are. Click on the orange button that says **Enable** **Security Hub**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should see the **AWS Security** **Hub** dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – AWS Security Hub dashboard](image/B18672_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – AWS Security Hub dashboard
  prefs: []
  type: TYPE_NORMAL
- en: You should be on the **Summary** page now. No scans have been run so far, so
    all the possible information sources such as **Findings** and **Insights** will
    have no data to display.
  prefs: []
  type: TYPE_NORMAL
- en: But I did see something interesting. Go to the left menu and click on **Findings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It appears that when I enabled AWS Config, the system already performed a number
    of security checks! There were about a dozen failed checks, with severity ratings
    ranked **LOW**, **MEDIUM**, and **CRITICAL**. Here’s an example of a failed security
    check. Your results will probably be different:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, click on **Security standards** in the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I found a box for **AWS Foundational Security Best Practices v1.0.0**. I clicked
    on **View results**. There were lots of failed checks there. Here’s an example
    of one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, AWS Security Hub will give you a lot of very useful vulnerability information
    from the get-go. You can definitely mention these details in your pentest report,
    but I would recommend also running some third-party tools, as I’ll describe later
    in this chapter. Multiple tools can find more vulnerabilities, and if more than
    one tool finds the same vulnerability, that’s useful information too. Remember—your
    pentest report shouldn’t just be an output from logs. You will describe in your
    own words how these vulnerabilities impact your organization and your advice for
    remediating them.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to Amazon Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon Inspector is the built-in vulnerability scanner in AWS. It does a pretty
    good job of scanning your AWS applications for known vulnerabilities. It can also
    find the parts of your AWS network that are insecurely exposed to the public internet.
    I recommend running scans with Amazon Inspector before you conduct scans with
    third-party applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll show you how to use Amazon Inspector, step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: I found Amazon Inspector by searching for **Inspector** in the top search bar.
    If you don’t have Amazon Inspector set up yet, a white box on the top right will
    say **Get started with Inspector** and offer you a 15-day trial. Click on the
    orange **Get Started** button. But if you’re just playing around in your free
    AWS account, then please remember to cancel Amazon Inspector before the 15-day
    period is over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you’re just trying things out in your free account, then you can leave **Delegated
    administrator** and **Service permissions** as they are. Click on the **Activate
    Inspector** button on the bottom right. The activation may take a few moments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon activation, you will see a screen that says **Summary** at the top. If
    you click on the **Manage all accounts** button in the top-right corner, you can
    get Amazon Inspector working in your **Amazon Elastic Compute Cloud** (**Amazon
    EC2**), **Amazon Elastic Container Registry** (**Amazon ECR**), and AWS Lambda
    instances too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A green notification at the top says **Welcome to Inspector. Your first scan
    is underway.** So, we’ll wait for the automatic scan to complete, then look at
    the results. My first scan took about half an hour.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you get impatient while waiting, there’s something fun you can do. Look at
    the menu on the left side. Click on **Video tutorials**. There’s a page with a
    bunch of embedded YouTube videos, such as **Introduction to the New Amazon Inspector**
    and **Amazon Inspector for AWS Lambda workloads**. I would recommend watching
    all of them! The information you’ll learn will help you use Amazon Inspector more
    effectively as a pentester.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When your scan is done, click on **Findings** in the left menu. You can sort
    your findings by vulnerability, by account, by instance, and so on by clicking
    the tabs at the top. Each finding will show its **Common Vulnerability Scoring
    System** (**CVSS**) severity rating such as **CRITICAL**, **HIGH**, or **MEDIUM**.
    **Common Vulnerabilities and Exposures** (**CVE**) numbers for each finding are
    also shown, and you can click on each CVE database link to read more about it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, Amazon Inspector is a really useful tool for pentesting AWS.
    I really appreciate the CVE data that Inspector shows. It’s very useful details
    to put in a pentest report.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move on to some third-party tools. I recommend that you use a variety
    of tools in your pentests and red team engagements for the sake of being thorough.
    In these situations, using more tools is generally better because you can get
    even more information.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and preparing AWS pentesting tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s install and prepare the third-party software we’ll be using in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter problems with disk space while installing any of these tools,
    you may have to delete old files to make space. Files can be deleted with the
    Bash commands earlier in this chapter. You also may have to deploy a new AWS EC2
    instance. See the official AWS documentation for more information: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html).'
  prefs: []
  type: TYPE_NORMAL
- en: As much as possible, I will be using AWS CloudShell to install applications.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s start with Prowler.
  prefs: []
  type: TYPE_NORMAL
- en: Prowler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prowler is a vulnerability scanner for cloud platforms. Prowler can scan AWS
    for vulnerabilities and security misconfigurations based on the **Center for Internet
    Security** (**CIS**), **National Institute of Standards and Technology** (**NIST**)
    800, NIST **Cybersecurity Framework** (**CSF**), the **Cybersecurity and Infrastructure
    Security Agency** (**CISA**), the **Federal Risk and Authorization Management**
    (**FedRAMP**), the **Payment Card Industry Data Security Standard** (**PCI-DSS**),
    the **General Data Protection Regulation** (**GDPR**), the **Health Insurance
    Portability and Accountability Act** (**HIPAA**), and other security standards.
  prefs: []
  type: TYPE_NORMAL
- en: Open AWS CloudShell by logging in to your AWS account in a web browser (a small
    square icon with a command prompt).
  prefs: []
  type: TYPE_NORMAL
- en: Before we install Prowler, you may have to update the version of Python in AWS
    CloudShell to Python 3.9\. You can update Python with the commands shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check which version of Python you already have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If it says Python 3.9, you’re good to go. Otherwise, do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation process is done, you can verify that it works with this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the commands to enter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This uses the **yum** installer to install some Prowler dependencies. You may
    be asked to enter your AWS account password:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This downloads the package for Python 3.9, a dependency for installing Prowler
    from **pip**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This installs the Python package, configures it, and sets “enable optimizations.”
    Sometimes, a command may take a few minutes to execute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Be careful to make sure that **--** is entered as two hyphens with no space
    in between. Some web browsers might change **--** into one long **–**. That will
    cause an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, you’re back in your home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'This installs Prowler from **pip**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Congratulations! Later on, when we actually use Prowler, you can find the output
    of your pentests and vulnerability assessments by clicking on **Actions** in the
    top-right corner of the AWS PowerShell screen. Then, go to **Download File** and
    open the CSV file. It will have a location and filename like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If **Actions** | **Download File** doesn’t work, you may need to open AWS CloudShell
    in Google Chrome. If you don’t have Chrome, install it by visiting [https://www.google.com/chrome/](https://www.google.com/chrome/).
    Hopefully, you have your AWS root account email address and password recorded
    somewhere safe so that you can switch web browsers when needed!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s install Pacu.
  prefs: []
  type: TYPE_NORMAL
- en: Pacu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pacu is an AWS pentesting application. If you’ve already followed my instructions
    for installing Prowler, then you’ll already have Python installed. That’s great,
    as we can use **pip** to install Pacu, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This prepares the **pip** installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This installs Pacu. Now, let’s execute it!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Cred Scanner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s install Cred Scanner. It’s a very simple script to scan the files
    in your AWS instance for sensitive credentials. You absolutely do not want passwords
    and the like to be exposed to cyber attackers! Follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the Python script in your web browser from GitHub here: [https://github.com/disruptops/cred_scanner/blob/master/cred_scanner.py](https://github.com/disruptops/cred_scanner/blob/master/cred_scanner.py).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the entire Python script. Paste it into a text editor and make sure the
    file is saved as **cred_scanner.py**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to upload the script from your local computer to your AWS server.
    Click on **Actions** in the top-right corner of your AWS CloudShell screen. Then,
    go to **Upload file**, click on **Select file**, navigate to where you saved **cred_scanner.py**
    on your local computer, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/disruptops/cred_scanner/blob/master/requirements.txt](https://github.com/disruptops/cred_scanner/blob/master/requirements.txt)
    and do just about the same. It’s just one line of code that says **click**. But
    you still need to save it as a file named **requirements.txt**. Then, upload the
    file in AWS CloudShell the same way you uploaded **cred_scanner.py**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, back to the command line! Make sure Cred Scanner has its requirements
    by entering the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can execute the Python script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s continue with Cred Scanner. Here’s what a scan can look like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Cred Scanner scan output](image/B18672_05_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Cred Scanner scan output
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can install Cred Scanner by cloning its GitHub repository.
    In order to clone a repository, follow the instructions in the GitHub documentation:
    [https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code you need to clone can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/disruptops/cred_scanner](https://github.com/disruptops/cred_scanner)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Cred Scanner is so simple that I’ll show you how to do a scan right now
    instead of explaining it in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will display Cred Scanner’s options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will show you secret keys in the directory you have open at the command
    line:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will run Cred Scanner in another directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alternatively, you can use the **cd** command to change to the directory you
    want to run Cred Scanner in.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFrunt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CloudFrunt is a script developed by MindPoint Group for identifying misconfigurations
    in AWS CloudFront.
  prefs: []
  type: TYPE_NORMAL
- en: I’m going to show both installing and executing CloudFrunt here as well, due
    to its simplicity. Remember—you must have AWS CloudFront configured on your AWS
    server in order for CloudFrunt to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the AWS CloudShell command line, download the CloudFrunt script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – CloudFrunt installation](image/B18672_05_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – CloudFrunt installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, install it and its dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, assuming we have CloudFrunt installed, let’s give it a go!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the command structure for using **cloudfrunt.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Don’t enter that exact command. You’ll need to modify it according to your situation.
    Anything in **-<letter>** is called an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Replace **cloudfrunt.com.s3-website-us-east-1.amazonaws.com** with the domain
    that you’re scanning. Replace **S3-cloudfrunt** with the origin of the vulnerable
    domain that you’re adding. Replace **list.txt** with a text file of domains to
    scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how you display the guide to using CloudFrunt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what it will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – CloudFrunt help screen](image/B18672_05_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – CloudFrunt help screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Use this as your guide to executing CloudFrunt. If you use **-s** or **--save**
    when you execute CloudFrunt, you’ll be able to find your CloudFrunt scan results
    by clicking on **Actions** in the top-right corner of the AWS PowerShell screen.
    Then, go to **Download File** and open the text file. It will have a location
    and filename like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: On to Redboto next!
  prefs: []
  type: TYPE_NORMAL
- en: Redboto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last third-party tool I’ll walk you through installing is the Redboto Python
    script collection. The scripts perform red team operations against the AWS API.
    First, let’s install its prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open its GitHub collection in another web browser tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ihamburglar/Redboto](https://github.com/ihamburglar/Redboto)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Redboto is a collection of scripts. Open each web page for each script you’d
    like to try. Remember how I walked you through copying scripts from GitHub, pasting
    the script into a text editor, saving it with its specific filename, and then
    uploading files with **Actions** | **Upload file** | **Select file** in the AWS
    CloudShell web UI? Do this with each of the Redboto scripts you’d like to use.
    The Redboto GitHub repository provides an explanation of what each script does.
    Then, in the directory you uploaded files to, you can execute each script like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterward, you should be able to go to **Actions** | **Download File** from
    the AWS CloudShell UI and find output files in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Remember that directory well because if the tutorials I give you in this chapter
    are your labor, the contents of that directory are the fruits of your labor. But
    you won’t simply be giving your pentesting client the output in that directory.
    You will be using the output files as information you’ll deploy when you write
    your pentest report for your client. Being a good pentester isn’t simply a matter
    of executing scripts and sharing outputs and other logs. Your job is to interpret
    the logs and help your client and the defensive security team understand them
    and use the vulnerability information to security harden your client’s AWS networks
    and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Alright! Now, it’s time to conduct some general pentesting and vulnerability
    scanning activities in Prowler and Pacu.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting AWS applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve installed a number of pentesting applications and run some simple
    scripts, let’s get deeper into AWS exploitation with Prowler and Pacu.
  prefs: []
  type: TYPE_NORMAL
- en: Prowler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s conduct some pentesting and vulnerability scanning activities in
    Prowler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have your AWS credentials ready. You can verify them by logging in to your
    AWS account from your web browser. On the top menu bar, look at the far right
    drop-down menu with your username. Click on **Security credentials** to navigate
    to the correct AWS **Identity and Access Management** (**IAM**) page. At the top,
    it should say **My security credentials (root user)**. Make a note of your AWS
    account ID, access key ID, and secret access key. Then, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s open AWS CloudShell again. Enter this command to configure your
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the **AWS_ACCESS_KEY_ID=** field, paste the key ID you generated and hit
    *Enter*. Hit *Enter* for all the other fields too; we’ll be leaving them blank.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to save a 0.0003 USD charge to your account per AWS configure occurrence,
    you can configure AWS with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**export AWS_ACCESS_KEY_ID=your_access_key_id**'
  prefs: []
  type: TYPE_NORMAL
- en: '**export AWS_SECRET_ACCESS_KEY=your_secret_access_key)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute Prowler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If that doesn’t work, follow the instructions earlier in this chapter to install
    Prowler again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, the output of your Prowler scans should be somewhere around here,
    with a filename like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Prowler command on its own will execute a default scan that shows the AWS
    services that you have (such as EC2, IAM, and so on), whether the scan passed
    or failed, and the number of critical, high, medium, and low vulnerabilities each
    service has according to the CVSS score. It’ll run through dozens of checks, such
    as **check121**, **check122**, **check23**, and **check24**. It may print to the
    screen (and to your CSV logs) all kinds of information that’ll be useful in your
    pentest report, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In this example, **check25** scanned all of your AWS services to see if they
    have AWS Config enabled. AWS Config on its own doesn’t guarantee security. But
    it needs to be enabled in order to securely configure it, kind of like how your
    car must have seatbelts installed. The seatbelts being there doesn’t guarantee
    that the driver and passengers will wear them, but they cannot wear their seatbelts
    if they aren’t there in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You may encounter AWS secret access key issues. If so, visit [https://console.aws.amazon.com/kms](https://console.aws.amazon.com/kms)
    for **AWS Key Management Service** (**AWS KMS**) and make a new key while making
    a note of your secret access key. You can also get troubleshooting help in the
    AWS documentation at [https://docs.aws.amazon.com/kms/latest/developerguide/find-cmk-id-arn.html](https://docs.aws.amazon.com/kms/latest/developerguide/find-cmk-id-arn.html)
    and [https://docs.aws.amazon.com/kms/latest/developerguide/programming-keys.html](https://docs.aws.amazon.com/kms/latest/developerguide/programming-keys.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to get more refined, you can start by seeing which specific checks
    or services you can execute from Prowler with one of these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'When you find checks you’d like to execute, you can use this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Of course, replace **check11** and **check12** with the checks that you’d like
    to execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run all of the checks *except* for some of them, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: That will run all of the checks *except* for **check32** and **check33**.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Prowler will scan your AWS services in all of the regions that
    have opted in. But you can limit scanning to only some regions, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: So, in that case, only your servers in **eu-west-1** and **us-east-s** will
    be scanned.
  prefs: []
  type: TYPE_NORMAL
- en: And those are the basics of executing vulnerability scans and pentests in AWS
    with Prowler. For more information, refer to Prowler’s README file ([https://github.com/prowler-cloud/prowler#readme](https://github.com/prowler-cloud/prowler#readme))
    and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Pacu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, it’s time for Pacu. I will walk you through executing a vulnerability
    scanning module. I will also show you how to find the output reports from your
    Pacu scans. Follow the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are one of two methods you can use. You could enter this sequence of
    commands to prepare your access key to use Pacu free of charge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As an alternative to *step 1*, you can enter this command to configure your
    key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This command may incur a charge of 0.0003 USD to your AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, input the key ID that we used for Prowler. Navigate to the directory
    that we installed Pacu in:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the AWS CloudShell command line, we’ll first look at the help options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If that doesn’t work, try the alternative installation instructions here: [https://rhinosecuritylabs.com/aws/pacu-open-source-aws-exploitation-framework/](https://rhinosecuritylabs.com/aws/pacu-open-source-aws-exploitation-framework/).
    If you installed Pacu that alternative way, you can execute Pacu with this command.
    Just make sure you’re in the correct directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When Pacu asks you to name a new session, come up with whatever name for the
    session you’d like to use, and hit *Enter*. For instance, you can try **TestPacuSession**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'See a list of the modules you can try:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here’s what to expect:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Pacu help screen](image/B18672_05_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Pacu help screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Try whichever modules you’d like. For example, one of the modules is named
    **backdoor_users_password**. Are there any backdoors into your AWS services that
    could reveal a user password? You can also look at a full list of modules here:
    [https://github.com/RhinoSecurityLabs/pacu/wiki/Module-Details](https://github.com/RhinoSecurityLabs/pacu/wiki/Module-Details).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Try this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, you could try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterward, you should be able to go to **Actions** | **Download file** from
    the AWS CloudShell UI and find output files in this directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'I recommend checking out the Pacu wiki for more information about getting the
    most out of using Pacu to pentest AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/RhinoSecurityLabs/pacu/wiki](https://github.com/RhinoSecurityLabs/pacu/wiki)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anyone can set up an AWS account under their Free Tier to try out some general
    AWS pentesting tools.
  prefs: []
  type: TYPE_NORMAL
- en: AWS has its own applications that will be useful to you as a pentester. They
    include AWS CloudShell, AWS Security Hub, and Amazon Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudShell gives you a CLI you can use from your web browser once you’ve
    logged in to your AWS account. Alternatively, you can use the AWS CLI application,
    which you can install directly on your Windows, Mac, or Linux PC.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Security Hub is a handy unified application for checking all of your AWS
    security settings, configurations, and reports.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Inspector is AWS’s native vulnerability scanning application. I would
    recommend using it in addition to the other vulnerability scanners and pentesting
    applications I demonstrate in this book.
  prefs: []
  type: TYPE_NORMAL
- en: A wide range of vulnerability scans and pentests can be executed with Prowler,
    Cred Scanner, CloudFrunt, and Pacu. These tools help you find security problems
    such as exposed services and poor security configurations. Remember—you will need
    to interpret the outputs of these tools yourself and explain them in your pentesting
    report. If you just share the CSV output files of scans, you’re not doing your
    job as a pentester!
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B18672_06.xhtml#_idTextAnchor101), we will return to our AWS
    account to try containerization with Docker and Kubernetes. Then, we’ll test the
    Docker and Kubernetes instances we will make.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about the topics covered in this chapter, you can visit the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS CloudShell documentation: [https://docs.aws.amazon.com/cloudshell/](https://docs.aws.amazon.com/cloudshell/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Prowler: [https://github.com/prowler-cloud/prowler](https://github.com/prowler-cloud/prowler)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prowler documentation: [https://docs.prowler.cloud/en/latest/](https://docs.prowler.cloud/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pacu: [https://github.com/RhinoSecurityLabs/pacu](https://github.com/RhinoSecurityLabs/pacu)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
