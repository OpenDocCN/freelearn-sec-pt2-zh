["```\npip -V\n```", "```\npip 20.3.4 from /usr/lib/python3/dist-packages/pip (python 3.9)\n```", "```\nsudo apt-get install python3-distutils\npip install prowler\n```", "```\ngit clone https://github.com/prowler-cloud/prowler\ncd prowler\npython prowler.py -v\n```", "```\ngit clone https://github.com/RhinoSecurityLabs/GCPBucketBrute.git\ncd GCPBucketBrute/\npip3 install -r requirements.txt\n```", "```\ngit clone https://github.com/google/gcp_scanner\ncd gcp_scanner\npip install .\n```", "```\ngcloud config set account <account>\n```", "```\ncd prowler\nprowler gcp\n```", "```\nprowler -h\n```", "```\npython prowler.py -h\n```", "```\npython3 gcpbucketbrute.py -k <enter your keyword here> -u\n```", "```\npython3 gcpbucketbrute.py -k test -u\n```", "```\n    EXISTS: test-pubsub\n    EXISTS: project_test\n    EXISTS: dl_test\n    EXISTS: test_6\n    EXISTS: test-export\n    EXISTS: gcplogs-test\n    EXISTS: teamcity-test\n    EXISTS: testproject\n    EXISTS: appenginetest\n    EXISTS: test-artifacts\n    EXISTS: estest\n    EXISTS: ops_test\n    EXISTS: staging_test\n    EXISTS: testtemp\n    EXISTS: templates-test\n    EXISTS: bucket_test\n    EXISTS: testservices\n    EXISTS: syslog-test\n    EXISTS: test-sitemaps\n    EXISTS: cloudtest\n    EXISTS: trace-test\n    EXISTS: audit_test\n    EXISTS: test_ml\n    EXISTS: gcp-logs-test\n    EXISTS: test-videos\n    EXISTS: ux_test\n    EXISTS: test_tasks\n    EXISTS: tmp_test\n    EXISTS: dockertest\n    EXISTS: testassets\n    EXISTS: testops\n    EXISTS: test_support\n    UNAUTHENTICATED ACCESS ALLOWED: pictures-test\n        - UNAUTHENTICATED LISTABLE (storage.objects.list)\n        - UNAUTHENTICATED READABLE (storage.objects.get)\n        - ALL PERMISSIONS:\n            [\n                \"storage.objects.get\",\n                \"storage.objects.list\"\n            ]\n```", "```\ncd gcp_scanner\n```", "```\nmkdir <folder name of your choice here>\n```", "```\npython3 scanner.py -h\n```", "```\npython3 scanner.py -o <folder name you used in mkdir command here> -ls -m\n```", "```\nGCP Scanner\noptional arguments:\n  -h, --help            show this help message and exit\n  -ls, --light-scan     Return only the most important GCP resource fields in the output.\n  -k KEY_PATH, --sa-key-path KEY_PATH\n                        Path to directory with SA keys in json format\n  -g GCLOUD_PROFILE_PATH, --gcloud-profile-path GCLOUD_PROFILE_PATH\n                        Path to directory with gcloud profile. Specify - to search for credentials in default gcloud config path\n  -m, --use-metadata    Extract credentials from GCE instance metadata\n  -at ACCESS_TOKEN_FILES, --access-token-files ACCESS_TOKEN_FILES\n                        A list of comma separated files with access token and OAuth scopes.TTL limited. A token and scopes should be stored in JSON format.\n  -rt REFRESH_TOKEN_FILES, --refresh-token-files REFRESH_TOKEN_FILES\n                        A list of comma separated files with refresh_token, client_id,token_uri and client_secret stored in JSON format.\n  -s KEY_NAME, --service-account KEY_NAME\n                        Name of individual SA to scan\n  -p TARGET_PROJECT, --project TARGET_PROJECT\n                        Name of individual project to scan\n  -f FORCE_PROJECTS, --force-projects FORCE_PROJECTS\n                        Comma separated list of project names to include in the scan\n  -c CONFIG_PATH, --config CONFIG_PATH\n                        A path to config file with a set of specific resources to scan.\n  -l {DEBUG,INFO,WARNING,ERROR,CRITICAL}, --logging {DEBUG,INFO,WARNING,ERROR,CRITICAL}\n                        Set logging level (INFO, WARNING, ERROR)\n  -lf LOG_FILE, --log-file LOG_FILE\n                        Save logs to the path specified rather than displaying in console\n```"]