- en: Choosing Your Hunting Ground
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you're deciding what bug bounty programs you'd like to participate in,
    it's nice to have a baseline of information about your options – an offering company's
    report-submission process, submission success rate, the attack surface of the
    sites in question, and more. Luckily, that information is typically easy to find
    based on the type of company, its size, the nature of its reward program (third-party
    marketplace, in-house), and its public statements and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover how to evaluate marketplaces, programs, and companies
    and gauge their promise as productive engagements. It will also cover how to zero-in
    on the areas of web applications where you're most likely to find bugs. At the
    end of it, you'll know what programs to participate in, why, and how you can make
    the most of your target application – all while ensuring you color within the
    lines of your agreed-upon rules of engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are no software requirements associated with this section: you can explore
    all the resources listed here with just a standard web browser. In our case, that''s
    Chrome (`66.0.3359.139`).'
  prefs: []
  type: TYPE_NORMAL
- en: An Overview of Bug Bounty Communities – Where to Start Your Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many different choices for bug bounty programs to participate in,
    but most boil down to two types: third-party marketplaces and company-sponsored
    programs.'
  prefs: []
  type: TYPE_NORMAL
- en: Third-Party Marketplaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Marketplaces are sites that match companies and researchers. They standardize
    the submission process, rules of engagement disclosure, and other documentation,
    while providing forums, teaching blogs, and other services to the community. Marketplaces
    are good sources of technical information and the metrics they typically collect
    – related to things such as a company's response time and average payout – can
    help you decide where to direct your efforts. The consistent submission standards
    mean you can also develop a template – we'll show you an example later – that
    can be modified and reused between engagements. This allows you to automate tooling
    around information-gathering, which will make your entire workflow easier and
    more consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Bugcrowd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bugcrowd ([https://www.bugcrowd.com/](https://www.bugcrowd.com/)) has a standard
    sign-up process and doesn't require any proof of experience to become a researcher.
    You can choose to make your profile public (so people can see the kudos points
    you've accumulated and general stats about your involvement) or keep it private.
  prefs: []
  type: TYPE_NORMAL
- en: Your page shows your rank, how many points you've accumulated, how many submissions
    you've made over time, and the accuracy of those submissions. It also displays
    the average severity of the vulnerabilities you've had rewarded, on a scale of
    low-moderate-high-critical. Bugcrowd also maintains a system for classifying vulnerabilities,
    called the **Vulnerability Rating Taxonomy**, in an effort to further bolster
    transparency and communication, as well as to contribute valuable and actionable
    content to the bug bounty community. For researchers specifically, the company
    contends the VRT help[s] program participants save valuable time and effort in
    their quest to make bounty targets more secure, helping them identify which types
    of high-value bugs they have overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Astute researchers will often specialize their skillset to become proficient
    at detecting a handful of bugs. As you work through the exercises and think about
    which strategies you'd like to dedicate time to, resources such as the VRT can
    help you triangulate that perfect intersection of effort and reward.
  prefs: []
  type: TYPE_NORMAL
- en: Bugcrowd uses metrics about your behavior, pulled from the last 90 days, to
    determine which researchers to invite to private bounty programs. These private
    programs are opened to a limited set of researchers, who are given a window of
    time to in which find vulnerabilities. These private programs are great because
    they mean fewer researchers combing through a particular site, and therefore more
    chances for you to discover bugs.
  prefs: []
  type: TYPE_NORMAL
- en: The company also provides a useful service where, every time you log in, Bugcrowd
    will set aside a relay email address for you at `[username]@bugcrowdninja.com`
    for the next 30 days. Sometimes program guidelines will ask you to create a testing
    account using this email so the participating company can monitor researchers,
    but regardless, they're a great resource. Because it's a Gmail service, you can
    also change the address if you need to spin up multiple accounts (for example,
    `[username]+test1@bugcrowdninja.com` and `[username]+test2@bugcrowdninja.com`).
  prefs: []
  type: TYPE_NORMAL
- en: You can find a wide spectrum of businesses on Bugcrowd, covering every size
    and a variety of revenue models. The targets trend towards web applications, but
    there is also a smattering of mobile apps and the odd alternative listing.
  prefs: []
  type: TYPE_NORMAL
- en: HackerOne
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HackerOne ([https://www.hackerone.com/](https://www.hackerone.com/)) is a similar
    platform – it has its own point system (reputation) and also calculates a variety
    of metrics that it uses as the basis for its Leaderboard and for invitations to
    its own private programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like Bugcrowd, it also has a bug bounty policy for itself – if you find a vulnerability
    in one of its sites or apps, you''re entitled to a reward. Interestingly though,
    you might still be entitled to a reward even if you *don''t* discover a bug. From
    their site:'
  prefs: []
  type: TYPE_NORMAL
- en: '"HackerOne is interested in your research on our systems, regardless of whether
    you found a security vulnerability. If you have found yourself looking at a particular
    feature on one of our assets but didn''t find anything, please submit a report
    that describes all the different things you tried and failed. We may reward you
    for substantial research performed on assets under our bug bounty policy."'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an usual policy that still makes sense: providing a detailed list of
    everything that *worked* is its own audit of the company''s resources, even if
    it doesn''t cover any vulnerable areas.'
  prefs: []
  type: TYPE_NORMAL
- en: HackerOne and Bugcrowd both have a similar breadth of different companies, with
    different products, business models, and security needs. HackerOne does have a
    few notable companies that are exclusive to its platform,  most notably Twitter,
    but generally the offerings are very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability Lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vulnerability lab is a submission-and-disclosure platform that uses a team of
    in-house experts to vet high-profile vulnerabilities, but also accepts submissions
    on less critical/lower-profile bugs. One of their site's features actually involves
    receiving reports for critical vulnerabilities that a researcher might not want
    to submit directly and acting as a point of contact and third-party broker for
    the researcher with the affected company.
  prefs: []
  type: TYPE_NORMAL
- en: Like HackerOne, it publicly discloses bug reports after a window of time has
    elapsed, and is a useful reference for beginners looking to better understand
    the form of bug reports, and methods for discovering and reporting common vulnerabilities.
    Their public index of vulnerabilities is also tagged with the type of system each
    bug was found on, making it a nice resource when you're trying to get a sense
    of application-specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: BountyFactory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BountyFactory, which touts itself as the first European bug bounty platform
    that relies on European rules and legislation, is run by the larger YesWeH4ck
    group, an Infosec recruiting company founded in 2013 that's made up of a bug bounty
    platform, a job board (YesWeH4ck Jobs), a coordinated vulnerability-disclosure
    platform (ZeroDisclo), and an aggregation of all public bug bounty programs (FireBounty).
    Like Bugcrowd and HackerOne, BountyFactory has a scoring system, leaderboard,
    and both public and private programs, for which it extends a limited number of
    invitations.
  prefs: []
  type: TYPE_NORMAL
- en: Because of its European orientation, BountyFactory is great for finding companies,
    such as OVH, Orange, and Qwant, that aren't on the popular, American-run alternatives.
    Many of its clients are straight out of the French start-up scene.
  prefs: []
  type: TYPE_NORMAL
- en: Synack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Synack relies on a completely different business model from all the other programs
    we've discussed.
  prefs: []
  type: TYPE_NORMAL
- en: As a private program that prides itself on its quality and exclusivity, Synack
    requires more than just an email to become a researcher. The company asks for
    personal information, requests a video interview, initiates a background and ID
    check, and conducts a skills assessment to ensure their researchers are capable
    and responsible enough to audit programs where they might come into contact with
    sensitive data (one of Synack's specialties).
  prefs: []
  type: TYPE_NORMAL
- en: Fewer than 10% of applicants to their Red Team are accepted. And unlike the
    other programs, Synack doesn't publish a leaderboard or any sort of researcher
    ranking publicly (though they do keep internal rankings as the basis for rewards
    and invitations to select campaigns).
  prefs: []
  type: TYPE_NORMAL
- en: Intermediaries such as Synack are great if you're looking for more of the private
    program-type of engagements you're already being invited to on Bugcrowd or HackerOne
    , where researchers receive exclusive, limited access to the target application.
    It's also great if you need a quick payout time, or want access to the professional
    development materials the company only makes available to member researchers.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that Synack keeps its researchers' identities secret is also a benefit,
    as – though adhering to the **Rules of Engagement** (**ROE**) is always important
    – it offers the researcher some protection from legal action by companies trying
    to discourage aggressive auditing, or who interpret their own RoE differently
    than you do.
  prefs: []
  type: TYPE_NORMAL
- en: In general, Synack is a good option if you've already cut your teeth on bug
    bounty marketplaces where the cost to join isn't as high, and are looking to make
    a bigger commitment to security research. If you're willing and able to get passed
    their screening process, working as part of their red team will secure you less-trafficked
    targets, exclusive engagements, and quicker payouts.
  prefs: []
  type: TYPE_NORMAL
- en: Company-Sponsored Initiatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Company-sponsored programs are just what they sound like. It''s not just large
    mega-corps that have bounty programs – a surprising number of businesses have
    a process for rewarding security contributions. The size of each company can drastically
    effect the requirements and conditions for a reward: large companies pay top dollar
    for vulnerabilities, but the low-hanging fruit of those flaws will already have
    been picked; start-ups will have less mature applications, but probably a smaller
    application attack surface, assembled from a newer stack with fewer known vulnerabilities,
    and might want to pay for contributions in swag. Companies that are mature enough
    to suffer from technical debt, but also have a budget to pay rewards, are a nice
    fit. Sometimes, though, you''ll just have to poke around in different areas, taking
    your chances, to find your next vulnerability.'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some examples of the programs offered by larger companies.
  prefs: []
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google's program is expansive, with detailed payout structures and specific
    instructions for classifying different types of bug. Most of the relevant information
    can be found on the rewards section of their Application Security page, but Google
    also curates a (small) set of pentesting tutorials, with specific attention paid
    to finding the types of bugs and submitting the kinds of reports about them that
    Google wants to receive.
  prefs: []
  type: TYPE_NORMAL
- en: The articles on Bughunter University and other Google resources have different
    levels of applicability – some of it is just Google's preferences, requirements,
    and so on – but even the more idiosyncratic sections contain best practices and
    wisdom that can applied to other programs and engagements. Other companies might
    not agree completely with their common types of non-qualifying report, but there'll
    still be substantial overlap, making it a useful guide regardless of the vendor.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the materials on Bughunter University, Google is responsible
    for creating and maintaining a lot of great instructional applications. We'll
    be using one, Google Gruyere ([https://google-gruyere.appspot.com/](https://google-gruyere.appspot.com/)),
    as part of our chapter on XSS and you can find other great resources from Google
    in the other tools section at the end of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Facebook has a bug bounty program with a minimum payout of $500, but as the
    very direct language in their responsible disclosure policy attests, they do not
    tolerate mucking about with production data: if you comply with the policies when
    reporting a security issue to Facebook, they will not initiate a lawsuit or law
    enforcement investigation against you in response to your report.'
  prefs: []
  type: TYPE_NORMAL
- en: The amount of information available for their program is minimal. You'll find
    a side-by-side example of a submission report and an improved version, with some
    non-qualifying vulnerabilities, but not much in the way of universal lessons or
    professional tips.
  prefs: []
  type: TYPE_NORMAL
- en: As the legalese signals, Facebook is very sensitive to misuse of its platform
    – especially given recent increased scrutiny. And because so many exploits will
    be aimed at affecting users, it's critical to stop short of writing any code that
    could subvert an account.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon has vulnerability programs for both its e-commerce and cloud services
    divisions.
  prefs: []
  type: TYPE_NORMAL
- en: An important point is that Amazon requires you to register and ask for permission
    before conducting any sort of pentesting engagement. This is critical, and a key
    way the company differs from some of its competitors. Instead of an open-ended
    participation model where, as long as you abide by the rules of engagement, you
    can expect immunity, Amazon enforces a permissions-first model to better contain
    pentesting activity and differentiate White- and Black-Hat activity.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon has a multitude of white papers, blog posts, and documentation on how
    security works within Amazon, but less material than Facebook or Google to help
    with penetration testing or bug bounty participation generally.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub offers a bounty program that covers a wide array of its properties, including
    the API, enterprise app, and main rails site ([https://github.com/](https://github.com/)),
    with payouts ranging from $555 to $20,000 for most of those targets.
  prefs: []
  type: TYPE_NORMAL
- en: One neat feature of the GitHub program is that each participant who successfully
    submits a bounty receives a profile page that – in addition to showing the points
    they've accumulated, rank, and earned badges – lists their reported vulnerabilities
    with a short technical blurb about each one. Like the published submission reports
    on other platforms, any technical detail about a successfully-discovered vulnerability
    is an invaluable insight into winning strategies, both in general and for the
    site in question.
  prefs: []
  type: TYPE_NORMAL
- en: And if you're looking to parlay finding bugs into a larger career in security,
    profile pages such as the ones offered by GitHub, Bugcrowd, and HackerOne can
    be great bullet points on your resume.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft has a rewards program covering both its consumer-software-stable and
    web-app products, such as their cloud offering, Azure. The Microsoft Bounty Program
    site goes into detail about submission-report formatting, showing examples of
    both good and bad specimens, and has detailed, specific testing guidelines for
    every Microsoft property included. But there isn't a deep reserve of learning
    material from a general pentesting perspective, and less in the way of community.
    Microsoft, like many other companies, has its own public leaderboard and ranking
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Their blog is a good source for more general Infosec analysis. In one series,
    they provide an in-depth analysis, including source code examples, of Windows
    exploits used by the Shadow Brokers, the infamous hacking syndicate known to have
    leaked NSA hacking tools in the summer of 2016.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Other Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many companies have bug bounty programs. If there's a particular site or app
    you're interested in testing, finding out whether it's supported by a bug bounty
    is as easy as a couple of searches. Queries that take advantage of Google's expressive
    search syntax, such as `inurl:/security/`, `intext:bug bounty`, and `intext:reward`
    are all great building blocks you can use to discover new programs. You can even
    combine them to drill down into bounty programs that are specific to a certain
    application – a query such as `intext:"Bug Bounty" AND intext:"vulnerability"
    AND intext:"reward" AND inurl:"/wp-content/"` can be used to return program pages
    for Wordpress sites (credit to Sachin Wagh (@tiger_tigerboy) for the dorks).
  prefs: []
  type: TYPE_NORMAL
- en: You can even set up a Google alert using these search terms and others, to give
    you a simple, automated way of discovering new programs to participate in.
  prefs: []
  type: TYPE_NORMAL
- en: 'For something a little less ad-hoc: in addition to the great teaching resources
    it provides, Bugcrowd curates a list populated by its members on what bug bounty
    programs are available as well as whether they provide financial compensation
    versus company swag, their age, and whether or not they feature a "Hall of Fame"
    for successful researchers. You can find the table at [https://www.bugcrowd.com/bug-bounty-list/](https://www.bugcrowd.com/bug-bounty-list/).'
  prefs: []
  type: TYPE_NORMAL
- en: Firebounty, mentioned earlier as a product of YesWeH4ck, is a hybrid that shows
    that bounty programs from other platforms as well as its own unique offerings.
    As a product of the French security scene, it has an interesting mix of both transatlantic
    and European websites, mobile apps, and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Money Versus Swag Rewards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the programs you'll find won't provide a cash payout, but instead company
    swag (shirts, water bottles, and so on). Don't skip over these programs. In addition
    to being less-trafficked – upping your chances of finding a bug – and giving you
    great practice at finding vulnerabilities on a live production site, many swag
    programs supported by third-party marketplaces will also count toward your profile's
    chances of being invited to a private program, for those that support them.
  prefs: []
  type: TYPE_NORMAL
- en: These swag-only programs are generally where you should start if you're just
    beginning your journey. Hacking Google, Facebook, or Amazon will guarantee you
    a big payout if you succeed, but they already have such large security teams and
    so many bug report submissions from independent researchers, it'll be hard for
    someone just starting out to find anything on their first try – much less something
    that hasn't already been reported.
  prefs: []
  type: TYPE_NORMAL
- en: The Internet Bug Bounty Program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet bug bounty program inhabits something between a third-party marketplace
    and an individual effort. The IBBP is a not-for-profit funded by big tech contributors
    such as Microsoft, Adobe, Facebook, and GitHub, for the purpose of protecting
    the integrity of core internet services. The technologies covered under their
    reward program are diverse, with languages (Perl, Ruby, PHP), application frameworks
    (Django, Ruby on Rails), servers (NGINX, Apache HTTP) and cryptographic tools
    (Open SSL) all covered.
  prefs: []
  type: TYPE_NORMAL
- en: While this work is focused primarily on pentesting web applications as opposed
    to their more fundamental components, the IBBP is a great resource to keep in
    mind as your skills advance. The IBBP has been responsible for awarding payouts
    for some of the most high-profile bugs in the last decade, such as Heartbleed
    ($15k), ShellShock ($20k), and ImageTragick ($7.5k).
  prefs: []
  type: TYPE_NORMAL
- en: ZeroDisclo and Coordinated Vulnerability Disclosures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've discovered a serious, high-profile vulnerability affecting critical
    services on a large scale, it's important to be aware of certain quirks about
    coordinated vulnerability disclosures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Coordinated vulnerability disclosure** is a set of protocols around report
    submissions that describe a process where the reporter of a vulnerability, the
    vendor of the component containing the vulnerability, and any third parties (including
    other companies that use those vulnerable components) come together to coordinate
    on fixing the issue and disclosing its existence to the general public.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One possible third party in this arrangement is companies such as ZeroDisclo,
    which we mentioned earlier is also associated with the European company YesWeH4ck
    (and BountyFactory). Here''s an excerpt from ZeroDisclo''s website describing
    their services:'
  prefs: []
  type: TYPE_NORMAL
- en: In constant contact with its community of security researchers, YesWeHack can
    testify that it is complex for a security researcher and therefore, for a whistle-blower
    to report security flaws -in a coordinated way–to impacted organizations. Especially,
    if those organizations do not have a bug bounty program registered on BountyFactory.io
  prefs: []
  type: TYPE_NORMAL
- en: Discoverers of vulnerabilities often experience difficulties on how to report
    them to the organizations concerned without disclosing them to a third party and
    unfortunately direct contact with companies constitutes a legal risk.
  prefs: []
  type: TYPE_NORMAL
- en: A long-time partner of the security research community through its founders,
    YesWeHack is proud to present https://zerodisclo.com/. This non-profit platform
    provides the technical means and the required environment for all to adopt the
    coordinated reporting of vulnerabilities commonly known as Coordinated Vulnerability
    Disclosure.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, if a researcher found a serious vulnerability for a core internet
    service (that is, JavaScript) but didn't know who to report it to or (more likely)
    feared legal retribution from an affected company, they could visit ZeroDisclo,
    either through HTTPS or TOR, and fill out a form describing the nature of their
    vulnerability and its technical details. Then ZeroDisclo would vet the submission
    and report it to the affected parties while keeping the original discoverer of
    the vulnerability anonymous.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you choose to do this, be careful because you could be breaking program
    policy. The Internet bug bounty Program, discussed in the preceding section, has
    a specific question in its FAQs dedicated to using third-party brokers:'
  prefs: []
  type: TYPE_NORMAL
- en: Can I report the bug to you via a third-party broker?
  prefs: []
  type: TYPE_NORMAL
- en: No. It is unacceptable to share the vulnerability with anyone without the explicit
    consent of the security team.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you consider all your options before submitting through a third-party
    broker. If you decide to use one, take preventative efforts to stay anonymous,
    such as submitting through TOR, to protect yourself.
  prefs: []
  type: TYPE_NORMAL
- en: The Vulnerability of Web Applications – What You Should Target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've narrowed down the program you're going to participate in – or maybe
    you've skipped that and are just plowing through random sites, looking for easy
    pickings – you can start evaluating individual applications for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing so requires an understanding of each application''s attack surface. As
    a quick refresher, Wikipedia sums it up succinctly:'
  prefs: []
  type: TYPE_NORMAL
- en: The attack surface of a software environment is the sum of the different points
    (the attack vectors) where an unauthorized user (the attacker) can try to enter
    data to or extract data from an environment.
  prefs: []
  type: TYPE_NORMAL
- en: We'll get into actual Attack Surface Analysis in the next chapter, preparing
    for an engagement, but it helps to have a simple idea of it while evaluating different
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Using that definition of an attack surface and understanding that the larger
    the attack surface, the more opportunities there are to discover bugs, means we'll
    want to look for apps that have a lot of entry and exit points for information,
    ideally ones that are available to anonymous or otherwise not-logged-in users.
    Social media sites, or blogs and forums that allow anonymous commenters, are all
    input-rich environments, where the different types of posts, comments, reactions,
    and so on, provide many different vectors for possibly malicious information to
    enter the system.
  prefs: []
  type: TYPE_NORMAL
- en: Sites or applications with smaller attack surfaces obviously provide fewer opportunities
    to find vulnerabilities. A completely static site, where a web server is providing
    the HTML/CSS markup with no user data input, and no server-side language is interpreting
    or dynamically creating the site's content, is much more difficult to pentest
    with the aim of successfully discovering vulnerabilities – there are only so many
    ways the user can affect the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'And as discussed briefly earlier in the chapter, web applications – regardless
    of type – that are protected by large security teams, exposed to large user bases,
    audited actively by other researchers, or all three, are the least likely to be
    fruitful hunting grounds. All of these factors combine to create a general portrait
    of a site''s potential: a niche social network with a lot of opportunities for
    users to interact with the site and each other, created by a small startup, will
    be an easier target than a static site hosted on an Amazon S3 bucket, where there
    are no opportunities for user input and the security of the service is managed
    by a large, dedicated team.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the concept of an application''s attack surface in mind, some areas make
    for natural points of interest. OWASP categorizes the different types of attack
    points to help better model a site''s risk:'
  prefs: []
  type: TYPE_NORMAL
- en: Admin interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inquiries and search functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-entry (CRUD) forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transactional interfaces/APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational command and monitoring interfaces/APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfaces with other applications/systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And of course many other actions that allow for user input. These are all opportunities
    to check for poor data-handling techniques and mishandled sanitization procedures.
  prefs: []
  type: TYPE_NORMAL
- en: As the web becomes more mature, applications become entangled in dependencies
    and subsidiary services. Those points of contact – APIs – are also great weakpoints
    to probe in any engagement. A slightly different set of techniques is required
    than testing through the UI of an application. For example, while testing an application's
    UI, you might look for an instance of frontend validation that isn't properly
    enforced by backend services, where you can circumvent the frontend checks or
    use different encodings to bypass security measures. That technique isn't as applicable
    to a public API that receives considerable traffic and is designed to be an exposed
    ingress layer – although it's still susceptible to vulnerabilities, they probably
    won't be as simple as encoding issues.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating Rules of Engagement – How to Protect Yourself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's important before beginning an engagement to closely read the rules of engagement
    (sometimes also called a code of conduct) to understand the bounds of what is
    accepted within the program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Rules of Engagement lay out:'
  prefs: []
  type: TYPE_NORMAL
- en: What techniques are allowed in the source of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What sites/domains/apps are open to pentesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What parts (if any) of those apps are excluded from testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What vulnerabilities merit the highest payouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What vulnerabilities will not receive a payout at all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What credentials/account you should use as a security researcher (for a social
    network or something with authentication-restricted pages, companies will often
    offer pentesters a path to creating an account they can use to test user-restricted
    functionality)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RoE are extremely important not just because they affect your ability to
    win an award (you don't want to spend time chasing down a bug that doesn't merit
    a payout), but also because often the company offering the program uses fidelity
    to the RoE. It's essential to structure your entire pentesting engagement to make
    sure that it follows the guidelines and, at the end of your research, that you
    don't get served with a subpoena instead of a paycheck.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common items in any RoE is a restriction on how scanners are
    used. Though we'll go into greater detail in [Chapter 5](847090b6-8871-4977-9538-17cc1ad52954.xhtml),
    *SQL, Code Injection and Scanners*, there are principles around using scanners
    that also apply to your pentest tooling in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'These principles include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Be prepared to avoid using a tool by having an alternate workflow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use filters (regex or otherwise), whitelists, and other techniques to tightly
    control where automation is applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always verify the results of automatic processes manually before submitting
    them in a report.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep verbose logs with timestamps, context info, and so on. They'll make formatting
    your submission report easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate-limit scanners or automated tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While they just seem like general tips, many of these techniques both help you
    color within the lines of your program's RoE, and – by documenting all the details
    in the process – give you the material to write a comprehensive submission report
    at the end of your engagement. Keeping good documentation, limiting the unbounded
    potential of recursive processes, and overseeing your automated processes are
    all good habits.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter discussed the criteria you can use to evaluate bug bounty marketplaces,
    programs, and individual pentesting targets. It covered different types of programs,
    their distinguishing features, and some of the basics of the bug bounties offered
    by Amazon, Facebook, Google, GitHub, and Microsoft, along with the learning resources
    and the general value of third-party bug bounty marketplaces such as Bugcrowd,
    HackerOne , Vulnerability Lab, BountyFactory, and Synack. It also went over the
    appeal of swag reward programs, the unique role of the Internet bug bounty Program,
    the nature of Coordinated Vulnerability Disclosure and the risks in using third-party
    brokers, along with how the Rules of Engagement/code of conduct for different
    bug bounty programs can differ. Finally, it covered setting up systems and processes
    within your own pentesting engagements to abide by those rules and protect yourself
    as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are some differences between third-party marketplaces such as Bugcrowd
    and bug bounty programs offered by individual companies?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it worth it to participate in programs that reward vulnerabilities with swag?
    Why or why not?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's a private bug bounty program?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some resources you can use to find programs not covered in this chapter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What makes a site more or less attractive as a hunting ground for reward-eligible
    bugs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is coordinated vulnerability disclosure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What steps can you take to minimize your legal liability during a pentesting
    session?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Alerts**: [https://www.google.co.in/alerts](https://www.google.co.in/alerts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BountyFactory**: [https://bountyfactory.io/en/index.html](https://bountyfactory.io/en/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Bughunter University**: [https://sites.google.com/site/bughunteruniversity/](https://sites.google.com/site/bughunteruniversity/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Firebounty**: [https://firebounty.com](https://firebounty.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The internet bug bounty program**: [https://internetbugbounty.org/](https://internetbugbounty.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
