["```\njenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home\njenv global 1.8\n```", "```\njava version \"1.8.0_172\"\nJava(TM) SE Runtime Environment (build 1.8.0_172-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.172-b11, mixed mode)\n```", "```\njava -jar -Xmx4G \"/Applications/Burp Suite Community Edition.app/Contents/java/app/burp/burpsuite_community_1.7.33-9.jar\"\n```", "```\n#!/bin/sh\n\njava -jar -Xmx3G \"/Applications/Burp Suite Community Edition.app/Contents/java/app/burp/burpsuite_community_1.7.33-9.jar\" $@\n```", "```\nchmod u+x bootstrap_burp.sh\nsudo ln -s /Full/path/to/bootstrap_burp.sh /usr/local/bin/bootstrap_burp\n```", "```\nwfuzz -w ~/Code/SecLists/Discovery/Web-Content/SVNDigger/all.txt --hc 404 http://webscantest.com/FUZZ\n```", "```\nretire --path ~/Code/Essences/demo\n```", "```\n#!/bin/sh\n\nretire --path $1 --outputformat json --outputpath $2; python -m json.tool $2\n```", "```\n#!/usr/bin/env python2.7\n\nimport sys, json\n\ndata = json.load(sys.stdin)\n```", "```\nrows = []\n\nfor item in data:\n for vulnerability in item['results'][0]['vulnerabilities']:\n vulnerability['file'] = item.get('file', 'N/A')\n row = format_bug(vulnerability)\n rows.append(row)\n```", "```\ndef format_bug(vulnerability):\n row = [\n vulnerability['severity'],\n vulnerability.get('identifiers').get('summary', 'N/A') if vulnerability.get('identifiers', False) else 'N/A',\n vulnerability['file'] + \"\\n\" + vulnerability.get('info', ['N/A'])[0]\n ]\n return row\n```", "```\nprint(\n\"\"\"\n ,--. ,---.   ,-----. \n |  |'   .-'  |  |) /_ ,--.,--. ,---.  ,---. \n,--. |  |`.  `-.  |  .-.  \\|  ||  || .-. |(  .-' \n|  '-'  /.-'    | |  '--' /'  ''  '' '-' '.-'  `)\n `-----' `-----'  `------'  `----' .`-  / `----' \n `---' \n\"\"\")\nprint tabulate(rows, headers=['Severity', 'Summary', 'Info & File'])\n```", "```\n#!/usr/bin/env python2.7\n\nimport sys, json\nfrom tabulate import tabulate\n\ndata = json.load(sys.stdin)\n\nrows = []\n\ndef format_bug(vulnerability):\n row = [\n vulnerability['severity'],\n vulnerability.get('identifiers').get('summary', 'N/A') if vulnerability.get('identifiers', False) else 'N/A',\n vulnerability['file'] + \"\\n\" + vulnerability.get('info', ['N/A'])[0]\n ]\n return row\n\nfor item in data:\n for vulnerability in item['results'][0]['vulnerabilities']:\n vulnerability['file'] = item.get('file', 'N/A')\n row = format_bug(vulnerability)\n rows.append(row)\n\nrows = sorted(rows, key=lambda x: x[0])\n\nprint(\n\"\"\"\n ,--. ,---.   ,-----. \n |  |'   .-'  |  |) /_ ,--.,--. ,---.  ,---. \n,--. |  |`.  `-.  |  .-.  \\|  ||  || .-. |(  .-' \n|  '-'  /.-'    | |  '--' /'  ''  '' '-' '.-'  `)\n `-----' `-----'  `------'  `----' .`-  / `----' \n `---' \n\"\"\")\nprint tabulate(rows, headers=['Severity', 'Summary', 'Info & File'])\n```", "```\n./scanjs.sh ~/Code/Essences/demo test.json | python formatjs.py\n```", "```\n#!/usr/bin/env python2.7\n\nimport os, sys\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = sys.argv[1]\ndirectory = sys.argv[2]\n\nr = requests.get(url)\nsoup = BeautifulSoup(r.text, 'html.parser')\n```", "```\nfor script in soup.find_all('script'):\n if script.get('src'): download_script(script.get('src'))\n```", "```\ndef download_script(uri):\n address = url + uri if uri[0] == '/' else uri\n filename = address[address.rfind(\"/\")+1:address.rfind(\"js\")+2] \n req = requests.get(url)\n with open(directory + '/' + filename, 'wb') as file:\n file.write(req.content)\n```", "```\ngrabjs https://www.target.site sourcejs; scanjs sourcejs output.json | formatjs\n```", "```\ngrabjs https://jquery.com sourcejs; scanjs sourcejs output.json | formatjs\n```", "```\ncat output.json | formatjs\n```", "```\ngrabjs https://www.target.site sourcejs; scanjs sourcejs output.json | formatjs | mail -s \"JS Known Component Vulnerabilities\" email@site.com\n```", "```\ngrabjs https://www.target.site sourcejs; scanjs sourcejs output.json | formatjs | ag critical | mail -s \"Critical JS Known Component Vulnerabilities\" email@site.com\n```"]