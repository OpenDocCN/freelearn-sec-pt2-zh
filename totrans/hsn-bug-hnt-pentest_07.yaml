- en: Detecting XML External Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XXE** is an abbreviation of **XML External Entity**. As an attack, it takes
    advantage of a flaw in an application''s XML parser configuration to perform a
    number of malicious actions, including exposing the contents of protected files,
    or causing the exponential use of memory, resulting in a DoS attack.'
  prefs: []
  type: TYPE_NORMAL
- en: XML, like JSON, comprises a big part of the data transfer that powers the modern
    internet. As a system for encoding documents in both human and machine-readable
    ways, XML is common in tech stacks of a certain age, and persists in older API
    architectures such as **Simple Object Access Protocol** (**SOAP**), even though
    web applications rely more and more on JSON as a common standard. In 2017, OWASP
    named XXE as number four on their list of the top ten web vulnerabilities—it wasn't
    included in the list in the previous survey in 2014.
  prefs: []
  type: TYPE_NORMAL
- en: The nature of the attack stems from XML's conceptions of entities, a primitive
    data type that combines a string with a unique alias or reserved word. When the
    XML parser expands the entity, the parser looks for and stores the contents of
    the URI in the final XML document. If the entity is pointing to a sensitive file
    on the web server, then that information is compromised. There are different vectors
    for inputting that XML, including application form inputs. Because the vulnerability
    includes XML code being mistakenly parsed (and executed) after it is submitted
    through a form input, XXE can be classified as a form of code injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of risk factors for XXE, which are allowed in by weakly
    or misconfigured XML parsers: if a parser accepts tainted data within the **Document
    Type Declaration** (**DTD**), and it processes that DTD and resolves external
    entities, the site is at risk. As an example, if you''re using PHP, the language''s
    documentation specifically states that you need to set the `libxml_disable_entity_loader`
    variable to `true` in order to disable the ability to load external entities ([https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php](https://secure.php.net/manual/en/function.libxml-disable-entity-loader.php)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Details of how an XML processor can become compromised
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to craft XXE snippets and where to find community-sourced lists of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools to use in detecting XXE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to take a XXE vulnerability from discovery, to validation, to inclusion
    in a bug report submission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we'll be using our standard version of Chrome (`66.0.3359.139`),
    along with a new developer environment deployment system, Vagrant, which—coupled
    with VirtualBox—will allow us to bootstrap our deliberately vulnerable XXE app
    (which we're using thanks to [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab)).
    VirtualBox is a **Virtual Machine** (**VM**) client, and Vagrant adds a layer
    of dependency and environment management on top of that.
  prefs: []
  type: TYPE_NORMAL
- en: To install Vagrant and VirtualBox, pick the appropriate client for your system
    from their respective Downloads pages ([https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
    and [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)).
  prefs: []
  type: TYPE_NORMAL
- en: A simple XXE example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few different types of XXE attack which can attempt **Remote Code
    Execution** (**RCE**) or – as we covered in the introduction – disclose information
    from targeted files. Here''s an example of the second variety, from OWASP''s entry
    for XXE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see the external entity and its attempt—through the location string's
    `file` prefix and the following system path—to access a sensitive file on the
    vulnerable server.
  prefs: []
  type: TYPE_NORMAL
- en: XXE can also be used to conduct DoS attacks through an XML variant of a popular
    logic bomb tactic called a **Billion Laughs**. A DoS attack that occurs via a
    logic bomb—a piece of code that when executed causes the host to max out its resource
    consumption—is a bit different from a DoS attack caused by one or more outside
    agents (if there is more than one outside agent, then it would be a DDoS attack).
    A DoS attack is usually considered easier to mitigate because there's only one
    source for the attack—network administrators don't have to play whack-a-mole with
    multiple sources of malicious traffic. But a DoS attack coming from a single source
    also means that an attacker only needs access to that vulnerable input, as opposed
    to a swarm of machines generating traffic as part of a botnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of the a billion laughs XML snippet from Wikipedia''s page
    on the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see that there's only one root element, `<lolz>&lol9;</lolz>`. When
    the text of that element, `&lol9;`, is expanded (since it's a defined entity),
    the parser looks and sees the entity `&lol8;` and tries to expand it too, which
    leads it to `&lol7;`, then `&lol6;`, and on and on through the entity list – it's
    turtles and memory usage all the way down.
  prefs: []
  type: TYPE_NORMAL
- en: The result is that after all the entity expansions have been processed, this
    small, less-than-1 KB snippet, will create 10 to the 9th power `lols`, totaling
    over 3 GB of memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: Billion Laughs attacks are not unique to XML (you can do a similar attack in
    YAML or any other file format that supports references), but they do clearly illustrate
    the means through which an unguarded XXE vulnerability can wreak havoc.
  prefs: []
  type: TYPE_NORMAL
- en: XML injection vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML injection and XML parsing-related vulnerabilities aren't always observable
    from the client-side code – the XML part of the processing chain could be occurring
    within the server formatting your client-side input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following an OWASP XML injection example, the client-side form (assuming, for
    argument''s sake, that it''s making a `GET` request) will create an HTTP request
    that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, before inserting itself into an XML-document-like-database, the application
    will build an individual XML node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can exploit this behavior to do different kinds of injection, including
    tag-based injection. That''s when you would add a valid XML tag within your input,
    spoofing a valuable property (this assumes that a `<userid>` of 0 represents an
    admin user) by making an HTTP request along these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That HTTP request, when assembled into the XML-like datastore, results in one
    of the redundant `<userid>` tags being filtered out, resulting in a perfectly
    valid record that also escalates James's privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: XML injection and XXE – stronger together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We previously covered the anatomy of an XXE bug and how nested entity expansion
    can lead to exponential resource use. We've also covered how valid XML structures
    can be injected through RESTful APIs so that malicious tags are recreated in the
    XML formatting (we used a fictional case of an XML-like DB, but the analysis holds
    for any server-side XML processing layer).
  prefs: []
  type: TYPE_NORMAL
- en: You can see how these two dynamics complement one another—if you have discovered
    a valid XML injection vector, that gives you the delivery mechanism with which
    to define and execute your XXE validation.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for XXE – where to find it, and how to verify it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed previously, none of the inputs available to you need to state
    that the application accepts XML for a service to be vulnerable to XXE: the XML
    parsing layer of the application could be opaque to you, stitching together data
    that you sent as a `GET` or `POST` request into an XML document.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides services that use XML as their primary document formatting system under-the-hood,
    there are also many API services that support different data formats by default.
    Even if you''re making a GET request and receiving JSON in return, you can test
    whether or not that API endpoint can format your request as XML by trying the
    XML content header, that is, `Content-Type: application/xml`. Because services
    often have this capacity to switch between different content types that are built-in,
    the owner of the service might not know that it has the ability to format requests
    as XML.'
  prefs: []
  type: TYPE_NORMAL
- en: XXE – an end-to-end example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up our XXE lab so that we can see the vulnerability in action. After
    downloading Vagrant, VirtualBox, and cloning the git repository from [https://github.com/jbarone/xxelab](https://github.com/jbarone/xxelab),
    we can start the application by navigating into the `xxelab` directory and running
    `vagrant up`. After downloading the Ubuntu images and other dependencies, your
    app should be up and running on `http://192.168.33.10/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/05c7cdca-0c14-48cd-9382-1e9c3cb5c7f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s enter some test values into our submission form, making sure that our
    Burp Suite proxy has its Intercept feature turned on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9f4086d6-24e8-496c-b4f0-e24f21d1d4ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After trying to submit our form, we can head over to Burp to see what our intercepted
    raw HTTP request looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cab50b14-5df3-4461-a19b-580ef04b6040.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Seeing that our submission is being formatted in XML, we can try a basic entity
    expansion test, substituting our `email` form value with a test message by using
    the `&example;` entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what it looks like when entered into our intercept proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c13069b1-9efa-4295-8d02-9b3bdcdc108b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that this app is designed to mimic the experience of trying to exfiltrate
    data through error messages, so it will always return an error message stating
    that the email in question (with the full email printed) is not available. This
    means that if the XML parser is susceptible to entity expansion, we''ll see success
    printed in the error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e4ae1dc5-6f39-49cc-8da8-0ee6f9ca2df9.png)'
  prefs: []
  type: TYPE_IMG
- en: Indeed, success has been registered.
  prefs: []
  type: TYPE_NORMAL
- en: For validating an XML bug, this is enough to open a report and begin the submission
    process. Using the entity expansion to replace values is a harmless PoC that,
    nevertheless, points to the possible damage other XXE attacks could accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, since we''re working locally, let''s do some of that damage. Leveraging
    our knowledge of the vulnerability, we can replace our intercepted values with
    an XXE snippet pulled from OWASP''s Testing for XML Injection ([https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)](https://www.owasp.org/index.php/Testing_for_XML_Injection_(OTG-INPVAL-008)))
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the server attempts to expand the entity and access the contents of `/dev/random`,
    it can cause the server to crash. That''s because `/dev/random` is a special,
    pseudorandom number generator, that will block the thread if there''s insufficient
    entropy for the random number generation. Here, we''ve entered the snippet into
    another intercepted attempt to create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57ad7365-959d-4e75-80a9-b695e4c43b4f.png)'
  prefs: []
  type: TYPE_IMG
- en: After forwarding the request, we see the server hang—and hang. Upon opening
    a new tab, we can no longer get the IP address to resolve. We've successfully
    crashed it!
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/28e4b721-53f0-4f2d-be2a-48de5cd32b93.png)'
  prefs: []
  type: TYPE_IMG
- en: Gathering report information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's walk through the information we need to write our report.
  prefs: []
  type: TYPE_NORMAL
- en: Category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is an XXE attack.
  prefs: []
  type: TYPE_NORMAL
- en: Timestamps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our timestamp, we can use an approximate time for when we submitted our
    XXE entity replacement request.
  prefs: []
  type: TYPE_NORMAL
- en: URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The location of the vulnerability is the application index, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Payload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we can enter the XML snippet we used as our PoC for validating the capacity
    for entity expansion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prove that the service in question is susceptible to an XXE attack, we used
    Burp Suite to intercept and modify an HTTP `POST` request, replacing the XML document
    generated by our form submission with our payload.
  prefs: []
  type: TYPE_NORMAL
- en: Instructions to reproduce
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our instructions to reproduce are to navigate to the form and use a proxy tool
    (in our case, Burp Proxy) to replace the form data with our payload.
  prefs: []
  type: TYPE_NORMAL
- en: Attack scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already seen how an entity expansion pointing to `/dev/random` can cause
    a server to crash. Using an XXE attack, we can also disclose the contents of sensitive
    server files like `/etc/password` and, in some cases, perform RCE.
  prefs: []
  type: TYPE_NORMAL
- en: Final report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use this information to format our submission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered XXE and touched on the nature of XML parsing attacks,
    discussed XXE within the historical context of the Billion Laughs vulnerability,
    reviewed a specific weakness that makes many XML parsers vulnerable to XXE, and
    end-gamed some of the possible attack scenarios associated with an XXE bug, in
    addition to taking an XXE vulnerability all the way from discovery to report submission.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss access control and security through obscurity.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What makes an XML parser susceptible to XXE? What is an example misconfiguration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you use Burp to test for XXE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some impacts of an XXE vulnerability? What are some common attack scenarios
    involving the bug?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is `/dev/random`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's a non-impactful way you can test for the presence of an XXE vulnerability?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the Billion Laughs attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can some services (especially API endpoints) be vulnerable to XXE when they
    use JSON for data exchanges?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Billion Laughs Attack**: [https://en.wikipedia.org/wiki/Billion_laughs_attack](https://en.wikipedia.org/wiki/Billion_laughs_attack)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hunting XXE For Fun and Profit**: [https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/](https://www.bugcrowd.com/advice-from-a-bug-hunter-xxe/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
