- en: Other Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've touched on tooling and workflows that have been
    chosen based on a combination of efficiency, cost, professional opinion, and personal
    preference. But there are a profusion of security tools that you can leverage
    beyond the short list we've covered in our walkthrough.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover both how to evaluate adopting new tools, as well as
    providing a simple overview of other useful Curate software, sites, communities,
    and educational resources. We'll cover everything from programs, such as scanners
    and Burp extensions, to crowd-sourced databases of attack snippets, such as SecLists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating new tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paid versus free editions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick overview of Nikto, Kali, Burp extensions, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has a grab-bag of technical dependencies depending on what tools
    you actually want to incorporate into your workflow. Most of our CLI programs
    can be easily installed with the `homebrew` package manager; Burp Suite still
    requires its Java 8 installation; and, of course, the Kali Linux distribution
    operates at a different level of the stack, since an OS requires a hard drive
    partition to install to. As ever, we'll be using Chrome (`66.0.3359.139`).
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating New Tools – What to Look For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s critical when you''re looking at a new piece of pentesting software to
    analyze the value it brings to your workflow. It''s also critical to ask many
    of the same questions you''d be asking of an open source, SaaS, or paid app in
    any other space. Questions should include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What capabilities does this add to my workflow that I don't already possess?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How important are these new features? What do I predict their impact being?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does this lock me into plans or services or a particular design?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it have a mature CLI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does it perform against known positive cases (in the case of scanners and
    other detection software)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's open source, how old is the project? When was the last commit and what's
    the general frequency of commits? Are there a lot of outstanding issues? Are issues
    addressed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of a free tool, is enough functionality exposed to the free/community
    user? Or is the bulk of what you need locked behind a paid license or subscription?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of a paid tool, does it integrate with an outside workflow (incoming
    and outgoing webhooks, either client libraries in several languages or a RESTful
    interface)? Or does it lock you into its system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of these questions don't have clear answers, but thinking through them
    will help you understand the value proposition of any software you're considering
    adopting.
  prefs: []
  type: TYPE_NORMAL
- en: Paid Versus Free Editions – What Makes a Tool Worth It?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Evaluating whether to start paying for a security tool is just an extension
    of the process of deciding whether to adopt it in the first place, except with
    more emphasis on relative impact.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite Pro is undeniably a useful extension of the community version. You
    get the scanner, which integrates tightly with Burp's scoping and attack surface
    mapping features, and advanced manual tools, such as the ability to generate a
    CSRF from an intercepted HTTP request (which we'll cover later in this chapter),
    along with other goodies.
  prefs: []
  type: TYPE_NORMAL
- en: But as we showed in our chapter on CSRF, generating a CSRF PoC is pretty easy
    to automate yourself, in a way that better integrates with tools outside of Burp.
    If you don't find yourself needing the other advanced manual tools, then it basically
    comes down to the scanner. Even if you already have a scanner as part of your
    workflow though, quite often different scanners are better at scanning different
    vulnerabilities—you'll get the best picture of a site if you apply multiple scanners
    to it (which, considering the cost of scanners, is easier said then done).
  prefs: []
  type: TYPE_NORMAL
- en: There's also an extra layer to the value component of Burp. Although you shouldn't
    purchase a tool with marginal utility just because it's good value, it is an important
    consideration.
  prefs: []
  type: TYPE_NORMAL
- en: Scanners are expensive. It's not uncommon for the cheapest licenses for top-quality
    application scanning products to reach into the thousands for a small team (the
    cheapest offering from Netsparker, a security company, is just under $5,000/year
    for a desktop app that allows you to scan five websites).
  prefs: []
  type: TYPE_NORMAL
- en: This is clearly an attempt on their part to capture an enterprise security team
    that wants a reproducible, automated vulnerability detection scheme as part of
    their general application pipeline/stack. But that phenomenon is common to a lot
    of the pentesting tool chain, as companies with know-how want to target B2B enterprise
    opportunities, because that's where the money is. Hackers don't have departmental
    budgets to throw around.
  prefs: []
  type: TYPE_NORMAL
- en: In that context, the Burp Pro license is a great deal, unlocking more than just
    scanning functionality for a price that's less than a month of the license subscription
    of other, popular products. If you've followed along with this walkthrough, or
    generally use Burp as the lynchpin of your security workflow, you should strongly
    consider purchasing. If you're spending time inside Burp, it's worth it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider another tool, SecApps. SecApps is a browser-based pentesting
    client created by Websecurify that allows for a completely cloud-based workflow,
    with no desktop apps, local files, or dependencies beyond the browser required.
    This is a solution that would fit comfortably into a Chromebook-type setup, where
    the hardware needs are minimal. There''s a lot to recommend SecApps: though they
    provide some basic free services (such as their HTTP proxy), most of their functionality
    is on their paid tier (it should be noted that beyond their browser client, they
    also offer solutions for CI/CD testing), which is still comparatively affordable
    at $29/month. But even with that low adoption cost, we should still address the
    same questions we do when considering any new workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Does this lock me into plans or services or a particular design?
  prefs: []
  type: TYPE_NORMAL
- en: Yes. Moving to an all-cloud workflow takes away a lot of the say you have over
    your environment. Because your data is all in cloud storage (from a technical
    perspective), you have no control over it. In addition, none of your workflows
    can be ported over to another system, considering all your integrations, the interaction
    of all your tools, and so on, occurs on opaque layers of the stack you can't rely
    on accessing.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a paid tool, does it integrate with an outside workflow (incoming
    and outgoing webhooks, either client libraries in several languages or a RESTful
    interface)? Or does it lock you into its system?
  prefs: []
  type: TYPE_NORMAL
- en: This is a similar, related question to the general one about vendor lock. The
    previous question is more about the compatibility of your overall design, and
    whether that general workflow (and architecture) is portable. This question is
    more about integrating around the edges. Can parts of your existing workflow be
    incorporated? If the new tools works great for everything but *X*, could you still
    incorporate that in some way? Through a common data format (JSON, YAML, or XML)
    or a programmatic API interface, could you extend the service's functionality?
  prefs: []
  type: TYPE_NORMAL
- en: The answer for SecApps seems to be sort of. There are some basic CLI options
    for the more CI/CD solutions, such as their Cohesion app, which is essentially
    a source code analysis tool DevOps engineers can drop into their build chain.
    But there's no documentation about using an API to interact with the same backend
    services the browser-based tooling connects to.
  prefs: []
  type: TYPE_NORMAL
- en: There is a native application wrapper called pown apps, created by Pown.js,
    but the documentation is pretty spartan and CLI options are limited (see Does
    it have a mature CLI?), and when we navigate to the Pown.js repository, we don't
    see much to inspire confidence. Many repositories are new, none have a large contribution
    graph, and issue/community support seems haphazard (see also If it's open source,
    how old is the project? When was the last commit and what's the general frequency
    of commits? Are there a lot of outstanding issues? Are issues addressed?).
  prefs: []
  type: TYPE_NORMAL
- en: That doesn't work for us. As great as the promise of the service is, it's too
    opinionated about what our pentesting regimen should look like. Contrary to the
    Unix philosophy of small, single-serving components with specialized concerns
    and the shared Lingua Franca of plain unicode, SecApps makes us install and use
    large, complex apps (either through the web or natively via the pown apps bridge)
    that we don't have visibility into and can't control.
  prefs: []
  type: TYPE_NORMAL
- en: Other users with different processes around pentesting engagements will naturally
    have their own opinions about these and other tools, but hopefully us analyzing
    these tools within the context of this book's workflow will illustrate the key
    decision points and general process.
  prefs: []
  type: TYPE_NORMAL
- en: A Quick Overview of Other Options – Nikto, Kali, Burp Extensions, and More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's such a profusion of tools in security that it can be difficult to know
    what's worth testing for your own workflow. This section includes short descriptions
    of different types of tools, categorized by the function they serve the pentester.
  prefs: []
  type: TYPE_NORMAL
- en: Scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many options for scanners that specialize in gathering or testing
    a wide range of vulnerability-related information. The few we've used in this
    work represent just a small portion of the overall market. Here are a few options;
    some are command line-only while others have both a CLI and a GUI, though all
    offer at least some degree of CLI control, and all are free.
  prefs: []
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto is an established scanner known for its server fingerprinting capabilities.
    Beyond that though, it's a good choice in general for scanning for OWASP Top 10
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Zed Attack Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Zed Attack Proxy** (**ZAP)** proxy and scanner is a tool created by OWASP,
    the non-profit organization dedicated to web application vulnerability research.
    ZAP is often held up as the free analog to the scanner included in Burp Suite
    Pro versions.
  prefs: []
  type: TYPE_NORMAL
- en: w3af
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`w3af` is an open source, Python-powered scanner that features both an interactive
    CLI shell and a GUI dashboard. `w3af` started out as the brainchild of Andres
    Riancho in 2006 and in subsequent years has grown to include thousands of public
    contributors from across the world.'
  prefs: []
  type: TYPE_NORMAL
- en: nmap and python-nmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of this book has revolved around testing web applications within the context
    of their browser-based attack surface—form fields, unsecured endpoints, and things
    you can generally view within a browser or browser extension.
  prefs: []
  type: TYPE_NORMAL
- en: But if you're looking to do more network analysis—checking for open ports, probing
    firewalls, and looking for connections beyond the standard HTTP/ TCP—`nmap` is
    a popular weapon of choice and an industry standard.
  prefs: []
  type: TYPE_NORMAL
- en: '`python-nmap` is exactly what it sounds—a Python-based port of the software.
    This can be extremely useful if you''d like to hack on `nmap`. Whether you''re
    adding checks to the existing port discovery of `nmap` or grafting on layers of
    custom alert logic, the `python-nmap` package is a great starting point that frees
    you from re-implementing the bread-and-butter features of the standard `nmap`
    functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Aircrack-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aircrack-ng is another network scanning tool that's become almost a standard
    for Wi-Fi cracking and packet capture. As before, though we didn't cover general
    network analysis that much in this book, there's a great suite of tools for anyone
    looking to get started.
  prefs: []
  type: TYPE_NORMAL
- en: And critically, unlike something such as social engineering, which is an element
    of pentesting we specifically did not cover since it's so often out-of-bounds
    for most programs, companies will reward researchers for pointing out holes in
    their network.
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuing with network scanners, Wireshark is another battle-tested network
    analysis program, with deep packet inspection and other low-level data capture
    functionality that can be crucial for understanding an app's cryptographic security
    posture. If you develop a greater emphasis on network-level security issues, Wireshark
    should be on your radar, if not a part of your toolset.
  prefs: []
  type: TYPE_NORMAL
- en: SpiderFoot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SpiderFoot ([http://www.spiderfoot.net/](http://www.spiderfoot.net/)) is a scanner
    that specializes in **Open Source Intelligence** (**OSINT**), combing through
    social media networks, DNS records, and other publicly available information to
    assemble a picture of the target application's attack surface and possible vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Although undeniably useful, in this book, I've chosen to focus more on scanners
    that interact directly with the application property at hand. SpiderFoot is wonderful
    for the kind of in-depth research that goes into preparing social engineering
    attacks, such as getting emails and position titles, and understanding the relationships
    between key corporate players. It's also great for finding related, dependent
    systems that could be compromised as a way of ultimately infiltrating an organization.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately (or unfortunately) for us, those types of attacks are out of scope
    for most pentesting engagements. Social engineering attacks and attacking vendors/third
    parties are almost always called out in a testing guideline's rules of engagement
    as forbidden behavior. It's a cool scanner and useful tool, just not for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are general sources of educational content; aggregated tutorials, snippets,
    and walkthroughs that are rich with insight.
  prefs: []
  type: TYPE_NORMAL
- en: FuzzDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FuzzDB ([https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb))
    is a dictionary of attack patterns contributed by the open source security community.
    Along with curated collections, such as SecLists, it's a great source for things
    such as XSS inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting Cheatsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JDow.io ([https://jdow.io](https://jdow.io)) provides a handy resource called
    the Web Application Penetration Testing cheatsheet that walks through many of
    the steps in a pentesting engagement, complete with code snippets and descriptions
    of how to accomplish each step.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit DB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploit DB ([https://www.exploit-db.com/](https://www.exploit-db.com/)) bills
    itself as the ultimate archive of exploits, shellcode, and security papers (their
    emphasis). It is run by Offensive Security, an organization also responsible for
    one of the more prestigious security certifications, the **Offensive Security
    Certified Professional** (**OSCP** ) cert. Exploit DB also contains a handy database
    of Google Dorks, which we will dive into further in our chapter on SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome Web Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `awesomelists.top` brand publishes curated content for a variety of tech
    niches (they have their own awesome AWS series, naturally). Their security list,
    awesome web security ([https://github.com/qazbnm456/awesome-web-security](https://github.com/qazbnm456/awesome-web-security)),
    is a great resource, and even links to other related curated repos, such as the
    organization's own `awesome-bug-bounty` collection of bug bounty resources. It
    also contains a number of links to great write-ups and walkthroughs on topics
    such as browser extension data leaks, IoT vulnerability scanning, and how data
    science and machine learning intersect with security.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali (formerly BackTrack) is a security-focused Linux distribution that comes
    pre-packaged with a lot of the tools we've been using throughout the book, such
    as Burp Suite, as well as others, such as Maltego, Metasploit, and Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: And because you can boot and run Kali from a live CD, it's potentially very
    lightweight. There's no need to do a persistent install on hardware and no need
    to write any data to disk. These two features of Kali (it's portability and preloaded
    assets), make it a great choice for pentesters who might not have regular access
    to their own machine.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code Analysis (White Box) Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Source code analysis is typically outside the scope of a public bug bounty program
    (which is why is doesn't get more coverage in this book). Companies are naturally
    hesitant to open source their code to a body of security researchers if open source
    isn't a part of their business model.
  prefs: []
  type: TYPE_NORMAL
- en: But if you find yourself in a private contract where you engage in white box
    testing with access to source code, or you have access to the code through GitHub
    or Bitbucket, there are several tools you can use to help identify problem areas.
  prefs: []
  type: TYPE_NORMAL
- en: Pytaint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pytaint is a tool that allows you to do taint analysis on Python code. That
    means tracing the flow of data through the application, from entry points in input
    fields, API endpoints and other ingress pipelines, looking for areas where the
    data is mishandled or improperly sanitized.
  prefs: []
  type: TYPE_NORMAL
- en: Bandit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bandit is another great source code analysis tool that analyzes Python using
    a series of customizable plugins that can be used to focus the tool on a specific
    set of vulnerabilities. Unlike `pytaint`, Bandit doesn't follow a particular methodology
    like taint analysis; rather, the logic applied depends on your plugin integrations.
  prefs: []
  type: TYPE_NORMAL
- en: Brakeman
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Brakeman ([https://brakemanscanner.org/](https://brakemanscanner.org/)) is considered
    one of the top security static analysis tools for Rails apps, and is used by industry
    leaders such as GitHub to secure their internal RoR stack. If you have access
    to the source code, Brakeman is an excellent tool for discovering Rails-based
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Burp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to expand on the Burp Suite workflows we've covered in this
    book. Some of the extra solutions will be paid features, to show the appeal of
    considering a subscription, and others will simply be other extensions or features
    we didn't have time to take advantage of in the course of our engagements.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of great Burp extensions you can use to build on your Burp-based
    workflows and better leverage Burp's native capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: JSON Beautifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An easy add, the JSON beautifier pretty-prints any JSON you interact with within
    Burp Suite. It's simple, but formatting can be a big productivity boost if there
    are portions of your process that have a lot of manual interaction. There's also
    a similar set of beautifiers/pretty-printers for other languages, including YML,
    JS, SAML, and more other common data types.
  prefs: []
  type: TYPE_NORMAL
- en: Retire.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember when we built a small set of scripts around Retire.js to check client-side
    JavaScript for vulnerabilities in [Chapter 3](23759e04-8982-41fd-b936-580865a51439.xhtml),
    *Preparing for an Engagement*, There's also a Burp extension that allows you to
    do just that within a Burp testing session. If Burp is a large part of your workflow,
    it might be worth considering.
  prefs: []
  type: TYPE_NORMAL
- en: Python Scripter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python scripter extensions execute Python code on every Burp HTTP request.
    This can make it much easier to graft on extra functionality than if you are trying
    to add Java code or your own extension directly.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Considering documentation's importance in writing great submission reports,
    tools such as Burp Notes, which can be configured to save HTTP requests and other
    data from different Burp tools, can tighten your workflow, eliminating manual
    copy and pasting.
  prefs: []
  type: TYPE_NORMAL
- en: Burp REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Burp REST API plugin ([https://github.com/vmware/burp-rest-api](https://github.com/vmware/burp-rest-api))
    allows you to run your Burp instance within a wrapper that makes its chief functionality
    available through a RESTful API. This is obviously a great addition if you're
    looking to integrate Burp with your existing automation.
  prefs: []
  type: TYPE_NORMAL
- en: SaaS-Specific Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The aforementioned extensions are mostly just standalone additions to the existing
    Burp workflow. But Burp also supports extensions that act as bridges to other
    security toolsets. Faraday ([https://www.faradaysec.com/](https://www.faradaysec.com/))
    describes itself as a multi-user, collaborative pentesting environment that a
    security team can use to share scope, target data, discoveries, and other engagement
    information. There's also tool-specific bridges, such as SQLiPy, which is an extension
    for kicking off `sqlmap` scans from within Burp.
  prefs: []
  type: TYPE_NORMAL
- en: Using Burp Pro to Generate a CSRF PoC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A great method for testing for CSRF and generating a code PoC for a CSRF vulnerability
    is using some of the built-in tooling available. Unfortunately, the ability to
    generate a CSRF PoC is only available for Burp Suite Pro users.
  prefs: []
  type: TYPE_NORMAL
- en: For our test, we're going to revisit a page on `webscantest.com` that we examined
    in [Chapter 4](ddd8275b-fae6-423c-b7a0-e8284a77a648.xhtml), *Unsanitized Data
    – An XSS Case Study*, for XSS vulnerabilities that's also vulnerable to CSRF attacks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02975992-f5d6-4360-bbee-263dd91c8d01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After navigating to the form, let''s fill out the different field values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a8bd4468-3137-46e0-8ce7-89716290bce4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before submitting the form, we''ll turn Burp proxy''s Intercept feature on
    so we can capture our request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4d48740-dd66-45ad-a06f-56de8859b315.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After submitting our form, we can see the request has been successfully intercepted
    by Burp Proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/74e63a06-9e59-4d04-a465-360e3e3dc1ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Now if you right-click on the intercepted request in Burp Proxy, you can see
    in the dropdown the engagement tools submenu. If you're a free/community user,
    these options will be disabled, but if you're a paid/Pro user, you can select
    Generate CSRF PoC.
  prefs: []
  type: TYPE_NORMAL
- en: You can use this CSRF PoC, which is really just a short HTML snippet that reflects
    the form and submission structure of whatever you're testing, to trigger the application
    state changes that will prove the presence of a CSRF vulnerability (so, a PoC).
    If you have access to this functionality, it can be a quick and easy method, but
    if you don't, it's also easy to replace (we generated a CSRF PoC programmatically
    in [Chapter 6](c685f58d-e796-4729-8766-9338c92682e2.xhtml), *CSRF and Insecure
    Session Authentication*).
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit and Exploitation Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metasploit is a popular exploitation framework provided by Rapid7 that, although
    it features a stable of common scanning and proxy features, really shines in the
    post-discovery, exploit-writing phase, when the bug has been found and you're
    trying to use it as the foothold for a larger attack.
  prefs: []
  type: TYPE_NORMAL
- en: That's the reason we haven't covered the tool much. Because Metasploit's real
    value is taking (for example) an SQLi vulnerability and turning it into an attack
    that exploits that bug to expose user data, change the attacker's privileges,
    or accomplish some other malicious end, it doesn't fall within our bounty-oriented
    workflow, which is more concerned with the bug itself. In fact, most bug bounty
    programs actively discourage taking that next step. It's essentially what separates
    a white hat researcher from a black hat hacker.
  prefs: []
  type: TYPE_NORMAL
- en: However, Metasploit *can* be a great tool for brainstorming realistic, stomach-churning
    attack scenarios that can convince a security team that the vulnerability you're
    submitting is a real threat. Clearly and convincingly articulating the impact
    of your findings is the most direct path to bigger payouts and higher submission
    success rates.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've covered tools and methodologies beyond those we used
    directly in our walkthroughs. We've also discussed a process for evaluating new
    tools, and an example applying that analysis to Burp Suite Pro and SecApps within
    the context of the pentesting engagements we've explored throughout the book.
    By now, you've seen an expanded overview of different types of scanners (application,
    network, and OSINT), community databases of attack patterns, source code analysis
    tools, new Burp extensions and workflows, the value of exploitation frameworks,
    and more. This should broaden your horizon of understanding beyond this book and
    provide the basis for your continued development as a security researcher.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you go about evaluating new tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some useful Burp extensions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are good options for port scanning?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are a few of the new capabilities you could expect from upgrading to Burp
    Pro?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits to using Kali Linux?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's OSINT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's Metasploit and what is it used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SecApps**: [https://secapps.com](https://secapps.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pown apps**: [https://blog.websecurify.com/2018/01/pown-apps.html](https://blog.websecurify.com/2018/01/pown-apps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
