- en: Going Further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, you've found the resources contained in this book useful. As you
    look to expand your interest in infosec, vulnerabilities, and public bug bounty
    programs in particular, there are plenty of great resources to help you on your
    way.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I've tried to collect a smattering of some of the best community
    sites, curated blogs, educational resources, bug report archives, and finally,
    a glossary of some of the more important (and opaque) security terms used by this
    and other books. This chapter should be a nice reference going forward, acting
    as your springboard as you dive deeper into the world of independent, freelance
    security research.
  prefs: []
  type: TYPE_NORMAL
- en: Blogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blogs, both company-authored and personal, are great ways to get keyed into
    new resources and methods from an informed source who you trust to curate the
    news you care about. The blogs we're including here focus more on pentesting and
    bug bounty participation than infosec or cybersecurity, generally. Though there
    are a lot of great blogs by industry experts —such as Bruce Schneier's *Schneier
    on Security* or Brian Krebs' *Krebs on Security* —that can be counted upon for
    rigorous, technically-informed articles on popular security topics, providing
    a thorough accounting of those sort of general infosec outlets is beyond our scope.
  prefs: []
  type: TYPE_NORMAL
- en: The SANS Institute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Providing training and education around cybersecurity since 1989, the **SANS**
    institute (which stands for **SysAdmin, Audit, Network, and Security**) runs a
    blog ([https://pen-testing.sans.org/blog/](https://pen-testing.sans.org/blog/))
    which can be a great resource for short instructional articles and simple references.
    Their series of cheat sheets containing short digests of basic commands for selected
    tools is a great first resource when you're exploring adopting something new.
  prefs: []
  type: TYPE_NORMAL
- en: Bugcrowd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already discussed Bugcrowd as a great community and platform for security
    researchers, but their blog is a part of that value as well. Beyond being a useful
    contact point for hearing about new bounty programs, policy changes, and product
    offerings regarding the Bugcrowd platform itself, the company also contributes
    research to the security community, organizing initiatives, such as the vulnerability
    rating taxonomy to better standardize severity classifications, and commissioning
    white papers, tutorials, and other digital resources.
  prefs: []
  type: TYPE_NORMAL
- en: Darknet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Darknet ([https://www.darknet.org.uk/](https://www.darknet.org.uk/)) has evolved
    from an IRC channel in 1999 to a successful pentesting blog today, with regular
    updates about new vulnerabilities, tactics, and software. Darknet is particularly
    useful because its articles often feature code snippets and scripts you can modify
    for your own purposes.
  prefs: []
  type: TYPE_NORMAL
- en: HighOn.Coffee
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HighOn.Coffee blog ([https://highon.coffee/](https://highon.coffee/)) is
    the personal project of the pentester `@Arr0way`. His cheat sheets are great references
    for some of the most common shell commands, scripts, and methods for a variety
    of pentesting and security-related topics. Like the Darknet blog, HighOn.Coffee's
    valuable propensity to include code you can port into your own pentesting engagement
    workflow makes it a worthwhile follow.
  prefs: []
  type: TYPE_NORMAL
- en: Zero Day Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Zero Day blog ([https://www.zdnet.com/blog/security/](https://www.zdnet.com/blog/security/))
    isn't as chock-full of walkthroughs and technical breakdowns as some of our other
    resources, but it is a good source for more topical security news
  prefs: []
  type: TYPE_NORMAL
- en: SANS AppSec Blog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another SANS property, the AppSec blog with Frank Kim ([https://software-security.sans.org/blog](https://software-security.sans.org/blog))
    is another wellspring of practical advice for the dedicated pentester. Kim does
    a great series of yearly surveys and other annual projects that make interesting
    comparison points for analyzing the evolution of prominent topics in security
    over the past several years.
  prefs: []
  type: TYPE_NORMAL
- en: Courses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several great courses associated both with common e-learning destinations,
    such as Udemy, and prestigious security certifications, such as offensive security's
    **Offensive Security Certified Professional** (**OSCP**). They vary along several
    lines, including the required background, length, scope, and price. Taken together,
    they represent a kaleidoscope of security training options and philosophies.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration Testing With Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OSCP's penetration testing with Kali Linux class ([https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/](https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/))
    is the required coursework for the OSCP certification, and comes with 30 days
    of access to the certification exam VPN. OSCP is respected because it enforces
    a practical lab where, instead of answering multiple choice questions, the test
    taker must log on to the OSCP network and discover several vulnerabilities within
    their allotted 24-hour testing period. Though you might want to work your way
    up to the OSCP exam (and it can be expensive), it's a great goal if you're interested
    in pursuing a career in security.
  prefs: []
  type: TYPE_NORMAL
- en: The Infosec Institute Coursework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Infosec Institute ([https://www.infosecinstitute.com/](https://www.infosecinstitute.com/))
    offers several online courses and bootcamps aimed at preparing students for certifications,
    such as **Certified Ethical Hacker** (**CEH**) and **Certified Penetration Tester**
    (**CPT**). Their 10-day bootcamp is intensive, but also a bit expensive.
  prefs: []
  type: TYPE_NORMAL
- en: Udemy Penetration Testing Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Udemy ([https://www.udemy.com/topic/penetration-testing/](https://www.udemy.com/topic/penetration-testing/))
    is by far the most affordable option we've covered for the individual, independent
    researcher. With specific courses flavored by the focus on your programming language
    *(Create Your Own Hacking Tools in Python*) or tool (*Learning Hacking Using Android
    From Scratch*), there are different options for whatever direction you're looking
    at to deepen your skills.
  prefs: []
  type: TYPE_NORMAL
- en: Terminology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's no shortage of jargon in security. Independent researchers, black hats,
    corporate red teams, and military agencies all have their own cultures, slang,
    and preferred technical nomenclature. We'll try and define as many essential terms
    as possible, so that this can be a clear reference whenever you come across a
    term or usage you don't recognize. Keep in mind that this dictionary is only for
    security-related terminology, and not general web or software development jargon,
    except where it has direct bearing on a security issue.
  prefs: []
  type: TYPE_NORMAL
- en: Attack Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An attack scenario is a detailed, technically-valid hypothetical scenario concerning
    the damage a vulnerability could do if left unpatched and exploited in the service
    of a malicious agent. Writing compelling attack scenarios is a critical part of
    ensuring you get rewarded for a vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Attack Surface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An application's attack surface is the sum of all of the points in which data
    is either inserted into or taken out of the application. Each part of the attack
    surface is an opportunity for a hacker to compromise a part of your application.
    The larger your app's attack surface, the more work you have to do to secure your
    app, and the more difficult it will be. Keeping your attack surface no larger
    than it absolutely needs to be is a great way to strengthen your security posture.
  prefs: []
  type: TYPE_NORMAL
- en: Black Box Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In black box testing scenarios, the auditing researcher does not have access
    to the underlying source code, architecture documents, internal wikis, or any
    other information available to the internal development teams at the audited company.
    All of the scenarios in this book and all the advice given assumes a black box
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Bugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term bugs is used synonymously with vulnerabilities. It's important to note
    here that the usage of "bug" does not include functional UX/UI bugs (for example,
    a modal opens and closes before you can fill out a form, a CSS artifact keeps
    you from reading an explanatory tooltip, the text color is too light to be read,
    and so on). We mean bug only in the sense that the term is used in the security/pentesting
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Bug Bounty Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book focuses on public or near-public programs that reward researchers
    for contributing valid vulnerability discoveries to the company or companies behind
    the program. Sometimes that reward comes in a gamified point system (Bugcrowd's
    kudos) swag, recognition (often on a wall of fame-type display), money, or some
    combination of these. The term near-public refers to private bounty programs where
    invitations to test the application are awarded to researchers on the basis of
    past performance, average severity of vulnerabilities discovered, and other career
    stats. This definition of bug bounty programs leaves out situations where an individual
    or team of pentesters signs an exclusive contract for their services. In that
    case, many of the techniques we discuss will still carry over, but the format
    and nature of the reports would differ.
  prefs: []
  type: TYPE_NORMAL
- en: CORS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is a method by which services
    with different origins (IP addresses, ports, and so on) can, well, share resources.
    CORS comes up in our discussion of XSS in [Chapter 4](ddd8275b-fae6-423c-b7a0-e8284a77a648.xhtml),
    *Unsanitized Data – An XSS Case Study*,when we discuss the single-origin policy.'
  prefs: []
  type: TYPE_NORMAL
- en: Data Exfiltration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data exfiltration is the unauthorized transfer or copying of data off an application
    or network. It could be anything from payment information to sensitive intellectual
    property, and succinctly describes a particular type of information theft.
  prefs: []
  type: TYPE_NORMAL
- en: Data Sanitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sanitizing data involves stripping data of any special characters or reserved
    words that could cause the unexpected and unwanted execution of user input as
    code. The practice is a core component of preventing injection-related attacks,
    including XSS, SQLi, NoSQLi, and other varieties.
  prefs: []
  type: TYPE_NORMAL
- en: Data Leakage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data leakage, unlike data exfiltration, implies that improperly configured services
    or other systems are exposing sensitive data by accident. This meaning comes more
    from the shading of the term than any formal definition, but provides a useful
    descriptor when the vulnerability in question is something like an unsecured logging
    server that's open to the public internet, and displays authentication credentials
    in the logs by accident. In that scenario, no one has hacked into the application,
    or compromised the network or database, but someone has made the mistake of leaving
    that resource open, and that data could provide the basis for another wave of
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Exploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An exploit is the malicious code that powers an attack on an application or
    its users, leveraging the flaw presented by a vulnerability to take advantage
    of weak/broken authentication, poor privilege management, insufficient data control,
    or other vectors to make mischief. Software billing itself as an exploit framework,
    such as Metasploit (which we discuss in our [Chapter 11](ed465f46-31a7-429c-b0d2-6616dace7167.xhtml),
    *Other Tools*) is designed to help write malicious exploit code. Because our focus
    in this work is on discovering vulnerabilities rather than exploiting them, exploits
    come up most frequently within the context of writing a credible, generally-scary
    attack scenario for your submission report.
  prefs: []
  type: TYPE_NORMAL
- en: Fingerprinting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fingerprinting is the process of gathering system information that allows you
    to identify data about the OS and specs of a target application's environment—data
    that can help you tune your engagement strategy. Detecting the hosting service,
    server OS type (if that's the backend) and version, the application language and
    framework, any included third-party libraries, and publicly-viewable API integrations,
    is all an essential part of the discovery process.
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fuzzing consists of bombarding an application with different permutations of
    information in an attempt to reveal weaknesses through a repeated, high-speed
    process of trial and error. Fuzzing tools usually ingest either a pattern or a
    dictionary of fuzzing inputs to build the series of attack strings they will submit
    to the target application.
  prefs: []
  type: TYPE_NORMAL
- en: Google Dorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Dorks are search queries that can be used to return sites that are possibly
    susceptible to certain vulnerabilities (depending on the query used). We discuss
    Google Dorks in greater detail in our chapter on SQL injection.
  prefs: []
  type: TYPE_NORMAL
- en: Known Component Vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A known component vulnerability is a previously-discovered and reported vulnerability.
    It often features a CVE ID that can be used to incorporate the finding into scanning
    databases and tools designed to discover instances of the vulnerability in a consistent,
    reproducible way. We talk about component vulnerabilities in the [Chapter 9](dae37ac2-dba8-48d5-a08a-0d29d0dc9030.xhtml),
    *Framework and Application-Specific Vulnerabilities*.
  prefs: []
  type: TYPE_NORMAL
- en: OSINT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open source intelligence is the practice of collecting information about a target
    from public records (domain registrar records, official documents, social network
    profiles, participation in public forums or other digital spaces, and other sources)
    that can be used to assist in other intelligence-gathering activities, such as
    compromising passwords or enabling targeted social engineering (spear phishing,
    whaling, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Passive Versus Active Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passive scans analyze data flow within web applications. They are much less
    noisy, having little or no effect on the logs and associated metrics that provide
    an app's maintainers with information. By contrast, active scanning involves sending
    data into the application and then analyzing the response. Active scanning is
    often prohibited, because of the damage it can do to a network and the ways it
    can degrade application performance.
  prefs: []
  type: TYPE_NORMAL
- en: Payload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general software development, a payload is essentially the message of an
    action—the semantic content an action contains beyond its metadata, headers, and
    other system information. In a cybersecurity context, a payload is similarly the
    weaponized, malicious code snippet value of an input that escapes sanitation measures
    and actually executes the attack.
  prefs: []
  type: TYPE_NORMAL
- en: Proof-of-Concept (PoC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PoC of a vulnerability is a code snippet or series of instructions for proving
    the security issue in question exists. A PoC should be as simple as possible to
    show the minimum conditions necessary for triggering an exploit. We discuss PoCs
    within the context of CSRF in [Chapter 6](c685f58d-e796-4729-8766-9338c92682e2.xhtml),
    *CSRF and Insecure Session Authentication*.
  prefs: []
  type: TYPE_NORMAL
- en: Rules of Engagement (RoE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The RoE for a bug bounty program (also know as its disclosure guidelines or
    code of conduct) describe the most valuable vulnerabilities the company would
    like to test for, allowed/prohibited testing methodologies and tools, research
    scope, and out-of-bounds vulnerabilities. The RoE is the most important reference
    document you start any pentesting engagement with, since it shapes the rest of
    your investigation.
  prefs: []
  type: TYPE_NORMAL
- en: Red Team
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A company's red team is the internal security team responsible for mimicking
    the attacks and behavior of outside actors, probing the defenses of the company's
    network and exposing weaknesses through repeated offensive analysis and attempted
    intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Code Execution (RCE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'RCE is a three-letter acronym to make anyone quake. Remote code execution is
    exactly what it sounds like. It triggers the execution of an arbitrary code snippet
    on a remote machine through a network (for example, the internet). A vulnerability
    that allows for RCE is a highly-critical issue that will ensure you get a nice
    payout. The possibilities afforded by having that sort of access to a service
    are vast: adding the machine to a botnet, exfiltrating data, draining the victim''s
    resources with cryptocurrency mining. Considering the open-ended possibilities
    of a Turing complete language, an imaginative attacker can do an impressive amount
    of damage.'
  prefs: []
  type: TYPE_NORMAL
- en: Safe Harbor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some bug bounty programs will also advertise a safe harbor clause. This is in
    essence a promise from the company to certify you as a researcher and guarantee
    your freedom from legal action in exchange for you following the testing guidelines
    they have laid out in their RoE.
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An engagement's scope refers to both the areas of the target application that
    can be subjected to analysis (as defined by IP addresses, hostnames, and functionality)
    as well as the type of testing behavior not allowed (for example, active scanning
    disallowed, don't mess with or modify another user's data, and so on). Adhering
    to scope is critical, both out of respect to the program's operators and to minimize
    any liability you might incur by touching out-of-bounds systems.
  prefs: []
  type: TYPE_NORMAL
- en: Security Posture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A great, standard definition of an organization''s security posture comes from
    the National Institute for standards and technology: the security status of an
    enterprise''s networks, information, and systems based on information security
    resources (for example, people, hardware, software, policies) and capabilities
    in place to manage the defense of the enterprise and to react as the situation
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Single-Origin Policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The single-origin policy is a part of the CORS system employed by browsers regulating
    and limiting the ability for scripts originating from different origins (hostnames,
    ports, and so on) to access data from each other. The single-origin/CORS mechanism
    is an attempt to stop one application exposing sensitive information or making
    a state-changing action on another site.
  prefs: []
  type: TYPE_NORMAL
- en: Submission Report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your submission report refers to the documentation surrounding the vulnerability
    you believe you've discovered.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vulnerability is a flaw in an application that allows for an attacker to compromise
    the application, its user base, or its network. The vulnerability (a term often
    used synonymously with bug) isn't the attack itself, but rather the chink in the
    armor through which the exploit (the actual malicious code part) slips through.
  prefs: []
  type: TYPE_NORMAL
- en: White Box Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: White box testing refers to auditing an application for security flaws in an
    engagement where you have access to the application's source code. Although we
    discuss exploring an application's publicly available client-side code in various
    places, and in our [Chapter 11](ed465f46-31a7-429c-b0d2-6616dace7167.xhtml), *Other
    Tools*, we discuss white box tools, such as Pytaint, to give you an idea of the
    security landscape, the vast majority of any bug bounty hunter's work will be
    black box testing.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Workflow is a catch-all term used throughout the book to reference both the
    formal and informal processes built into conducting a thorough security audit
    of a new site. An example of a formal process might be a list of different types
    of vulnerabilities you'd like to ensure you check for in any application, or even
    just a general outline of the different phases of your engagement, from discovery
    to wrap-up and reporting. An informal process example would be the internal heuristics
    you use to decide whether applying a tool in a given situation is worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Zero-Day
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common term in security and an important one, a zero-day is a previously undiscovered
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hopefully, this chapter has built on [Chapter 11](ed465f46-31a7-429c-b0d2-6616dace7167.xhtml),
    *Other Tools* and the rest of this book, to give you a sense of not just the technologies
    to explore and incorporate into your workflow, but also learning resources, communities,
    and other hubs for important security content that can help you grow as a security
    researcher and programmer.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are some good pentesting and security-related blogs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What type of testing methodology do public bug bounty programs use: black box
    or white box testing?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the harm represented by a vulnerability that allows for RCE?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's safe harbor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does CORS stand for? What is its purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the term security posture mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the practice of fingerprinting an application accomplish?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does OSCP stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find out more about some of the topics we have discussed in this chapter
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Schneier on Security**: [https://www.schneier.com/](https://www.schneier.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Krebs on Security**: [https://krebsonsecurity.com/](https://krebsonsecurity.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
