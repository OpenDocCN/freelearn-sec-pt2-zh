- en: Network Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover all of the concepts that will be needed to get
    started with network penetration testing. We will start off with what a network
    is, and see two types of networks: wired and wireless. Later, we will see how
    to connect a wireless adapter to a virtual machine. After that, we will look at
    what a MAC address is also, steps to change a MAC address. Finally, we will see
    methods for activating the monitor mode.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a network?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to a wireless adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAC addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless modes – managed and monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling monitor mode manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling monitor mode using `airmon-ng`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a network?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first penetration testing section that we are going to cover is network
    penetration testing. Most of the systems and computers that we are going to try
    to gain access to will be connected to a network, whether it's a device, a computer,
    a phone, or simply any device connected to the internet. Therefore, you need to
    learn how devices interact with each other in a network, as well as how networks
    work, before you can advance into different types of penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Network penetration testing can be divided into four main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Pre-connection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gaining access
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-connection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detection and security
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both the first section (pre-connection) and the second section (gaining access)
    are geared toward wireless networks. Usually, with a wireless network, there is
    protection (encryption), and we need to use a key to connect to the network. There
    are WEP, WPA, and WPA2 encryptions, and we are going to learn how to break them.
    We will also learn the kinds of attacks we can do without being connected to a
    network, and what we can do using a wireless card.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we don't mention wired connections in the first two sections is because,
    in order to gain access to a wired network, all you need is an Ethernet cable.
    Some wired networks use security and some use MAC filtering, and we're going to
    discuss that later—changing the MAC address is very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Section 3 is where the fun starts—we will learn how to sniff packets from the
    network, how to control connections, how to sniff passwords, usernames, and cookies,
    how to inject them into your browser, and how to launch attacks that will allow
    us to gain full access to any device on a network, bet it wired or wireless. Section
    3 will apply to both wired and wireless, which will work exactly the same, with
    no need for a change in configuration. In the last section, we will discuss how
    to secure yourself against attacks, and how to detect them.
  prefs: []
  type: TYPE_NORMAL
- en: Network basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start trying to hack into networks, there are a few basics that we
    need to learn. What is a network? A network is a number of devices connected together
    so that they can share data. This data can be files, resources (such as on a home
    network), or just a way to connect to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: All networks, Wi-Fi or wired, achieve this sharing of data by using the same
    principle—a device that acts as a server, which all of the devices communicate
    with. The server has access to the resources, and all of the other devices on
    the network can access the data from the server. On most Wi-Fi networks, the server
    is the router, and all devices connect to the router and access the internet through
    it. The only device on the network that is directly connected to the internet
    is the Wi-Fi router.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, clients 1, 2, and 3 have no access to the internet,
    but they can access it through the router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17019b49-5a2b-4f75-b41c-cf4bf7dd3ff5.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, whenever Client 3 wants to open Google, it sends a request to the
    router. The router goes to the internet, grabs [http://www.google.com](http://www.google.com),
    and forwards it back to Client 3. Client 3 does not have direct access to the
    internet—it has to go through the router, and the router grabs the request and
    sends the response back to the client. All of this data—requests and responses—is
    transferred through packets, so there are a number of packets being sent between
    clients and the router. In a Wi-Fi network, these packets are sent through the
    air, so they are broadcasted. If we are in the range of these packets, we can
    just sniff them, capture them, and read them, being able to see all of the information
    inside. All of this data—whether it's usernames, passwords, videos, audio, music,
    charts, and so on—is transferred as packets, and it's always transferred between
    the router and the client. So, if we capture the packets, we can read all of the
    information on our device.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a wireless adapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part of the chapter, we will see how to connect a USB device to a virtual
    machine. As an example, we are going to connect a wireless adapter to a Kali machine,
    but the same method can be used to connect any USB device. We will need a wireless
    adapter for the cracking section of the network penetration test, because in later
    chapters, we will learn how to crack passwords for Wi-Fi networks. Other than
    that, we can do everything else without a wireless adapter.
  prefs: []
  type: TYPE_NORMAL
- en: A wireless adapter is a USB device that connects to the computer through the
    USB and allows us to communicate with wireless networks. Most computers and laptops
    now come with built-in wireless cards. The only problem is, first of all, that
    we can't access built-in wireless cards from a virtual machine. Also, even if
    you install Kali as a main machine, the built-in wireless cards are not good for
    hacking, because we need a powerful adapter that supports monitor mode and packet
    injection (we will go into what these mean). Basically, the built-in wireless
    adapter does not support these modes, and can't be used for hacking.
  prefs: []
  type: TYPE_NORMAL
- en: Powerful wireless adapters are recommended. For more information, check out [https://www.youtube.com/watch?v=0lqRZ3MWPXY](https://www.youtube.com/watch?v=0lqRZ3MWPXY).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will connect adapters to Kali by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We have to open VirtualBox (if it's open, it can be seen on the left-hand side
    of the screen) and click on the machine that we want to connect the adapter to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we go to Settings | USB, and make sure that Enable USB Controller is
    checked; if not, just click on Enable USB Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a8ad40b7-e36c-4018-ba0f-cbc34f4903d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have to pick the USB hardware type that is used by our adapter—either
    USB 1.0, 2.0, or 3.0\. Then, we go to the plus (+) sign, and click on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/91d9415f-cf8d-429e-a12f-221ed64aa036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will see that we have a number of devices that can be attached to the Kali
    machine. We connect to the adapter, first of all, just to have a look at the available
    devices. The name that we see is the name of the chipset that was used inside
    the adapter, not the brand name of the adapter itself. When we click on it, we
    see a new entry called ATHEROS—this is actually my wireless adapter, an Alpha
    AWS 036NHA. We click on it; then we click on OK, and the adapter is added to Kali:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5263622b-546a-46e0-b447-c89eb13fc83b.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we can start Kali, we have to install extensions to allow VirtualBox
    to use the USB device. They can be downloaded at [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads),
    and you can see that there is a link for the VirtualBox Extension Pack. This will
    only work for VirtualBox 5.1.22 and up.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a different version of VirtualBox, to get your version, you can
    just go to VirtualBox | About VirtualBox; if you're on Windows, you'll have to
    go to File | About VirtualBox. You'll see the version there. If you don't find
    the latest version on the link, you have to go down to the VirtualBox older builds,
    to 5.0, and look for 5.0.20, to download its Extension Pack. Download the one
    that is compatible with your version.
  prefs: []
  type: TYPE_NORMAL
- en: Once it's downloaded, it will be available in your default download location.
    You just have to double-click on it to install it. If you have already installed
    it, it will show a popup for reinstalling; otherwise, it will show an Install
    button. If you are reinstalling, you'll need to scroll down and Agree, including
    your password. After that, the Extension Pack will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting the virtual machine, we are going to physically disconnect
    the wireless adapter, and then connect the adapter once Kali fully loads. Boot
    up the Kali virtual machine, put in the username, which is `root`, and the password,
    which is `toor`. Now, Kali is fully loaded, and we can physically connect the
    wireless adapter. This is done to avoid conflicts. Once the adapter is connected
    and virtual machine is up, we will confirm that the adapter is connected by opening
    Terminal and typing `ifconfig`. This command lists all of the interfaces that
    are connected to the machine, and, as we can see in the following screenshot,
    it should list an adapter called `wlan0`, which is the wireless adapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/123808c7-c6e5-4e01-b99e-5a96b285b84b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go to the top-right corner of the screen and click on power icon, you''ll
    see a Wi-Fi Not Connected option, which can be used to connect to Wi-Fi networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9993b86d-081a-499f-bbf6-28dbe9fb98e9.png)'
  prefs: []
  type: TYPE_IMG
- en: We don't need to connect to any Wi-Fi connection, because we have set up a NAT
    network, and Kali already has internet access through that NAT network. We only
    need the wireless adapter to hack into other networks and crack their passwords.
  prefs: []
  type: TYPE_NORMAL
- en: MAC addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will study MAC addresses. Each network card, whether it's
    a Wi-Fi card or a wired card, has a physical, static address, assigned by the
    card manufacturer. This is the **Media Access Control** (**MAC**) address. The
    MAC address is written on the card, and it's physical, so it never changes. It
    is used between devices, for identification and to transfer packets in the right
    direction. This works because each packet has a source MAC and a destination MAC,
    and travels from the source to the destination.
  prefs: []
  type: TYPE_NORMAL
- en: Because the MAC address is static and never changes, it can be used to trace
    back and identify a device. Also, since devices use MAC addresses to identify
    each other, we can have some networks that only allow certain MAC addresses to
    connect to them (by using a whitelist), or that blacklist MAC addresses so that
    they cannot connect to the network. Changing your MAC address can help you to
    either connect to a network by being on a whitelist, or to bypass a blacklist.
    The only way to change the MAC address is to change it in the RAM—so it will only
    be changed for the current session, and once you restart, you will have to change
    it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s change the MAC address; the procedure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use a tool called `macchanger`. First of all, to get the Wi-Fi
    card name, just type in `iwconfig`, and it will show all of the wireless cards.
    In the following screenshot, `eth0` has no wireless extensions, and the same applies
    to `lo`; we can see that `wlan0` is the wireless card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b68d5a57-dea0-4435-8fc0-c5369dae3b50.png)'
  prefs: []
  type: TYPE_IMG
- en: We are going to disable the wireless card, using the `ifconfig wlan0 down` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we''re going to change the MAC address, using a tool called `macchanger`.
    With these tools, it''s always a good idea to look at the help section; just go
    onto the Terminal and type `macchanger --help`, and we''ll see all of the options
    that we can use with the tools. You can use `--help` and `--version` to show the
    help and version, `--show` to show our current MAC address, and `-e` so that it
    doesn''t change the vendor bytes (the manufacturer of the MAC address). Another
    method is to try a random vendor MAC of the same kind (`-A` is just to set a random
    vendor here). The `-p` option will reset the original permanent MAC address, so
    if we changed our MAC address and we want to use the old one again, we can use
    `-p`. The `-r` option will just give us a random MAC address, and `-l` will just
    print the known vendors that we can use. The `-m` option will help us to pick
    our own MAC address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/72db7537-f4c5-459c-9363-3198a92b5189.png)'
  prefs: []
  type: TYPE_IMG
- en: In case there is a whitelist, we will learn how we can see all connected devices;
    for example, for your target network, three devices are connected, and the target
    network only allows three devices to connect. We can just take one of the whitelisted
    MAC addresses, change it, and use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the MAC address, first we have to disable the `wlan0` wireless card
    by using the `ifconfig wlan0 down` command. We can use the `--random` option to
    set up a random MAC address using `macchanger`. The command is simply `macchanger
    --random wlan0`. We can use `m` to specify our own MAC address, if we want. After
    hitting *Enter*, we can see that the original MAC address is being changed to
    `5a:c4:0c:9a:ac:79`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c071e51e-2730-4a36-9a8d-e10a3fae6775.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, our wireless card is ready, and we've changed its MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to enable the wireless card again, because we disabled it. So,
    we''ll do the opposite; we''re going to use `ifconfig wlan0 up`. That''s it; the
    card is enabled, and its MAC address has been changed. Let''s take a look at it
    in the following screenshot; if we type in `ifconfig wlan0`, we can now see the
    new MAC address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/24b4acc0-a80b-481d-a08f-205845e2811c.png)'
  prefs: []
  type: TYPE_IMG
- en: Wireless modes – managed and monitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we know that the MAC address is used to make sure that the packet goes
    in the right direction, so each packet has a source MAC and a destination MAC,
    and it flows from the device that has the source MAC to the device that has the
    destination MAC. This is how wireless cards work in the default mode. So, if we
    go into the Kali machine and use `iwconfig`, in the following screenshot, you
    can see that we have a wireless card, named `wlan0`, and that the default mode
    is called managed mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6a1d4b94-4fe3-4b40-b1c9-0cf8231ddb5d.png)'
  prefs: []
  type: TYPE_IMG
- en: So, basically, in this mode, our wireless device will only receive packets,
    or will only try to capture packets that have our device's MAC address as the
    destination MAC. It will only capture packets that are actually directed to our
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: What we want to do, however, is enable it to capture any packet that's around
    us—any packet that is within our range. To do that, we're going to use a mode
    called monitor mode. It tells the wireless card to capture everything around it,
    even if the destination MAC is not our MAC. Basically, we'll then be able to capture
    all of the packets within our range, even if they aren't directed to our device.
  prefs: []
  type: TYPE_NORMAL
- en: There is more than one method to enable monitor mode; we're going to discuss
    three methods in this chapter, starting with the most basic method, in this section.
    Sometimes, monitor mode will be enabled, but when it comes to actually running
    an attack, the attack will not work. We may then need to try a different method
    of enabling monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to talk about the first method now, using `airmon-ng` to do it.
    First, we type in `airmon-ng`, and, as we can see in the following screenshot,
    it lists the wireless cards available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/61909a27-0fda-4836-b76b-7f37db20421f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have a wireless card called `wlan0`, so we''re going to start monitor mode
    on this interface, and the command is going to be `airmon-ng start wlan0`. It''s
    very simple; `airmon-ng` is the name of the program, `start` initializes monitor
    mode, and `wlan0` is the wireless card name, so it''s the interface. We now have
    monitor mode enabled on `mon0`, so in the upcoming chapters, whenever we want
    to use monitor mode, we will specify `mon0` as the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7e53799-518f-452c-bbff-7b9ec597c094.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All interfaces might not have the same name, so it will probably be called
    `wlan0mon` or something else; it doesn''t matter, just make sure to use the name
    that monitor mode is enabled on, in the future. If we use `iwconfig wlan0mon`,
    we will see (as shown in the following screenshot) that the mode is now monitor
    mode instead of managed mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a7f65ab-e012-4f78-8fbf-8281d6fc3ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that we can use this card to capture any packet within our range,
    even if the packet is not directed to our device, and even if it doesn't have
    the MAC address of our device as the destination MAC.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, when we enable monitor mode, the card will lose its connection.
    So, if it was connected to a wireless network, it will get disconnected. This
    is normal, because the card will not be in managed mode, and it will be capturing
    all of the packets that are available to it, instead of only capturing the packets
    that are directed to it. This doesn't really matter, because when we enable monitor
    mode, we actually want to hack into a different network or capture packets from
    networks that we don't have passwords for. So, it's completely normal to lose
    our internet connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing is to make sure to use the name that monitor mode is enabled
    on. As mentioned previously, this was `wlan0mon`; it will change from system to
    system, so make sure to use the name that the `airmon-ng` command uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third note is that if we enable monitor mode and run an attack in the future,
    and get unexpected results, we can come back and try one of the other methods
    for enabling monitor mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we want to stop monitor mode, we can use the `airmon-ng stop wlan0mon` command.
    Now, monitor mode is disabled, as seen in the following screenshot, and we can
    use `wlan0` in managed mode to connect to networks and use it normally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d23d9845-7a2a-4a68-a5d2-415a9ac7cf4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Enabling monitor mode manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the latest update of `aircrack-ng`, `airmon-ng` stopped working for some
    wireless cards. It will actually say that it enabled monitor mode on `wlan0mon`;
    so, instead of just using `mon0`, it's going to start calling wireless cards `wlan0mon`.
    When we try to use this card, it might not work in monitor mode, even though the
    card supports monitor mode. For now, with Kali 2.1, it is recommend using a different
    method for enabling monitor mode. This method is actually the manual method for
    enabling monitor mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our wireless card is `wlan0`, so let''s just take a look at it. We use the `iwconfig
    wlan0` command; the wireless card can be seen in the following screenshot, following
    command execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0b2ac853-a5c9-490c-aadc-f46fe3c65d14.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, `wlan0` is now in managed mode. So,
    what we are going to do is enable it by using the manual method. We're going to
    disable the card using the `ifconfig wlan0 down` command, the same way that we
    did in the previous method, and the card will be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the next command will be to enable monitor mode on the card: it''s `iwconfig
    wlan0`, the name of the card, and then `mode monitor`. It''s very simple: `iwconfig
    wlan0 mode monitor`. Then, we press *Enter,* and it''s done.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if there are no error messages, it means that the commands are running
    successfully. We can then enable the card again, so we will execute `ifconfig
    wlan0 up`, which will bring up the card. If we use `iwconfig wlan0`, the card
    will be in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/45c0b12f-846d-49c7-9de9-3ed97246150b.png)'
  prefs: []
  type: TYPE_IMG
- en: So, in this part, we have actually used the old method of enabling monitor mode,
    if we have used `airmon-ng`, and then we will be using `wlan0mon` as the card
    in monitor mode, but if we use the old method, then `wlan0` is the one that's
    going to be in monitor mode. We are going to use `wlan0` instead of `wlan0mon`,
    because monitor mode is now enabled on `wlan0`.
  prefs: []
  type: TYPE_NORMAL
- en: This card now works perfectly, and monitor mode is enabled on it. We can choose
    any method we want, but this method will work on all cards, whereas the `aircrack`
    and `airmon-ng` methods will only work on some cards.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling monitor mode using airmon-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we have seen two methods to enable monitor mode, and now we're going to
    learn the third method. All of these methods achieve the same objective, which
    is enabling monitor mode on your wireless card. Which method works for you will
    depend on your operating system, your host system, and the compatibility of the
    wireless cards in the systems. In many cases, all of the methods will enable monitor
    mode on your card, but not all of the attacks will work. Sometimes, injection
    will not work, or creating a fake access point will fail—we will learn all of
    these in future chapters, so don't worry about them yet.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, the idea to take from here is that if we know our card supports injection
    (if it's an alpha card such as 036H or 036NHA, or one of the known cards that
    support injection), but the injection isn't working well, then we can just unplug
    the card, plug it back in, and try another method of enabling monitor mode. So
    far, you have two methods, and we will now learn the third method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If any of the preceding methods work for you, then stick with it; if they don''t,
    then try this method. We have the wireless card connected, and it''s called `wlan0`.
    So we''re going to disable the card as usual, using `ifconfig wlan0 down`, and
    run a command to kill any service that might interfere with enabling monitor mode.
    The command is `airmon-ng check kill`; as you can see in the following screenshot,
    it killed three processes that `airmon` thinks might interfere with enabling monitor
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c102aaf2-450f-4877-9f62-2b579554ba0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we are going to do now is enable monitor mode in the same way that we
    did in the first method, using the `airmon-ng start wlan0` command. Now, as monitor
    mode has been started on `wlan0mon`, which is a virtual wireless interface, we
    can use the `iwconfig` command to check; then, it will be in monitor mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86e631e8-63d6-40ee-baff-0767bdc60db3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, as we have seen, all of the methods enable monitor mode, and, in the future,
    we're going to use monitor mode in different attacks. If an attack doesn't work,
    all we have to do is unplug the card, plug it back in, and try another method
    for enabling monitor mode. Hopefully, one of them will work, and we can carry
    on with the attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what a network is and how it works, and also studied
    basic network terminology and how to connect the wireless adapter to the virtual
    Kali machine. Mostly, we will only need this adapter for network penetration testing,
    to crack passwords. We also saw the important concept of MAC addresses, which
    are unique for every machine. Also, we saw how we can alter our MAC address so
    that we cannot be traced when hacking. Finally, we learned how we can enable monitor
    mode by using three different techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to perform network penetration testing.
  prefs: []
  type: TYPE_NORMAL
