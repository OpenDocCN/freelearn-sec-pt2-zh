- en: Pre-Connection Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the first part of network penetration testing—that
    is, pre-connection attacks. In order to perform these attacks, we will look at
    the fundamentals; we will study the concept of sniffing. Once we have a good idea
    of what sniffing is, we will look at targeted packet sniffing, and an important
    tool for sniffing—the Wireshark tool. Then, we will launch our first attack: the
    deauthentication attack. Finally, we will create a fake access point.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Packet sniffing basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeted packet sniffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deauthentication attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a fake access point?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating fake access points with the MANA Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet sniffing basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we set the Wi-Fi card into monitor mode, so that we can
    sniff packets that are within our Wi-Fi range, even if they're not directly connected
    to our device, and even if we are not connected to a network with a username and
    password. Now, we're going to use a tool called `airodump-ng`, part of the Aircrack-ng
    suite. It's a packet sniffer, and it allows us to capture all of the packets around
    us. We can run it against all of the networks around us and collect any packets
    within our range. We can also run it against a certain **access point** (**AP**)
    so that we only collect packets from a certain Wi-Fi network.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s look at how to run the program. You''ll need your Wi-Fi card
    in monitor mode; in our case, the name of the Wi-Fi card is `wlan0`. So, we''ll
    run the `airodump-ng wlan0` command—it''s as simple as that. The name of the Wi-Fi
    card that has monitor mode enabled on it is `wlan0`. As you can see in the following
    screenshot, this will list all of the networks around us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0eac5225-a0b6-45c8-b340-83dc8eecd243.png)'
  prefs: []
  type: TYPE_IMG
- en: Another use of `airodump-ng` is to identify all of the devices connected to
    the networks around us.
  prefs: []
  type: TYPE_NORMAL
- en: We can press *Ctrl + C* to stop sniffing. We didn't save the packets that we
    sniffed, so there was no point in analyzing them—we just ran `airodump-ng` against
    the APs around us to see what networks there were and to gather information about
    them. From the preceding screenshot, we can see that there are quite a few networks
    around.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, there are a few parameters we have to familiarize
    ourselves with, so that we can analyze the output:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BSSID` is the MAC address for the AP; as we know, each network device has
    a MAC address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PWR` is the power—how far the AP is from our Wi-Fi card. `Test` is the test
    router that we will be running a few attacks against. As you go down, you can
    see that the networks are further and further away. The closer the network is,
    the easier it will be for you to sniff the packets. The closer the network is,
    the more effective the attack will be, and the quicker you will gain access and
    achieve your goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Beacons` are the signals that the AP sends; each AP sends a certain type of
    packets, to tell the clients around that it exists. So, even if the network is
    hidden, it will still send these beacons, to tell everyone around that it is there.
    Our `BSSID` is `EC:1A:59:5A:E1:46`, and we are running on `-34` information. So, `50`
    is the number of `Beacons` that each AP is sending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Data` is the number of useful packets that we have sniffed; we'll talk
    about this in detail later on, when we study WEP decryption and encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S` is the number of data packets that we have collected in the past 10 seconds;
    as we can see, we have a `0` here, so 0 data packets have been collected in the
    past 10 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Channel` is the number of channels that the AP is broadcasting on. Each
    AP broadcasts on a certain channel, used so that there will be no interference
    between APs that are beside each other. Suppose that we have an AP, and five meters
    away, there's another one; if both of them are running on the same channel, there
    will be interference between those two APs, and the signal between them will be
    shorter, so their range will be shorter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MB` is the maximum speed supported by this AP; it can go up to `54`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ENC` is the encryption that''s used in the AP; we have WEP, WPA, WPA2 encryptions.
    If it''s an open network we will see `OPN` in the encryption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CIPHER` is the cipher that''s used to decrypt the packets. For WEP it''s `WEP` but
    for WPA2, it can be `CCMP` or `TKIP`; we''ll talk about these later when we get
    into WPA cracking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AUTH` is the type of authentication that''s required for this AP. We can see
    **pre-shared key** (**PSK**), and also `MGT`. We''ll also talk about these later
    when we get into WPA cracking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeted packet sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now seen the basics of sniffing. Once we have a network (or a group
    of networks) to target, it's useful to run `airodump-ng` on that network only,
    instead of running it on all of the networks around us. In this section, we'll
    see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: We are currently running `airodump-ng` on all of the networks around us; we
    are going to target the network with the `BSSID`, `EC:1A:59:5A:E1:46`. That's
    our test network, the `Test`. We are going to sniff on that network only.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we''re going to use the same program. The command will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We need to specify the channel. The `--channel` here is number `10`, as you
    can see in the preceding code snippet; the `--bssid` should be the MAC address
    of the target network. We are going to add a `--write` option; this tells `airodump-ng`
    to log all of the packets that it captures into a file. We also need a filename,
    so let's call it `test-upc`. We then put the name of our Wi-Fi card (in monitor
    mode), and it's `wlan0`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we press *Enter*, and, as you can see, the only network that shows up
    is `Test`; we don't have any other networks listed. In the previous screenshot
    (in the *Targeted packet sniffing* section), we had too many networks, so not
    all of the information was visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, as we can see, all the parameters that we saw
    in the previous part of this chapter contains all the APs that are within our
    Wi-Fi range, this section here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c798daf9-d8ae-45fd-83d5-f8305a53a2fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the preceding screenshot contains all of the clients that are associated
    with the APs; when we see `EC:1A:59:5A:E1:46`, that's the MAC address of the network
    that the client is connected to. The MAC address in the first section is the same
    as the MAC address in the second section. That means that this client is connected
    to network `EC:1A:59:5A:E1:46`. The `STATION` is the MAC address of the client—the
    MAC address of the device that is connected to the network. The `PWR` is the distance
    between us and the device, and the `Rate` is the maximum speed that the device
    is running on. `Lost` is the number of packets that we have lost (that we couldn't
    capture from the target device), and `Frames` is the number of useful packets
    that we collected from that device. We will talk more about frames and data when
    we study WEP cracking in [Chapter 6](c3f79613-de23-4825-9b88-b2f5dc16479c.xhtml),
    *Network Penetration Testing – Gaining Access**.*
  prefs: []
  type: TYPE_NORMAL
- en: 'The first main part of `airodump-ng` is the APs that are within our Wi-Fi range,
    and the second part is the clients that are associated with those APs. We also
    have the MAC address of the AP and the MAC address of the actual client. Now,
    we are going to use *Ctrl* + *C* to stop sniffing. All of the data has been logged
    into a file called `test-upc`, and we will use `ls`, which is a command to list
    files in Linux; if we add `*` after it, we will see that `airodump-ng` automatically
    created four file formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee6c4bef-c23c-43d7-ac96-81eb5bdd40e3.png)'
  prefs: []
  type: TYPE_IMG
- en: In our command, we only specified the filename as `test-upc`; `airodump-ng`
    automatically added a `01` to the filename, just in case there was another file
    that had the same name. We can see four different file formats—`CAP`, `CSV`, `KISMET`,
    and `KIDMET XML`.
  prefs: []
  type: TYPE_NORMAL
- en: If we execute `pwd`, we will see that we're in the `root` directory. After we
    sniff the packets, we can use a program, such as Wireshark, to analyze the packets
    and see what information was gathered. The problem with this specific network
    is that it uses WPA2 encryption, so all of the packets are encrypted, and we can't
    decrypt them unless we have a key. We're going to discuss how to crack the key
    in later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to discuss how to use Wireshark in [Chapter 7](ed450616-a95c-4c35-b9a6-7e5362e39198.xhtml),
    *Post Connection Attacks*, of this book, so for now, we are just going to run
    Wireshark to give you a quick look at how the packets show up. They're not going
    to be useful, because they're encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll open the Wireshark tool by implementing the `wireshark` command, then
    go to the option File | Open, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/38088be9-b927-4c79-a5b5-2afd45068b2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look for the `test-upc.cap` file in the `/root` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7ad6f2ca-f0dd-498d-8c4a-7498a65a2426.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After opening the capture file, we can see some information—for example, that
    the source device is a Belkin device in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2348cf2-b6c2-46fe-81c6-fdfc4a041f64.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also see (in the preceding screenshot) that there is a device communicating
    with Belkin; the MAC addresses; the devices; and the manufacturers. This is very
    simple information, because the network is encrypted. If it were an open network,
    we could connect straight away, and jump to further sections about penetration
    testing. For now, we just wanted you to see how the packets look when the network
    is encrypted. In the future, you will learn more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Deauthentication attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part of the book, all we will discuss are attacks that we can launch
    on any network in our Wi-Fi range, even if the network has encryption or uses
    a key. We don't have to connect to a network to launch these attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Deauthentication attacks are very useful; they allow us to disconnect any device
    from any network that is within our Wi-Fi range. To perform the attacks, we spoof
    our MAC address to get the target MAC address (the target being the client that
    we want to disconnect). We pretend to be the client, and then we send a deauthentication
    packet to the router, telling the router that we want to disconnect. At the same
    time, we spoof our MAC address to the AP MAC address, and tell the target client
    that it needs to re-authenticate itself. Then, the connection will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to do it, using a tool called `aireplay-ng`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to run `airodump-ng` on the target network, because we
    want to see which clients are connected to it. This time, we will not need the
    `--write` option, so we are just going to remove it. All we need are `airodump-ng`,
    the `--channel` (we put the channel of the target network), and the `--bssid` (the
    MAC address of the target network). The command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We hit *Enter*, and we''re sniffing on the target network, `Test`. This method
    will work on any device, whether it''s a Linux, Windows, Mac, or Android device—it
    doesn''t matter; they all use the same method of transferring packets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e93c7ab-58aa-4f17-8a06-4aae11c98750.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we're going to run `aireplay-ng`, to disassociate one of the devices from
    the network. We can run it to disassociate all devices, but I have found that
    when we do that, it doesn't really disassociate all of them, because there are
    too many targets to disassociate. So, we will choose one target, which will be
    the device `6C:C4:D5:6F:A6:DC`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `aireplay-ng`, we will add `--deauth` (for a deauthentication attack),
    and then put the number of deauthentication packets that we''re going to send;
    we will just put a very large number, to keep the device disconnected. Then, we
    will put the target AP (the MAC address of our target AP), and the source (or
    the client''s MAC address), which is the device that we want to disconnect. We
    will also include `wlan0`, our Wi-Fi card in monitor mode. If we hit *Enter,* `aireplay-ng` will
    now send the deauthentication packets. The command will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf64a606-db58-4561-9360-6264d574c642.png)'
  prefs: []
  type: TYPE_IMG
- en: Go to the target device and see if it still has an internet connection. We'll
    be able to see that it has lost connection, and it's trying to reconnect; it won't
    be able to, because we are still sending our deauthentication packets. We can
    launch this attack on any network that we choose; we don't need to know the password
    or key.
  prefs: []
  type: TYPE_NORMAL
- en: What is a fake access point?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically, a fake AP is an AP that looks normal to users and doesn't have encryption
    on it, so people can connect without having to enter a key. It's an open network,
    and it should have an internet connection to attract people to it. Why would we
    create a fake AP? Well, if we create one, we will attract a large number of people
    to connect to the network and access the internet. They will log in to their accounts,
    and we can use packet sniffing to capture anything that they log.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating an AP is simple; it just needs to be set up correctly, so that the
    AP can function. The first things we will need are two cards:'
  prefs: []
  type: TYPE_NORMAL
- en: A card needs to be connected to the internet. It doesn't matter what card it
    is—3G, wired, wireless—all we need is a card that is connected to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second card has to be a Wi-Fi card. This Wi-Fi card will be used as the
    AP, to broadcast the AP's signal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following diagram, Hacker is our hacker device; we will need the two
    preceding cards connected to our device. The second card is going to broadcast,
    telling all of the devices around it that it is an AP for the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/42e34b3d-224e-429f-b558-6adabd8f099c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'How are we going to do this, and how is it going to work? Suppose that Client
    1 wants to access Google; it''s going to ask for our Wi-Fi card because our Wi-Fi
    card is pretending to be the AP. Now, the Wi-Fi card doesn''t have an internet
    connection, so we''re going to have to set it up in a way such that once it gets
    a request, it talks to the second card, which *is* connected to the internet.
    Now, the second card will break the request, forward it back through our device
    to the Wi-Fi card, and send it back to Client 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ca235352-4a62-4487-9f66-4fda63048d48.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding is the theory of how the fake AP is going to work. In the next
    part, we're going to implement it, so as to see the commands that need to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Creating fake access points with the MANA Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll discuss a tool called the MANA Toolkit. The MANA Toolkit
    allows us to create fake APs. It is very easy to use, and it automatically creates
    fake APs for us, so that we don't have to manually type commands. The tool also
    has a few scripts, allowing us to run a number of tools to sniff traffic in the
    fake AP, bypass HTTPS, and even attempt to bypass HSTS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool comes with three main scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start-noupstream.sh`: Basically, this script will create a fake AP. This AP
    will not have an internet connection, so, when someone connects to this fake AP,
    they will not be able to connect to the internet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`start-nat-simple.sh`: This creates a fake AP with an internet connection.
    So, when someone connects to this AP, they will be able to access the internet,
    and all of the packets will be flowing through our device (because we are the
    router), so we''ll be able to analyze, capture, and read the packets.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`start-nat-full.sh`: This script will create an AP with an internet connection,
    and it will also automatically start sniffing and recording the packets that are
    flowing through the fake AP; it will attempt to bypass HTTPS and HSTS.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are not going to use the `start-nat-full.sh` script, because it actually
    fails a lot of the time. We're only going to use the `start-nat-simple.sh` script,
    for creating an AP with an internet connection. In the future, we'll see how to
    capture and analyze the packets.
  prefs: []
  type: TYPE_NORMAL
- en: Before getting into more detail, let's take a look at the settings for the Kali
    machine. Go to Settings | Network, and make sure that you're using a NAT network.
    This is exactly what we saw in [Chapter 3](3e16cd79-e639-4851-81e9-9dcd6c29c5dc.xhtml), *Linux
    Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install the MANA Toolkit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is already installed, it will tell us that it is, along with its version.
    If we use `ifconfig`, we''ll see that we have an interface called `eth0`; this
    interface is actually used by VirtualBox in the NAT network, so it''s a virtual
    interface that is connected to that network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0edfa88f-9dfa-44f6-92e4-1b9eeaab6e45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s supplying an internet connection to the machine. At the moment, we don''t
    have a wireless card connected to it. If we use `iwconfig`, we will see that the
    internet connection comes from `eth0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a66ac1a2-8d38-4203-b83e-227c1182b4b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we try to ping using the `ping www.google.com -c 5` command, we will get
    responses back from Google, which means that the machine has an internet connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d08c9e0-39c3-4236-9503-a66cf637b99f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now connect the wireless card to the Kali machine; go to Devices |
    USB, and pick our card. The card should now show up when we run `iwconfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/352c33e2-0099-43e2-9375-d7c15ab9022e.png)'
  prefs: []
  type: TYPE_IMG
- en: So, the `wlan0` card is only used to broadcast the signal; it's not used to
    provide the internet connection. This card is in the managed mode, and it's not
    connected to any network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to set up MANA''s configuration and start the fake AP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to modify the `hostapd-mana.conf` file, which is located at `/etc/mana-toolkit`,
    using Leafpad editor. We are using Leafpad because this is the editor that we
    want to modify the file with. We will type the location where the file is located:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can modify the settings of the fake AP that we''re using. The most
    important thing is the interface that we''re going to use to broadcast the signal;
    for us, it was called `wlan0`. Remember that when we run `iwconfig`, `wlan0` is
    our wireless card that''s going to broadcast the signal, and it''s not connected
    to anything. Now, we can modify the MAC address (or the name of the network);
    the name of the network, in our case, is going to be `Internet`, and the `channel`
    is going to be set to `6`. We will not be modifying anything else; this was just
    to illustrate how to check the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/40adef8a-48bc-49ea-8b13-6aeaa6aae14a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The other file that we want to modify is the `start-nat-simple.sh` script;
    this is the file that will launch the AP. Again, we''re going to use Leafpad,
    and the command is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing to do is make sure that you correctly set `phy` parameter;
    this will be your wireless card. We already know that the wireless card was called
    `wlan0`. Next, the `upstream` parameter is very important; we should specify the
    card that has an internet connection. In our case, it was called `eth0`, the virtual
    card made by VirtualBox. Again, if everything is set up correctly, we will not
    modify anything. Save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/15afeb17-6f75-4531-a5fe-7444187af37a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our last step will be to run MANA, and it will be running the `start-nat-simple.sh
    script`. Instead of using `leafpad`, this time, we''re going to use `bash`, in
    order to execute the file. Our command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, we will get an error that says it cannot configure the file; in
    this case, just run the command again, and it should work the second time, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1f559752-9c0f-4c9c-a626-16422ec73a03.png)'
  prefs: []
  type: TYPE_IMG
- en: After this AP is running, we will go to our Windows machine and try to connect
    from it. We will be using another wireless card for the Windows machine, because
    the Windows machine will be a virtual machine as well. We can try to connect from
    our phone or from another laptop; do not connect from the host machine, because
    it will not have an internet connection (it is hosting the internet connection
    for everything). Either test the connection from your phone, from a separate laptop,
    or from a virtual Windows machine, but make sure to use a different wireless card.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to our Windows device, we are going to search for networks to connect
    to. As we can see in the following screenshot, we have an extra network, called
    Internet, and it has no password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f02f1e55-bc12-460c-9b46-88ca8ea7fb49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re going to try to connect to this network. Once we have successfully connected,
    we will see that we have an internet connection through the fake AP, and all packets
    are now flowing through this device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a704b06d-84d1-4e51-9c59-5297802b6142.png)'
  prefs: []
  type: TYPE_IMG
- en: The device is the AP, so it's like the router. We can actually use Wireshark
    (or any other tool), `tcpdump`, or TShark, to capture and analyze the packets.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you took a step toward learning about network penetration testing.
    We started with the fundamentals of sniffing, and we used `airodump-ng` to see
    all of the networks that were within our Wi-Fi range. We collected information
    about the networks, including the `BSSID`, the channel, the distance between us
    and the AP, and the encryption used. We then discussed targeted packet sniffing,
    giving an overview of the Wireshark tool. Then, we illustrated how to launch a
    deauthentication attack. Toward the end of the chapter, we studied fake APs, showing
    how to create one using the MANA Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will be attacking the target by connecting to the network
    this will allow us to  launch more powerful attacks.
  prefs: []
  type: TYPE_NORMAL
