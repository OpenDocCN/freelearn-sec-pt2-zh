- en: Network Penetration Testing, Detection, and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about how to detect ARP poisoning; to
    do that, we will first look at what ARP poisoning is, how to perform the attack
    ourselves, and then how to detect it. This chapter also cover how to detect suspicious behavior
    for which we will be using the Wireshark tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting ARP poisoning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting suspicious behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting ARP poisoning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how to detect ARP poisoning attacks. First of all, we
    need to gain an understanding of the ARP table. On our Windows device, which is
    the device that we always attack, we are going to run the `arp -a` command to
    list all the entries in the ARP table. Each computer has an ARP table, and that
    table associates IP addresses with MAC addresses. We have the IP address of a
    router, which is `10.0.2.1` and is associated with the MAC address `52-54-00-12-35-00`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbffd319-fd45-4439-916e-9e44905f3c21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ARP poisoning works via trusted requests; as you can see in the previous screenshot,
    when a request is trusted, responses are accepted by the client even if a request
    isn''t actually sent. The hacker sends a response to the client telling them that
    they are the router, which is automatically trusted and then accepted. Hacker
    will now send another response to the router, telling it that we''re the client.
    This will modify the entries in the ARP tables for both the router and the client,
    associating the hacker''s MAC address with the router''s IP address. In other
    words, the router''s MAC address is now the attacker''s MAC address. By doing
    this, the hacker will be able to read, analyze, and modify any packets flowing
    through the device, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea954b71-c2ad-41ac-b3e3-62f44e47a7d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll now run a normal ARP poisoning attack from Kali machine. Following is
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we return and execute the same command as earlier, `arp -a`, we should
    see a different MAC address, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/210714d0-cf0b-4e77-82e4-82e56516e2b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The MAC address for the router used to be `52-54-00-12-35-00` but that has since
    changed to `08-00-27-0b-91-66`, the MAC address of the network card the attacker
    is using.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run `ifconfig eth0` on Kali machine, we will get the same MAC address,
    as shown in the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/77725ea2-b151-4730-9404-8d47d744290e.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the simplest way to detect ARP poisoning attacks but not the most efficient.
    To save time, it is recommend to use a tool called XArp, which performs the `ifconfig`
    command for us. XArp is available on Linux and Windows and can be downloaded from
    the web. When XArp stops an attack, the altered IP address is reverted back to
    the original value; in this case, the router's MAC address returns to the default
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running XArp triggers a similar process to the `arp -a` command, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0a438be2-3cad-4110-9422-600a5816bb1f.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the previous screenshot, the XArp tool has provided us with
    an IP address and the MAC address associated with it. The tool will then automatically
    monitor these values, notifying the user of any changes or duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run an ARP poisoning attack similar to the one we did earlier, XArp should
    display an alert, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/725282de-6087-4b9f-a8fb-3f6840a84160.png)'
  prefs: []
  type: TYPE_IMG
- en: The notification will convey a message that the MAC address for IP changed from
    52-54-00-12-35-00 to 08-00-27-0b-91-66.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click OK, we can see that the affected machines are the router, our
    Windows machine, and our attacker Kali machine as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a052096d-7a4a-4003-9420-ed7dc8f43914.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot tells us that the machine at `10.0.2.15` is trying
    to perform an ARP poisoning attack because that's the value the router's MAC address
    has changed to.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the XArp tool is really handy because not only does it automatically
    monitor your machine, it also tell you when someone is trying to ARP poison your
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting suspicious behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now look at how to use Wireshark to find suspicious activity within
    our network. Before we go any further, we need to change a few settings inside
    Wireshark; go to Edit | Preferences... under Protocols, find ARP/RARP and enable
    the option to Detect ARP request storms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fcb5f449-a00c-4c71-8364-468296abc0b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will notify us if anybody is trying to discover any devices on the network.
    Click on OK and begin starting the capture by clicking on Capture | Start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7205381-ed4d-4679-9935-bfcb6e0cf2f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to switch to the Kali machine and use `netdiscover`. Instead of
    ARP poisoning, we are trying to discover what devices are connected to network.
    This is done by launching the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have launched the `netdiscover` command, it quickly discovered the
    available devices on the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0b0ee1aa-8ef5-404f-aa35-92fb1121e013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wireshark will then generate packets that include the name of a device, what
    its destination is, and what it''s inquiring from each IP address, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/753acd29-f7c0-449b-8542-189bb0a8964e.png)'
  prefs: []
  type: TYPE_IMG
- en: As the results show, a device is checking to see whether any possible IP in
    a particular range exists. The device is asking for responses to be sent to `10.0.2.67`,
    so it's safe to deduce that whoever is trying to discover our connected devices
    has the IP address `10.0.2.67`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to Analyze | Expert Information, you''ll see that an ARP packet storm
    has been detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/61cd1c36-7a8b-46f7-8ce8-72329a531b60.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that there is a single device sending a large number of ARP packets,
    more than likely with the aim of finding connected devices and ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to perform an ARP poisoning attack using a man-in-the-middle
    framework in order to see if we get any notifications or warnings in Wireshark.
    If we go to Analyze | Expert Information again, a warning telling us that a duplicate
    IP address has been configured should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df6b4196-6b36-4e5d-990d-c3cf2ebbd466.png)'
  prefs: []
  type: TYPE_IMG
- en: This means the IP address of the router has two different MAC addresses, which
    indicates that someone is tampering with the connections and trying to place themselves
    in the middle using an ARP poisoning attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve explored a number of ways to detect ARP poisoning, let''s discuss
    how we can prevent those attacks and protect ourselves from them. Running the `arp
    -a` command will generate the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/89414b0e-6def-44cf-9a2c-d6577c09bc4a.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, the `arp -a` command monitors our
    network and will notify us of, or even prevent, any ARP poisoning attacks. Another
    way of doing this is utilizing the dynamic entries seen in the router's table.
    A dynamic type is essentially a physical address that the system will allow to
    be changed. In the previous screenshot, those values are static, which means the
    values cannot be changed. Although using static ARP tables means that configuring
    each IP address, ARP table, and MAC address manually, the system will refuse any
    outside attempts to change those values.
  prefs: []
  type: TYPE_NORMAL
- en: The static solution is not very efficient when used in a big company or firm,
    but is an ideal solution for small companies where values are more likely to be
    configured. If a table is set up so that it's fixed and not dynamic, any ARP poisoning
    attack should fail.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how we can detect ARP attacks on a system. First,
    we learned what an ARP attack is and launched one ourselves. Then we saw how to
    detect an ARP attack, as well as general suspicious behavior with the use of Wireshark.
  prefs: []
  type: TYPE_NORMAL
- en: The next few chapters we are going to look at how we can gain access to the
    victims machines for which we will be learning about the server-side and client-side
    attacks.
  prefs: []
  type: TYPE_NORMAL
