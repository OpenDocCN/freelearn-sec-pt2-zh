- en: Scanning Vulnerabilities Using Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will see how to install MSFC, learn about the scanning process,
    and finally look at the analysis of the report. We will also be installing a tool
    called Nexpose, which will scan our system for vulnerabilities. We will also learn
    to generate reports and analyze them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MSFC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSFC scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MSFC analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Nexpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Nexpose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nexpose analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MSFC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at Metasploit Community. This is a web GUI that
    uses Metasploit, but it has features other than exploiting vulnerabilities. It
    can be used to discover open ports, just like Zenmap, and install services, but
    it doesn't stop there. It also maps these ports and services to existing exploits
    in Metasploit and existing modules. From there you can literally exploit a vulnerability
    straight away using Metasploit. Let's see how we can use it, and it will become
    clearer what it can be used for.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool is not included in Kali Linux. We need to download it from [https://www.rapid7.com/products/metasploit/metasploit-community-registration.jsp](https://www.rapid7.com/products/metasploit/metasploit-community-registration.jsp).
    We will also need to use our email address because we will need the product activation
    key, which they''ll send to the email that we enter when we download. Once we
    download this, we''re going to navigate to our `Downloads` using the `cd` command
    to change directory. If we do `ls` to list the current files, we will be able
    to see that we have the installer `metasploit-latest-linux-x64-installer.run` file downloaded.
    The first thing we need to do is to change the permissions to an executable so
    that we can execute this file. To change the permissions in Linux, you use the
    `chmod` command, and then we will put in the permissions that we want to set,
    which is executable, `+x`, and we are going to put the filename, which is `metasploit-latest-linux-x64-installer.run`.
    Now, we will launch the command, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And if we do `ls` we will see that there is text that will be highlighted in
    green, which means that it''s an executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1dde7393-06ea-4e42-98c1-015e87c4e4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: To run any executable in Linux all we have to do is type in `./` and enter the
    filename. The `./metasploit-latest-linux-x64-installer.run` file will run this
    executable for us. Now, we will just run through the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we click on I accept the agreement, and then we click Forward. We then
    select where we want to install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ee87f777-0242-4890-b8c6-588c4c542387.png)It will say that the folder
    is not empty if we already have Metasploit there. If we want to reinstall it we
    are just going to call it metasploit2.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It will ask us whether we want to start Metasploit as a service every time
    the machine starts. We can pick Yes or No. I prefer to pick No, but you can set
    it to Yes. Then the Metasploit UI will start automatically every time your computer
    starts. Click on Forward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/26055a75-08fe-4a78-a202-9c98395592a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then it''s going to ask us for the SSL Port that will be used. Because the
    service runs as a web GUI, we can set that to anything we want, but we are going
    to leave it as `3790`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8146c863-6eaf-43e9-8a4a-6e11c75f49f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And then it''s asking us for the Server Name, and we are going to keep it as `localhost` because
    it''s being installed on our `localhost`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cf00b5d4-dd44-48c9-b30b-d81ff3165a31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Database Server port; again keep this the same, don''t change it. Then there
    is the thin cluster port; again, keep this the same, `7337`. These are all configurations
    for the program to run. We don''t really need to mess with them. Only change them
    if you already installed the program and it won''t let you have the same port,
    but usually it should keep them the same:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b67d4764-8dad-48e2-80f2-2220bf478983.png)Setting  the database server
    port'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's saying it's ready to install. Once you press Forward it will install
    it for you and it will ask you for a username and a password for the web interface.
    Set that as well, pick a username and a password, and the process will finish
    up smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, once we finish the installer we want to run the `metasploit` service. Because
    it's going to be installed as a service, as a web server, when we want to use
    Metasploit Community we will have to run it using the `service` command, the same
    way we run any service in Linux. We enter `service metasploit start` to start
    that service. Once the service has started, all we have to do is go to a browser
    and navigate to `https`. Make sure to put `https` not `http://localhost/`, and
    then we enter the port that Metasploit runs on, which is `3790`. Press *Enter.* Now
    it's asking us to log in. We log in using the username and password that we picked
    while we installed the program, and then we will be able to use it. We'll be talking
    about logging in and using the tool in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: MSFC scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to log in using the username and password that we set when
    we installed the tool. As we can see in the following screenshot, we have a web
    interface for using the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/939175f3-5d1c-4471-9427-70ee44316f7d.png)Web Interface of Metasploit
    community'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can access the account and go to our user settings or log out. We can
    also check for software updates.
  prefs: []
  type: TYPE_NORMAL
- en: The first time we log in, it will ask us to enter the activation key. The activation
    key will be sent as an email to the email address that we put when we downloaded
    the tool. Make sure you put a valid email address when you download the tool.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to start a scan, and we are going to click on Project | New Project.
    We are going to call this project `metasploitable`, we are going to leave the Description empty,
    and then it's asking us for a Network range. We can set that the same way we did
    with Zenmap. We can set it to a range. It actually has a range that is within
    our subnet at the moment. It's `10.0.2.1` up to `254`. We can scan the whole network
    for vulnerabilities and exploits but for now, we're not going to do that; we're
    only going to target `10.0.2.4`, which is the Metasploitable machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to click on Create Project. The following screenshot shows
    all the parameters we discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/90c43e85-b4c5-4d87-93cd-56dd21a4a3d0.png)Adding network range'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the project has been created and we're going to start a scan on it. We
    are going to go on the Scan button on the left side of the screen and click that.
    We can just launch the scan like this, or we can go on Show Advanced Options to
    set some advanced options. If we have a range, we can use the exclude address
    to exclude some IPs. For example, if we were targeting the whole network from `1` to `254`,
    we can exclude our computer by just typing `10.0.2.15`, which is our IP, to exclude
    it from the search. You can also put a custom Nmap argument because Metasploit
    will actually use Nmap to get the services and the installed applications. We
    can add additional TCP ports or take away TCP ports. Again, we can do the same.
    We can even set the speed. We also have the UDP service discovery. It actually
    discovers the service that's installed on the port. We can also set credentials.
    If the target computer uses some sort of authentication then we can set it up,
    but our target doesn't use any of that, so we're fine. We can also set a tag for
    the target computer, or for the target scan. Now, we are not going to mess with
    these settings. Keep everything the same to keep it simple, and we are going to
    launch the scan. Give it some time to do the scan, and once this is over we'll
    see how we can analyze and discover, and see what we can do with the discovered
    information.
  prefs: []
  type: TYPE_NORMAL
- en: MSFC analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The scan process is over. It will nearly take two minutes, and it will discover
    one new host, because we only had one host, with 33 new services installed on
    it. Now, we''re going to go back and click on my Metasploitable machine to see
    what we have discovered. We can see in the following screenshot it has found 33 services
    and also it managed to detect one vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b3a9072e-71d7-4e5a-9be9-6bee77512611.png)Results of Metasploitable
    scan'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Analysis | Hosts, and we will that see that we have our host here, and
    it has been scanned correctly. It''s a VMware, it''s a server, and it''s running
    on Linux 8.04:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8cb75b3a-dd47-41d9-983d-bd796a21fabc.png)Host Scan'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the IP, we will see in the following screenshot. The first thing
    that we see is the installed services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ea770b6-ee4f-4168-b37a-c8d413c5ca72.png)Installed services'
  prefs: []
  type: TYPE_NORMAL
- en: We can see the NAME of the service, for example, dns, running on port `53`;
    the PROTO, which means the protocol is udp; it's an open port; and also we have
    the SERVICE INFORMATION.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can switch through pages using the arrow buttons at the bottom-right of
    the page. It will show same results as Nmap, just with a better GUI. The Sessions tab is
    where we see the connections. If we exploited anything, we will see them in the
    sessions. The GUI looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ebd4717-06c0-4f35-a9c7-beed49610da6.png)Exploited sessions'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vulnerabilities tab will show you the vulnerabilities that have been discovered.
    With Nmap, we only got the services. In Metasploitable, it actually maps if it
    finds a vulnerability, and if Metasploit has an exploitation for that vulnerability
    it will actually show it to us. We can click on it and get more information about
    the vulnerability. The Credentials tab will show you if there are any interesting
    credentials that the program managed to find. We can see in the following screenshot
    that it''s managed to find the username and the password for PostgreSQL, which
    is postgres. It''s a weak password, and that is the password for the admin. If
    we click on the key icon under the VALIDATE column it will validate it for us,
    turning the status to Validated in the VALIDATION column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8b498ee4-3590-4575-84df-899f85d9d591.png)Credentials'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use the preceding information. We can go ahead and connect to the
    SQL database here using this information, using the username postgres and the
    password postgres. Let''s look at a quick example of this. We are going to our
    Terminal in Kali and we''re going to use the command that you used to connect
    to SQL, to PostgreSQL. It''s `psql`. Put the IP that we want to connect to after
    the `-h` option. The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Then, we enter the username. Now, it will ask for the password, and we're going
    to enter the password that we captured, which is postgres. We will be logged in
    to the database. We can run any SQL command now on the target computer. SQL is
    the language that is used to communicate with databases. We not going to go into
    too much detail here, just that we managed to capture a username and a password
    for a database, and the database we can communicate with using the SQL language.
    We can run the `select current_database();` command just as an example. We can
    see that it selected our `current_database`, which is also called `postgres`.
    Just a quick example to show that the captured data is correct; in Metasploit,
    in the Captured Data tab, there is no captured data from the file or from the
    target computer. But on Notes, we will see some interesting notes, some of them
    about the HTTP requests for some of the methods that we use. We can go through
    the notes, which can be useful for the information gathering process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The File Shares tab will show us any files being shared from the target computer.
    The Attempts tab will show you the attempts that we did on the target computer,
    and the Modules tab will show us the modules that can be used to exploit any found
    vulnerabilities. We have a vulnerability called the Java RMI Server, and we have
    a module to discover the Java RMI Server vulnerability. We''re going to launch Exploit:
    Java RMI Server Insecure Default Configuration Java Code Execution, and we will
    do this launch straight from the tool. We''re just going to click on Launch. It
    will allow us to run the exploit from within Metasploit Community. `exploit/multi/misc/java_rmi_server` is
    the module name; do `use exploit/multi/misc/java_rmi_server`, set the `PAYLOAD`,
    set the `LHOST`, set the `RHOST`, and then `exploit`, the same way that we did
    it before in `msfconsole`. Alternatively, we can let Metasploit Community do all
    the work for us.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that it already picked the target address correctly, and we are
    going to set the connection to Reverse, and we are going to keep the Payload Type as Meterpreter.
    Now, we can choose the command shell as we can see in the following screenshot,
    which is what we used before, and Meterpreter is just a different type of payload
    that we''ll talk about later. Now, we are just going to run the module by clicking
    on Run Module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f3c8459f-d47f-40eb-b58c-72cb02349e1b.png)Selection of command shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the following screenshot, the module did run and the output
    is very similar to what you get from the Metasploit console, and it says that
    session 1 is open. It has already created a session for us. Now, we can communicate
    with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec947ac8-c83c-4fe0-881f-7a7e4b5e3507.png)Output of the Command shell'
  prefs: []
  type: TYPE_NORMAL
- en: We can see the Session tab as seen in the preceding screenshot. It has the number 1.
    If we click on that we will see that, we have a session open and it's on the Metasploitable
    machine, or on the Metasploitable project, and it used the Java RMI Server. If
    we click on that session we will see all the things that we can do on that computer.
    Now, we can use Collect System Data to get some sensitive data, but we won't be
    able to use that because it's all for the Pro version, and we have the Community
    version. We can use Access Filesystem, and we can literally have a web-based file
    browser. We can browse through the files of the target computer. Or we can just
    get a Command Prompt for the Meterpreter, like what we used to get before. If
    we go to Command shell by going to the previous page, we will see that we have
    a Meterpreter command shell that allows us to use the Meterpreter payload.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to study the Meterpreter payload and how to use it in the
    post-exploitation, but we are just going to see that we have full access to the
    target computer from here and that we are able to do whatever we want to do on
    it. Metasploit did everything through the browser. We didn't have to go and run
    Metasploit and manually configure the payload and the exploit. Now, there is one
    last thing that we will see, which is the Modules tab. Some of these modules don't
    have to give us full access. Some of them can only be used to do a denial of service,
    and some of them are code execution vulnerabilities, but they might not work.
    We can try them and see if they work. We can click on them and run them from within
    the computer.
  prefs: []
  type: TYPE_NORMAL
- en: In the gathering module, it doesn't exploit anything. It just allows us to upload
    files, and some of them give us a Meterpreter session. Just click on it, and we
    can run it from within the web interface. The tool also offers other features,
    such as the Web Apps feature, which scans for web apps. We can just go to report
    options, where we can create a report of the findings of everything that has been
    found, but the problem is these features are limited to the Pro edition. We can't
    really use them unless we pay for the program.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nexpose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss a tool called Nexpose. Nexpose is made by Rapid7\.
    It's made by the same people that made Metasploit and Metasploit Community, and
    it's similar to Metasploit Community in the sense that it has a web GUI and it
    allows us to discover, assess, and act on discovered vulnerabilities. It also
    maps these vulnerabilities to existing exploits, but the difference is Metasploit
    Community only showed us exploits that can be used within Metasploit, whereas
    Nexpose actually shows us exploits that have been published somewhere other than
    Rapid7 and Metasploit. It works on a larger scale, it shows us more vulnerabilities,
    and it also helps us to create a report at the end of the scan so that we can
    share it with the technical people, and a high-level small report that can be
    shared with the managers. It also helps us create schedule scans. Suppose, for
    example, we have a company, or we are working on a big infrastructure and we want
    to do regular scans every week or every month; we can do that using this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to install it and run it, and the differences will become more
    clear:'
  prefs: []
  type: TYPE_NORMAL
- en: Nexpose doesn't come pre-installed in Kali Linux; we have to install it manually.
    To download it you need to download it from [https://www.rapid7.com/products/nexpose/download/](https://www.rapid7.com/products/nexpose/download/).
    It'll ask you to fill in your name and address. Fill it in and download it. We
    will download the Community version, which is free. The first thing we are going
    to do before we can install it is stop the PostgreSQL service that comes it installed
    with, or that is running in Kali Linux. Just launch the `service postgresql stop` command, which
    will stop the SQL service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Usually, when we run the Terminal we won''t be in the `Downloads` directory.
    We will need to change our directory to the `Downloads` directory using the `cd` command.
    Once we''re in the `Downloads` directory we can list all the available files,
    and we will find the `Nexpose Rapid7Setup-Linux64.bin` setup file. We need to
    change the permissions of this to an executable. If you have already changed the
    permissions, that''s when it will appear in green if we do the `ls` command. Let''s
    first use the `chmod` command to change the permissions so that we can execute
    that file. The command will be `chmod +x filename`; `filename` is the file that
    we want to change the permission of; for us it''s `Rapid7Setup-Linux64.bin`. Here
    is the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to run this installer. To run an executable in Linux systems, all we have
    to do is type `./` then enter the file that you want to run. For us, it''s `Rapid7Setup-Linux64.bin`.
    The command will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'An installer will pop up, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/38ca95d0-767b-45d9-b6fb-89e263984d70.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, all we have to do is click Next, and then it will ask us to accept the
    agreement. We are going to install the console with the scan engine. We might
    come across a problem. Nexpose is only compatible with Kali 2\. If we want to
    go ahead with this, we're going to modify two files on our local system to make
    our system look like Kali 2 so that the installer will let us install it on our
    system. But if you don't face this issue, then you can just click Next at this
    point, but we will just go through the steps and modify two files to make my system
    look like Kali 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow these steps only if you get an error saying your system is not compatible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Finish. The file that contains the instructions that we need to change
    the version of our system to Kali 2 is in this book's GitHub repository ([https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch](https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch)).
    The two files that need to be changed are `lsb-release` and `os-release`. We are
    going to open two tabs, one for each file, and the first one is in the `/etc` directory,
    and it's called `lsb-release`. Before we modify the file, we are actually going
    to copy it and store a backup of it, because after we finish this step we are
    going to restore it to the way it was.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to create a new folder, and we are going to call it `backup`, and
    we will paste the file in the `backup` folder. After we do that we are going to
    modify the file according to the instructions. We are going to open it with Leafpad,
    and we are going to copy all of the content, save it, and quit. We are going to
    do the same with the next file, which is `os-release`, which is stored in `/usr/lib/os-release`.
    We are going to copy the file and put it in our `backup` folder. Then we are going
    to modify the code as per the instructions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, once everything is done, we are going to go back and run the installer again,
    and it should think that we have Kali 2 installed and proceed through the installation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll down, click Accept, the Next, and we will see that the software thinks
    that we have Kali 2, so it will let us proceed through the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the port is already set to `5432` and we are going to click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0d304feb-c5bb-4347-a0d3-fa5fe1774ac0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are going to put First Name, Last Name, and the Company. It will ask
    us to put the port for the database that''s going to be used with Nexpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8c2914b9-3ff7-485d-946a-67ccfc104023.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure we don''t check the box that is shown in the following screenshot.
    We will have a lot of issues if we check this box during installation; it basically
    should start Nexpose once the installation is over, but we are not going to check
    it. We will just go to install it and then start it later when we want to use
    it. We are not going to check this box, make sure it''s unchecked. And that''s
    it, now it''s going to install it for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4764da1a-f52e-4828-ba02-aaeea9692ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'OK, once the the installation is successful, as we haven''t started Nexpose
    yet, if we go to `https://localhost:3780` then nothing''s going to work. We need
    to run the command first and then we can can access it. We are going to talk about
    that in the next section. For now, we are going to click on Finish, and we''re
    done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/71a9802a-e8dc-40a9-8fd1-c6b614cecdd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we're going to go back and make sure we set our files back to the way they
    were. Now, for those of you who haven't modified them, again skip this step; if
    you did modify them, then make sure to go back and set them back to the way they
    were.
  prefs: []
  type: TYPE_NORMAL
- en: Running Nexpose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OK, now that we have installed Nexpose successfully, let's see how we can run
    it and see what it is. We've spoken about it a lot and we went through the installation
    process, but we still haven't seen what the tool does. The first thing to do before
    we can run the tool is to make sure that the database that comes with Kali Linux
    is turned off, because Nexpose uses its own database. If we have both of them
    running on the same port, they'll conflict with each other. The first thing we're
    going to do is stop the `postgresql` service; make sure that we have it in our
    mind that every time, before we run Nexpose, we turn off our database. We do it
    using the same command that we used in Chapter 10, *Gaining Access to Computer
    Devices*. It's `service postgresql stop`, and it will make sure that the service
    is stopped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''re going to navigate to the location where we installed Nexpose. Unless
    we changed the location during the installation process, it should be installed
    in the `/opt/rapid7/nexpose/` directory. The file that runs the server is stored
    in the directory called `nsc`, and the file that we want to run is called `nsc.sh`.
    We run it just the same way we ran the installer before. As we said before, to
    run an executable, always use `./` and then write the name of the executable.
    It''s `nsc.sh`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c25016f4-6df6-43fc-a237-1518846dab59.png)'
  prefs: []
  type: TYPE_IMG
- en: Running this for the first time might take some time. Just let it do its thing
    until it runs, and once it finishes loading the framework we'll see how we can
    access it and use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool has loaded successfully, and as you can see, it''s telling us that
    we can navigate to it using the `https://localhost:3780` URL :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f262c4a5-c942-49e5-8650-df73cce99181.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What we''re going to do now is launch our browser and copy the URL that it
    just gave us. Now it''s asking us to log in. Log in using the username and password
    that you created when you installed the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/570df380-8f65-49b5-9ed0-5b6c77f055c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After logging in successfully, we can see in the following screenshot that
    the first thing it asks us to do is to enter the product key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bea3d545-811b-4e6d-8652-0d3173fcb1a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we know this is a free version, and when we downloaded the tool we had
    to fill out a form. In that form we put our email address, and then they send
    the product key to our email. Go to your email and get the product key and paste
    it. After pasting it, click on ACTIVATE WITH KEY. As we can see, the activation
    is successful. It''s going to refresh now. As we can see in the following screenshot,
    it is just showing us information about the license. Everything is activated and
    we''re good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf179be1-3dde-48a2-ac76-8c9963d72c29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to go to Home from the left menu. We can see in the preceding
    screenshot that everything is empty. It is the home page of the tool. Before we
    start talking about what everything means, let''s go ahead and add a target, and
    then we''ll do a test and we''ll see because this stuff will be filled after we
    do a test. The first thing we are going to do is click on Create and click on Site to
    add a target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a0f54f7a-1be9-4a93-adde-c10b121b9866.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to set the Name to `metasploitable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff9cdaae-58c5-492e-9dee-b7c384d94a61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to go to the **ASSETS** tab and we''re going to add the target.
    The target can be arranged the same way we added it when we were doing the network
    penetration things with Zenmap. We can add a range, or we can add a specific IP.
    In our example, we are actually targeting the Metasploitable machine. We''re going
    to add our target, which is `10.0.2.4`, and we''re going to add this to a group,
    and we''ll call that `test`, our group name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc5ad3b4-a116-4b3f-a65a-ff1244eedd18.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the AUTHENTICATION tab, if the target uses some sort of authentication,
    nobody can access the target unless they need to authenticate with some sort of
    a service, such as an FTP service, a web HTTP authentication, a Telnet, or an
    SQL server. We can pick it from the AUTHENTICATION tab, enter the domain, username,
    and password, confirm your password, and that way the framework will be able to
    authenticate with that service and test the security of your server. Now, our
    server doesn't use any type of authentication. We don't need it. Also, if we are
    targeting a web application that has a login page, for example for users of Facebook,
    then we won't have access to most of Facebook's features unless we log in using
    a certain username and a password. Using this feature here, we can log in and
    then test the security of our target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The TEMPLATES tab is where we select the scan type. It''s very similar to the
    scan type with Zenmap. We''ve seen in Zenmap we had a quick scan, quick scan plus,
    and intense scan. It is the same. Each one of these profiles is different. It
    scans different things. For example, we have the Full audit, which takes a lot
    of time but pretty much checks for everything. Then we have Full audit enhanced
    logging without Web Spider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/07743c1c-8f00-4a40-98dd-03481441ddf5.png)'
  prefs: []
  type: TYPE_IMG
- en: A Web Spider is a tool or a script that finds all the files and directories
    in our targets. The default one is the Full audit without Web Spider. We also
    have network-specific profiles, and we have web audits as well. I really encourage
    you to try most of them, and get familiar with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re only going to try Full audit enhanced logging without Web Spider because
    using them is the same. We will be scanning for ICMP, TCP, and UDP ports. We are
    leaving it the same. We are going to leave the ENGINE tab the same as well, which
    means it''s going to use the local engine that we installed instead of using the
    one that is provided by Rapid7\. In the ALERTS tab, we can set up custom alerts
    so that when a vulnerability is found, we get a notification. The SCHEDULE is
    a really cool feature. Now, say we are working for a company or for an enterprise
    that keeps pushing code, new code every day, or maybe we do a test today and everything
    we are working on is good; our web servers, our programs, your applications, everything
    is up to date and there''s no vulnerabilities in them. Let''s say tomorrow we
    pushed a new vulnerable code, or maybe tomorrow someone discovers a new vulnerability
    with a program that we are using on our web server. We are not secure any more.
    This feature allows us to schedule this test so that it runs every week, or every
    hour, or every month, depending on how critical it is. Go into Create Schedule and
    create the schedule. We can set a Start Date, and we can set the Frequency to Every
    Day, every Thursday, every 26th, depending on what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e4378e1a-e235-4eab-bb10-acffc3889da2.png)'
  prefs: []
  type: TYPE_IMG
- en: We create that schedule, and then the scan will run every interval that we specify,
    and we can even get it to produce a report for us. When we can go over the report
    and see what's changed, or what has been discovered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important part is that we put our target in the ASSETS tab. Then we
    select a template from the TEMPLATES tab. We have both of these tabs configured,
    we''re going to click on Save and Scan, which will save this configuration and
    start a scan for us. As we can see, our asset discovery is in progress, and after
    that we will talk about the results that we got:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8142414b-987d-43be-a9c6-5e6f3eb81bf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Nexpose analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our scan is over and we are on the Assets page, and as we can see in the following
    screenshot we have one asset scanned. We can see that the asset is running Ubuntu,
    and the skill that we need to hack into this asset is Novice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53386dd5-d744-45c6-b175-958e3f784d66.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that Nexpose shows us much more information
    than Metasploit Community, and it's a much more advanced vulnerability management
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that we scanned one target, METASPLOITABLE, and the site is global.
    It's running on Ubuntu Linux 8.04, and we discovered no malware, 175 exploits, and 306 Vulnerabilities.
    Remember that with Metasploit Community we only discovered 1 exploitable vulnerability
    and 8 modules that can be used. Here, we discovered 306 vulnerabilities. We discovered
    many more vulnerabilities and exploits.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that there is a risk factor, and the last time that the scan was
    done. If we scroll down, we can see the OPERATING SYSTEMS that we discovered.
    Again, it''s Ubuntu Linux 8.04. We can see the SOFTWARE that is installed on the
    target computer, not only the services that''s running on ports. We can see actual
    software installed on the target computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cc14a36f-3b93-4367-83c9-484a640f89f9.png)'
  prefs: []
  type: TYPE_IMG
- en: This can be very useful after we hack the computer. After we've managed to hack
    into it, it's very useful to find local exploits that can be used to increase
    our privileges. For example, if we manage to, if we got a normal user and you
    wanted to become a root, then we can use a local buffer overflow to increase our
    privileges or to do other kinds of stuff. These are very useful in terms of post-exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go down, we''ll see the SERVICES that are installed on the target computer.
    Just like Nmap gave it to us, we can see that HTTP is running, DNS, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/166ee2e7-d5a9-4d06-a8bb-a1fdd9534d73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on any of these services we will see more information about them.
    For example, with an HTTP service, we have a description about it, and the ports
    that it''s running on. We can see that HTTP is running on port `80` and on port `8180`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a8b5f62-f01a-4016-8189-b05b75efe9d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s scroll up, and if we want to have a closer look at the vulnerabilities
    we can go to the Vulnerabilities page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/da6abec9-bab6-4788-9b2b-19a52233fe6e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can can see in the preceding screenshot, we have a graph about the vulnerabilities
    categorized based on their risk factor on the left, and on the right they''re
    categorized based on the skill level needed in order to exploit them. As we scroll
    down, we can see a list of all of vulnerabilities, and we can switch between them
    using the arrows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e69f62d-05f8-4f53-83a1-46ff84df827b.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, if there is any malware we will see it under the malware icon, and if
    there is an exploitation we will see under the exploit icon. Now, all of the top
    vulnerabilities listed don't have an exploitation using a tool, but they are ordered
    based on the risk. The listed vulnerabilities are very risky, and as we proceed
    through them the risk decreases.
  prefs: []
  type: TYPE_NORMAL
- en: We can see in the preceding screenshot that we discovered that the VNC password
    is "password". We can go in and try to connect using VNC. VNC is a service that's
    very similar to Remote Desktop. Basically, it will show us the desktop and it
    will allow us to gain full access to the target computer, just like Remote Desktop.
    It's telling us that the password for login is password. It's also telling us
    that there is a back door Shell Backdoor Service running, and we used that already.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at something that can be exploitable. We are going to click
    on the exploit icon to order them by the exploit, and we can see that all of these
    have an M logo, which means that they can be exploited using Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ab3e50e-0b16-424c-bff3-00788655ddcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot we have the Remote Shell Service that
    we can use, and there is the Remote Login Service that can be used as well, which
    we have already had a look at. Let''s click on something that we haven''t seen
    before, for example, Default Tomcat User and Password. In the following screenshot
    we can see a description of this vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8a72270-f011-41b5-b484-bd9058f32a73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, we can see the port that it''s running on, and you can see why it thinks
    that this particular target is vulnerable to this exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/231ad15c-fe65-40fd-a355-273621e940bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we scroll down, it will show you how we can exploit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86925b22-98e5-4708-a49c-a595686c11ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are three different modules that can be used to exploit it, but it doesn''t
    really have to exploit it. Sometimes we just see modules that can be used to verify
    the existence of this exploit, but basically these are the modules associated
    with it. If we click on the Source Link of any Exploit, it will take us to the
    Rapid7 page that we used to see when we Googled stuff:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d83098ee-4b66-4758-ad91-aa1765619b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We see the Module Name, which we can just copy and paste into Metasploit, where
    we can run `show options` and then `use` the exploit the same way that we''ve
    seen it in previous chapters. Scrolling down further reveals the REFERENCES to
    the particular exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/37eb3cd8-e3d7-4c67-839b-14fa7658b9df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom, it''ll show us the REMEDIATIONS on how we can fix this exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3134d833-30df-43f8-957f-4e405136da52.png)'
  prefs: []
  type: TYPE_IMG
- en: For this vulnerability, all we need to do is just change the administrator password
    and not use the default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful thing is in the Reports tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cdb1af1b-f3bc-4cd1-97a2-ebd2cb3c1d25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This framework allows us to generate reports for each scan that we do, and
    there are different types of template for the reports. Inside Create a report, we
    can see that there is an Audit Report that contains a lot of detailed information
    for the programmers or for the technical people. We can use an Executive Report,
    which has less information and is made for the managers or for the top-level people
    that don''t have much experience with technical stuff. We can select any template
    we want and name it anything. We will call this report `metasploitable report`,
    as shown in the preceding screenshot. If we scroll a little we can select the
    format that we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a40b59f3-623b-4ac8-93ba-b999d2f36b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s set to PDF in the preceding screenshot. Then, we are going click on Select
    Scan, select our target scan that we want to generate a report for, and select metasploitable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/581be750-12d7-45f8-b01c-634f51aa4af9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we click on SAVE & RUN THE REPORT to generate the report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c604bb29-ea5e-48a0-bf8a-fd9af6dc771e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also generate reports automatically every time, because we can schedule
    reports, schedule scans, and we can also schedule an automatic report each time
    a scan is done. For example, if we are scanning every week, you can also generate
    a report every week, every time that scan''s done. Now, just download the report
    by clicking on the report, and let''s see what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b4d7a8b2-5c7e-4d45-929d-9bf1e0c1b9b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, it has the date, it has the title,
    it has all the exploits that have been found, but this is the executive report.
    It has small details about the exploits and more graphical stuff to show the executives
    the risks that have been found and how critical they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17843bba-7865-4eda-b62f-a31dbf43bec2.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, Nexpose shows us much more detail
    and it's much more advanced. It's directed towards bigger companies, bigger infrastructures,
    where we need to always make sure everything is up to date, everything is installed,
    and there aren't any exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how we can use the Metasploit framework, which comes preinstalled
    with Kali Linux. We then used this framework for various scans and also studied
    how to analyze the reports generated. We then installed the Nexpose tool and saw
    how to use it to scan the vulnerabilities and get reports in the form of graphs.
    We also learned how to read through it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be covering various client-side attacks.
  prefs: []
  type: TYPE_NORMAL
