- en: Client-Side Attacks - Social Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on client-side attacks, where the victim's action will
    allow us to gain access to their system, which is where the social engineering
    concept is going to be useful to help us to launch an attack. We are going to
    look at a tool called Maltego, which is a very powerful tool for gathering information,
    but we will just look at it's basic applications in this chapter. Then, we are
    going to search all the possible social links that are related to our target;
    we will be using the Maltego tool for this, too. Following that, we are going
    to target the victim via their Twitter and email contacts. As we move ahead, we
    will be using the backdoor file. Then, we will generate an icon for the file –
    it looks more like an ordinary image, but it is a backdoor in disguise so that
    we can get access to the system. We will also learn how to change the extensions
    of the files that can be sent to the target. Finally, we will perform email spoofing,
    which means we will send emails to the victim via a valid email ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Client-side attacks using social engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maltego overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering – linking accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering – Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering – emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering – summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and executing AutoIt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the icon and compiling the payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side attacks – TDM email spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client-side attacks using social engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen really good methods in client-side attacks. These methods
    were good because we didn't really need to ask the client to do anything. We would
    gain access to the target computer if the client updated their system, or, if
    they downloaded something, then we'd backdoor it on the fly. These methods are
    really good because we don't actually need to do something, so the target has
    to do an action, but we don't need to ask them to do something. The only problem
    with these methods is that we need to be the man in the middle, we either need
    to do the ARP poisoning, we need to start our own fake access point, or we need
    to do something to become the man in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we're going to talk about a method we can use if we aren't
    the man in the middle, if the person exists in a remote place where it's not possible
    for us to become the man in the middle. Here, we're going to be talking about
    social engineering. Social engineering is a vast concept; there are so many attacks
    that we can do because it all depends on the target. Sometimes, we don't even
    need any technical information to do these kinds of attacks, so it all depends
    on our target and how we are going to build a strategy to attack that target.
    We are going to be gathering information in order to get access to victims' systems.
    We need to gather as much information as we can about our target, about what websites
    they use, who their friends are, and so on; anything, any piece of information,
    can become really useful to us in social engineering.
  prefs: []
  type: TYPE_NORMAL
- en: We will first be looking at how to gather information about a specific person.
    So, all we have is just a name, or a Facebook account, and any information we
    can gather based on that name. After that, we're going to start building a strategy,
    and we'll see how we can use all the information that we gathered to build a strategy
    in order to build an attack and gain access to the target computer system, and,
    at the end, we're going to create our backdoor. We're going to make a backdoor
    that's acceptable to the target user, so they'll probably use it, and we'll also
    see how we can pretend to be one of their friends and get the target person to
    run the backdoor. We are actually going to be asking them to run a specific file,
    instead of the methods that we've seen so far where the user voluntarily updates
    their system or downloads a certain executable.
  prefs: []
  type: TYPE_NORMAL
- en: Maltego overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll look at a tool that we're going to be using often in
    this chapter. This tool is great for information gathering and it allows us to
    gather information about almost anything, we can gather information about people,
    websites, computers, companies, phone numbers, everything really; everything we
    can think of, we can add to this tool and try to extract information related to
    that entity. The tool is called Maltego, and it's going to become our best friend
    when it comes to information gathering. This tool can be used to gather information
    about anything, but using the tool is the same, so it doesn't matter whether our
    target is a website, a person, a phone number, or a company. Only the information
    that we will be getting is going to be different. In this section, we're going
    to have a quick overview of this tool, and then we're going to be using it more
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to run the tool, just go to Show Applications, then type `maltego` in
    the search bar, and we can see that a tool called maltego appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/be4f8ac1-f6da-44eb-aef3-bbf0ceef228a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first time the tool is used, we will be asked to log in with a username
    and a password; if we don''t have one, we will have to register through the wizard.
    We just have to create a new username and new password, they''ll send us an activation
    link, and then we''ll be able to log in and use the tool. Once we log in, it will
    offer us one of the already made templates for gathering information. We are not
    going to use any of those. In the following screenshot, we can see the home page,
    and from here we can add more transformers to the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bfc243f-82fd-4513-b61c-19486c87dbd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, transformers are plugins that allow us to gather information about
    specific things. We can just click on Install on any of available options that
    we can see in the screenshot and it will add more transformers or more things
    that we can do with Maltego. A lot of these extra transformers will ask us to
    log in with a username and a password or use a certain API.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we''re just going to use the built-in transformers, and we are going
    to go to the entity selection menu on the menu bar to create a new graph and open
    a principle workplace for Maltego:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68e4913d-ccab-4555-b4c0-5ce039629320.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, in the middle we have our graph,
    where we are going to be seeing our entities and information about entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0e47a3e7-5bfb-4e79-b9e7-c0833bd7c62f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Overview tab, we have an overview of the graph, in Detailed View, we
    have details about each entity in the graph, and in the Property View tab in the
    bottom right corner, we will be able to change the properties for each of these
    entities. All these tabs are empty now, but once we start using the tool, it'll
    start making sense straightaway. In the top left corner, we have our entities
    in the Entity Palette tab, where they are organized into categories depending
    on the type of entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we click on Infrastructure, it will allow us to add a domain
    name; we can add MX records, URLs, or a website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8db635b-f0ac-4dee-b4a6-4c7a9beb0387.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can just drag and drop the entity that we want; for example, if we want
    a website, just drag and drop the Website entity in the graph editor window and
    now we have a website in the graph. From here, we can start gathering information
    about the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/975fa72e-0d5a-46d4-be77-1edd160925ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a lot of different types of entities. We can also add a device from
    Entity Palette. For example, if we go to Personal, we can actually just add a
    Person entity, give their first and last names, and then we will be able to gather
    information about this person. We can also add a phone number and start gathering
    information about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/28a9bbf5-6271-45c3-afc4-1bddf34db423.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the really amazing categories here is socialLinks, which will allow
    us to add Facebook entities, while also allowing us to add GitHub, Foursquare,
    LinkedIn, Instagram, and other social networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e29c6eee-5a02-42f7-a9f6-269d2ed55d81.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we add them, we will be able to gather information about these entities,
    and obviously this information will really help us when it comes to trying to
    exploit that person and hack into their system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we add the entity, as we can see in the following screenshot, if we click
    on the website, for example, we are just going to go to the Property View tab
    and we can see that we can modify the properties for the selected website. Suppose,
    for example, the first thing that we need to change is to put the name of our
    target website in the Website parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/127db7b5-6c36-4f3d-8b4c-0f7be0eb9600.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we do that, we can right-click the website entity on the graph and select
    what type of information we want to gather. In the following screenshot, we can
    see all the possible options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52856373-b42c-44b6-9ddb-35ba9999cbf3.png)'
  prefs: []
  type: TYPE_IMG
- en: We are not going to run any transformers in this section; we're going to do
    this in the next sections. For now, we are just showing us a quick overview of
    the tool, how to add entities, how to run transformers, and what we mean by all
    of these things. A lot of this is still a bit vague, but we're going to be using
    this tool a lot in this chapter, and it's going to become very easy for us. As
    we know, we can use it to gather information about anything, and it's really going
    to enhance our social engineering skills.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering – linking accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to target a person. We are going to start
    with just a person''s name, and then see how we can gather information about that
    person and build up an attack strategy. As we do that, we''re also going to look
    at more of Maltego''s features and how to configure a few more settings. So, we
    are going to start a new graph by clicking on the plus sign, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a419fb8-b9b8-4087-8c62-e528dee3a4ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the Entity Palette, search for a Person entity under the Personal section,
    and then drag and drop the Person entity to the workspace. We are going to assume
    that we have a target and we know their name, so the first name is `Zaid` and the
    surname is `Sabih`. We''re going to go to the Property View tab and set the First
    Names property; just double-click it. We are going to set it to `Zaid`, and then
    we are going to set the Surname property to `Sabih`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7eaf300-449b-4d68-b3d1-3bd8dbb5167b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see what information can we gather about the entity created. Again,
    all we have to do is right-click the entity and see what we can get. So, we click
    on the PATERVA CTAS category, and we are going to go to All Transforms; we can
    get associated emails, we can try to get a phone number, and we can try to get
    a Twitter account; we can try all of these. For now, we are going to try to get
    a website, or websites, for this person:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f71f14f1-a84f-4983-97a7-9442299ea183.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it will ask us whether we want to look for a specific domain name. We
    are going to assume that we know nothing, so we are just going to put a space
    between two websites, in both entries. That just means looking for any websites
    that are associated with this person:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d980eb2-45a8-4d95-8fb8-a428c3833501.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking Run!, we should get a number of websites, and all of the websites
    are associated with Zaid Sabih:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2b51c427-b61f-45f4-b8a6-4425b7cf8f83.png)'
  prefs: []
  type: TYPE_IMG
- en: Association websites
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, that doesn''t really mean that these websites are actually associated
    with our target, because there could be another person named Zaid Sabih, so we
    will have to go to each one and see which are actually related to that person.
    For example, we will double-click on the Facebook website to see the associated
    information. In Properties, we will see that we have the Facebook URLs that are
    associated with that particular name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/32365003-7d76-4b6b-a6f6-f70200dcfbca.png)URLs associated with the
    target'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even copy the URL to a text file to read it better, and we can see in
    the following screenshot that we have three profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/07210101-ec0a-4272-b0bf-6b9f62fedfb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in a real-life situation, we should go into each of these profiles and
    see which one is actually related to our person. In this example, we are not going
    to do that because three of them are actually not related to Zaid at all, so this
    is really not useful. In this case, we will just come back, move to the next entity,
    and see what's useful.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to delete the ones that are not useful because they'll
    just make it harder to look through things. Just click it, press Delete, and that
    will delete it for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our example, it''s all related to our target. We can double-click each
    one of them, go to Properties, look for the URL, and open it in our browser. When
    we do that, we will get the information related to that person, and it will help
    us to form some sort of an attack strategy, or help us to get even more information.
    For now, because we have already looked at all of them, we are going to focus
    on one of them, which is the Udemy link, that is, the information related to our
    target on Udemy. We are going to double-click as we did before, go to Properties,
    get a URL, copy that URL, and open it in our browser. We can see that the URL
    is related to our target person, and we can see that it''s leading us to a course
    taught by our target. Although this information is not really useful, we can now
    see that the target person is teaching online courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/686efa76-2663-4162-8a31-8d95b30982aa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go back and look at the other two URLs. If we browse the second URL, we can
    see it is showing us the profile for the target person:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ab47f12-f386-488f-bd9b-efd68cd9a0cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By browsing the URL, we can gather information about the person. We can check
    all the websites to gather more information about them. Now, we need to keep in
    mind that we are setting our target—which is me, a person with knowledge of computers
    and information technology. When we are targeting normal companies or normal people,
    it will be easier to get effective information. If we look at their YouTube, LinkedIn,
    and Facebook profiles, we really won''t get much. Even if we click on their Facebook
    profile, we will see that Facebook won''t lead us to anything, we need to log
    in, and even after logging in, we won''t get too much useful information. What''s
    useful is if we go to their blog and go to the ABOUT section; what''s useful here
    is that we have the email address of the target person, and we have their Twitter
    account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9f3e8ee3-7509-40f3-bcf8-eb2d8666c352.png)'
  prefs: []
  type: TYPE_IMG
- en: This information was not included on Udemy, and now we have two really useful
    pieces of information. In the next section, we'll see how we can use this information
    to gather even more info about our target, and hopefully be able to build up an
    attack strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering – Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now we have the email address of our target person and their Twitter account.
    Let's start with Twitter and see what we can get from that. Open the Twitter account
    for the target person, copy the link, and we're going to come to our workspace,
    Maltego to add a Twitter entity. We're going to add a Twitter entity from the
    Social Network category. Maltego has an entity for Twitter, it's just not being
    shown so, let's see how to access these settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Entities | Manage Entities, and we can see a list of entities that we
    can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/56963fa7-879e-44b1-b1d3-95bb8ca5dbba.png)'
  prefs: []
  type: TYPE_IMG
- en: Entity list
  prefs: []
  type: TYPE_NORMAL
- en: All of these entities are not added to the Entity Palette; the one we are interested
    in right now is Affiliation – Twitter, the membership of the Twitter social network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the three little dots that appear on the right, it will open
    a window, as seen in the following screenshot. We are going to go to Advanced
    Settings, check the box that says Palette item, click on OK, and close the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bc03c7f-e473-402f-8914-fdf2435ec5c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit Entity
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the Twitter entity should be showing up in the Entity Palette. So again,
    we are going to use this as a normal entity. Just drag and drop it, we are going
    to set the name of it in the Properties section, which is going to be `Zaid`,
    we''re going to put the URL in the Profile URL tab, and our user ID is `Zaid_alq`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8810e64-a22d-4958-8bbc-01f7d8b3b720.png)'
  prefs: []
  type: TYPE_IMG
- en: Entity Palette
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can gather information about the target person based on their Twitter
    account. Right-click the entity and let''s see what we can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46677b86-fde0-4e54-8deb-dae55fa153ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Information about the target
  prefs: []
  type: TYPE_NORMAL
- en: So we can get their tweets, we can see the tweets that they sent to people,
    we can transfer this, we can get more details, and we can get their followers.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we really want to get is their friends so that we can actually target
    them through their friends. So again, click on the Run button in front of the
    To Twitter friends option. This particular transformer requires us to log into
    Twitter. As we can see in the following screenshot, Maltego is telling that us
    we have to log into Twitter to be able to gather information about the target
    person:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4bdeb697-2222-4347-a8d0-ad670f26a8fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Information log
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, click on Sign In, and log in with a username and
    a password. Now it''s asking us whether we want to authorize this app. We are
    going to click on Authorize app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b85d60af-f999-4e01-ba20-827670905be6.png)Authorize App'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we should be logged into Maltego, go back to Maltego, and when we come
    back to the tool, close the sign-in window and it should start to look for friends
    on the target Twitter account. As we can see, we managed to get the people who
    are friends with Zaid, and we can see some really interesting information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/968afd46-ef21-448f-8bbc-9269f118d660.png)'
  prefs: []
  type: TYPE_IMG
- en: Victims connections on Twitter
  prefs: []
  type: TYPE_NORMAL
- en: 'Websites are not very useful. We can pretend to be a person from one of these
    websites and there is a high chance that Zaid will respond to it, but it''s not
    as good as using their contacts. So delete these websites, and now we can see
    that Zaid has three friends, and we can use all of them. Right-click on them to
    ascertain more information about them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d4cab0a-d301-43d4-80e0-b2efd86dbee3.png)'
  prefs: []
  type: TYPE_IMG
- en: Detail information about the connections
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll go back to where we were. So, we have gathered information
    about the Twitter account and now we'll see how to gather information about the
    email of the same Twitter person.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering – emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'OK, now let''s see what can we get using the email of the target person, which
    is `zaid@isecur1ty.org`. In Maltego (and we are going to add a new entity of an
    email address), go to Personal | Email Address, drag and drop it into the graph,
    and set Email Address to `zaid@isecur1ty.org` from Properties, as can be seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec85c571-b59e-4735-9b24-481327b6bfad.png)'
  prefs: []
  type: TYPE_IMG
- en: Properties
  prefs: []
  type: TYPE_NORMAL
- en: We managed to get an email address from the target's blog. Using the email,
    we're now going to see what information we can get.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the entity as usual and we will see a list of Run Transform(s).
    For our example, click on To Domain [DNS] and click the Run button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5812371c-d837-48e8-bad4-8fdf538469b7.png)Run Transforms list'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that we got a domain name, which is `isecur1ty.org`. From the following
    website, we are going to try to get the email addresses associated with the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3460298b-a760-45f8-92ea-32194a655aeb.png)Domain name'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the website, click on Email addresses from domain, and click
    on the Run All button to run all the transformers that will get the email addresses
    associated with the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/98d1ea83-5ec8-420a-969c-ade3a3e247d7.png)Run Transforms'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have `m.askar@isecur1ty.org`, which is the same person we found on the target''s
    Twitter account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d58cd76f-04be-4ec3-b4cb-7b00d083cb1d.png)Connections on twitter'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing that we can do from the domain is transfer to a website, right-click
    on the website, and click on To Website [Quick lookup]:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46892c9b-9719-4746-8d62-48a318e40278.png)Transfer to website option'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6f1424fd-cc6f-4948-acd0-ade2a9892048.png)Websites associated with
    the target'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the website, we''re going to look for email addresses associated with
    it, right-click on the website, click on Mirror: Email addresses found, and then
    click Run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62ac7c1c-2639-4570-83ba-afc6df663362.png)'
  prefs: []
  type: TYPE_IMG
- en: Extracting Email-ids of connections
  prefs: []
  type: TYPE_NORMAL
- en: 'Once complete, we get two useless emails, so we are going to delete these two,
    leaving us with two good ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/962cd565-f62f-49ea-b7cd-678a520dc5b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Email-ids of connections
  prefs: []
  type: TYPE_NORMAL
- en: So we have `mustafa@albazy.com`, which is the same person that we found on Twitter,
    and we have `info@isecur1ty.org`. Now again, we can just keep gathering more information
    about our target. We have enough information to start building up an attack strategy
    on the target person. In the next section, we'll discuss all the info that we
    gathered and we'll come up with ideas on how we can attack this person and hack
    into their system or into their accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering – summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's see how we can build up an attack strategy against our
    target, which is a person named Zaid. Before we move ahead, we will organize the
    workspace so that we can come up with ideas. For our example, we are going to
    keep only the useful information such as Udemy. We are going to put Zaid, who
    is our main entity, at the top, and then just click and drag an arrow from the
    email address so that we know that Zaid is associated with the `zaid@isecur1ty.org` address.
    Zaid is associated with the `zaid@isecur1ty.org` email, which led us to `isecur1ty.org`.
    And then we're going to add another arrow from Zaid to his Twitter account, so
    that we know that this Twitter account is associated with this person, and we
    have an entity here of Udemy. We also know that Mohammed Askar's email is `m.askar@isecur1ty.org`,
    and this email is associated with Mohammed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, if the email is `@isecur1ty.org`, then this person is probably is associated
    with `isecur1ty.org` as well. If we do a Google search, we will see that Askar
    is the admin of `isecur1ty.org`. So again, we''re going to include an arrow from
    isecur1ty to Mohammad. We are going to do the same with the Mustafa entity because
    we can see we have his email, `mustafa@albazy.com`, and we''ll also associate
    isecur1ty with this person. So now, as can be seen in the following screenshot,
    our target is Zaid, and we know Zaid uses Udemy and teaches courses there. We
    were also able to find Zaid''s blog, and we were able to see his YouTube and LinkedIn
    profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/842ca458-19a4-4a54-bfc4-f6dd8bc54c4b.png)Connections associated
    to the target.'
  prefs: []
  type: TYPE_NORMAL
- en: This arrangement can make us think of so many ways to attack Zaid; we can look
    at how active he is on Udemy and pretend to be a person from Udemy. We can pretend
    to be an admin from Udemy and send him a program, for example, and tell him this
    is our new beta program that we're only giving to special instructors. This way,
    Zaid will feel privileged because he's getting something that other instructors
    are not getting, and he'll run that file. And once he runs that file, which is
    a Trojan, it will create a backdoor, a keylogger, or a program that will steal
    his passwords, or allow us to do anything we want on the target computer. As mentioned
    earlier, we're not going to be studying technical things in this section; we'll
    look at that in upcoming sections, so we'll know how to do it. When we say we'll
    send him a file that looks like a normal file, we'll actually be able to do that,
    and this normal file will be a normal program, but, in the background, it will
    do what we tell it to. We can also pretend to be from YouTube, from WordPress,
    or from Udemy, and ask Zaid to reset his password and give him a link that has
    a login page exactly the same as the login page of Udemy or YouTube. Once he puts
    in their password, we'll actually get that password. So the possibilities are
    endless here, and we'll talk about ways of doing all of that later on.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the connections that we can see with isecur1ty, we can see that this
    person has a lot of connections with the isecur1ty company. We can see that he
    has an `@isecur1ty.org` email. Again, this email is really useful because this
    is how we're going to be communicating with Zaid. We can also communicate with
    him through Udemy by sending him messages, but it is obvious that his friends
    don't really communicate with him over Udemy. So we should target Zaid using his
    email. And we have his friends, such as Mohammed, and we can see that there are
    many connections between him and Zaid. They're both friends on Twitter, they're
    both active on isecur1ty, and they both have `@isecur1ty.org` emails. So this
    makes us think they're not only work colleagues, but that they're probably friends
    as well. By exploiting this friendship, we can send stuff to Zaid asking him about
    anything really; we can show him pictures of a car that we want to buy, or we
    can send him PDFs, because we know that both of these guys are interested in computer
    security – they're running a security website. If we send him a PDF, when he opens
    the PDF, it'll run the file that we want it to run on the system, which will give
    us access to Zaid's system.
  prefs: []
  type: TYPE_NORMAL
- en: When we send an email, we will be able to send an email that looks exactly as
    if it's coming from Mohammed, and we can do the same with Mustafa. So we can send
    stuff to Zaid, we can send him things that they're both interested in, we can
    send him pictures, or links asking him to log in and do something; the possibilities
    are endless when it comes to social engineering. Not only that, let's say we tried
    everything and we couldn't hack into Zaid's system. We pretended to be all of
    these people and tried everything that we could think of, and we still couldn't
    reach Zaid's system. This is not the end of the world; instead, we could try to
    hack into one of his friend's computers. So we can try to hack into Mohammed's
    computer or Mustafa's computer. From there, we'd try to get into their Facebook
    and then communicate with Zaid via Facebook, because we can't really send a message
    that looks like it's coming from Mohammed on Facebook, we can only do that with
    emails, but again, we can hack into these guys' Facebook accounts and then try
    to hack into Zaid's. Why not hack into their isecur1ty accounts? We know these
    people are admins; they have `@isecur1ty.org` emails. We could hack into their
    computers and hack into `isecur1ty.org`. Zaid definitely browses isecur1ty, so
    embed a backdoor in there or change one of the files that's hosted on isecur1ty
    into a backdoor, and then once Zaid downloads it or uses it, we will be able to
    hack into his computer.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to send these fake emails, create these
    backdoors, create these keyloggers, and all that cool stuff. For now, I just wanted
    to show how powerful Maltego is and how we can use it to gather information about
    anything. We started with nothing but a name, Zaid Sabih, and we were able to
    gather information about his websites, his blog, his YouTube, friends, and emails.
    Again, this person is a techie, a person who is interested in information technology,
    so he's very careful about what he shares, but we were still able to gather enough
    information to build up an attack strategy. If we do this with a normal person,
    we will be surprised by the amount of information we can gather about them.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and executing AutoIt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to combine the backdoor that we created
    with any other file type, so that when executed, it will display an image, a PDF,
    a song, or something that the target person is interested in. This way, we will
    be able to social engineer them to run our backdoor and they will see something
    that they trust, but our backdoor will be running in the background. We''re going
    to do this using a download and execute script that will basically download the
    backdoor, download the file that the person expects, run the files that the person
    expects, and run the backdoor in the background. The download and execute script
    is included in the resources, which is available at the book''s GitHub repository.
    After downloading the file, open the file and we can see the code used inside
    the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The script is programmed so that we can use it to download and execute anything,
    and any number of files. So, all we have to do is enter the links or the URLs
    for the files in the `Local $urls` parameter, and separate the links by a comma.
    So we can enter URL, and keep going. We can use this script to download and execute
    two executables, three executables, or any number of files we want. Now, we are
    going to put in the file that we want the target person to see. This file needs
    to be available online and uploaded on a direct link so that it can be downloaded
    from that link. For this example, we are going to use an image, but we can use
    any other file types, even get them to open a PDF, or anything else that we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore browse Google Images and look for an image. Click and open the image,
    right-click on the image, and click on Copy image address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9e134fce-89db-4165-905d-0032b0604e21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that when we do this, we get the image itself through a direct URL on
    the address bar, so we can see that the end of the URL is `.jpg`. When we access
    the image, there will be no ads around it; all we can see is the file itself.
    The files included in our script all need to have a direct URL. Paste the URL
    into the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next file that we wanted to be downloaded and executed is our backdoor.
    We are going to insert a comma and then we are going to put in a direct URL for
    our backdoor. For our example, that URL is stored at `http://10.20.14.213/evil-files/rev_https_8080.exe`.
    If we just paste that URL, we can access the file and download it directly. This
    is very, very important; the script will not work if we don''t use direct URLs.
    As we can see, the script is very simple, all we have to do is insert the URL
    for the first file and then we put in a comma, which is important again. We have
    to separate the URLs by a comma, and then we put in the URL for the second file.
    As mentioned earlier, if we want to download more files, or download more backdoors
    or more evil files, all we have to do is insert another comma and put in the next
    URL. The `Local $urls` parameter should now contain the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, all we have to do is compile the script to an executable, and we are going
    to learn how to do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the icon and compiling the payload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we worked on our script. In this section, we are going
    to learn how to compile it to an executable and how to change its icon. The script
    is written in a scripting language called AutoIt. AutoIt doesn''t come preinstalled
    in Kali, but it gets installed when we install Veil. Since we''re using a Veil
    backdoor, there''s no way we could have gotten to this point without having installed
    Veil. That''s why we are not going to cover how to install AutoIt; we can just
    download it and run the installer using Wine. So, AutoIt should be already installed
    for us by now, and all we have to do is rename the `.txt` file and change the
    extension from `.txt` to `.au3`. Then, search for the program in Kali by typing
    `compile` and we will see that we have the application that will compile AutoIt
    scripts for us, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/395ed547-22a8-4d92-bf6b-e0230866e930.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing it asks us for is the source AutoIt script, and that''s the
    file that we made. So we are going to click on Browse, navigate to the `.au3`
    file, and click on Open. We can also set where it''s going to be stored, but we''re
    just going to keep storing it in Downloads, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1200156-93a0-4eb3-80ed-62524522dd1f.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we can change the icon and use a custom icon by uploading a `.ico`
    file under Options. To do this, we'll have to first download an icon that represents
    our file.
  prefs: []
  type: TYPE_NORMAL
- en: 'If our file was a PDF file, then just visit the Icon Archive website ([http://www.iconarchive.com](http://www.iconarchive.com)),
    and search for and download a PDF icon from the site. However, in our example,
    we are trying to use an image as the file that the person sees. Windows usually
    shows a preview of the image; it doesn''t really show a specific icon for images.
    So we want to convert the image to an icon, and to do that, we go to the RealWorld
    Designer site ([http://www.rw-designer.com/image-to-icon](http://www.rw-designer.com/image-to-icon)).
    Download the image that we want to make an icon of, upload it to the site by clicking
    Browse, convert it from the site, and save it in the `Downloads` directory. The
    following are the details required for Online Icon Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/421db235-27f6-46ba-b465-e021ba50c889.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, go back to the compiler and set the options—the icon—(we are going to
    click on Browse), and select the icon that we just downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5bf34b7e-98f1-4619-948b-254587a73f1d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All the options are set. All we have to do is click on Convert, and the file
    will be generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0cb06aa4-7d25-43bc-8bb5-287f4c53f659.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on OK, and close everything. Now we have the executable in `.exe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e091bb5d-a53f-4f5d-88bd-55a8969cd662.png)'
  prefs: []
  type: TYPE_IMG
- en: So, when we are sending it to the target, we want to be sending `.exe`, the
    executable, as we can see in the preceding screenshot. Now, copy the executable
    into the web server at the `/var/www/html/evil-files` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before downloading the file to the target computer, we want to listen for incoming
    connections from Metasploit. We learned how to do that in [Chapter 10](e8d786b6-f25c-4005-932d-42b7c2948972.xhtml),
    *Gaining Access to Computer Devices*. For now, we are only going to run `exploit`
    to wait for incoming connections. Now that everything is ready, go to the Windows
    machine and download the file. The file is going to be available at `http://10.0.2.15/evil-files/autoit-download-and-execute.exe`.
    Visit the link and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9696310-49e0-42dc-a884-c11d6f10821a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, we have a file that has an icon,
    which has a preview of the image, so it''s very representative. If we double-click
    this file and run it, we see that we get an image that corresponds to the icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/136b42f0-aea4-4785-803e-5c9497f87df8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go to the Kali machine, we will see that we encountered a Meterpreter
    session and, basically, now we''ve hacked into the target computer and can do
    anything that we want to the target. So, just to confirm, we are going to run
    the `sysinfo` command and, as we can see in the following screenshot, now we''re
    inside the target computer, and we have full access to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8cc80e23-77de-4341-825d-9595d17ffd9f.png)'
  prefs: []
  type: TYPE_IMG
- en: We managed to do this with a file that has an icon of an image and actually
    displayed an image pertaining to the target person. As mentioned previously, this
    method can be used to combine our backdoor with an image, with a PDF, with a song,
    or anything that the target person is interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Changing extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we look at the backdoor, or the Trojan that we've generated so far, all it
    has is an icon that represents a file that the target person is interested in.
    When it's executed, it shows a normal file. And, at the same time, it's going
    to execute our code in the background, which will allow us to hack the target
    computer, or do whatever we want. The only problem with this file is that if we
    look at the end of the file, we can see that it has a `.exe` extension. In most
    cases, the target probably won't see the `.exe` extension because Windows is configured
    to hide it, but if it's not hiding it, then it's obvious that this file is an
    executable because it ends with a `.exe` extension. In this section, we are going
    to focus on how to spoof our Trojan and change it to something that corresponds
    to the file. If we're trying to make our backdoor look like a PDF, we can make
    it look like it has a `.pdf` extension; if we're trying to make the file look
    like an image, we want to make its extension look like a `.jpg`, a `.png`, or
    an extension that represents the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we''re trying to make it look like an image, which means it should
    have a `.jpg` extension. To do that, we''re going to use a right-to-left override
    character. We are just going to copy and paste it into our text editor so that
    when we are modifying things, it''s clear to us what we are doing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4689cda-6f7e-4aeb-b443-ddc3c3195be1.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see the new filename that we want to use,
    which is `Image`, and this is going to have a `.exe` extension. Now, instead of
    `.exe`, we actually want to have `.jpg`, but that's not possible because if we
    do that, the file is not going to be an executable. To change the extension, we
    are going to try to get the text to be read from right to left, using a right-to-left
    override character. Because the text is going to be read from right to left, we're
    going to type `gpj` after the `Image` filename, but we're going to spell it from
    right to left. Again, this is just the extension that we want to use, but we're
    spelling it from right to left, so we're spelling it gpj instead of `jpg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want to put in a right-to-left character. When we put that character
    in the text, anything that comes in after that character will be read from right
    to left, so all this is going to be flipped and the `Imagegpj.exe` filename is
    going to be called `Imageexe`, and `gpj` is going to be read from right to left,
    so it''s going to be `.jpg`. Let''s perform it and we''ll see what we mean by
    reading from right to left. To get that character, we''re going to search for
    `Characters` in Kali and open the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4aee29f-1092-40ab-80b3-b40480a8f3ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Search icon and search for the right-to-left override:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c450333a-fb11-4d82-a598-bbd2d3fe9e91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on it, we will see a button that will allow us to copy that character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b2f081e6-ee6e-4527-b325-f8bbd9e0d389.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Copy Character and that will copy the character for this example.
    Now, go back to editor and paste the copied character in front of `gpj.exe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f28e3d56-1d82-4c41-b270-cb351be5db0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the preceding screenshot, if we paste it, everything is being read
    from right to left and the filename is going to be called `Imageexe.jpg`. If we
    are using this as a book or as something else, we want to think of a name that
    ends with "ex". Anything that ends with "ex" will be a good name to use. So, we
    have our name now and we are just going to copy the new name from the text editor,
    and then we are going to rename the backdoor file and we will have a file called `Imageexe.jpg`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/78f49aea-2770-486c-ac6d-e87b2f05c383.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can send the new file to the target, but we don''t want to send it
    like this because some recent browsers are removing the right-to-left override
    when downloading the file, so what we are going to do is compress the file to `Imagejpg.zip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/978eaa2d-db4d-4a5a-85cc-565106127bad.png)'
  prefs: []
  type: TYPE_IMG
- en: This way, when the file is downloaded by the browser, it will not replace the
    right-to-left override. Copy the content, paste it into the `evil-files` folder,
    and then we're going to download it from the Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will listen for incoming connections (we have already done this, so
    if a refresher is needed, go back to [Chapter 10](e8d786b6-f25c-4005-932d-42b7c2948972.xhtml),
    *Gaining Access to Computer Devices*). Go to the Windows machine and download
    the file, which is located at `http://10.0.2.15/Imagejpg.zip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6af4061-3a6b-4866-907a-3eb251da6cdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Uncompress the downloaded file and, as we can see in the following screenshot,
    the file has a `.jpg` extension. It has an image icon and, if we double-click
    it, it will actually show us an image, but, at the same time, it''s going to execute
    our backdoor in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/94eaea37-8136-44d7-8610-7d3b54513cb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, if we go to the Kali machine, we will get a session from that computer,
    and, just to confirm this, we are going to run `sysinfo`. As we can see in the
    following screenshot, we are now inside that computer and we have full control
    over it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e51ee35f-b074-4bae-8ae0-2a8df9095655.png)'
  prefs: []
  type: TYPE_IMG
- en: We managed to do this using a file that looks and functions exactly like an
    image. This method can be used to make the file look like any other file type,
    so we don't have to make it look like an image; we can use this method to make
    it look like a PDF, a song, a video, or anything that we want. We can use the
    download-and-execute payload to combine the backdoor with any file, and then use
    this method to change the file extension to any file extension we want.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side attacks – TDM email spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how we can backdoor any file and make it look like a document, a
    song, a program, or an image. Our example was an image, but we can do it on any
    file. So, we should be gathering information using Maltego and then target the
    person based on the information gathered. For example, we can pretend to be tech
    support and ask the target person to install an update and combine our backdoor
    within an executable, or we can just pretend to be a friend or a colleague and
    ask the target person to run a certain document or a PDF; the possibilities are
    endless. In this example, we are going to pretend to be a friend and we are going
    to ask the target to open a picture of an image, telling them that we are thinking
    of buying that car. We are going to use the backdoor that we created in the *Changing
    extensions* section and use an image of a car instead, and then we are going to
    contact our target asking them what they think of this car.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go back to the graph that we created with Maltego and look at the screenshot
    from the *SE summary* section where the information is displayed. By browsing
    his Twitter, we managed to see that our target has a friend called Mohammed, and
    when we went on his email, we saw that the same person has an email address of
    `m.askar@isecur1ty.org`. So, this person came up twice, on the email address and
    on Twitter, so our target probably has a good relationship with this person and
    there''s a high chance that Zaid will open something from them. So we can contact
    our target on Twitter pretending to be someone who knows Mohammed, or we can contact
    them by email. Contacting them by email has a huge advantage because we can pretend
    to be `m.askar@isecur1ty.org`, and we can send an email that would look exactly
    as if it came from Mohammed Askar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/32fdb89d-3325-4ba5-a877-9174dc1e67b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image that is downloaded from the attachment sent through the mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, that''s what we''re doing. Let''s go to Google and search for a mailer.
    We can host our own mailers on our own web service or we can use Google to look
    for mailers. I''ve tried a few of them and could send anonymous emails with the
    most secure mailer. So we are going to use [https://anonymousemail.me/](https://anonymousemail.me/);
    it asks us to put in our name, since we are pretending to be Mohammed, so we are
    going to put it as `mohammed`, and then it will ask us for the email, that is,
    where the email will be coming from, and we''re going to set it as `m.askar@isecur1ty.org`, so
    the message we''re going to send will look as if it''s coming from this email.
    We are just going to use a test email that we set up. We can also set an option
    for where the message will go if the person replies to that message. We are going
    to leave that empty, set the subject to `Check out this car`, and then set an
    informal message, because we think that this person is a friend. The following
    screenshot shows the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6447adb-1b68-495a-b017-c0b9eb981132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can send an attachment with the email, but, most of the time, attachments
    don''t always get sent successfully, so it''s recommend to upload the backdoor
    on Dropbox or Google Drive and then send a link to the target. Always shorten
    the shared URL to make it look shorter and more acceptable. We can do that by
    Googling a link-shortener, so we''re going to use bitly.com, a very famous service.
    All we are doing now is social engineering, just making the message look more
    acceptable. Copy the shortened link and send it in the message. And that''s it,
    we are done, so send the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6be2d38-f08b-41a2-9dc0-c0717175fee7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have already logged into our test account and we will see that we got an
    email from a person called Mohammed. If we hover over it, we will see that it''s
    coming from Mohammad Askar from `m.askar@isecur1ty.org`, and can even see the
    picture of the guy, even though we didn''t send the email from his email and we
    don''t know his password. We actually just sent it from an anonymous mailer, but
    it looks exactly as if it came from him, and he''s our friend, so it''s highly
    likely that we will open his message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04058657-47de-444c-bb87-e8691cc06704.png)'
  prefs: []
  type: TYPE_IMG
- en: Spoofed email received
  prefs: []
  type: TYPE_NORMAL
- en: 'The message is just telling us that he is going buy a car, and is asking us
    to have a look at it and what we think of it. So we will probably click on the
    link. And now the picture has been downloaded, so if we just open the picture,
    called `gtrexe.jpg`, it actually has the icon for the car, hence the extension
    is still an extension for an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/480604f7-83f8-4bad-a055-fb01ddb0656c.png)'
  prefs: []
  type: TYPE_IMG
- en: Backdoor with a .jpg extension
  prefs: []
  type: TYPE_NORMAL
- en: If the target runs the file, we will have a Windows command shell where we can
    do anything we want on the target's system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we studied how we can perform client-side attacks using social
    engineering. We used social engineering techniques to again access to the victim's
    machine by making him actively participate in actions that help us to gain control
    over his system. We studied an important tool, Maltego, which is very powerful
    and helped us to collect important information about the target's social life;
    we could stalk his all social media accounts. Using this information, we planned
    ways whereby we could attack the target. We even learned how to create customized
    icons for files to act as backdoors for us to attack his system.
  prefs: []
  type: TYPE_NORMAL
- en: Employing information from Maltego, we used the email ID of a friend of the
    target to send a message that contained a backdoor that would activate once the
    victim opened the file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be studying the BeEF browser tool to attack the
    target system and detect Trojans.
  prefs: []
  type: TYPE_NORMAL
