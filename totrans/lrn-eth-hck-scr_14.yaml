- en: Attack and Detect Trojans with BeEF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the BeEF tool and how to hook it using
    a **man-in-the-middle framework** (**MITMf**). We'll then learn how to steal a
    username and password by redirecting the user to a dummy website where we will
    capture all their credentials. Then, we will gain access to the Meterpreter section
    using BeEF. Lastly, we will learn how to detect Trojans both manually and with
    a sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The BeEF tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeEF – hook using a MITMf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeEF – basic commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeEF – Pretty Theft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeEF – Meterpreter 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting Trojans manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting Trojans using a sandbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The BeEF tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this and the coming sections, we're going to have a look at a tool called
    BeEF. The **Browser Exploitation Framework** (**BeEF**) allows us to run a number
    of commands and attacks on a hooked target. A hooked target is basically a target
    that executes an URL or a JavaScript code given to us by BeEF. Once the target
    is hooked, we'll be able to run all the commands that BeEF allows us to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we''re going to have a look at is the main interface of BeEF,
    how to run it, and a very simple way to hook a target to BeEF. To run BeEF, we
    just have to click on the BeEF icon on the desktop. It''ll automatically run the `http://127.0.0.1:3000/ui/panel` URL,
    which contains the browser interface or the web interface of the tool. It''ll
    ask for a username and a password. The username is `beef` and the password is
    `beef` as well. Once logged in, on the left, we''ll see the browsers that we have
    access to, in the Hooked Browsers pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/72880417-40f7-41a7-901c-538cf10211e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Online Browsers are the browsers that we currently have access to, and the
    Offline Browsers are the ones that we had access to. At the moment, we can't run
    any commands on the browsers; we had access to these browsers before, but we can't
    currently do anything on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'What interests us is the Online Browsers. There are a number of methods to
    get browsers or targets hooked to BeEF. If we just go back to the Terminal window,
    we can see that it''s telling us the script URL that has to be executed on the
    target browser so that they get hooked to BeEF:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4986caee-2df3-4712-9265-40821c0646f8.png)'
  prefs: []
  type: TYPE_IMG
- en: If we can find or think of a way to get the preceding piece of URL to be executed
    on the target computer, then that target will be hooked to BeEF, and then we will
    be able to run all types of commands on that computer.
  prefs: []
  type: TYPE_NORMAL
- en: We can use methods that we've already learned, we can use DNS-spoofing to spoof
    any request to any page or to a page containing the hook, or we can do ARP poisoning
    and inject the hook URL into any page that the target browses. We can use an XSS
    exploit, which we'll talk about in [Chapter 21](d9f62886-a663-460f-8159-95d066337c38.xhtml),
    *Cross-Site Scripting Vulnerabilities*. Or we could create a page and social engineer
    our target to open that page, a hook page. We are going to create a hook page
    and see how a target will be hooked. The hook page that we're going to create
    can be used with social engineering and DNS-spoofing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page that we are going to create is very simple. We can use any page we
    want and place the hook URL at the end of the page. We can go on any website,
    copy the source of that website, and then place the hook URL under that. We are
    going to be doing something simpler; we are just going to put it into our `/var/www/html`
    directory—that''s where the web server files are stored. We are going to modify
    our `index.html` file, we''ll delete everything, and put in the hook URL that
    was given to us by the tool. We also need to modify the IP and put in the IP of
    the attacking machine. So the IP of the Kali machine and our IP is `10.0.2.15`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/236b3d25-612b-4b96-b53c-d5b63c860416.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we're good to go, and any person that browses the `index.html` page will
    be hooked to the BeEF browser, or to the BeEF framework. We also need to start
    the web server, Apache. To start it, we run the `service apache2 start` command.
    Now the Apache server should be running. Again, we can use social engineering
    or we can use DNS-spoofing to get our target person to browse to the `index.html`
    page. We can upload the same page onto a remote server and get access to it, or
    we can think of any other way we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, we are going to just browse to it on our Windows browser, enter
    the `10.0.2.15` IP, and hit *Enter* – a blank page should open up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c8207302-f818-438a-8504-e96dd74284e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our page doesn''t really say anything, but if we go to our BeEF browser, we
    will see that we have a new IP in the Online Browsers, and if we click on that
    IP, we will see some basic details about the target computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5aa93606-00b7-4740-a792-9d5d35b8537b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the target is using Mozilla/5.0 with Windows NT 10.0, it's Firefox/61.0.
    We can also see the installed Browser Plugins. These are very useful if we want
    to run buffer-overflow exploits on the target computer. We can also see the Page
    URL that we managed to get the hook from, and we can see the Cookies information
    at the bottom, as well and details about the date and the Window Size.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Commands tab is the one we''ll use the most. The following screenshot shows
    a large number of commands and attacks on the target computer—we''ll be dealing
    with this later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb9a06b8-5581-484a-8c82-13ff996bc061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Rider tab will allow us to see and create HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a90e3a19-ad44-4340-a678-cc1380e61882.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The XssRays tab will show us whether the target web page has any XSS vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1ea26ed9-1c33-43aa-8541-97767f16c98f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Ipec tab is a BeEF Command Prompt, which will allow us to run BeEF commands
    from the Command Prompt instead of using the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7eaf3d57-62ba-4e6e-ada9-ed9fa4fa26a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Network tab will give us an overview of the current network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8c10e2b-13ef-4aa6-8607-53300966944c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we're done with everything, we can click on the Logout link and we will
    be logged out of the tool.
  prefs: []
  type: TYPE_NORMAL
- en: This is just a basic overview of BeEF, the main commands and the interface,
    and a really basic way of hooking a target. Again, we can get people to run the
    hook page by using social engineering, such as a URL-shortening service to make
    the link shorter and look nicer, or we can do DNS-spoofing and get the target
    person to redirect to our own web page where the BeEF framework is working.
  prefs: []
  type: TYPE_NORMAL
- en: BeEF – hook using a MITMf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another method to hook targets to BeEF is to inject the JavaScript that BeEF
    gives us using MITMf. So, if the target and attacker are in the same network,
    and if we can become the man-in-the-middle (or if we manage to the become the
    man-in-the-middle because we had a fake access point or because we are physically
    connected to the target computer, regardless of the way that we became the man-in-the-middle),
    we can inject the hook code into the browser, into the pages (HTTP pages) that
    the target person browses, and they''ll be hooked to BeEF without clicking on
    anything, and without our having to send them anything. We''re going to use the
    exact same link in the page that we used before, which is `http://10.0.2.15:3000/hook.js`,
    or the script. We are going to copy it and then we''ll paste it into our `--inject`
    plugin with MITMf. The command is going to be `mitmf`, and then we''re going to
    use the `--inject` and `--js-url` options, and we''re going to give it the URL
    of the hook. The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s the same command that we always use, `mitmf`. We''re doing ARP-spoofing,
    we''re giving the gateway `10.0.2.1`, the target `10.0.2.5`, the interface `eth0`,
    and we''re using the `--inject` plugin, and a `--js-url` option, a URL for a JavaScript,
    the URL where the hook is stored, in our example its placed at `http://10.0.2.15:3000/hook.js`.
    After launching the command, browse the web normally, or just go to the BBC website.
    Now, if we go back to our BeEF, we can see that we have a target, and that target
    is a Windows device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ed3c4dc-15bb-4436-b54c-182d8dc69a69.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code has been automatically injected into the BBC website, so the user
    didn''t have to visit anything or click a URL. The code will be injected into
    any web page they visit and they''ll get hooked. The user will get hooked as soon
    as they go to any website. If we go to the page source, and look at the bottom,
    we will see that we have the hook script at the bottom of the page source—that''s
    why it''s been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cdcb119-612a-4675-bad2-6db7328829fe.png)'
  prefs: []
  type: TYPE_IMG
- en: That's the reason why we could actually put the script under any page. If we
    are making fake pages, we can just copy the source of any page and put the script
    at the bottom. Then, it will be executed on the target page and we will be able
    to hook our target to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: BeEF – basic commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our browser or target hooked, we can go to the Commands tab
    and start executing commands on the target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0b83d035-9ec0-433f-8910-377a5b00ded4.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use the Search option to look for a certain command, or we can use the
    categories and look for commands suitable for what we want to perform on the target
    computer. Some of the commands are information-gathering commands, some of them
    are social engineering, some of them will even give us full control over the target
    computer. There are a lot of commands, so we won't be able to go over all of them,
    but we will be looking at some of the most important commands so we know how to
    experiment and run them.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the Browser (53) option, we will see commands related to attacks
    that we can do inside the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f2725e1d-feee-4aa2-a945-1f70b856d680.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see attacks that will allow us to get a screenshot, we can try to turn
    on the webcam and see whether it works, and open the webcam on the target. If
    we click on Exploits (78), we will see a number of exploits that we can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/648e413a-46d6-419a-a183-9d4bdf97aa3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All we have to do is click on the module that we want to run and click on the Execute
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ae96233-e1b6-4932-a9cc-072a1ab754e1.png)'
  prefs: []
  type: TYPE_IMG
- en: There are some modules that need some options to be set up, and we'll have examples
    of them as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Social Engineering (21) option, we can show fake updates, fake notification
    bars, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/503aedb1-8290-4a79-968d-0687327b13ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have an example of a very simple command. We''re going to run an alert
    to show an alert box. So, we are just using Search to filter, and we can see that
    it will just create an alert dialog, and it''s going to say `BeEF Alert Dialog`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee010a13-79a0-4a7c-85f5-7e636d01ec7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can modify the alert and type to anything we want, for example, change Alert
    text to `test`, and then, when we hit the Execute button, in the target browser,
    we will see a message saying test has been injected into the target browser, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0325e71c-5051-4b9c-8154-0de1475f7672.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another interesting thing that we can do is the raw JavaScript. It will allow
    us to execute any JavaScript we want. So, again, we search Google for a useful
    JavaScript code, such as a keylogger, or we can write our own script if we know
    JavaScript, and whatever we write will be executed on the target. Again, we''re
    going to pop in an alert, and it is going to return `BeEF Raw JavaScript`, and
    hit the Execute button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ccd227d-c633-45d8-8441-3f3b567e0b38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will give us a dialog saying BeEF Raw JavaScript, just like we got in the
    previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/09bc8b3b-9339-496d-8d13-53bd0d6dcc18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see whether we can get a screenshot of the target computer. For
    this, we''re going to use a plugin called Spyder Eye. So, again, click on the
    plugin, hit Execute, give it a second, then we''re going to click on command 4
    in the Module Results History tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1950a38e-a22b-4d70-83ed-26bb9a3566ea.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding image shows us a screenshot of what the target person is looking
    at.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another really good plugin is a Redirect Browser plugin. It will allow us to
    redirect the browser to any web page we want. This could be very useful because
    we can use it to redirect the target person and tell them that they need to download
    an update, and instead of giving them an update, we give them a backdoor. We can
    redirect them to a fake login page for Facebook – we can do anything we want with
    the Redirect Browser plugin. We can set the website that we want the target to
    be redirected to. We''re going to redirect them to [http://beefproject.com](http://beefproject.com) in
    this example, and once we hit Execute, the target is redirected to [http://beefproject.com](http://beefproject.com) or
    to any specific link mentioned in the Redirect URL textbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fec6c166-3b5b-4b1a-b74f-f018ba10b032.png)'
  prefs: []
  type: TYPE_IMG
- en: These are some of the basic modules that we can use.
  prefs: []
  type: TYPE_NORMAL
- en: BeEF – Pretty Theft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s have a look at a Social Engineering plugin that will allow us to
    steal usernames and passwords from accounts. Basically, it will dim the screen
    and will tell the person that they got logged out of the session so they need
    to log in again to get authenticated. This will allow us to bypass HTTPS, HSTS,
    and all the security that''s used by the target account page. For example, if
    we are trying to get usernames and passwords for Facebook, we will be able to
    bypass all the security that Facebook uses, because we are just showing a fake
    Facebook page, so the user will never actually make contact with Facebook. Let''s
    click on Pretty Theft, which will open the tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e79a26ba-34a5-4082-a7cd-bffa9da64176.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can click which account we want to hijack. Let's
    say we're going with Facebook. We can select what the Backlight will be, so we're
    just leaving that as Grey, and then we hit Execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we go to our target, we can see that they''re being told that they got
    logged out of their session so they need to log in with their username and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d21d8f4c-4cfd-4b89-a399-719676e46077.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the username as `zaid`, then we are going to put our password as `12345`,
    and hit Log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go back to the Terminal, we can see that we got our username as zaid
    and the password as 12345:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/40ce5c9c-9ec9-4e7a-b231-833c89b3d814.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use this to hijack a number of accounts. Let''s look at another example.
    If we go with YouTube, we give it an Execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3f1a269-2df6-40db-9256-e1633db84852.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the target screen, we see the YouTube logo and we can try to log in. Put
    in a Username and Password, click Sign In, and the credentials will be captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34a5b5ca-5213-43ff-a0df-d44700f643df.png)'
  prefs: []
  type: TYPE_IMG
- en: So, again, this is a really good way to gain access to accounts because, even
    if the user is not planning on logging into the account that we are trying to
    steal, we will kind of force them to enter their username and password to be logged
    back into their account, and then we will be able to capture the username and
    password.
  prefs: []
  type: TYPE_NORMAL
- en: BeEF – Meterpreter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to see how we can gain full control and get a
    Meterpreter session from the target computer. So, again, go to the Commands tab,
    and then Social Engineering. There are a number of ways that we can get a reverse
    shell. Now, it all depends on how we want to perform our social-engineering attack.
    We''re going to use a notification bar, Fake Notification Bar (Firefox)—we''re
    choosing Firefox because our target runs a Firefox browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b8d40cba-a7b1-479d-9c5a-0503c75f4386.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, it will display a notification bar telling the user that there is
    a new update or a plugin that they need to install. Once they install the plugin,
    they'll actually install a backdoor and we will gain full access to their computer.
    We'll implement it by using the same backdoor that we created and have been using
    throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have stored the backdoor in our web server in `/var/www/html` and named
    it `update.exe`, but it''s the same backdoor, the same reverse-HTTP Meterpreter
    that we used before. Provide the full address of the backdoor inside the Plugin
    URL textbox, which is `http://10.0.2.15/update.exe`, change the Notification text
    to `Critical update for Firefox, click here to install`, as shown in the following
    screenshot, and hit the Execute button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/77ffa2c3-1a39-4dff-8c09-1b719438ac5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the target, we can see that they''re getting a message telling them that
    there is a new update for Firefox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e1b3c0b7-5534-47e4-8f17-3b395046fdbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the target downloads and installs it, they'll have a backdoor downloaded
    onto their machine. Once they try to run this backdoor to install the update,
    they'll actually run a backdoor that will give us full access to their computer.
    Before we run the backdoor, we need to listen on the port, exactly as we did before.
    Open a `msfconsole` Terminal and run `show options`. Use the Metasploit multi-handler,
    the same way we've done throughout this book to listen on ports. Use `meterpreter/reverse/http`,
    we have our IP and the port. So, we are just going to run `exploit`, and we are
    listening for the connections now. Let's run the update we just downloaded. If
    we go on the target, we will see that we got full control over it using a Meterpreter
    session.
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is just an example of one way of gaining full control over the target
    computer. There are a number of ways that we can do this using BeEF, and there
    are many social engineering attacks that we can do to gain full access to the
    target computer. It's highly recommended to go over the plugins, experiment with
    them, and see what attacks can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Trojans manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Trojans we''ve created so far are amazing; they can bypass antivirus programs – they
    run two pieces of code, the first one runs in the background, which runs our own
    code and does what we want it to do, such as opening a port or connecting back
    to us and giving us a shell, and it runs another piece of code that the user expects.
    It could display an image, play an MP3, or display a PDF file. This functionality
    makes it very difficult to detect, so the best thing to do is to check the properties
    of the file and make sure that it is what it''s claiming to be. In the following
    screenshot, we have a Packt image and we can see that it''s a `.jpg`, so it looks
    like a picture, it has an icon, and if we run it we will get a picture, like we
    saw in [Chapter 13](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml), *Client-Side
    Attacks - Social Engineering*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/00a6c225-dd59-4416-981b-c9c06177c433.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right-click on it and go to Properties. When we go to Properties, we will see
    that this is an application, not a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ec6ea85-f9c6-4b22-b06a-e14cc1fa7d93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same goes for PDFs and MP3s; it should say MP3 if it''s an MP3, it should
    say PDF if it''s a PDF, and it should say `.jpg` if it''s a `jpg`. But in this
    case, it''s telling us that it''s an executable. Going through the Details, we
    will see that it is an application and not a picture – if it was a picture, it
    would tell us that it was a picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a6373d5-4e52-4fd4-a933-6d5c13a53e25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this, we''ll know that we''re being tricked. We can also play with the
    filename and we will be able to reset it; if we rename the file to anything else,
    we will see that it''s an `.exe` file and not a `.jpg`. If we change it to test,
    we will see that the name has been changed to test.exe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c9ad277-a3af-4ed0-a918-d5e8506c67a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's assume this Trojan was combined with an executable. If we run it,
    we expect to get `.exe` and an application. Let's assume that it's combined with
    Download Accelerator Plus software, instead of being combined with a picture.
    This task is going to be more difficult because we are expecting an application
    anyway. With the picture and with the PDF, Windows will tell us that we are trying
    to run an executable, but if we are expecting an executable, then we are going
    to run it anyway, such as with DAP. It will play the executable we are looking
    for and the executable will send a reverse session to Kali.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to a tool called Resource Monitor, and from that tool, go to the Network
    tab. There, we will be able to see all the open ports on our machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/23a09142-e38a-4a9d-904a-9603b39d633f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have port 8080 and it's connecting to the 10.0.2.15 IP address.
    Obviously port 8080 is not very suspicious, even if it was on port `80`, it wouldn't
    look suspicious, and also, it's coming from a process called browser.exe, which
    is not very suspicious either. The suspicious part is the remote address; it's
    accessing 10.0.2.15 and we don't know what that is. If it was a website, putting
    the IP in the browser should take us to a website or to a server of that website.
    In most cases, if this is a hacker computer, it will not take us to a website,
    and then we will know that this person is an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify the attack, we can use a tool called Reverse DNS Lookup. It gives
    us an IP and tells us which website this IP belongs to, or which domain this IP
    belongs to. Let''s look at an example on Facebook. Let''s say we saw a suspicious-looking
    IP in our Resource Manager. We are actually going to get a proper IP address for
    Facebook by pinging:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/707a9a06-52cd-48d7-adf7-9a3e9222cd0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have seen the `157.240.7.38` IP; there is a connection on port `80` going
    to this IP. Copy this IP and use Google to search for `Reverse DNS`, open the
    first site, paste the IP, and click Reverse Lookup. We can see the IP that we
    saw in our resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fa75a09a-39e7-431f-b91f-3bd730de59c3.png)'
  prefs: []
  type: TYPE_IMG
- en: If it's for a proper website, then there is nothing to be concerned about; if
    it looks suspicious, then we will know that this is going to a suspicious person.
    Now, as we can see in the preceding screenshot, it's going to Facebook and we
    are browsing Facebook – this is normal, we are using Facebook so there's a connection
    between us and Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Trojans using a sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are going to look at another way to discover malicious files, by using
    a sandbox. A sandbox is basically a place where our file will be executed and
    analyzed. It will check whether any ports will be opened, if it's going to modify
    registry entries—basically, if it's going to do any suspicious stuff. It's not
    an antivirus program. Our Trojan might pass antivirus programs, our Trojan passed
    all antivirus programs, but the sandbox applications, or the sandbox environments,
    will run it in a controlled environment, see whether it does anything suspicious,
    and give us a report. We can Google `sandbox` online, and an example of it is
    a website called Hybrid Analysis ([https://www.hybrid-analysis.com/](https://www.hybrid-analysis.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the website is very simple: just go to the URL, select a file, and upload
    it. We can see the report in the following screenshot; analyzing the file and
    generating the report might take some time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/201ab1fd-89ad-4ea8-a628-1f903b081cb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we get the report, we will see some basic information; we will see that Malicious
    Indicators have been found. They're hiding it from us and we have to use the full
    version to see them, but we don't really need to see them; if we read the whole
    report, we will know that this file is malicious and it's going to do something
    bad on our computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the file suppresses error boxes, so it doesn''t display error
    boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f8b57bbe-d9e8-493d-a72f-5a8a79769e56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It also modifies the registry, and we can see the registry parameters in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/052e286c-a5ef-49ed-8a31-2bacc078404a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see, in the preceding screenshot, that it''s playing with the Internet
    Settings and with the Connections. We can also see that it''s using the Windows
    Sockets service, that is, WinSock2, so it''s trying to create connections. We
    can also see that it''s playing with the address of the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4117d295-21af-45ef-8291-a243609d8eb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we scroll down, we will see one of the most important indicators. There
    will be more information in the following screenshot on Network Analysis. It tries
    to connect to Host Address on Host Port `8080`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a630b741-dd20-465e-b628-4b8dfba4904a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can go on the `10.20.14.203` IP and do a reverse DNS lookup to check whether
    the IP is related to a website. Also, when we upload the payload, it's never going
    to be executed on our computer, it's going to be executed on their server in a
    sandbox environment. Now, obviously, for the method we have seen, we should always
    use it in a VirtualBox when we are executing it on Windows. Always perform it
    on a virtual machine; don't perform it on our main machine. Or we can upload it
    into a sandbox environment, it'll be analyzed for us, and then we can read the
    report.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we studied a tool called BeEF and hooked it using MITMf. Then,
    by redirecting the user, we captured their credentials by saying they had been
    logged out and asked them to re-enter their username and password. Finally, we
    gained access to the Meterpreter session and also learned how we can detect Trojans
    both manually and by using a sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at performing attacks on an external
    network.
  prefs: []
  type: TYPE_NORMAL
