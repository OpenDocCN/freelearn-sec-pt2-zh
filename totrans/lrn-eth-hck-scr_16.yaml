- en: Post Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we covered how to access devices through the use of various
    techniques. We will now move on to the post exploitation task, which will focus
    on the Meterpreter session and how we can exploit a target system once we have
    gained access to it. Then, we will look at the basic filesystem commands that
    can help us to exploit a target system.
  prefs: []
  type: TYPE_NORMAL
- en: Hitherto in this book, we have accessed a targeted system only to the point
    that a victim has our backdoor file or software running on their system. Now,
    we will look at how to maintain our access to the system, through both simple
    and advanced methods. We will even cover what can be done after performing a keylogging attack.
    Then, we will look at the important concept of pivoting, and we will use it to
    create an autoroute.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to post exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meterpreter basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access by using simple methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining access by using advanced methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keylogging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to pivoting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivoting autoroutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to post exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've learned how to gain access to our target, let's look at what
    we can do with that target. In this section, we will learn a number of things
    that can be done after we have gained access to a computer. We will look at what
    to do with a computer regardless of how we gain access to it—whether we use a
    server-side exploit, social engineering, a backdoor, a problem with a certain
    application, or some other method.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, we always stopped when we got to a reverse Meterpreter
    session from our target. In this chapter, we are going to start with a Meterpreter
    session. We're not going to discuss how we gained access, but what we can do *after*
    gaining access. We will be discussing some really cool things, such as how to
    maintain access to a target computer even if its user uninstalls the vulnerable
    program or restarts the computer. We will look at how to download, upload, and
    read files, open the webcam, start the keylogger to register keystrokes, and so
    on. We will also look at how to use a target computer as a pivot to exploit all
    computers on the same network (supposing that, for example, our target isn't actually
    the computer that we hacked, but is on the same network as that computer). Again,
    all of the things that we will do in this chapter will focus on after we have
    exploited a target's vulnerabilities and have gained access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll learn some basics on how to interact with Metasploit''s
    Meterpreter. In Linux, the `help` command is always the best command to run in
    terms of getting information about a specific command. So, the first thing that
    we will do is run the `help` command, to get a big list of all of the commands
    that we can run, and a description of what each command does, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/34bf1d5a-97db-40e5-a381-7d386199ea05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at some of the basics, the first thing that we will highlight is the
    `background` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0aac5654-2ebf-45ec-9914-0f9a530b377f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `background` command basically backgrounds the current session without
    terminating it. It''s very similar to minimizing a window. So, after running the
    `background` command, we can go back to Metasploit and run other commands to further
    exploit the target machine (or other machines), maintaining our connection to
    the computer that we just hacked. To see a list of all of the computers and sessions
    that we have in use, we can run the `sessions -l` command, which shows the current
    sessions. As we can see in the following screenshot, we still have the Meterpreter
    session—we didn''t lose it, and it''s between our device and the target device,
    which is `10.0.2.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d71df47-55c4-486a-b6ab-f09ce2723ff4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to go back to the previous session to run Meterpreter again, all
    we have to do is run the `sessions` command with `-i` (for interact), and then
    put the ID (in our case, `2`), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3ff55357-ec95-4d9f-80c7-c79b6d1add3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another command is `sysinfo`. We run this command every time we hack into a
    system; it shows us information about the target computer. As we can see in the
    following screenshot, it shows us the computer''s name, its operating system,
    and its architecture. Also in the following screenshot, we can see that it''s
    a 64-bit computer, so if we want to run executables on the target in the future,
    we know to create 64-bit executables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e19418a4-df0d-4e7d-b60d-d159df206719.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the language in use is English, the workgroup that the computer
    is working on, and the user ID that is logged in. We can also see the version
    of Meterpreter that's running on the target machine, and it's actually a 32-bit
    version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful command for gathering information is `ipconfig`. The `ipconfig` command
    in this case is very similar to the `ipconfig` command that we run on Windows
    machines (in the Command Prompt); it will show us all of the interfaces that are
    connected to the target computer, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2dc6a45-6290-405a-8ea1-a9374630ac4d.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, we can see `Interface 1`, the MAC address, the IP address, and
    even the IPv4 address, connected to multiple networks. We can also see all of
    the interfaces and how to interact with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful information gathering command is the `ps` command. The `ps`
    command will list all of the processes that are running on the target computer;
    these might be background processes, or actual programs running in the foreground
    as Windows programs or GUIs. In the following screenshot, we can see a list of
    all of the processes that are running, along with each one''s name and `ID` or `PID`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2cfc41e0-14ee-4690-845e-042428bd5aed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One interesting process is `explorer.exe`—that''s literally the graphical interface
    of Windows, and we can see in the preceding screenshot that it''s running on `PID
    4744`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f82e3e8-c249-415a-aeec-f2207f4db7a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have hacked into a system, it is a very good idea to migrate the process
    that the computer is running on into a process that is safer. For example, the
    `explorer.exe` process is the graphical interface of Windows, so it's always running,
    as long as the person is using their device. This means that it's much safer than
    the process through which we gained access to the computer. For example, if we
    gained access through an executable or a program, we will lose the process as
    soon as the person closes that program. A better method is to migrate to a process
    that is less likely to be closed or terminated. To do so, we will use a command
    called `migrate`, which will move our current session into a different process.
    We will use the `explorer.exe` process, because it's very safe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `migrate 4744` command, where `4744` is the `PID` of the `explorer.exe` process.
    The following is the output of the `migrate` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc7947f5-8e8f-43ce-bee2-d9f85ab379bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the moment, Meterpreter is running from the `explorer.exe` process. If we
    go to the Task Manager on the target computer and run our Resource Monitor, and
    then go to the Network tab and into TCP Connections, we will see that the connection
    on port `8080` is coming from the `explorer.exe` process, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/346ac043-6734-4fd8-a8d5-58ff0f018994.png)'
  prefs: []
  type: TYPE_IMG
- en: TCP Connections
  prefs: []
  type: TYPE_NORMAL
- en: So, as for the target, it's not coming from a malicious file, our payload, or
    a backdoor, it's running through `explorer.exe`, which is not suspicious. Now,
    if we see Firefox or Chrome, we can migrate to those processes. And, if we are
    connecting through port `8080` or `80`, it's going to look even less suspicious,
    because ports `80` and `8080` are used by web servers, so it's very natural to
    have a connection through them.
  prefs: []
  type: TYPE_NORMAL
- en: Filesystem commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we''re going to look at some more commands that will allow us to navigate,
    list, read, download, upload, and even execute files on the target computer. We
    have a Meterpreter session running, and the first thing that we will do is get
    our current working directory by using the `pwd` command. It will bring us to
    the `C:\Users` location. If we want to list all of the files and directories,
    we can use the `ls` command; the following screenshot shows the list of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d812699-ad81-44d7-ac81-9248bca4b556.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s suppose that we want to navigate to the `IEUser` folder. We will use
    the `cd IEUser` command, and if we use `pwd`, we will be in the `C:\Users\IEUser` directory.
    Then, we will go into the `Downloads` directory and list the files. In the following
    list of files, we can see `passwords.txt`, which seems like an interesting file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/258df5ee-6842-45db-b4c8-c9fb720a881b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to read this file, all we have to do is use the `cat paswords.txt`
    command. We can then see the content of the file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3470d197-f353-4efe-89ad-74a60298dceb.png)'
  prefs: []
  type: TYPE_IMG
- en: If we check this file, we will see that the output we received from the `cat`
    command matches the content of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that we want to keep this file for later. We can download it
    by using the `download` command and the filename, which is `paswords.txt`. The
    command''s output is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e50a4766-2c97-406a-a526-d33f591d4cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we launch the command, the file will be downloaded; if we go to our `root`
    directory, we will see a file called `paswords.txt`, containing all of its data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/941490e5-bba2-4bd4-86bf-d17b82d599a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, suppose that we have a backdoor, a virus, a Trojan, or a keylogger that
    we want to upload to the target computer. We can upload it very easily. Going
    back to our `root` directory, we can see a lot of files, including one called
    `backdoored-calc.exe`. We''re going to try to upload that file by running the `upload` command,
    along with the filename. The file will be uploaded, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f90903cd-3a5b-46d9-94d1-4b02c19cea7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now bring up a list to make sure that the file exists; in the following
    screenshot, we can see a new file called `backdoored-calc.exe` in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea143324-ac38-4c0e-812a-4c4101152fa6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the uploaded file on the target computer (if it is a virus or a
    keylogger), all we have to do is run the `execute` command and specify the file
    that we would like to execute after the `-f` option. For our example, the file
    is `backdoored-calc.exe`. Once we execute it, we will see that the process `3324`
    has been created, so our backdoor has been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3f12e3f5-ea77-4caa-ac71-93a66a9becd4.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, if `backdoored-calc.exe` is a virus, it will do what it's supposed to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another feature is the `shell` command, which converts the current Metasploit
    or Meterpreter session into an operating system shell. If we type in the `shell`
    command, we will get a Windows command line, where we can execute Windows commands.
    As we can see in the following screenshot, it''s on a different channel, and we
    can run any Windows command that we want through it. So, we can run the `dir` command
    to list all directories; we can use `ipconfig`; and we can use any other Windows
    command, exactly like running the commands through the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dfcc1f19-d59a-4754-a0b5-0ecf9ad29af7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are many more commands that we can use for filesystem management. If
    we type in the `help` command and go to the filesystem section, we will see that
    we can edit, download, move a file to another file, rename files, delete files,
    remove directories, search, and so on. There are so many more things we can do
    with the filesystem, and we have just given a basic overview of the main commands
    that we can use to manage the filesystem on the target computer, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/84e4820c-faab-4f65-a120-bf61023cf5d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Maintaining access by using simple methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all of the examples that we've seen so far, we would lose our connection
    to the target computer as soon as the target user restarted the computer, because
    we used a normal backdoor, and once the computer restarted, that backdoor would
    be terminated, the process would be terminated, and we would lose our connection.
    In this section, we will discuss the methods that will allow us to maintain our
    access to the target computer, so that we can come back at any time and regain
    full control over the computer. There are a number of ways of doing this. The
    first one is by using Veil-Evasion; we can use an HTTP service or a TCP service
    instead of the HTTP backdoor that we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example. If we use Veil-Evasion and run the `list` command,
    we will see that at the numbers `6` and `8`, we have service backdoors, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cdea154a-69a5-4c0c-af93-a610de5d4d4f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we run `use 6`, all we have to do is set up the `LHOST` and then `generate`
    the backdoor; we can combine it with other methods and send it to the target person,
    or we can upload it by using the `upload` command that we learned and then execute
    it, and that will install the backdoor as a service on the target computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b18ebb20-5e4e-4c8c-aba2-f15f9bbc843d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All we have to do is use the multi-handler, and any time our target computer
    starts, it will try to connect back to us, because it is a reverse shell. We won''t
    look at this method in detail, because it''s very simple. We''ve done something
    similar to it before: we created a backdoor using Veil-Evasion and uploaded it
    to a target computer. So, all we have to do is create a backdoor, upload it, execute
    it, and then we are done. This doesn''t always work—that''s another reason we
    are not going to study it in detail. The normal backdoors are much more reliable;
    that''s why we used a normal backdoor when we were combining backdoors with other
    methods such as changing its icon.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method is to use a module that comes with Meterpreter, called `persistence`;
    let''s look at how we can use it. All we have to do is use `run` with `persistence`,
    and then use `-h` to see the help menu, to show us all of the options that we
    can set up. In the following screenshot, we can see that `-A` starts a multi-handler
    straightaway; we don''t really need to change the location where the backdoor
    will be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6fd5cbff-6faf-4ac9-8185-489958f4d7d4.png)'
  prefs: []
  type: TYPE_IMG
- en: The `-P` option will specify the payload; again, `windows/meterpreter/reverse_tcp`
    is a really good payload, so we don't really need to mess with it. The `-S` option
    is used to start using system privileges; as mentioned previously, we don't have
    system privileges, so we should be using the `-U` option. Then, we can use the
    `-i` option to set up the amount of time during which the backdoor will try to
    connect back to us; it'll try to connect every 10, 15, or 20 seconds—whatever
    we specify. The `-p` option is to specify the port, and the `-r` option is to
    specify the IP of our computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run `persistence`, all we have to do is use `run persistence`, `-U` (to
    start it under user privileges), `-i` at `20` seconds, and then `-p`, and we will
    probably put `80`, because, as we mentioned, port `80` doesn''t look suspicious.
    Then, we can use `-r` to specify our IP, which is `10.0.2.15`. The command will
    look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, once we run this, if we want to receive a connection, we have to
    start the multi-handler on port `80` (or on the selected port using the payload).
    The problem with this method is that it's detectable by antivirus programs; therefore,
    we won't explain it in more detail. We will instead explain a combination of both
    of these methods, which will not be detectable by antivirus programs and will
    be much more robust than using Veil-Evasion.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining access by using advanced methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use the normal HTTP reverse Meterpreter undetectable
    backdoor that we created previously. We will inject it as a service, so that it
    will run every time the target user runs their computer; it will try to connect
    back to us at certain intervals. To do this, first, we will `background` the current
    session. We've done that before; we can use `background` and still interact with
    the session on number `2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will `use` a module; it is like the multi-handler module that comes with
    Metasploit, and it''s called `exploit/windows/local/persistence`. We will look
    at its options, to see what we need to configure. In the following screenshot,
    we can see similar options to what we''ve seen in the Metasploit service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/017ea596-8c76-439a-b1e8-dfcb39250b8c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing is the number of seconds during which the target will try to
    connect back to us—the `DELAY`. We are going to keep that at `10` seconds—so,
    every `10` seconds, the target computer will try to connect back to us. Now, `EXE_NAME`
    is the name that will show up under the processes where the connection is responding
    back from. We will set that to the browser, to make it less detectable; so, we
    will set `EXE_NAME` to `browser.exe`. The command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `PATH` where the payload or backdoor will be installed will be left the
    same, and the `REG_NAME` (the registry entry) will also stay the same. Now, this
    is very important: we need to specify which session to run the exploit on. For
    this example, we are using session number `2`; that''s our Meterpreter session.
    If we use `sessions -l`, it will list all of the available sessions, and we will
    see that its `Id` number is `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4265831-12d8-430d-8ff8-22db5035ac0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to set our `SESSION` to number `2`. So, we will use `set SESSION 2`,
    and the `STARTUP` will be left as `USER`, for the user privileges. Now, if we
    run `show options`, we can see that `browser.exe` and the session number `2` are
    set, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fb4d45d1-fb02-49b5-8e18-36d5b4409559.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The most important thing to do is specify the payload that will be injected
    as a service. To do that, we will run `show advanced`. The `show advanced` command
    will show us the advanced options that we can set up for this particular module.
    The one that we''re interested in is called `EXE::Custom`, indicating that we''re
    going to use a custom `.exe` to run and inject into the target computer as a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ddf26d29-9df1-44f2-8812-56463cfd25de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will set `EXE::Custom` to `/var/www/html/backdoor.exe`, so that we can run
    our backdoor that we had that stored in `/var/www/html/backdoor.exe`. The command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will run `show advanced` to make sure that it was set up properly,
    because sometimes we misspell things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bdc071fb-f985-41c9-9049-bcf6ea0482f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to `exploit` this, and that will upload `/var/www/html/backdoor.exe`
    onto the target computer, using the session that we specified (session number
    `2`). We will see that it''s been uploaded and installed once we execute `exploit`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e949480-1a3c-40db-b754-0da3aa486635.png)'
  prefs: []
  type: TYPE_IMG
- en: An important thing to keep in mind is the resource file, because we can use
    it to clean up and delete the backdoor once we are done using it. If we don't
    want the backdoor on the target computer any more, we can use the resource file
    to delete it. We can store the RC file path from the `exploit` command output
    in the Leafpad, so that we can run it and delete our backdoor in the future.
  prefs: []
  type: TYPE_NORMAL
- en: If we run `sessions -l`, it will show that the session is there, and we can
    interact with it. We can kill that session using the `session -K` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we use `list`, we will have no connections with the target computer.
    Using our exploit multi-handler, we can listen for incoming connections.
  prefs: []
  type: TYPE_NORMAL
- en: If we run `exploit` and the hacked computer is already booted, we will get a
    connection straightaway, because our backdoor has been injected into the target
    computer on port `8080` on `reverse_http`. However, we are going to restart the
    target computer, just to make sure that we will always have a connection to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform a normal restart on the Windows machine. Our Kali computer will try
    to connect back to it every 10 seconds, no matter how many times the Windows machine
    is restarted or shut down. We will now run our Meterpreter handler and wait for
    connections. Just run `exploit` to listen, and it will take a maximum of 10 seconds
    to get a connection back. As we can see in the following screenshot, we received
    a connection to the target computer, and we now have full access to that computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1edd814d-5d54-4f3a-8766-430c4a7b9273.png)'
  prefs: []
  type: TYPE_IMG
- en: Keylogging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at how we can log any mouse or keyboard event
    that happens on the target computer. We will do that using a plugin that comes
    with Meterpreter. We have our Meterpreter, so we just have to run `keyscan_start`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1d7be45f-31fb-4b42-879b-0aca6b3c47ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose that we want to go to Facebook and log in to an account. If we look
    at the URL for the site, it includes HTTPS, and there is nothing wrong with it.
    Generally, we need a password to log in to an account. If we come back to our
    Terminal, we can see a log of everything that has been recorded by typing `keyscan_dump`.
    With that command, we can see that the target user typed in `www.facebook.com`,
    hit *Enter*, and put in their username, which was `zaid@isecur1ty.org`, and the
    password `123456`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9bd52d90-558f-438d-aba3-13bd8eb8e9d1.png)'
  prefs: []
  type: TYPE_IMG
- en: This will record everything that happens on the computer. We can stop running `keyscan_stop`,
    and it will stop the sniffer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another cool thing that we can do is get a screenshot, just by typing `screenshot`;
    it will save it for us in the `/root` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c59fc08d-0f02-4e5e-aa54-fb53599fbeff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to `/root`, and we''ll see that the screenshot is present. It''s showing
    us what''s being displayed on the target computer screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9cff4ff6-b768-4fcd-84fa-ecd255024a59.png)Capturing the targets screen'
  prefs: []
  type: TYPE_NORMAL
- en: These are just two of the useful features we have available. The keylogging
    is very useful, because we can get usernames and passwords and see what the target
    user is doing on the computer. Obviously, we can use other keylogger programs,
    like a portable keylogger; all we have to do is upload them by using the `upload`
    command that we learned previously, and then `execute` them.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to pivoting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section (and a few subsequent sections), we will study the concept
    of pivoting. We will assume that our target is the **METASPLOITABLE** device.
    In the following diagram, each one of the big circles is a network, and, as we
    can see, the Metasploitable device is not visible by the hacker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7378244c-3cb7-41ea-bcf1-31aa820e41ff.png)'
  prefs: []
  type: TYPE_IMG
- en: The Metasploitabledevice is hidden, either behind the network, or for some other
    reason. The hacker is not able to ping or access the IP address of the Metasploitable
    device. We're assuming that in our example, the Metasploitable device exists in
    a different network. We can see that the network has four devices. It has the Metasploitable
    device, an iPhone, another device, and a Windows device (which we hacked, and
    which is in red); the hacker device exists in the smaller network, and there are
    only two devices (the hacker, and the Windows machine that we hacked). The goal
    of pivoting is to use the device that we hacked (the common device in the middle)
    to compromise other devices that it has access to. So, the hacker cannot see our
    target, which is the Metasploitable device—but the device that we just hacked
    can see that device, because they're on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few sections, we will try to hack the Metasploitable device, even
    while it is not visible to the hacker (the Kali device). The only way to access
    the Metasploitable device is through the Windows device, which will be used as
    a pivot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up our network (our lab), we will go to the VirtualBox settings, and
    then to Preferences | Network; we can see that we have a network that we''ve been
    using as the internal NAT network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cd6f3b66-0342-462d-8d53-e655cf22dfb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The NatNetwork is the one that our Windows and Kali devices are connected to.
    We are going to create another NAT network by clicking on the plus sign (+), and
    it will be called NatNetwork1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/875d8084-7548-4b11-9ad2-3c676c54f208.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will click on the third icon to the right to edit the settings, and
    we can set the network''s IP. We will set it to `10.0.3.0/24`. The following screenshot
    shows all of the settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/313099dc-b052-4258-b23d-1bdea498cbe5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, we created another network, and the Kali machine is not connected to this
    network. Now, we will modify the settings of the Windows device to connect it
    to the two networks. The Windows device, as we can see in the preceding screenshot,
    is the common device, and it will be connected to the NAT network that the Kali
    is connected to, and also the one that the Metasploitable device is connected
    to. In the Windows machine settings, go to Network | Adapter 2 | Enable Network
    Adapter, and connect it to a NAT Network. Then, select NatNetwork1, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f3dffcf-de86-4875-81c9-f70b356945c5.png)'
  prefs: []
  type: TYPE_IMG
- en: The Windows device now uses two adapters; one of them is connected to NatNetwork, and
    the other one is connected to NatNetwork1.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Metasploitable device, go to Settings | Network, and, instead of connecting
    it to NatNetwork, connect it to NatNetwork1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c63883fd-485c-44f0-a1e7-fbd0005b6496.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the Metasploitable device is only connected to the network that the Windows
    device is connected to, and the Kali machine is only connected to the network
    that the Windows device is connected to; the Windows device is connected to both
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to verify that we have the settings, we will start our Metasploitable
    device and the Windows device, and will use some `ping` commands to make sure
    that everything is set up correctly. The main thing is that the Windows machine
    should be able to ping both the Metasploitable and Kali devices. In the following
    screenshot, we can see that we have obtained the IP of the Metasploitable device
    - `10.0.3.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9b1757a-8ff0-4d2a-bce4-2b94f965b158.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run `ping 10.0.3.5`, and we will see that the Windows machine can see the Metasploitable
    machine, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81ed271a-5dd2-4fbd-903f-235aa3ef5d9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s check whether it can see the Kali machine, which is on `10.0.2.15`;
    again, if Windows can see both machines, it means that it is the machine in the
    middle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c498b1e6-5c1c-433e-a91c-ce7d17b0b785.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, we will check whether the Metasploitable machine can see the Kali machine.
    It shouldn''t be able to see it, because the Kali machine and the Metasploitable
    machine are connected to two different networks. When we run `ping 10.0.2.15` on
    the Metasploitable machine, we can see that we get nothing—`18` packets are transmitted
    and `0` are received:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ca8726d0-a67e-4d6a-bf77-c93c372c72a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, the Metasploitable device cannot see the Kali machine, and the Kali machine
    cannot see the Metasploitable device, either. Run `ping 10.0.3.5` on Kali, and
    we will see that it sends `3` packets and `0` are received; these two devices
    cannot see each other, because they''re on two different networks, as the following
    screenshot indicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4d301e1-4c2d-4daf-8665-0f3613650891.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will use our access to the Windows machine to hack into
    the Metasploitable device, because the Windows machine is the common device, connected
    to both networks.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting autoroutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand the concept of pivoting, it won't be difficult to perform.
    All we need to do is upload any tool that we want to use; for example, if we want
    to use Nmap or ARP spoof or dSniff, we can upload those tools and run them on
    the Windows computer, which is connected to the big network, and then run a port
    scanner, perform ARP poisoning, or do man-in-the-middle attacks, just like we
    learned previously. It's very simple; all we have to do is use the `upload` command
    and use the tool from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to set up a route between the hacked computer
    and our computer, so that we can use any Metasploit auxiliary or module against
    the big network. We'll be able to use Metasploit exploits, port scanners, and
    other useful modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we''re going to use a module called `autoroute`. Let''s look at
    how to run an exploit on the Metasploitable virtual machine; it''s should not
    work, because it''s not visible to us for now. So, we will use `sessions list`,
    and will see that we have a connection through the Windows machine, which we already
    hacked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/695d1b86-c7c8-4401-abc9-2b172f1a3005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we will run `use exploit/multi/samba/usermap_script`—we already used
    this exploit against the Metasploitable device before, but it was on the same
    network then, so it was visible to us. This time, we''re trying to attack a device
    that is invisible. Then, we will run `show options`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4c365de3-abfe-4973-8c40-1bb602918e63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will set `RHOST` to `10.0.3.5`, because that''s the IP address of the Metasploitable
    device. Then, when we use `set PAYLOAD cmd/unix/bind_netcat` and `show options`,
    everything will be set up properly; so, we will run `exploit`, and we will see
    that the exploit will time out, because (as we saw in the diagram in the *An introduction
    to pivoting* section) the hacker device cannot see the Metasploitable device.
    So, it''s trying to run an exploit on the Metasploitable device, even though the
    Metasploitable device has a vulnerability, but we won''t be able to use it because
    we can''t see the Metasploitable device, and, as we will see, the exploit failed,
    we received the `ConnectionTimeout`, and we just couldn''t connect to the target
    computer, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac7ed58b-249b-416b-bdc9-ddbf8965daf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will interact with Meterpreter on `ID 1` and run `sessions -i 1`. So,
    in our Meterpreter, we will run `ifconfig` to see those networks that the target
    computer is connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b95d40ff-75a3-4e74-9c5d-794e9f2b8cbc.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see all of the interfaces connected to the target computer, and we will
    look for interfaces with IP addresses. We can see that interface number `9` has
    an IP address, and we can see that the IP address is on our network; so it's really
    not very useful. It's already on our network; we're on the `10.0.2.5/24` subnet.
    Another interface that we can see is `Interface 21`, which is connected to `10.0.3.4`;
    it's on a different subnet, which we cannot see from our Kali Linux device.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now try to set up a route between a different subnet and the current
    subnet. We will copy the address `10.0.3.4` and create a `background` of the current
    session, coming back to Metasploit. Then, we will run `use post/multi/manage/autoroute`.
    Now, if we want to see all of the managed modules at any point, after the `use
    post/multi/manage/` command, press *Tab* twice, and we will see all of the `post/multi/manage`
    modules and can try a new experiment with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7af4873e-2c2c-487d-9659-a9974daf2469.png)'
  prefs: []
  type: TYPE_IMG
- en: The one that we want to use now is `autoroute`. We need to set the `SESSION`
    and the `SUBNET`; set the `SESSION` first, by running `set SESSION 1`, and then
    set the `SUBNET` to what we've seen when we ran the `ifconfig` command. It was
    `10.0.3.4`. Again, we're using the very simple commands that we have already learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will set this `SESSION` to number `1` (that''s the `SESSION` that we hacked
    for the Windows machine), and the `SUBNET` is the `SUBNET` that the Windows machine
    is connected to, so it''s `10.0.3.0`. We will then run `exploit`, and this will
    create the connection (or the route) between our device and the Windows device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e551b8c-21b4-44c2-ba36-7b4f6502e5d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we will go back to the same exploit that we tried at the start of this
    section, and we will see that the exploit is going to work now, because the Windows
    device is now visible to us. Instead of using the `exploit/multi/samba/usermap_script` exploit,
    we can use the port scanners or discovery modules that come pre-installed with
    Metasploit, or any other module that comes with Metasploit. We now have a connection
    to the Windows computer, and we have set up a route between that network and our
    computer, so we can now see the Metasploitable device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to use the same exploit that we used before: `exploit/multi/samba/usermap_script`.
    We will leave the options the same, because everything is set up correctly. We
    will just run `exploit`, and, as we can see in the following screenshot, the command
    shell will start properly, and we will have access to the Metasploitable device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9c61233e-34da-490c-a9ba-1d4c6560773b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can run `id` and `uname -a` to confirm the preceding, and we can see that
    we''re in the Metasploitable device and can run any Linux command that we want;
    we can use `ls`, `pwd`, or any other Linux command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/30bcf721-bff9-4a6a-92c1-94e2451fe5a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Basically, we have full access to the target computer. As we mentioned previously,
    we can upload a program and run it from the target computer. However, it's not
    always a good idea to upload things to a hacked computer—setting up routes and
    using pivoting are much safer choices.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to take a look at other Metasploitable modules, because
    Metasploit is very vast. It was difficult for me to cover everything; I just covered
    the main points, but you can always go in and take a look at other modules. Using
    the modules in practice is usually the same as what we did here; we took a look
    at a broad array of modules, so you should be able to configure options and run
    modules however you like.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on post exploitation tasks, which involved what
    can be done after we have broken into a target system. We covered basic filesystem
    commands and illustrated how to access a victim's machine, even if the user is
    not using a particular software or has powered off the system. We implemented
    both simple and advanced methods to maintain access to a system. Then, we looked
    at how to obtain user credentials after performing a keylogging attack on a target
    device. Later, we went over the concept of pivoting, which means targeting a system
    that is not directly present on our network. We even studied examples of pivoting
    autoroutes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few chapters, we will cover the fundamentals of website penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
