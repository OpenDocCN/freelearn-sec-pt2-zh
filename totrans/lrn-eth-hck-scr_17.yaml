- en: Website Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focuses on the basics that we need to know before we start with
    web application penetration testing. We will start by learning what a website
    actually is, as well as giving an overview of the processing that happens on the
    backend when we request access to a website. Later, we will discuss ways to attack
    a website, and look at a few tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a website?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a website?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start website penetration testing, we need to understand what
    a website really is. A website is just an application that is installed on a computer.
    The computer might have better specifications than our computer, but fundamentally,
    it works just like any other computer, which means that it has an operating system,
    as well as a number of applications that allow it to act as a web server. The
    two main applications that it has are a web server (for example, Apache), and
    a database (for example, MySQL):'
  prefs: []
  type: TYPE_NORMAL
- en: The **web server** basically understands and executes the web application. Our
    web application can be written in PHP, Python, or any other programming language.
    The only restriction is that the web server needs to be able to understand and
    execute the web application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **database** contains the data that is used by the web application. All
    of this is stored on a computer called the server. The server is connected to
    the internet and has an IP address; anybody can access or ping it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The web application is executed either by the web server—which is installed
    on our server—or on the target; therefore, any time we request a page or run a
    web application, it''s actually executed on the web server and not on the client''s
    computer. Once it is executed on the web server, the web server sends an HTML
    page—which is ready to read—to the target person or client, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd38b878-27d6-4a50-b16c-9fce0cede976.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's say, for example, that we are using a phone or a computer and we want
    to access facebook.com. If we type facebook.com into our URL, it will be translated
    to an IP address using a DNS server. A DNS is a server that translates every name,
    `.com`, `.edu`, or any website with a name or a domain name to its relevant IP
    address. If we request facebook.com, the request goes to a DNS server that then
    translates facebook.com to the IP where Facebook is stored, and then the DNS server
    will go to the IP address of Facebook, execute the page that we wanted using all
    of the applications that we have spoken about, and then just give us a ready HTML
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what we get back is just a markup written in HTML—which is a markup language—of
    the result of executing the program; the program gets executed on the server,
    and we just get the result. This is very important, because in the future, if
    we wanted to get anything executed on the web server, such as a shell, or a virus
    to be executed on the target computer, then we need to send it in a language that
    the web server understands (for example, PHP), and once we execute it inside the
    server, it will be executed on the target computer.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, regardless of the person that accesses the page, the web shell
    that we are going to send (if it is written in PHP or in a language that the server
    understands) will be executed on the server and not on our computer. Therefore,
    it will give us access to the server and not to the person who accessed that server.
    On the other hand, some websites use JavaScript, which is a client-side language.
    If we manage to find a website that allows you to run JavaScript code, then the
    code will be executed by the clients. Even though the code might be injected into
    the web server, it will be executed on the client side, and it will allow us to
    perform attacks on the client computer and not on the server. Hence, it's very
    important to distinguish between a client-side language and a server-side language.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss attacking a website. We have two approaches
    for attacking websites:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use the methods that we've learned so far about attacking a website.
    Because we know a website is installed on a computer, we can try to attack and
    hack it just like any another computer. We can also try to use server-side attacks
    to see which web server, operating system, or other applications are installed,
    and, if we find any vulnerabilities, to see if we can use any of them to gain
    access to the computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another way to attack is to use client-side attacks. Because websites are managed
    by humans, there must be humans managing and maintaining these websites. This
    means that, if we manage to hack any of the site's administrators, we will probably
    be able to get their username and password, and from there log in to their admin
    panel or to the **Secure Socket Shell** (**SSH**). Then we will be able to access
    any of the services that they use to manage the website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both of these methods fail, we can try to test the web application, because
    it is just an application installed on that website. Therefore, our target might
    not actually be the web application—maybe our target is just a person using that
    website, but whose computer is inaccessible. Instead, we can go to the website,
    hack into the website, and from there go to our target person.
  prefs: []
  type: TYPE_NORMAL
- en: All of these applications and devices are interconnected, and we can use one
    of them to our advantage and then make our way to another place or to another
    computer. In this section, we won't be focusing on server and client-side attacks
    any further. Instead, we'll be learning about testing the security of the web
    application itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our target will be a Metasploitable machine, and if we run the `ifconfig` command
    on Metasploitable, we will see that its IP is `10.0.2.4`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7a4d896c-c851-49ce-8945-3df1a7490e93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we look inside the `/var/www` folder, we''ll see all the website files stored,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee8dcb5c-62db-4194-87b4-22912d93e0e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we can see that we have our `phpinfo.php` page,
    and we have `mutillidae`, `dvwa`, and `phpMyAdmin`. If we go to the Kali machine,
    or to any machine on the same network, and try to open the browser and go to `10.0.2.4`,
    we will see that we have a website made for Metasploitable, as shown in the following
    screenshot. A website is just an application installed on the web browser, and
    we can access any of the Metasploitable websites and use them to test their security:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52415726-1777-4728-8418-d64ef9d1534f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another thing to look at is the DVWA page. It requires a username and a password
    to log in; the Username is `admin` and the Password is `password`. Once we enter
    these credentials, we can log in to it, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b97dd53-8723-48d0-a66a-ecb29ee9016f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in, we can modify the security settings by using the DVWA Security
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0d12b51-5e30-4cb9-9d37-868aa758dd78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the DVWA Security tab, we will set Script Security to low and click on
    Submit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/383289f0-6505-4687-98b9-4a74755b9d44.png)'
  prefs: []
  type: TYPE_IMG
- en: We will keep it set to low in the upcoming sections. Because this is just an
    introductory course, we'll only be talking about the basic ways of discovering
    web application vulnerabilities in both DVWA and the Mutillidae web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to the Mutillidae web application in the same way that we accessed
    the DVWA web application, we should make sure that our Security Level is set to
    0, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab3a3abc-3c90-416d-a1c8-d334b6c6a964.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can toggle Security Level by clicking the Toggle Security option on the
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36d51b4a-0d61-45ad-8a02-f3787e0cd8ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the concepts and methods that are necessary
    to perform website penetration testing. We began by learning about what a website
    is, and we gave a brief overview of how backend processing takes place when we
    request a particular website on our devices. Then we discussed the techniques
    that are used to attack a website, as well as tools such as Metasploitable and
    DVWA.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be focusing on information gathering and analysis,
    and also how to use this information to exploit the target system.
  prefs: []
  type: TYPE_NORMAL
