- en: Website Pentesting - Information Gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to focus on various techniques to gather information
    about the client using the `Whois` command, Netcraft, and Robtex. Then, we will
    see how we can attack a server by targeting websites that are hosted on that server.
    Moving toward the information gathering section, we are going to learn about subdomains
    and how they they can be useful for performing attacks. Later, we are going to
    look for files on the target system to gather some information and also analyze
    that data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Website on the same server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information gathering form target websites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information gathering using tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, as we saw in the previous chapter how gathering information about the client
    will help us to launch attacks on victims, in this section, we are going to be
    using commands such as Whois, and tools such as Netcraft and Robtex to gather
    information from target systems.
  prefs: []
  type: TYPE_NORMAL
- en: The Whois Lookup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we do before we start trying to exploit or find any vulnerabilities
    is information gathering. Therefore, we try to gather as much information as possible
    about the target, and web applications are no different. We're going to start
    by trying to get as much information as we can about the target IP address, the
    domain name info, the technology that is used on the website, which programming
    language is used, what kind of server is installed on it, and what kind of database
    is being used. We're going to gather information about the company and its DNS
    records, and we'll also see if we can find any files that are not listed, or any
    subdomains that are not visible to other people. Now, we can use any of the information
    gathering tools that we used before; for example, we can use Maltego and just
    insert an entity as a website, and then start running actions. It's exactly the
    same as we did with a normal person, in [Chapter 11](ed4df884-d2d6-4c71-a1a4-28e4a508ed19.xhtml),
    *Client Side Attacks - Social Engineering*. We can also use Nmap, or even Nexpose,
    and test the infrastructure of the website and see what information we can gather
    from that. Again, we won't be going over that because we've seen it in previous
    chapters. There is no difference between a website or a normal computerâ€”as we
    know, a website is just another computer. So, what we are going to be focusing
    on are technologies that we will only see on websites, such as domain names, DNS
    records, and stuff like that, that we either won't be able to use or haven't seen
    before in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the first thing that we're going to have a look at is Whois Lookup. Whois
    Lookup is a protocol that's used to find the owners of internet resources, for
    example, a server, an IP address, or a domain. So, we're not actually hacking;
    we're literally just retrieving info from a database that contains information
    about owners of stuff on the internet. So, for example, when we sign up for a
    domain name, if we wanted to register a domain name, for example, za1d.com, when
    we do that, we have to supply information about the person who is signing in,
    the address, and then the domain name will be stored in our name and people will
    see that Zaid owns the domain name. That is all we're going to do.
  prefs: []
  type: TYPE_NORMAL
- en: If we google Whois Lookup, we will see a lot of websites providing the service,
    so we will use [http://whois.domaintools.com/](http://whois.domaintools.com/),
    [enter our target domain name, `isecurity.org`, and press Search:](http://whois.domaintools.com/)
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7fb19dd6-55dd-4948-84cf-8afbf703b6c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, we get a lot of information about
    our target website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a03e1a73-2e8e-4f98-88e2-897643826552.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the email address that we can use to contact the domain name info.
    Usually, we will be able to see the address of the company that has registered
    the domain name, but we can see that this company is using privacy on their domain;
    but if they haven't, that is, if they're not using privacy, we will be able to
    see their address and more information about the actual company.
  prefs: []
  type: TYPE_NORMAL
- en: We can see when the domain name was created, and we can see the IP Address of
    `isecur1ty.org`. If we ping the IP, we should get the same IP address as mentioned
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run `ping www.isecur1ty.org`, the same IP address is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cac971d0-c79f-42cf-bb77-064ad109ad0f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the IP Location, we can see the Domain Status, and we can also access
    the History, but we need to register for that. Now, again, we can use this information
    to find exploits.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, in the Whois Record, we can find more information
    about the company that registered this domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6464299-a43d-4903-ba99-283d6dd2c3f1.png)'
  prefs: []
  type: TYPE_IMG
- en: This is basic information, but it's very helpful in the long run, just to know
    what our target is, what their IP is, and what services they are using. We can
    also see the name servers that are being used and we can see which company they
    are provided by.
  prefs: []
  type: TYPE_NORMAL
- en: Netcraft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn how to get information about the technologies
    used by the target website. We''re going to use a website called Netcraft ([https://www.netcraft.com](https://www.netcraft.com)),
    and we''re going to put the target address, select our target as `isecur1ty.org`,
    and click on the arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fe67198d-5022-43e7-a2f6-36a78a804572.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After, click on Site Report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/214d352f-8b3e-4596-9304-3fe6339e6bda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we can see some basic information, such as the
    Site title, a Description, Keywords, and when the website was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e4ec4da-8a0b-4727-93a1-5959939b1b06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling down further, we can see the website itself, the Domain, the IP address,
    and just as we saw in the previous section, the Domain registrar, which is the
    company who registered the domain for isecur1ty:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/49278c3f-45b5-498f-8d00-3e0feb81c2d6.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we would normally see information about the organization,
    but here, we can't , because isecur1ty is using privacy protection. Usually, we
    should be able to see such information and even more.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot we can see that it's hosted in the UK, we can see
    the **Nameserver**, which is `ns1.digitalocean.com`, and again, if we just go
    to `ns1.digitalocean.com`, we will discover that this is a website for web hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we know this is a web hosting company, and in worst-case scenarios we can
    use this or try to hack into `ns1.digitalocean.com` itself to gain access to isecur1ty.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down further, we will see the Hosting History of the hosting companies
    that isecur1ty used, and we can see that the latest one is running on Linux with
    Apache, the same server that we saw in the previous section, 2.2.31 with Unix
    mod_ssl and all the other add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/917674b4-4c65-4f39-be3c-79926dce3069.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, this is very important to find vulnerabilities and exploits on our target
    computer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down to Web Trackers, it will show us the third-party resources or
    applications used on our target, so we can see that our target uses Google, MaxCDN,
    and other Google services. This could also help us to find or gain access to the
    target computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9fdc3766-d29f-4749-86ff-ade16326c583.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Technology tab is one of the most important tabs or sections in here, because
    it shows us the technologies used on the target website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c6f3dbb-1b71-4549-8407-ad4d007b5f72.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the preceding screenshot it's using the Apache web server, and
    on the Server-Side, we can see that the website uses PHP, which means the website
    can understand and run PHP code. This is very important because, in the future,
    if we manage to run any kind of code on our target, then we know the code should
    be sent as PHP code. To create payloads on Metasploit or on Veil-Evasion, we should
    create them in PHP format and the target website will be able to run them because
    it supports PHP. On the Client-Side, we can see in the preceding screenshot that
    the website supports JavaScript, so if we run JavaScript, or if we manage to run
    JavaScript code on the website, it won't be executed on the website; it will be
    executed on the users side who are viewing the website, because JavaScript is
    a client-side language and PHP is server-side. If we manage to run PHP code, it
    will be executed on the server itself. If we manage to run JavaScript, it will
    be executed on the users or the peoples machine who visit the website. It's the
    same with jQuery. This is just a framework for JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down, we can see in the following screenshot that the website uses
    WordPress Self-Hosted software. This is very important. Netcraft will also show
    any web applications being used on the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ad727726-d9a1-45b8-bafd-d08f64dac3f0.png)'
  prefs: []
  type: TYPE_IMG
- en: WordPress is just a web application, so we could see other examples in our case,
    and it's an open source web application, there are a lot of other websites might
    have. The good thing is we can go and find exploits or vulnerabilities within
    the web application. If we are lucky enough to find an existing one, then we can
    go ahead and exploit it on the target website. For example, we have WordPress
    in our example, so if we go to [https://www.exploit-db.com/](https://www.exploit-db.com/)
    and search for WordPress, we'll manage to find lot of exploits related to WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different versions of WordPress. We need to make sure that we have
    the same version as our target. We''ll look at examples to see how to use exploits,
    but it just shows how powerful information gathering is. Scrolling further, we
    can also find other information, such as that the website uses HTML5 and CSS,
    and all that kind of stuff:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d11444af-49be-4359-b930-797edecd4d73.png)'
  prefs: []
  type: TYPE_IMG
- en: Hence, Netcraft is really useful for getting to know the website. We gathered
    information regarding the siteâ€”that it runs on PHP, and runs JavaScript. It uses
    WordPress, so we can use WordPress to hack into the website, and if we scroll
    up, we also discovered the web hosting of the website. Therefore, in worst-case
    scenarios, we can try to hack into a web hosting server and gain access to our
    target website.
  prefs: []
  type: TYPE_NORMAL
- en: Robtex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll learn how we can get comprehensive DNS information
    about the target website. Just to give a quick review on what DNS is, when we
    type **FACEBOOK.COM**, a **DNS SERVER** will convert the name into an IP address.
    The **DNS SERVER** contains a number of records, each pointing to a different
    domain or to a different IP. Sometimes, they point to the same IP, but in general,
    they request the domain name, it gets converted into an IP address, and, depending
    on the address, the information needs to be stored somewhere. We''re going to
    query the **DNS SERVER** and see what information we can get through it. The process
    is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5dbbe6fd-a15b-4fcc-9a1b-b942941bd753.png)'
  prefs: []
  type: TYPE_IMG
- en: We're going to be using a website called Robtex ([https://www.robtex.com/](https://www.robtex.com/)),
    searching `isecur1ty.org`. Next, just click on GO and select the first result
    on the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can see here that this report contains a lot of information, but we
    have a nice little index that will help us navigate through it. A lot of this
    information is a little bit advanced, so we will be skipping through a lot of
    it because we want to keep this as basic as possible. Web penetration testing
    is a vast topic in itself. Hence, we''re going to keep this a little bit basic,
    and we''ll see what information we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0892665-f7a8-46c3-a26a-a1044ce50d3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Firstly, we get information about the website. We can see the DNS records,
    we can see the Name servers that have been used, and we can see some Mail servers.
    We can also see the RECORDS that we were talking about and the DNS server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc06dc78-30cd-4c86-8dab-b606746be790.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see all of these records. We can see the a record, the one that
    converts a domain name to an IP address, and if we remember, when we were performing
    DNS spoofing, we added an `A` record in our `dns.conf` and `iter.conf` files.
    The a record is actually what''s used in the DNS servers to link isecur1ty.org
    to its IP address, but again, there is another type of record; for example, we
    have the ns record, which links the domain, the name server. We can also see the
    mx record in the following screenshot, which links it to the mail server, and
    we can see that the website uses a Google mail server, so it''s probably using
    Gmail to provide mail services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2558e0a1-502b-485d-83b1-90aac18463ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling further, we have a graph of how all of the services interact with
    each other, how the services use the records, and how they are translated into
    IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/342d8404-bdc8-49fa-8e4c-b2c4b087530d.png)Services interacting with
    each other'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Shared tab, we will see if any of these resources are being shared:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ec927cd9-dcf1-4d6d-9db8-a421a8b73a6c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also see that it's using three Name servers. We can see the Mail servers,
    and we can also see a number of websites pointing to the same IP address, and
    a number of domain names, pointing to the same IP address. Therefore, the preceding
    websites are stored on the same web server. Now, again, there is more information
    about the name servers and websites that are Sharing mail servers. It doesn't
    mean that these websites are on the same server, but the most important thing
    is that we have the websites pointing to the same IP, which means that these websites
    exist on the same server. Now, if you gain access to any of the websites mentioned,
    it will be very easy to gain access to [isecur1ty.org](http://www.isecur1ty.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Websites on the same server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Websites are installed on web servers on normal computers, as we said before.
    These normal computers have IP addresses and, using the IP address, we can access
    our target website. Now, in many scenarios, our target website, or our target
    server, will contain a large number of websites, hence it'll have the website
    that we are targeting, but it will also contain other websites on the same server,
    hence on the same filesystem. For example, if we could not find any vulnerabilities
    in our target website, we can still try to hack into any other website that is
    installed on the same server. If we can do that, then we will be able to gain
    access to the server. Gaining access to the server basically means that we have
    access to all the other websites, because the server is just a computer, and we
    can navigate to the website that we want to hack and gain access to that website.
    Suppose we are trying to hack into a website and we can't find an exploit, then
    the next step will be trying to hack any other website that existing on the same
    server. Hence, what we mean by exist on the same server is they have the same
    IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering from target websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have just been using commands and tools to gather information about
    the victim. Now, we will make use you information that we get from URLs the victims
    browses, also how we can analyze the files from the targets machine to which we
    have access to and what useful information we can gather through them. We will
    then see how to use the gathered information to launch attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Finding subdomains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we're going to study subdomains. We see subdomains everywhere,
    for example, `subdomain.target.com`. Now, if we have `beta.facebook.com`, we would
    have `mobile.facebook.com`, or we might have user.facebook.com. Suppose we google
    `mail.google.com`, which just takes us to Gmail. Why subdomains are important
    is, in a lot of cases, websites have subdomains for their own users, for example,
    for employees or for certain customers, so they're not advertised unless it's
    some sort of a VIP customer or we are an employee. We will not see these subdomains
    on search engines and we will never see a link leading to them, so they might
    contain vulnerabilities or exploits that will help us gain access to the whole
    website, but we just never knew about them because they're not advertised. Another
    thing is, a lot of the big websites, when they're trying to install a new update
    or add a new feature to the website, install it in a subdomain, so we have `beta.facebook.com`,
    which actually contains a beta version of Facebook, which contains experimental
    features. Now, experimental features are great because they're still under development,
    and there's a really high chance of finding exploits in them. This is actually
    true, not so long ago, someone was able to brute-force the restore password key
    for any Facebook user and was able to gain access to any Facebook user's account.
    This was only possible through `beta.facebook.com` because Facebook used to check
    for a number of attempts or failed attempts, and they just didn't implement that
    security feature in beta because they didn't think anyone was going to go there.
    Beta usually contains more problems than the normal website, so it is very useful
    to try and hack into it. In this section, we will see how we can find any subdomains
    that have not been advertised, or even advertised ones, so we'll be able to get
    subdomains of our target.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to use a tool called knock. The tool is very simple. We don''t
    really need to install it; all we have to do is download it using a `git` command.
    The command is `git clone`, and then we put the URL of the tool as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s downloaded, navigate to it using the `cd` command and we''ll see
    that we have the `.py` file. We are going to run it using the `python knockpy.py`
    command, and then we will enter the website that we want to get the subdomains
    of, which is `isecur1ty.org`. The following is the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After execution, the command will show some information about the website,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/405732dc-6b54-4b9a-babd-2dd77937fb2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will perform a brute-force and a Google-based subdomain search for isecur1ty,
    and it will show us any subdomain that isecur1ty might have that we could try
    and test the security of and see what''s installed on it. Maybe we will be able
    to gain access to the website through that subdomain. Once the scan is complete,
    as we can see in the following screenshot, we managed to find seven subdomains
    that were not advertised:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9e3557f2-7e80-4e4b-809c-ebb31c12126c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, one of them is `ftp.isecur1ty.org`. We already know about `isecurity.org`,
    `localhost.isecur1ty.org` is just a local subdomain. We can see that the mail
    server `mail.isercur1ty.org` has its own subdomain as well, and we can see a very
    interesting one, `news.isecur1ty.org`. It actually did contain a beta version
    of a script that was been worked on. Hence, if someone was trying to hack into
    our website, they'd actually see that there is a script under development, and
    there's a high chance that they would have been able to find a vulnerability in
    it and gain access to the whole website.
  prefs: []
  type: TYPE_NORMAL
- en: This just shows us again how important information gathering is, which can be
    used to gain access to websites. If we don't do it, we will be missing a lot of
    things. For example, we might be missing a whole script with a whole number of
    vulnerabilities, or we could be missing an admin login page or an employee login
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering using files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned how to find any subdomains that exist within our target
    website that have not been listed. In this section, we're going to see how we
    can find files and directories that are stored on our target computer or our target
    website. Again, these could be useful because these files could contain passwords,
    they could contain config information, or they could contain information about
    the actual server, which will help us further exploit our target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s just first see what is meant by files and directories, just to show
    the structure of directories on a web server. We have our Metasploitable machine
    and, as we know, usually the web server stuff is stored in `var/www/` directory.
    If we run `ls`, we will see that we have a number of files and directories, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/799aad7d-757f-498a-b8a6-5accc9bed102.png)'
  prefs: []
  type: TYPE_IMG
- en: If we run the `ls -la` command, it gives us a list of precise information about
    files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: We can see in the preceding screenshot that we have a directory called `mutillidae`.
    Mutillidae is a web application that is designed to behave just like Metasploitable.
    It is designed so that it has a number of exploits so that we can learn how to
    hack using it. You will see that it's installed in a directory called `mutillidae`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we go to the IP address of the Metasploitable machine `10.0.2.4`, there
    is easy access for us to Mutillidae. If we click on the URL, `10.0.2.15 /mutillidae`,
    we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43b422ac-3d9e-4244-95ba-4c028b0d85a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That means we are inside the `mutillidae` directory. So, every time we see
    a forward slash, that usually means we are inside a directory. Now, if we run
    `cd mutillidae` and we also run the `ls` command, we will see that we have a large
    number of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8beb301b-5799-482d-99af-f1a3ffd987a0.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, let's say we wanted to open one of these files and we have `index.php`.
    If we do `index.php`, then this is our current file on the browser, it's called
    `index.php`, we will be able to see it in the URL .
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, what we learned from this is that `mutillidae` is just a directory inside
    our web root. So, at the moment, the Metasploitable web application is stored
    in `/var/www/mutillidae` directory and then the file that we are accessing is
    `index.php`. If we run the `pwd` command, we will see that we''re in `/var/www/mutillidae`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/113ead2a-be0a-4cfc-97dc-e4720dd7389b.png)'
  prefs: []
  type: TYPE_IMG
- en: The IP address kind of hides where our `www` route is, it hides the `/var/www`
    route, and then everything after that will be displayed after the IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, what we''re looking to find is all the directories and the files
    that we cannot see. So, through the links, we will be able to access different
    types and different pages. This is the same with any other website, but there
    are always files and directories hidden that we just never see. We''ll see how
    we can get URLs for the files and access them, and read the information in them.
    To do that, we''re going to use a tool called `dirb`, and to see how to use that
    tool we''re going to run the `man dirb` command to see all the options associated
    with that tool. In the following screenshot, we can see the syntax. To use the
    tool, we just type in `dirb`, the URL of our target, and then output a wordlist.
    The way it works is based on a brute-force attack, and just uses a wordlist of
    names and it sends requests with those names. Any time it finds something it tells
    us, then we will find a file with a name from the wordlist. So, it is only able
    to find names and directories based on the wordlist that we provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62ffa452-7c12-427b-89c5-8bdbd7e8ea35.png)'
  prefs: []
  type: TYPE_IMG
- en: We can create a wordlist using `crunch` or we can use wordlists that come with
    the `dirb` tool. The options here allow us to configure how the tool works. We
    can change things around the way we want them. For example, we can disable the
    recursive nests of the tools so it just runs on one directory instead of trying
    a number of directories. We can get it to ask us if we want it to access the directory
    or not, instead of automatically accessing directories and trying to find files
    within those directories, because this could be exhaustive if our target is a
    big website; there might be a lot of directories and then the tool would try to
    access all of them and find files within all of them. We can see how big the tree
    could go. We can also set it to use a username and a password if the target websites
    use some sort of authentication, and we can use `-v` for verbose output and `-o`
    to output the results to a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at a very simple example. We are just going to run `dirb`
    on our target, which is `http://10.0.2.4`. We inserted `http://` because, remember,
    we''re targeting a website not an IP address. Then, we are going to put the directory,
    in our case theÂ `mutillidae`Â directory, that we want to find files and directories
    within. We don''t want it to access anything within other directories, because
    we have a number of scripts installed on the Metasploitable web server; we only
    want it to work on theÂ `mutillidae`Â directory. So, the command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After writing the command in the Terminal and hitting *Enter*, it will start
    to findÂ URLs and files within the web application. We can see the command in action
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1bb987c-84ae-4082-8534-bc8ffc81b281.png)'
  prefs: []
  type: TYPE_IMG
- en: It will take a while for it to processÂ `dirb` will use a wordlist file and it
    will useÂ a default small wordlist file that is stored in `usr/share/dirb/wordlists/common.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: We can have a look at theÂ `usr/share/dirb/wordlists/common.txt` directory and
    see if there are any other wordlists that we would like to use, but we can use
    them only by placing the full path to the wordlist after the command. Therefore,
    instead of the way we wrote the command, just state the path where our wordlist
    is placed. For example, let's say, if it's in theÂ `root` directory, we type it
    as `root/wordlist.txt`,Â but at the moment, it's using the default one, which is
    stored in theÂ `usr/share/dirb/wordlists/common.txt` directory. In the next section,
    we'll see how to analyze the files we downloaded using theÂ `dirb` tool.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing file results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can see in the following screenshot of the result that theÂ `dirb` tool was
    able to find a number of files. Some of them we already know:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff8cb731-a24f-46fe-89c5-02cdd64126ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, as we can see in the preceding screenshot,Â `favicon.ico` is just an icon;Â `footer`
    and `header`Â are probably only style files; andÂ `index.php` is the index that
    we usually see. We can see that we discovered a `login`Â page that allows people
    to log in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in many scenarios, we would be able to find the username and password
    of a target by exploiting a really complex vulnerability, and then end up not
    being able to log in because we couldn''t find where to log in. In such cases,
    tools like `dirb`Â can be very useful. We can see that the `phpinfo.php` fileÂ is
    usually very useful because it displays a lot of information about the PHP interpreter
    running on the web server, and as we can see in the following screenshot, the
    file contains a lot of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82eac66f-f25a-4b8a-a8d7-22d42af11275.png)'
  prefs: []
  type: TYPE_IMG
- en: Preceding information's are useful, and we can get to know some of the directories.
    From the preceding screenshot, we know that it's running php5, the configuration
    is stored in theÂ `.cgi` file. `.ini` files are usually the config files for PHP,
    so we can see all the places where they are stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we scroll down further, we will see the permissions installed. We will
    also see that it has MySQL, so it''s using MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/10120ce0-c178-4092-990f-cd4c19b59e3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot the directories where different types
    of configurations are stored. We can also see all the modules and extensions that
    are being used with PHP, so theÂ `phpinfo.php` file is very useful. We can see
    in the following screenshot that we managed to find where the `phpMyAdmin` login
    is, and that''s basically the login that''s used to log in to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/001b5255-cf84-443a-97bc-69fdfa0b41bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another very useful file is the `robots.txt`Â file,Â which tells search engines,
    such as Google, how to deal with the website. Hence, it usually contains files
    that we don''t want the website or Google to see or to read. Now, if we can read
    theÂ `robots.txt` file, then we''ll be able to see what the web admin is trying
    to hide. We can see in the following screenshot that the web admin doesn''t want
    Google to see a directory called `passwords`, and it doesn''t want us to see a
    file called `config.inc`Â either. Niether does it want it to see these other files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6ca8df1-5f24-43bf-8e89-3de25f5f3d32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s see the `./passwords` and `./config.inc`Â files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b9c3c79b-8417-43dc-9735-c2d64bbf28c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot that there is a file called `accounts.txt`
    and, clicking on the file, we can see that we''ve got some usernames and passwords.
    So, we can see that there is aÂ `admin` user, with the `adminpass`Â password and
    we can see that we have a password for theÂ `adrian`Â user, which isÂ `somepassword`.
    So, we managed to find usernames and passwords, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab225073-98cd-4ba1-b961-aac580787ffa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we''re still not sure what the preceding usernames and passwords are for,
    but we''re sure that we were able to find very useful information. Another useful
    file is the `config.inc`Â file, and we can see in the following screenshot that
    we have information that allows us to connect to the database, because they have
    `$dbhost`, `$dbuser`, `$dbpass`, and `$dbname`Â parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e04713ec-0376-44f0-95ad-6f7f83118eba.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the username is `root` and the password is blank, so we can
    go ahead and try to connect to the database based on the commands from the preceding
    screenshot, and then we should be able to get access to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we're still not sure where we can use them, but we can add them to a list
    to try to log in to the admin, or just store them in a list so that we can use
    them if we carry out a brute-force attack.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on gathering information. Firstly, we used tools such as
    WhoIs Lookup, Netcraft, and Robtex. Then, we focused on how we can use the websites
    hosted on a server to exploit that particular server. We then learned about domains
    and how they can act as an important source of information that can we use to
    attack a victim. Later, we studied how to access files on a target system or target
    websites, and also how to analyze important information from various files.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the next chapter, we are going to see how important and powerful information
    gathering can be to launch attacks on victims.
  prefs: []
  type: TYPE_NORMAL
