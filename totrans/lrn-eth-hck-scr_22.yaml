- en: Discovering Vulnerabilities Automatically Using OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we covered another important part of penetration testing,
    which was about exploiting cross-site scripting vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in this chapter, we are going to be studying a tool called ZAP, which will
    help us detect the risks and vulnerabilities of web applications. We will then
    explore various scans that we can perform and also learn to read the scan results.
    We will see this through a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following web penetration testing topics:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP start
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP ZAP result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP ZAP start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've learned how to manually discover a number of very dangerous vulnerabilities.
    We've seen how they work and how to exploit them. In this section, we will learn
    about a tool that will allow us to automatically discover vulnerabilities in web
    applications. It'll allow us to discover the vulnerabilities that we learned,
    plus many more. The reason we didn't study this tool at the start because I wanted
    to teach you how to discover vulnerabilities manually. Also, I wanted you to know
    how these vulnerabilities occur, so as to understand the reason behind them. So
    this program is just a tool, it can make mistakes and it can show false positives.
    It can also miss vulnerabilities in some cases.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I wanted you to know how to do these things manually, so that if
    the program doesn't work or misses something, you will be able to find it. The
    best way to use these programs is as a backup or just as a tool to help us with
    our penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the tool is very simple. We are going to go to Applications and then
    we are going to type in `ZAP`. It will ask us if we want to save the current session
    when we search for something, and we will select No, I do not want to persist
    this session at this moment in time and click Start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a68f4a2-fe59-4add-a48b-a831b17b0b77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot is the main view of the tool. On the left are the
    websites that we will be targeting, on the right, we can attack and set the website
    URL, and at the bottom, we can see the results of our attack or our scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aad43298-5494-4e63-8b1e-0d9cfb41c7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go to the cog icon on the left, it will open a window, as seen in the
    following screenshot, which will allow us to modify the options for the program.
    We can modify certain aspects of it, the way the Fuzzer works, the way the AJAX Spider
    works, the way the scan works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/008df137-c183-4b4e-9a2a-a3f5f13b90f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are not going to modify anything. Another thing that we can modify is the
    policies used in the scan; something similar to the scans that we were using with
    Nmap, the intense scan and so on. So, we going to click on the plus sign, which
    is at the bottom of the screen, and we are going to click on Active Scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4f7002d-34fb-46cc-889d-8e7efe43a1fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Scan Policy Manager button, highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6221304-e6f6-4afe-bd44-3a583d5576c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Default Policy, now we can create our own policies by using the Add
    button. We''re going to click on Default Policy and click on the Modify button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a9b4f1b-dfd7-420e-af60-72603dd6715b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Modify button will show us the aspects that we can modify:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bef906d4-2ff3-445f-8869-c45a4b37f4ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we can see that we can modify the Policy, the
    Default Alert Threshold, and the Default Attack Strength for the global policy.
    Clicking on each of the categories will allow us to modify the specific scans
    that will be performed. For example, in the following screenshot, in the Injection
    tab, we can see all the injection scans that the program is going to try, for
    example, Cross Site Scripting: in the Threshold column, when we click on type
    of threshold, we can set it to Default, Low, Medium, or High:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b35f5937-dcad-484a-b1db-abcb130251cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting it to Default will just default to the value selected, which is Medium
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ff94e33-1ed5-4f3c-8fbe-8ec8e5f3f1ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or, for example, if a SQL Injection is what we are looking for, if what we
    are looking for is access to the database, then we can set Threshold to High so
    that it''ll try everything and it will try to find vulnerability in even difficult
    places:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/89a7a2bf-af2e-4c59-ab12-e0df5488ce0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just leave everything as default. Now, we are going to start our attack against
    the mutillidae script. So, we have it in `10.0.2.4` running on the Metasploitable
    machine, and the URL is `http://10.0.2.4/mutillidae/`. Paste the URL in the URL
    to attack textbox present in the OWASP tool and click the Attack button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b5d57c22-2cee-47ed-a778-8d0071b66542.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tool is first try to find all the URLs and then it will try and attack
    the URLs based on the scan policy that we used. The output of the scan will be
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f2dba94f-eb42-4705-aa1f-210c2df81360.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP ZAP results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the scan is over and we can see our website on the left, clicking on
    it will show us some results from the Spider when it was looking for the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bcaab2c3-7758-4ad5-839d-ba22e360e192.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The very interesting part is the Alerts in the following screenshot. We can
    see all the vulnerabilities that have been discovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ff31805c-b290-410f-b55b-48454294dfb4.png)'
  prefs: []
  type: TYPE_IMG
- en: At the bottom-left of the preceding screenshot, we can see that we have 6 red
    flags, the High Priority Alerts, we have 4 orange flags, 5 yellow flags, and 0
    blue. These are organized in order of severity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on any of the categories will expand it and show the threats that
    have been found, for example, clicking on Path Traversal (10), we''ll see all
    the URLs that can be exploited to read files from the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46eb2954-4f04-40b9-a714-ef98ef4be8a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on any of the sites, we will see the HTTP request that was sent in
    order to discover this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f1d24a90-02ce-4f23-937a-c66953e49238.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the response and why the tool thinks that this
    is vulnerable, and we can see that in the response the tool was able to get the
    contents of `/etc/passwd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a74d3604-bc84-4adc-9aa0-a6684d820d4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, we can see the URL, the tool used to exploit the
    vulnerability, and we can see a Description of what the current vulnerability
    is and how it has been exploited:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3b5df714-07f9-4270-9d18-634d85f37493.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see Risk, which is High. We can see Confidence—how confident the
    tool is about the existence of this vulnerability. We can also see that it''s
    been injected into a page and the Attack is trying to get `/etc/passwd`. So, right-click
    on the page and click Open URL in Browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a83090ba-5317-4d2b-8cf3-e80840f3b09e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see in the following screenshot, the tool has exploited the site
    for us. It shows us the output for the vulnerability, and we can read the contents
    of `/etc/passwd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af179346-1b94-4fb0-a83d-202748a4105b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at another example, for example Cross Site Scripting. Again,
    the tool also checks for `POST` and `GET` parameters. Sometimes, when the injection
    is sent in textboxes, or even sent without textboxes, if it''s sent in a `POST`
    parameter, we won''t see it in the URL, so it actually checks for `POST` and `GET`.
    You can see in the following screenshot, it found a vulnerability in the `POST`
    request in the register page, and it also found one in a `GET` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af264dbe-bb3b-4eb7-96b5-9f79ffdf7175.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, right-clicking and opening in the browser will execute it for us, and
    we can see that the code has been executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/513e92c9-a2f8-43d3-b0a5-6bcb28a043f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, we can find the URL of the execution from the address bar in the browser.
    If we want to use it for any other tools, we can see it in tool as well, the URL
    that's being used to exploit the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s just have one more example of SQL Injection. Again, click on the link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f899b91f-3d21-4999-8853-cb78327de528.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will show us the URL and it will show us the Attack that it used, ZAP'' AND
    ''1''=''1'', which is in the Parameter password, and if you remember, we actually
    did exploit this parameter manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75148178-66f4-4a8b-b0cd-c61dbc3a0950.png)Parameters used for exploit.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Opening the link in the browser will show us that the injection is working,
    and it''s using a username and a password called ZAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e778adb-250f-41dd-9efb-feee4d6b3174.png)'
  prefs: []
  type: TYPE_IMG
- en: So, the tool is very simple, very powerful, and very useful. We can play around
    with it, we can play around with the proxy and with the options, and see how we
    can enhance the results and achieve even better results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at the last part of penetration testing, where
    we learned to use a tool called OWASP ZAP, which helps us understand the vulnerabilities
    in web applications. We studied this as the last part of web penetration testing
    because I wanted you to first learn how to penetration test manually. In the first
    section of this chapter, we  explored the GUI of the tool and all of the actions
    we can perform using it. The next part of the chapter covered the way we  perform
    scans and we even interpreted the results of scans.
  prefs: []
  type: TYPE_NORMAL
