- en: Chapter 5. Working with Other Platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Blackberry development environment and simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Blackberry pentesting environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Windows phone development environment and simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Windows phone pentesting environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring traffic interception settings for Blackberry phones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing data from Windows phones applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing data from Blackberry applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading local data in Windows phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFC-based attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce other mobile platforms. So far we have focused
    on Android and iOS platforms in this book. Here we take an opportunity to introduce
    Blackberry and Windows Phone as next popular mobile platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Blackberry has been the favorite mobile of Enterprise users for a long time.
    Though the Blackberry market share has reduced in SmartPhone segment, it still
    has got the usage to be introduced and discussed in this book. QWERTY keypads
    used to differentiate earlier Blackberry phones.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Mobiles are picking up with an increased number of users opting for
    the same. Windows 7 and 8 have been a success and successive phones are planned
    to bring about more innovations. The vertical swipe movement of screens differentiates
    the Windows mobiles.
  prefs: []
  type: TYPE_NORMAL
- en: The most common aspects to learn for mobile platforms are setting up development
    and pentest environments and learning about simulators, traffic interception setup,
    and reading/stealing data from these phones. So let us gear ourselves up to learn
    these for Blackberry and Windows platforms in this bonus chapter. Also there is
    a bonus recipe on **Near Field Communication** (**NFC**) based attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Blackberry development environment and simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start learning any new mobile platform, you should follow the mentioned
    sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to setup the **Integrated Development Environment** (**IDE**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn programming language and to code apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the simulators and emulators to debug the apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup the pentest environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn pentesting aspects in the (current) mobile platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the Momentics IDE for **Blackberry** (**BB**). Install it and setup
    the IDE. It can connect to both Blackberry Phones and Blackberry Simulators.
  prefs: []
  type: TYPE_NORMAL
- en: Here onwards we focus on Blackberry Simulators.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download the **Blackberry Device 10 Simulator**. We have used Windows OS for
    the same. The corresponding Simulator can be downloaded from: [http://developer.blackberry.com/develop/simulator/simulator_installing.html](http://developer.blackberry.com/develop/simulator/simulator_installing.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Run the installer file; it will guide you through the installation steps. Once
    the installation completes, you get a screen as follows:![How to do it...](graphics/image_05_001.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, locate and run `runBB10Simulator.bat` file. Post running the bat file,
    the listening component gets started for Blackberry Simulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now locate the VMware file `BlackBerry10Simulator.vmx` and start the VMware.
    The VMware image boots up and a simulator starts for you, as follows:![How to
    do it...](graphics/image_05_002.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The batch file is a listening component for the Blackberry Simulators. It is
    compulsory to run the batch file, without which Blackberry Simulator will not
    run. Note that the batch file DOS window needs to be open till the time BB10 Simulator
    is in use.
  prefs: []
  type: TYPE_NORMAL
- en: BB10 Simulator starts in the virtual machine image. It can be configured as
    per our requirements. Please refer to the BB10 simulator user guide mentioned
    under the *See also* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Momentics IDE can be used to connect to BB phones or BB Simulators. This completes
    the development environment and its runtime integration. Applications can be developed
    in IDE and can be debugged or run in a linked device or simulator.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://developer.blackberry.com/devzone/files/develop/simulator/BB10_Device_Simulator_UG.pdf](https://developer.blackberry.com/devzone/files/develop/simulator/BB10_Device_Simulator_UG.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Blackberry pentesting environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are familiar with Blackberry as a platform, simulators, and/or phone,
    get into the mood of penetration testing. Penetration testing for mobile application,
    can be broadly classified under four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile application traffic related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile device storage-related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile application source code-related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks involving mobile OS features used by mobile applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lab for pentesting should be well equipped with basic necessities to cater
    for the preceding four categorical needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have to set up a lab for Blackberry pentesting. To get going, we need the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Blackberry IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blackberry phones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blackberry simulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Wi-Fi network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blackberry backup tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A data cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decompiler tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us see how each of these tools help:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blackberry IDE**: This IDE is needed majorly for code review assignments.
    The code of the BB apps can be analyzed to discover any insecurity from the development-generic
    or business logic errors. This step is usually not required in case of pure pentest-based
    assignments. Installation of the Blackberry IDE is covered in the previous recipe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blackberry phones**: Run-time applications have to be tested. BB phones are
    needed to install and run the app to be able to do the pentest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blackberry simulators**: Simulators also provide a runtime environment for
    debugging and pentesting purposes. Simulators are life savers; when the phones
    of specific versions are not available, we can switch over to the simulator of
    that particular version. However, if RAM or disk space is limited, Simulators
    may be slow and may become difficult to use. Blackberry Simulators get installed
    as part of an IDE; this we have learnt in previous recipes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy tools such as Charles, Burp Suite, and Fiddler**: Various proxy tools
    can be downloaded from their websites. These are quite straightforward and there
    are guides and help forums about those as well. These tools are easy to install;
    just download the installer from the respective websites and a few clicks will
    make the tool ready to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A Wi-Fi network**: We need a Wi-Fi network for interception of Wi-Fi traffic.
    We will later set up a proxy for mobile devices to a laptop running proxy tools,
    both on the same Wi-Fi network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either you can use a Wi-Fi router to set up your personal Wi-Fi network or you
    can use one of the free tools available to create a hotspot from your laptop.
    In our experience, it is sometimes difficult to work with the latter option, so
    we suggest using the first option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Blackberry backup tools**: Tools to take Blackberry backups and extract or
    mine data from the backup. Traditionally, data stored on the BB phone has been
    difficult to steal. This can be overcome by taking a phone backup from the phone
    that and mining the data from backup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools such as Blackberry Extractor or BlackBerry Backup Extractor are helpful
    in this regard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Data cable**: It is also important to own a data cable. Later we will use
    it to connect to the phone to read data and to conduct attacks originating via
    USB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decompiler tools**: It is also important that these tools are ready in our
    lab. These small tools help us in the decompilation of applications. We will use
    a tool called Coddec in a recipe to follow in this chapter. There we will cover
    the installation and usage of this tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the tools ready at our Pentest lab, let us see how we can link the penetration
    testing use cases to different categories while using the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobile application traffic-related attacks**: This is where the Wi-Fi network
    and proxy tools are going to come in handy. A laptop with Charles or Burp proxy
    installed is connected to Wi-Fi. A mobile device running the application is directed
    to the laptop proxy, using proxy configuration on the device. Since both laptop
    and mobile device are on the same Wi-Fi network, application traffic gets routed
    via Charles or Burp proxy tools. Configure the appropriate proxy settings in the
    simulator or phone to be able to route the traffic to Charles or Burp proxy tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively this whole process makes application traffic readable and editable
    via proxy tools and we can conduct various attacks such as parameter manipulation
    to bypass business logics or to gain privilege access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Mobile device storage-related attacks**: We have a data cable to connect
    the phone to the laptop. We have the Simulator on the laptop. Both of them can
    run mobile applications. Use Blackberry desktop software to connect the phone
    to the laptops. This channel can lead to data stealing attacks such as directly
    reading the phone data or taking the backup of phone for offline data mining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile application source code-related attacks**: Decompiling the BB applications
    results in the raw source code. The Coddec tool can be used for this purpose.
    The hardcoded sensitive data present in the application source code is revealed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attacks involving mobile OS features used by mobile application is the most
    complicated category. There are various BB OS related features which applications
    interact with such as Bluetooth, NFC, intents, broadcast receivers, and so on.
    These also need to be covered in an offensive penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://us.blackberry.com/software/desktop.html](http://us.blackberry.com/software/desktop.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.blackberryextractor.com/](http://www.blackberryextractor.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Windows phone development environment and simulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we learned previously, to start with a new mobile platform, we have to follow
    this sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn to set up the integrated development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn programming language and to code apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the simulators and emulators to debug the apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the pentest environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn pentesting aspects in the (current) mobile platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio has been the development framework for Windows apps.
  prefs: []
  type: TYPE_NORMAL
- en: Since Windows 10, **Universal Windows Platform** (**UWP**) is used for application
    development. UWP apps as the name suggests can run on any type of Windows platform
    (tablets, phones, and desktops).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the Windows Phone SDK from the repository at [https://dev.windows.com/en-us/downloads/sdk-archive](https://dev.windows.com/en-us/downloads/sdk-archive)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Emulators can also be downloaded from the same repository. For Universal Windows
    App, SDK, and emulator download links are present in the top section of the above
    mentioned repository link.
  prefs: []
  type: TYPE_NORMAL
- en: We used Windows 8.1 SDK and Emulator in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the Windows 8.1 SDK from [http://go.microsoft.com/fwlink/p/?LinkId=323507](http://go.microsoft.com/fwlink/p/?LinkId=323507).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer file; it will guide you through the installation steps. The
    following screen allows you to choose the features you want to install:![How to
    do it...](graphics/image_05_003.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the installation completes, the **Welcome to the Windows Software Development
    Kit for Windows 8.1** message is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now go ahead and download and install the Windows 8.1 Emulator from:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.microsoft.com/en-us/download/details.aspx?id=43719](https://www.microsoft.com/en-us/download/details.aspx?id=43719)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The emulator can be launched using `xde.exe`. Once the initial set of preferences
    are selected, the emulator window launches and you now have the Windows application
    development and runtime environment created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Development work in Windows 8.1 requires SDK, Emulator, and .Net Framework.
    The applications can be coded in Windows 8.1 and can be run in Emulator. Alternatively,
    precoded applications and built applications can be run independently in the Emulator.
    This is possible because Emulators can also be launched outside the SDK as Hyper-V
    VM and runs as a VHD.
  prefs: []
  type: TYPE_NORMAL
- en: With Microsoft promoting **Universal Windows Platform** (**UWP**) on Windows
    10, development is expected to migrate to Windows 10 and UWP. It makes sense to
    code applications once and use them in multiple places such as phone, tablets,
    and desktops. UWP is expected to change the whole Windows application development
    landscape.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you are through with the SDK and Emulator, it is time to code the first
    application. It is suggested that readers try out coding basic apps in Windows
    8.1 or in Windows 10 UWP platform to gain better familiarity with platform specifics.
    The Microsoft website itself is a very good place to start for first apps as they
    provide sample code for learning purposes. The link for the sample application
    is mentioned under the *See also* section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://insidethecloudos.azurewebsites.net/running-windows-8-1-phone-emulator-outside-of-visual-studio-2013-and-2015/](http://insidethecloudos.azurewebsites.net/running-windows-8-1-phone-emulator-outside-of-visual-studio-2013-and-2015/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://channel9.msdn.com/Series/Windows-Phone-8-1-Development-for-Absolute-Beginners/Part-11-Working-with-the-Windows-Phone-8-1-Emulator](https://channel9.msdn.com/Series/Windows-Phone-8-1-Development-for-Absolute-Beginners/Part-11-Working-with-the-Windows-Phone-8-1-Emulator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dev.windows.com/en-us/samples](https://dev.windows.com/en-us/samples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the Windows phone pentesting environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you gain the basics of Windows platform SDK, emulators and phones, it
    is the time to get ready to do penetration testing. As you have learned previously,
    for Windows also, we will analyze penetration testing under four broad categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile Application Traffic related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Device Storage related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile Application Source Code related attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks involving mobile OS features used by mobile application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Windows platform pentest lab also needs to be well equipped with basic necessities
    to cater for the preceding four categorical needs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have to set up a lab for Windows mobile pentesting. To get going, we need
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows phone SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows mobiles or tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows phone emulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proxy tools such as Charles, Burp Suite, and Fiddler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Wi-Fi network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A data cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us see how each of these tools help:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows phone SDK**: This SDK is needed majorly for code review assignments.
    The code of the Windows apps can be analyzed to discover any insecurity from the
    development - generic or business logic errors. This step is usually not required
    in case of pure pentest based assignments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also Windows SDK may come in handy for reading code files stolen from the packaged
    app. We have set up Windows phone SDK in the previous recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Windows mobiles/tablets**: Run time applications have to be tested. Windows
    mobiles and tablets are needed to install and run the app to be able to do the
    pentest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows phone emulators**: Emulators also provide runtime environments for
    debugging and pentesting purposes. The emulators are life savers; when the phones
    of specific versions are not available, we can switch over to Emulator of that
    particular version. The emulator is accessible by launching `xde.exe` from the
    SDK installation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy tools such as Charles, Burp Suite, and Fiddler**: Various proxy tools
    can be downloaded from their websites. These are quite straightforward and there
    are guides and help forums about those as well. These tools are easy to install;
    just download the installer from the respective websites and a few clicks will
    make the tool ready to use. A Wi-Fi network: We need a Wi-Fi network for interception
    of Wi-Fi traffic. We will later set up a proxy for mobile devices to a laptop
    running proxy tools, both on the same Wi-Fi network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either you can use a Wi-Fi router to set up your personal Wi-Fi network or you
    can use one of the free tools available to create a hotspot from your laptop.
    In our experience, it is sometimes difficult to work with the latter option, so
    we prefer using the first option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Data cable**: It is also important to own a data cable. Later we will use
    it to connect to the phone to read data and to conduct attacks originating via
    USB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the tools ready at our Pentest lab, let us see how we can link the penetration
    testing use cases to different categories while using the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mobile application traffic-related attacks**: A Wi-Fi network and proxy tools
    are used to attack mobile application traffic. A laptop with Charles or Burp proxy
    installed is connected to Wi-Fi. A mobile device running the application is directed
    to the laptop proxy, using proxy configuration on the device. Since both laptop
    and mobile device are on the same Wi-Fi network, application traffic gets routed
    via Charles or Burp proxy tools. Configure the appropriate proxy settings in the
    emulator or phone to be able to route the traffic to Charles or Burp proxy tools.
    Now the traffic can be tampered with the proxy tools and it is possible to conduct
    parameter manipulation, and injection kinds of attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile device storage-related attacks**: We have a data cable to connect
    the phone to the laptop. We have the emulator on the laptop. Both of them can
    run mobile applications. Use WP Power tools to connect the phone to the laptops.
    This channel can lead to data stealing attacks such as directly reading or tampering
    the phone data. We will demonstrate this in the last but one recipe of this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile application source code-related attacks**: Using SDK and other decompiler
    tools, raw source code of the Windows phone application can be obtained. This
    step is performed to uncover the hardcoded sensitive data or sensitive business
    logic coded in the client-side mobile application source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attacks involving mobile OS features used by mobile applications is the most
    complicated category. There are various Windows OS related features which applications
    interact with such as Bluetooth, NFC, intents, broadcast receivers, and so on.
    These also need to be covered in an offensive penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://pen-testing.sans.org/blog/2011/10/28/mobile-application-assessments-part-2-a-look-at-windows-mobile](http://pen-testing.sans.org/blog/2011/10/28/mobile-application-assessments-part-2-a-look-at-windows-mobile)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://resources.infosecinstitute.com/windows-phone-digital-forensics-2/](http://resources.infosecinstitute.com/windows-phone-digital-forensics-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.securityninja.co.uk/application-security/windows-phone-app-analyser-v1-0-released-today-2/](https://www.securityninja.co.uk/application-security/windows-phone-app-analyser-v1-0-released-today-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring traffic interception settings for Blackberry phones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, Blackberry phones never used to provide an option to set up a
    proxy to the users. There was no option to specify proxy settings (proxy IP address
    and port number). Because of this, we cannot set a proxy to these phones. However,
    for testing purposes we used Simulator and set a proxy and conducted our testing.
    Let us now learn how to set a proxy to the Blackberry simulator.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to get our environment ready first. This recipe requires that any of
    the following be installed on the test machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MDS server with Blackberry simulator**: Use the combination of MDS and Blackberry
    simulator to simulate the connection services of **Blackberry Enterprise server**
    (**BES**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blackberry 10 simulator**: Use the Blackberry 10 simulator as a standalone
    device. Previously in this book, we learned about Blackberry 10 simulators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blackberry phone devices**: Proxy can be set on Blackberry 10 phones as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The installation can be done using two of the following methods.
  prefs: []
  type: TYPE_NORMAL
- en: Case 1 - Using MDS server and Blackberry simulator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This combination comes in handy when simulating a BES server kind of environment.
    The proxy settings have to be made via changes in the MDS server's configuration
    file. This configuration file is responsible for network connections and hence
    the traffic from the device gets routed via a specified proxy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the configurations required in the MDS server''s configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `rimpublic.property` file in the installation directory. We found
    the path at our end, `C:\Program Files\Research In Motion\Blackberry JDE 5.0.0\MDS\config`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `rimpublic.property` file, navigate to the `[HTTP_HANDLER]` section
    and modify this section by adding the proxy configuration specification lines
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Case 2 - Blackberry 10 simulators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Assuming that you have followed the *Setting up the Blackberry Development
    Environment and Simulator* recipe and have the setup ready, you are all set for
    the current recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for network connections and locate **Networks and Connections** under
    **System Settings**. Your Simulator screen should look similar to the following
    screenshot:![Case 2 - Blackberry 10 simulators](graphics/image_05_004.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go ahead with **Networks and Connections** and add your device to the available
    Wi-Fi network of the lab setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the connecting SSID settings, configure proxy details such as **Proxy
    Server***, **Proxy Port**, **Username**, and **Password** (if applicable), in
    the following screen:![Case 2 - Blackberry 10 simulators](graphics/image_05_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This would connect the Simulator to the proxy tool via Wi-Fi and now you can
    tamper the application traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Case 3 - Blackberry 10 phones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Follow similar steps as in Case 2 on the Blackberry phone instead of the simulator.
    Your phone should start sending application traffic via HTTP proxy tools.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let us see how interception works. First, we need to configure Burp proxy
    to run on `9999`. The following screenshot shows how the interface should look
    after it is configured to run on `9999`. Change the default port number of Burp
    proxy by clicking on the **Edit** button and update the port number field with
    `9999`. Once you click on the **OK** button, the **Proxy Listeners** tab looks
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/image_05_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that Blackberry Simulator and Burp Proxy is working, the application traffic
    can be captured and edited. Various web application-related attacks can be done
    now by manipulating the application traffic.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try different proxy tools:'
  prefs: []
  type: TYPE_NORMAL
- en: In our experience, we have noted that sometimes some proxies cannot handle all
    mobile app traffic. Generally, it is a good idea to switch proxy tools if application
    capture does not work. Usually Burp Suite and Charles Proxy are able to handle
    most types of mobile application traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Also Burp Proxy's default `8080` port creates a conflict with MDS, which is
    why we used port `9999` in our configurations. Using Charles Proxy, the default
    port is `8888` which means you will not face the MDS conflict by-default.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://supportforums.blackberry.com/t5/Testing-and-Deployment/Configure-the-BlackBerry-MDS-Simulator-to-work-behind-a-proxy/ta-p/446115](http://supportforums.blackberry.com/t5/Testing-and-Deployment/Configure-the-BlackBerry-MDS-Simulator-to-work-behind-a-proxy/ta-p/446115)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://prashantverma21.blogspot.in/2011/12/setting-up-proxy-for-blackberry.html](http://prashantverma21.blogspot.in/2011/12/setting-up-proxy-for-blackberry.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing data from Windows phones applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Stealing data from the application source code residing on the phone is an
    important attack vector. OWASP Mobile Top 10 puts it up as M10: Lack of Binary
    Protection. Reverse engineering the mobile application to obtain the decompiled
    source code and then mining the data hardcoded in the application may result in
    sensitive data revealing. At times developers tend to hardcode connection strings,
    passwords, keys, or access tokens in the application.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe performs decompiling to steal data from Windows Phone apps which
    are in `.xap` format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The tool to convert the `.dll` to a `.cs` or `.vb` project file is shown as
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ILSpy**: ILSpy is a very useful open source tool to decompile and manipulate
    .NET apps. We will use it to convert DLL files to the original `.cs` or `.vb`
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decompresser tool**: Winrar/WinZip/7zip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/image_05_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Windows Market applications are **Digital Rights Management** (**DRM**) protected
    and it may not be easy to obtain DLLs just by uncompressing the file:'
  prefs: []
  type: TYPE_NORMAL
- en: Study the contents of the application package and note the `.dll` file present:![Getting
    ready](graphics/image_05_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now use ILSpy to decompile the DLL file and obtain the original source code.
    In the ILSpy console, go to **Open** under **File** menu and provide the path
    of the DLL file to be decompiled:![Getting ready](graphics/image_05_009.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result of this process is the entire application source code (a snippet
    of which is shown in the following screenshot). The source code can now be searched
    for hardcoded secrets such as keys, passwords, PIN, and so on:![Getting ready](graphics/image_05_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Windows Phone compiler suite compiles the developer's .net files into DLL
    object code files, and then the `.dll` files are converted into `.xap` files.
    XAP are Silverlight or Windows phone compatible applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main objective of this method is to get hold of the intermediate `.dll`
    file and then use a `.net` decompiler to decompile the same and obtain a project
    file. We did this in two steps discussed:'
  prefs: []
  type: TYPE_NORMAL
- en: The XAP file is analyzed and DLL is obtained.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ILSpy is used to obtain decompiled source code from the DLL file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Source code is available in decompiled format. What next?
  prefs: []
  type: TYPE_NORMAL
- en: Apply tricks such as decompiler tool search features or extract decompiled code
    in a folder and use a `grep` or `find` command. Use keywords such as `password`,
    `pwd`, `key`, `connection`, `encryption`, and `o-auth` in static string searches
    to find sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: Manually, browse through the file names which may look to implement critical
    business logic, authentication, or encryption.
  prefs: []
  type: TYPE_NORMAL
- en: Try breaking into the application server with the obtained information from
    the source code.
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscators are used by smart developers to make hackers and crackers tasks
    more difficult. Source code is obfuscated which makes interpretation of the decompiled
    code difficult.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Free, open source obfuscator**: [http://yck1509.github.io/ConfuserEx/](http://yck1509.github.io/ConfuserEx/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealing data from Blackberry applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Stealing data from the application source code residing on the phone, as also
    recognized under OWASP Mobile Top 10 as M10: Lack of Binary Protection, is a source
    of leakage of sensitive hardcoded data. Reverse engineering the mobile application
    to obtain the decompiled source code and then mining the data hardcoded in the
    application is performed. At times developers tend to hardcode connection strings,
    passwords, keys, or access tokens in the application.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe extends the goal of the previous recipe to the Blackberry platform
    and attempts to decompile the Blackberry application that is in `.cod` format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tools are required for the readiness in accordance with the current
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coddec**: A tool to convert `.cod` file to `.java` file is needed. We used
    Coddec for the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A few .cod files**: We need a few application files that are `.cod` files
    to attempt decompilation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all the `.cod` files from the device onto your machine (these `.cod` files
    can be found in the external SD card of the Blackberry phone provided you install
    the application on an external SD card). Open the same in notepad and check for
    encryption and non-readable forms:![How to do it...](graphics/image_05_011.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, extract the `coddec` tool as shown in the following screenshot. The `doit.bat`
    file is the command to execute and perform the decompilation:![How to do it...](graphics/image_05_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `.cod` files into the `coddec` tools folder source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the command `doit.bat *.cod` in the command line. This action converts non-readable
    `.cod` files to readable notepad files with source code now more interpretable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Blackberry compiler suite compiles the developer's Java files into class
    files, and then the class files are converted into `.cod` files. The `.cod` files
    relate to code files of Blackberry. These are proprietary Blackberry application
    code package format.
  prefs: []
  type: TYPE_NORMAL
- en: To reverse the application source code, we used a tool called Coddec which helped
    us to translate the encrypted `.cod` proprietary code to a code-equivalent readable
    file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the application code is decompiled, let us locate some sensitive useful
    data. Let us browse through the contents of the code and search for the treasure
    key words such as `keys`, `algorithm`, `password`, `authentication`, `formula`
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we obtained RIM API or library references used. Though this may
    not directly lead to a hack, it helps us understand the mobile application design.
  prefs: []
  type: TYPE_NORMAL
- en: Blackberry platform latest versions are equipped with further stronger compilation
    processes, making it more difficult to obtain the code references.
  prefs: []
  type: TYPE_NORMAL
- en: Obfuscation can be used on Blackberry platforms as well to protect the source
    code. This can be done by following certain steps within Blackberry JDE itself.
    Please follow the link mentioned underneath for the same.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://supportforums.blackberry.com/t5/Java-Development/Obfuscate-code-in-a-BlackBerry-application/ta-p/444843](https://supportforums.blackberry.com/t5/Java-Development/Obfuscate-code-in-a-BlackBerry-application/ta-p/444843)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading local data in Windows phone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have learned previously in this book, mobile apps tend to store data
    on the phone. The data stored can be in multiple formats on different mobile platforms
    like `.plist`, `.sqlite`, and `.xml` file. OWASP recognizes this under M2: Insecure
    Data Storage. Data mining in the application folders (such as `/data/data` in
    case of Android) may result in the leakage of sensitive data present there. This
    recipe is intended to provide you with details on how to read locally stored data
    from the Windows Phone memory.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following tools are required for the readiness in accordance with the current
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WP Power Tools**: Windows Phone Power Tools allow you to interact with your
    applications and perform activities such as storage analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The XAP of the application**: We would need a few XAP files to analyse their
    storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Windows Phone Power tools from this link ([http://wptools.codeplex.com/releases/view/97029](http://wptools.codeplex.com/releases/view/97029))
    onto the Windows 8 system. Connect the Windows phone to the laptop via a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, launch WP Power Tools and connect it to the Windows device from
    the **connect to a device** tab. This is depicted in the following screenshot:![How
    to do it...](graphics/image_05_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using **WP Power Tools**, install the XAP on the Windows device as shown in
    the following screenshot:![How to do it...](graphics/image_05_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the application has been installed on the device, browse through it and
    exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Isolated Storage** tab of WP Power Tools and right-click on the icon
    with the application name. This is depicted in the following screenshot (using
    a test app). Click on **Refresh** to populate the data:![How to do it...](graphics/image_05_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse through the files within the folder named after the application:![How
    to do it...](graphics/image_05_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Windows Phone Power Tools work by installing a windows app (`.xap` file) and
    analyzing the file structure created by the application. This eventually leads
    us to the locally stored data. For example, in case of the example taken in this
    recipe, an SQLite file was found that is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/image_05_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since this works by installation of an application, the applications installed
    from Windows Store can't be analyzed this way.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As part of Windows Phone 8 SDK, there is a tool called Isolated Storage Explorer.
    This command line tool can read and modify files in the application''s local data
    folder in the phone (this can be related to the ADB tool of Android). The usage
    information for Isolated Storage Explorer can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://msdn.microsoft.com/en-in/library/windows/apps/hh286408(v=vs.105).aspx](https://msdn.microsoft.com/en-in/library/windows/apps/hh286408(v=vs.105).aspx)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://wptools.codeplex.com/releases/view/97029](http://wptools.codeplex.com/releases/view/97029)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://resources.infosecinstitute.com/windows-phone-digital-forensics-2/](http://resources.infosecinstitute.com/windows-phone-digital-forensics-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFC-based attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Near Field Communication** (**NFC**) is a communication mechanism for proximity
    devices. NFC-enabled peers can communicate with each other without internet just
    like Bluetooth devices can. A hardware chip is present in NFC-enabled phones that
    enables NFC communication with other peers.'
  prefs: []
  type: TYPE_NORMAL
- en: A few organizations have started using MiFare cards and card readers that are
    NFC enabled. User attendance and access control records are logged this way. These
    cards can also be used to make payments at cafeterias, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Google Wallet is a good example of a mobile app that can use NFC for payments.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To try out NFC based hacks, you need:'
  prefs: []
  type: TYPE_NORMAL
- en: NFC-enabled phones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFC tag(s) or NFC credit cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications such as NFCProxy for Android phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFC applications such as NFC Reader or Advanced NFC System downloaded from the
    Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install NFCProxy tool and other NFC apps (NFC Reader and Advanced NFC System)
    on your Android phone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NFCProxy can be downloaded from [https://sourceforge.net/projects/nfcproxy/](https://sourceforge.net/projects/nfcproxy/).
    Other tools are present on the Play Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Touch the NFC tag with the Phone running NFC tools
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that with the interaction in NFC communication range (less than 4 cms),
    the data stored on the NFC tag is read by these NFC applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here is the screen you see when you use **Advanced NFC System**:![How to do
    it...](graphics/image_05_018.jpg)Notice that you can read, reset, or configure
    NFC tags with it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use NFCProxy to proxy the transactional data between the NFC card reader
    and the NFC-enabled card. Here is a snapshot of the tool showing saved NFC data
    (made available by the tool creators):![How to do it...](graphics/image_05_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NFC can be attacked in multiple ways. Common attacks on NFC include:'
  prefs: []
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data tampering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data fuzzing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common problem with NFC has been missing encryption. NFC communication can
    be sniffed by a rogue proximity device and since the encryption is missing or
    weak encoding is used, the data transmitted can be obtained.
  prefs: []
  type: TYPE_NORMAL
- en: If in the enterprise scenario, communication of NFC-enabled MiFare cards is
    sniffed, data such as employee IDs and their uniquely associated tokens to record
    their attendance is stolen. This stolen data can then be cloned to create rogue
    NFC peers and the entire organization's access control can be bypassed.
  prefs: []
  type: TYPE_NORMAL
- en: Data tampering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NFC Proxy is an android application. It can be used to set up a proxy between
    an RFID card and the reader. The captured sensitive data via proxy mode can be
    displayed, replayed, or deleted. The saved date can later be used to clone payment
    cards thereby creating duplicate NFC peers. These fake cards would later be used
    for fraudulent transactions, or the captured transaction can be replayed multiple
    times to cause financial harm to the victim.
  prefs: []
  type: TYPE_NORMAL
- en: Data fuzzing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The captured data once under our control can be tampered with, can also be fuzzed
    with long strings. This may lead to buffer overflow kinds of attack.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mobile apps tend to store data on the phone. Weak NFC communication settings
    in the phone can be a boon to the attackers. NFC apps may use the stored data
    on the phone to communicate. Weak settings such as authentication requirement
    for NFC peers along with missing encryption in NFC becomes a boon.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the payment app that stores credit card information in the phone and
    flashes the same when a payment is to be made. A targeted attack here can sniff
    the credit card details being exchanged between the other two NFC peers.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is very important to securely configure NFC on the mobile phones. A few
    security measures:'
  prefs: []
  type: TYPE_NORMAL
- en: Turn off NFC when it is not needed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your device updated with the latest NFC patch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure authentication passwords for other NFC peers, if the device permits
    you to do so.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://blackwinghq.com/assets/labs/presentations/EddieLeeDefcon20.pdf](http://blackwinghq.com/assets/labs/presentations/EddieLeeDefcon20.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/nfcproxy/](http://sourceforge.net/projects/nfcproxy/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
