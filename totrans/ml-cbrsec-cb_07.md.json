["```\npip install pandas sklearn xgboost\n```", "```\nimport pandas as pd\n\ndf = pd.read_csv(\n    \"passwordDataset.csv\", dtype={\"password\": \"str\", \"strength\": \"int\"}, index_col=None\n)\n```", "```\ndf = df.sample(frac=1)\n```", "```\nl = len(df.index)\ntrain_df = df.head(int(l * 0.8))\ntest_df = df.tail(int(l * 0.2))\n```", "```\ny_train = train_df.pop(\"strength\").values\ny_test = test_df.pop(\"strength\").values\nX_train = train_df.values.flatten()\nX_test = test_df.values.flatten()\n```", "```\ndef character_tokens(input_string):\n    \"\"\"Break string into characters.\"\"\"\n    return [x for x in input_string]\n```", "```\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom xgboost import XGBClassifier\n\npassword_clf = Pipeline(\n    [(\"vect\", TfidfVectorizer(tokenizer=character_tokens)), (\"clf\", XGBClassifier()),]\n)\n```", "```\npassword_clf.fit(X_train, y_train)\npassword_clf.score(X_test, y_test)\n```", "```\n0.9137365878426307\n```", "```\ncommon_password = \"qwerty\"\nstrong_computer_generated_password = \"c9lCwLBFmdLbG6iWla4H\"\n```", "```\npassword_clf.predict([common_password, strong_computer_generated_password])\n```", "```\narray([0, 2])\n```", "```\ngit clone https://github.com/emmanueltsukerman/PassGAN.git\n```", "```\ncurl -L -o data/train.txt https://github.com/brannondorsey/PassGAN/releases/download/data/rockyou-train.txt\n```", "```\npip install -r requirements.txt\n```", "```\npython train.py --output-dir output --training-data data/train.txt\n```", "```\npython sample.py \\\n--input-dir pretrained \\\n--checkpoint pretrained/checkpoints/195000.ckpt \\\n--output gen_passwords.txt \\\n--batch-size 1024 \\\n--num-samples 100000\n```", "```\ngit clone https://github.com/emmanueltsukerman/PyTorch-Deep-Image-Steganography.git\n```", "```\ncat ./checkPoint/netH.tar.gz* | tar -xzv -C ./checkPoint/\n```", "```\nCUDA_VISIBLE_DEVICES=0 python main.py â€“test=./example_pics\n```", "```\nsudo apt-get install octave octave-image octave-signal\n```", "```\ngit clone https://github.com/emmanueltsukerman/aletheia.git\n```", "```\nwget http://dde.binghamton.edu/download/ImageDB/BOSSbase_1.01.zip\n```", "```\nunzip BOSSbase_1.01.zip\n```", "```\npython aletheia.py lsbm-sim bossbase 0.40 bossbase_lsb\n```", "```\n./aletheia.py srm bossbase bossbase.fea\n```", "```\n./aletheia.py srm bossbase_lsb bossbase_lsb.fea\n```", "```\nbossbase_features_path = \"bossbase.fea\"\nbossbase_lsb_features_path = \"bossbase_lsb.fea\"\nfeatures_with_labels = [(bossbase_features_path, 0), (bossbase_lsb_features_path, 1)]\n```", "```\nX = []\ny = []\nfor feature_path, label in features_with_labels:\n    with open(feature_path, \"r\") as f:\n        for line in f:\n            fv = line.split()\n            X.append(fv)\n            y.append(label)\n```", "```\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=11\n)\n```", "```\nfrom sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier()\nclf = clf.fit(X_train, y_train)\n```", "```\nprint(clf.score(X_test, y_test))\n```", "```\n0.825\n```", "```\n$ ./aletheia.py\n```", "```\n./aletheia.py <command>\nCOMMANDS:\nAttacks to LSB replacement:\n- spa: Sample Pairs Analysis.\n- rs: RS attack.\nML-based detectors:\n- esvm-predict: Predict using eSVM.\n- e4s-predict: Predict using EC.\nFeature extractors:\n- srm: Full Spatial Rich Models.\n- hill-maxsrm: Selection-Channel-Aware Spatial Rich Models for HILL.\n- srmq1: Spatial Rich Models with fixed quantization q=1c.\n- scrmq1: Spatial Color Rich Models with fixed quantization q=1c.\n- gfr: JPEG steganalysis with 2D Gabor Filters.\nEmbedding simulators:\n- lsbr-sim: Embedding using LSB replacement simulator.\n- lsbm-sim: Embedding using LSB matching simulator.\n- hugo-sim: Embedding using HUGO simulator.\n- wow-sim: Embedding using WOW simulator.\n- s-uniward-sim: Embedding using S-UNIWARD simulator.\n- j-uniward-sim: Embedding using J-UNIWARD simulator.\n- j-uniward-color-sim: Embedding using J-UNIWARD color simulator.\n- hill-sim: Embedding using HILL simulator.\n- ebs-sim: Embedding using EBS simulator.\n- ebs-color-sim: Embedding using EBS color simulator.\n- ued-sim: Embedding using UED simulator.\n- ued-color-sim: Embedding using UED color simulator.\n- nsf5-sim: Embedding using nsF5 simulator.\n- nsf5-color-sim: Embedding using nsF5 color simulator.\nModel training:\n- esvm: Ensemble of Support Vector Machines.\n- e4s: Ensemble Classifiers for Steganalysis.\n- xu-net: Convolutional Neural Network for Steganalysis.\nUnsupervised attacks:\n- ats: Artificial Training Sets.\nNaive attacks:\n- brute-force: Brute force attack using a list of passwords.\n- hpf: High-pass filter.\n- imgdiff: Differences between two images.\n- imgdiff-pixels: Differences between two images (show pixel values).\n- rm-alpha: Opacity of the alpha channel to 255.\n```", "```\npip install pandas sklearn xgboost\n```", "```\nimport pandas as pd\n\ndf = pd.read_csv(\"CRPdataset.csv\")\n```", "```\ny = df.pop(\"Label\").values\nX = df.values\n```", "```\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.25, random_state=11\n)\n```", "```\nfrom xgboost import XGBClassifier\n\nclf = XGBClassifier()\nclf.fit(X_train, y_train)\nprint(clf.score(X_train, y_train))\n```", "```\n0.6405208333333333\n```", "```\nclf.score(X_test, y_test)\n```", "```\n0.6270833333333333\n```", "```\npip install click keras tensorflow tqdm\n```", "```\ngit clone https://github.com/emmanueltsukerman/convcrypt.git\n```", "```\npython encrypt.py --input_file \"input file path\" --output_file \"encrypted file path\" --key_file \"key file name\"\n```", "```\npython decrypt.py --input_file \"encrypted file path\" --output_file \"reconstructed file path\" --key_file \"key file name\"\n```", "```\npip install pandas sklearn\n```", "```\nimport pandas as pd\n\n df = pd.read_csv(\"HIPAA-breach-report-2009-to-2017.csv\")\n df = df.dropna()\n```", "```\n%matplotlib inline\n def_fig_size = (15, 6)\n df[\"Individuals Affected\"].plot(\n kind=\"hist\", figsize=def_fig_size, log=True, title=\"Breach Size Distribution\"\n )\n```", "```\ndf.groupby(\"Covered Entity Type\").mean().plot(\n kind=\"bar\", figsize=def_fig_size, title=\"Average Breach Size by Entity Type\"\n )\n```", "```\ndf.groupby(\"State\").sum().nlargest(20, \"Individuals Affected\").plot.pie(\n y=\"Individuals Affected\", figsize=def_fig_size, legend=False\n )\n```", "```\ndf.groupby(\"Type of Breach\").mean().plot(\n kind=\"bar\", figsize=def_fig_size, title=\"Average Breach Size by Entity Type\"\n )\n```", "```\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n vectorizer = TfidfVectorizer()\n```", "```\ndf[\"Web Description\"] = df[\"Web Description\"].str.replace(\"\\r\", \" \")\n X = df[\"Web Description\"].values\n X_transformed = vectorizer.fit_transform(X)\n```", "```\nimport numpy as np\n\n feature_array = np.array(vectorizer.get_feature_names())\n tfidf_sorting = np.argsort(X_transformed.toarray()).flatten()[::-1]\n n = 15\n top_n = feature_array[tfidf_sorting][:n]\n print(top_n)\n```", "```\n['this' 'review' '842' 'south' 'ransomware' 'memorial' 'specific' 'birthdates' 'consolidated' 'malware' 'license' 'driver' 'found' 'clinic' 'information']\n```", "```\nk = 2\n i = 0\n for x in df[\"Web Description\"].values:\n if \"review\" in x:\n i += 1\n print(x)\n print()\n if i == k:\n break\n```", "```\nA laptop was lost by an employee... all employees received additional security training.\nThe covered entity's (CE) business associate (BA) incorrectly... BA to safeguard all PHI.\n```"]