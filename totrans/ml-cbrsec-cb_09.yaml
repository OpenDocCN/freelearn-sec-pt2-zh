- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we offer the reader a guide to creating infrastructure to handle
    the challenges of machine learning on cybersecurity data. In particular, we provide
    a recipe for setting up a virtual lab environment to allow for safe and effective
    malware analysis. We also provide a guide to using virtual Python environments,
    which allow users to seamlessly work on different Python projects while avoiding
    package conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a virtual lab environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python virtual environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a virtual lab environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To protect yourself and your network, it is imperative to take preventative
    steps when handling and analyzing malware. One of the best ways to do so is to
    set up an isolated *virtual lab environment*. A virtual lab environment consists
    of one or more **Virtual Machines** (**VMs**) in an isolated network. Isolating
    the network prevents malware from spreading through the network, at the cost of
    less realistic malware behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In preparation for this recipe, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install a hypervisor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A hypervisor is software that allows you to control VMs. One instance is VirtualBox,
    available for download for free at [https://www.virtualbox.org/](https://www.virtualbox.org/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/61f8a83c-89d4-4263-bfef-2bfbdd14e712.png)'
  prefs: []
  type: TYPE_IMG
- en: Download a virtual image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A virtual image is a template for a VM. Several Windows virtual images may
    be found at [https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17d5ce89-c7a4-4597-b778-b09e494f02cf.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will guide you through setting up and using a simple virtual
    lab environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a VM using the virtual image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your screen when opening the VM image should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6c742ab-81f8-4898-949b-e9e2e63547b5.png)'
  prefs: []
  type: TYPE_IMG
- en: Configure the VM for performance and safety. For instance, you may disconnect
    it all together from the network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows how to disconnect your VM from the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a64e87de-b7af-4127-9c8c-af1684c652fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a snapshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see what menu option allows you to take a snapshot here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/85935f0f-7ca4-4edf-a932-54ff0877dbfc.png)'
  prefs: []
  type: TYPE_IMG
- en: (Optional) Detonate and analyze malware in the VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For instance, I ran ransomware in my VM here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/670790c6-2e3f-4727-85f4-59a566e3290f.png)'
  prefs: []
  type: TYPE_IMG
- en: (Optional) Revert the VM to your previous snapshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the Restore button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2584b35e-3136-42c0-a3fb-8be3ddf8ae56.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began this recipe by creating a VM from an image (*step 1*). The creation
    of a VM depends on the format in which the image is given. For the referenced
    virtual images, double-clicking the `.ovf` file of the virtual image will allow
    you to set up a VM. Other times, you may need to create a brand new installation
    of an operating system and then mount the virtual image. Next, in *step 2*, we
    configured our VM for malware analysis. There are several configuration changes
    you are likely to want to make. These include setting base memory, the number
    of processors, video memory, and a virtual optical drive; selecting an appropriate
    network setting; and creating a shared folder.
  prefs: []
  type: TYPE_NORMAL
- en: Having done so, in *step 3*, we saved a snapshot, which allowed us to save all
    important state information. The great thing about snapshots is that they allow
    a user to easily roll back changes made to the VM. So, if you make a mistake,
    it's no big deal—just revert to a previous snapshot. Next, in *step 4*, we detonated
    malware in our VM. We recommend exercising caution in this step, and only doing
    it if you know what you are doing. In that case, you will find a dataset of malware
    in the repository for this book. Finally, in *step 5*, we clicked the Restore
    button in VirtualBox to roll back our VM to the state it was in when you created
    the snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we note and credit Yasser Ali with the following advice: when installing
    VirtualBox on macOS, users should make security exceptions for Adobe Software
    to use the security settings.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Python virtual environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that you have two projects—project A and project B—whose Python library
    requirements conflict. For instance, project A needs scikit-learn version 0.21,
    while project B requires scikit-learn versions >0.22\. Or maybe one project requires
    Python 3.6 and the other Python 3.7\. You could uninstall and then install the
    appropriate libraries or Python as you switch from one project to the other, but
    that can get tedious and impractical. To solve the problem of conflicting requirements,
    we recommend using Python virtual environments. You will see how to use a Python
    virtual environment in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module for virtual environments, `venv`, is included in the Python standard
    library on Python 3.3 and later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create and activate a virtual Python environment, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a Terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In a Linux or macOS Terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Install your desired packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We began *step 1* by creating a virtual Python environment. The `-m` flag indicated
    the module to be used, which, in this case, is `venv`. Next, in *step 2*, we activated
    our Python environment, so we can use it and make changes to it. Note that the
    folder structure of a Python environment is different on Windows than Linux or
    Mac. An indication that the environment is currently active is seeing the name
    of the environment in the Terminal, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In *step 3*, you may install packages as usual, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And rest assured that it will not affect your packages outside of this environment.
    Sweet!
  prefs: []
  type: TYPE_NORMAL
