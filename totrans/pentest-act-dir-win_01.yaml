- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting the Lab Ready and Attacking Exchange Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Active Directory is the de facto standard in most enterprises to run
    and support Windows-based networks. While centralized management brings convenience,
    it also introduces security risks. When carrying out their operations, malicious
    actors plan to achieve certain goals, and compromising Active Directory can help
    them do so. Active Directory’s default configuration is far from being secure.
    The best way to learn about Active Directory security is to execute attacks in
    a safe environment, trying to detect and prevent unwanted malicious activities.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we will focus on the Active Directory kill chain, executing
    attacks and trying to detect as well as prevent them. This chapter will cover
    how to deploy a safe playground for such activities. We will use this lab throughout
    the book, later on adding extra services that will be covered in corresponding
    chapters about **Active Directory Certificate Services** (**ADCS**), SQL Server,
    and **Windows Server Update Services** (**WSUS**) together with **System Center
    Configuration** **Manager** (**SCCM**).
  prefs: []
  type: TYPE_NORMAL
- en: Our first practical target will be Microsoft Exchange Server. It is a complex
    collaboration product that is far more advanced than just an email server. From
    a security perspective, it is a valuable target because it is a mission-critical
    component of the infrastructure that is reachable from the internet. On-premises
    Exchange is closely tied together with Active Directory, often with high privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Lab architecture and deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Directory kill chain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why initial access and host-related topics are not covered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking Exchange Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will need to have access to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 10 CPU cores,
    and at least 115 GB of total space (more if you take snapshots)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux-based host OS is strongly recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant installed with the plugin for the corresponding virtualization platform
    and Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lab architecture and deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if creating and deploying a test lab can be daunting and time consuming,
    it is an important preparation step before jumping into attack emulation. MITRE
    ATT&CK has a dedicated tactic for this activity called **Resource Development**.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few free but formidable projects available for automated lab deployment.
    You can choose any of them depending on your workstation’s resources and replicate
    the vulnerabilities yourself. For example, there is a very good open source project
    maintained by the Splunk Threat Research Team called Splunk Attack Range[1], where
    you can quickly deploy a small lab to perform attack simulations. However, I will
    use two other projects throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first project I will use throughout the book is the GOADv2 lab created
    by Orange Cyberdefense[2]. To deploy it, you will need a Linux-based host OS with
    VMware Workstation or Oracle VirtualBox. It is also possible to deploy the lab
    on Proxmox, as shown by *Mayfly* in his blog[3]. Deployment is straightforward
    and well described in the **README.md** file in the repository. The entire process
    consists of two parts and will take around 3-4 hours depending on the speed of
    your internet connection. Vagrant will create virtual machines and Ansible playbooks
    will configure and deploy the necessary services, users, and vulnerabilities.
    To speed up the deployment process in the Vagrant file, we can change the **box_version**
    variable of all SRV server machines to the one that is already in the list, so
    only two images will be downloaded and used for further deployment. I will use
    VMware Workstation 16 installed on the most recent Arch Linux. After following
    the installation guide, the final message you’ll see should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Successful result of GOAD lab deployment](image/B18964_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Successful result of GOAD lab deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'The second repository that I will use in some chapters is the impressive DetectionLab
    project created by *Chris Long*[4]. Unfortunately, it is not maintained anymore,
    but it still perfectly fits our purposes. The advantage of this lab is that it
    provides us with a wide variety of deployment options, including cloud platforms
    and all modern bare-metal hypervisors. Moreover, this lab has detection tools
    installed for us (Sysmon, Velociraptor, Microsoft ATA, etc.). The installation
    is also straightforward. The preparation shell script will help identify missing
    software packages and Vagrant will do the rest. The overall process will take
    1-2 hours depending on your network and computer. The following screenshot shows
    the successful execution of the pre-deployment script, meaning we are good to
    start our DetectionLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The result of successful execution of prepare.sh](image/B18964_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The result of successful execution of prepare.sh
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram of the GOADv2 project was taken from the lab creator’s
    GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – GOADv2 overview](image/B18964_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – GOADv2 overview
  prefs: []
  type: TYPE_NORMAL
- en: This lab has two forests (**sevenkingdoms.local** and **essos.local**) with
    established trust and child-parent domains (**sevenkingdoms.local** and **north.sevenkingdoms.local**).
    Active Directory trust effectively allows to securely access a resource from the
    trusted domain by the trusting domain entity. Microsoft SQL Server will be deployed
    in both forests with a trusted link established between instances. We will also
    have **Internet Information Services** (**IIS**) installed on one of the servers.
    ADCS provides the required digital certificate infrastructure for the company
    to employ public key cryptography. These certificates can be used for various
    purposes, such as authentication, encryption, and signing documents and/or messages.
    There is a dedicated server for that role in our lab where we will be able to
    emulate attacks on ADCS. Most of the attack venues have already been introduced
    by the lab creator in the environment, but if we need to add or tweak something,
    it will be specifically mentioned, and step-by-step guidelines will be provided
    – for example, installing WebClient or deploying **Group Managed Service** **Accounts**
    (**gMSAs**).
  prefs: []
  type: TYPE_NORMAL
- en: The next section will cover common approaches for attacking any target, including
    Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: Active Directory kill chain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is Active Directory? In plain words, it is a hierarchically structured
    storage of object information. One of the main benefits is that Active Directory
    allows centralized management and authentication. Now, let us briefly discuss
    what the Cyber Kill Chain is. This framework was developed by Lockheed Martin
    and has a military background. It is a concept that identifies the structure of
    an attack. We can adapt Cyber Kill Chain concepts for Active Directory as in the
    diagram from *infosecn1nja* on GitHub[5]. It has several steps, but it always
    follows the same cycle – **recon**, **compromise**, **lateral movement** – just
    with more privileged access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Active Directory kill chain](image/B18964_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Active Directory kill chain
  prefs: []
  type: TYPE_NORMAL
- en: 'The focus of this book is Windows-based infrastructure and its services only,
    so themes such as local privilege escalation on the host, initial access, and
    external recon are out of the scope of this book. I will briefly explain the reasoning
    behind this decision in a dedicated section of this chapter. The following is
    a list of the themes that will be covered in the corresponding chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Exchange Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defense evasion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal recon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credential access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lateral movement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AD CS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WSUS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SCCM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this book, we are focused on compromising the Active Directory environment
    and Windows-based common services, not red team operations. The reasoning is that
    red team operations often have business-related goals rather than finding and
    exploiting all possible vulnerabilities in Active Directory and services. It is
    important to mention that depending on the target environment, scope, and level
    of obtained privileges during initial access, it is not always necessary to compromise
    every target. For example, getting access to the financial data of the company
    does not require domain admin privileges, but in some cases, such privileges can
    be helpful. We will cover attack detection and possible prevention measures, as
    well as offensive **Operational Security** (**OpSec**). In plain words, it refers
    to how much of your activity can be spotted by an adversary. This is a double-edged
    sword, meaning it is applicable for both offensive and defensive actions and ways
    to deceive the adversary.
  prefs: []
  type: TYPE_NORMAL
- en: Why we will not cover initial access and host-related topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initial access is a vital, early-stage step to compromise the target environment.
    However, this will not be covered in this book for the following reasons. To be
    honest, this theme is as wide as it is deep. It requires cross-field knowledge
    from different areas of IT as well as psychology, so it would require a separate
    book itself. Also, there is a high chance that at the moment of such a book being
    published, half of the attack vectors will be killed by implementing security
    solutions, such as **Endpoint Detection and Response** (**EDR**), and/or covered
    by a blue team’s comprehensive detection capabilities. The reason is that it is
    rapidly developing, full of private research that isn’t published. In general,
    to obtain stable initial access to the target environment, there are three main
    topics to take care of – a resilient and secure attack infrastructure, covert
    tooling with the required capabilities, and successful defense evasion.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid any painful mistakes being made during manual deployment, using automation
    such as Terraform and Ansible can help to build a resilient attacker’s infrastructure.
    But it comes at the price of time investment and requirements for scripting and
    a sysadmin skillset. One of the best resources to start with such a topic is the
    wiki on GitHub[6]. Infrastructure needs to be properly designed with multiple
    redirectors for different protocols, secured and hardened, and categorized correctly
    if phishing and filtering proxies are a part of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Covert tooling, evasion techniques, and detections are a never-ending battle
    of establishing dominance between skillful blue teams, SOCs, and EDR/security
    vendors on one hand and offensive security researchers together with red teams
    on the other. A great note[7] by *Jordan Potti* about the red team’s efforts and
    ROI regarding the EDR fight is also one of the reasons why I do not cover this
    topic and only focus on Windows-based infrastructure and Active Directory. I do
    not believe it is possible to write an all-in-one comprehensive red team book
    covering every single topic in depth.
  prefs: []
  type: TYPE_NORMAL
- en: As our book is focused on Active Directory security concepts, we will follow
    the **assume breach** approach. A great presentation was created by Red Siege
    in 2019 to explain this model[8]. In our case, we assume that we have compromised
    a standard domain user. All further steps will be happening in the context of
    this user. We also assume that our initial foothold is covert and not detected
    by EDR/antivirus or any other security product. However, all further activities,
    including network traffic and generated event logs, are considered to be monitored
    by the blue team. Later in the book, if some activities require certain privileges,
    they will be specifically mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Our next section will finally be practical and more hands-on. We will discuss
    and replicate attacks against Exchange Server using various scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking Exchange Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exchange Server is a collaboration server developed by Microsoft. Despite the
    fact that more and more companies are moving to the O365 cloud, there is still
    a good possibility that you will encounter on-premises deployment. Exchange has
    multiple useful features for end users, but it is also extremely difficult to
    develop all of them securely. In recent years, a lot of research has been published
    revealing critical vulnerabilities in its different components. Moreover, patches
    from Microsoft did not always completely fix these vulnerabilities, meaning that
    adversaries attempted to develop a one-day exploit by reverse engineering the
    patch and were able to find a suitable bypass. Considering that sometimes it is
    not possible for businesses to react in a timely manner to such rapidly changing
    situations, the chance of being compromised is quite high.
  prefs: []
  type: TYPE_NORMAL
- en: But what is the benefit for an adversary to compromise Exchange? First of all,
    a successful takeover gives access to the mailboxes of every single user on this
    server. It can then evolve into an internal phishing campaign, sensitive data
    disclosure, and password harvesting in emails. Second, Exchange Service accounts
    may run with high privileges, including domain admin, making full domain takeover
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To assess the security of Exchange Server, we can add Exchange Server to DetectionLab;
    however, you would need to deploy these at your end. To spin up Exchange Server,
    you simply run the following commands, assuming you are using Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you encounter any problems during the deployment, you can find logs conveniently
    located in the **C:\exchange2016** folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Logs location for Exchange deployment](image/B18964_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Logs location for Exchange deployment
  prefs: []
  type: TYPE_NORMAL
- en: Exchange allows remote access via protocols such as **Exchange Web Services**
    (**EWS**), **Exchange ActiveSync** (**EAS**), Outlook Anywhere, and MAPI over
    HTTP. The AutoDiscover service helps to retrieve Exchange configuration, mailbox
    settings, supported protocols, and service URLs. You can find this information
    in the **autodiscover.xml** file in the **autodiscover** virtual directory. **Outlook
    Web Application** (**OWA**) is a minimal web-based email client. This client can
    be accessed with just a browser without Outlook being installed. **Global Address
    List** (**GAL**) is a list of every mail-enabled object in an Active Directory
    forest. Two more concepts we will cover are Outlook rules and forms. Rules are
    an action that is run automatically by Outlook for Windows on incoming/outgoing
    emails. We create the trigger and the action. Server-side rules are executed first,
    then client-side. Outlook forms provide users and/or organizations with email
    customization options, such as the autocompletion of some fields or template text.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss tools and techniques for user enumeration and
    password spraying; email address extraction from GAL and **Offline Address Book**
    (**OAB**) or by using **Name Service Provider Interface** (**NSPI**); public point-and-click
    exploits; the exfiltration of sensitive data; and some techniques to get a foothold
    in the target environment through the client software. A great mind map for attacking
    Exchange on the perimeter was created by the same company that created the GOADv2
    lab and is available on GitHub[9].
  prefs: []
  type: TYPE_NORMAL
- en: Our first practical task is to enumerate users and try to obtain a valid set
    of credentials by performing a password spray attack.
  prefs: []
  type: TYPE_NORMAL
- en: User enumeration and password spraying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Password spray attacks require user enumeration. Firstly, we need to create
    a list with possible usernames and enumerate the Active Directory domain name.
    Secondly, we need to enumerate existing users via OWA and then perform a password
    spray attack. To perform these actions, we are going to use the **MailSniper**
    tool[10]. The first step can be done using **Open Source Intelligence** (**OSINT**)
    techniques by doing DNS reconnaissance, utilizing advanced search operators in
    search engines and scraping social media and the company’s external resources.
    There are plenty of open source tools available to perform these activities in
    different stages of their development life cycle. If there are email addresses
    published on external websites, attackers may be lucky to find an email address
    format such as **surname.name@company.com** or **name.surname@company.com**. Also,
    there is a site, [https://hunter.io/](https://hunter.io/), that can help with
    finding out the most common email format used in a company. If there are only
    general addresses such as info, security, GDPR, then we can try to use a script
    such as **namemash**[11] and/or **EmailAddressMangler**[12], which can create
    a list of all possible username permutations. After this step, the attacker will
    have a list of potential users that need to be validated. Now we need to find
    out the domain name with the help of the **DomainHarvestOWA** function from **MailSniper**.
    It has two options on how to obtain the correct domain name. One is to extract
    the name from the **WWW-Authenticate** header returned in the web response by
    the server after a request has been sent to [https://mail.target.com/autodiscover/Autodiscover.xml](https://mail.target.com/autodiscover/Autodiscover.xml)
    and [https://mail.target.com/EWS/Exchange.asmx](https://mail.target.com/EWS/Exchange.asmx).
    The second option is to brute-force the name by using a supplied domain list.
    Requests will be sent to https://mail.target.com/owa/ and the response time will
    be calculated. A request with an invalid domain has a much shorter response time
    than a valid one. Apparently, the username does not influence the delay. Let us
    try this reconnaissance activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of running the preceding command can be found in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Discovering the FQDN of the mail server](image/B18964_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Discovering the FQDN of the mail server
  prefs: []
  type: TYPE_NORMAL
- en: 'After determining the domain name, our next step is user enumeration. This
    is a purely time-based enumeration technique. **MailSniper** calculates the time
    difference between authentication attempt responses. When a valid username is
    found, the response time will be significantly shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the enumeration can be found in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Successful user enumeration using OWA](image/B18964_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – Successful user enumeration using OWA
  prefs: []
  type: TYPE_NORMAL
- en: 'We were able to find two users – **Administrator** and **vinegrep**. Now, let
    us perform a password spray attack against OWA. In this scenario, the tool will
    spray a single password against a supplied list of usernames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We are able to successfully obtain a valid set of credentials for the user
    **vinegrep**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – Valid set of credentials found for user vinegrep](image/B18964_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – Valid set of credentials found for user vinegrep
  prefs: []
  type: TYPE_NORMAL
- en: A password spray attack can be performed against EWS as well with **MailSniper**’s
    **Invoke-PasswordSprayEWS** function. It is important to note that the obtained
    set of valid credentials will not grant access if **Multi-Factor Authentication**
    (**MFA**) is enforced. MFA will require another factor, which can be anything
    starting from an authentication application on a phone to a USB security token
    or another type of secret. Like any security measure, MFA can be bypassed if it
    is misconfigured or an adversary lures the user to perform the second step of
    authentication instead of them.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to get the most out of this valid set of credentials and access
    to a mailbox. In the following section, we will learn how to dump an address book
    and exfiltrate sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping and exfiltrating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming MFA has been bypassed or not enforced and an adversary has successfully
    logged in to the victim’s mailbox, what are the next steps? There are a few available
    scenarios. Firstly, the attacker can go through emails; maybe some sensitive internal
    information, including passwords, certificates, documents, and endpoint addresses,
    can be found. As a security professional, before doing so, ensure that it is in
    line with the rules of engagement. The last thing you want to do is get unauthorized
    access to the customer’s confidential data.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, run an internal phishing campaign. Internal email processing rules
    may be more relaxed from a security point of view – for example, attachments being
    allowed. Also, such a campaign has a much higher success rate as users will be
    more likely to open an attachment/click a link from a colleague or manager. But
    it is still not a guarantee as we do not have control over non-email mediums.
    We can send an email to the victim’s colleague while they are discussing something
    in real life. However, there is a moral aspect to consider as well. Depending
    on the targeted company’s culture and rules, the user may lose their job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thirdly, we can extract all the email addresses of the company and some information
    about Active Directory without disclosing any mailbox content. It is possible
    by dumping GAL or OAB or by abusing NSPI. Let us extract GAL via a compromised
    account using **MailSniper**. This module connects to OWA and utilizes the **FindPeople**
    method to collect email addresses. This method is available from Exchange 2013
    and requires the **AddressListId** value from the **GetPeopleFilters** URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Successful GAL extraction can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/B18964_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – GAL extraction
  prefs: []
  type: TYPE_NORMAL
- en: With newly found email addresses, we can relaunch our password spray attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to dump the email addresses of all Exchange users is by downloading
    OAB files. An important caveat is that extracting the primary email address of
    an existing user is required as well as any valid domain account. The steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Issue the web request to the **autodiscover** endpoint to retrieve **autodiscover.xml**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the **OABUrl** value in the response, which is a path to the directory
    with OAB files. Do not miss other useful information, such as the domain user’s
    SID and domain controller name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request **oab.xml** by using the **OABUrl** value to list OAB filenames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **oab.xml**, search for a filename that includes **data** and has the **.****lzx**
    extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download this file and parse it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need a Linux machine to run the following commands. To automate OABUrl
    extraction, we will use the script from GitHub[13]. The script helps with steps
    1 and 2\. The result can be found in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – OABUrl extraction](image/B18964_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – OABUrl extraction
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will copy the **oab.xml** file and parse it to find the URL for the
    **.lzx** file with the word **data** in the filename. This is our GAL OAB file.
    As a last step, we will save the file and parse through it to find email addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'GAL emails from OAB can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – GAL email extraction using OAB](image/B18964_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – GAL email extraction using OAB
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to dump an address book via NSPI was discovered by *Positive Technologies*
    in their research[14]. A tool named **Exchanger** is now a part of Impacket, so
    we can use it without any additional installation. As a first step, we list tables
    to get the GUID and then, using the GUID, dump promising tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the dump can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Dumping an address book by its GUID via NSPI](image/B18964_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – Dumping an address book by its GUID via NSPI
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can relaunch our password spray attack using extracted emails. We can
    also use this tool to dump Active Directory objects by their GUIDs. Please note
    that first we need to obtain the GUID, for example, with a PowerShell command,
    and only then pass it to Exchanger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the Exchanger command execution can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Dumping an Active Directory object by its GUID via NSPI](image/B18964_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.13 – Dumping an Active Directory object by its GUID via NSPI
  prefs: []
  type: TYPE_NORMAL
- en: On the topic of data exfiltration, we cannot refrain from mentioning a project
    called **PEAS**[15]. This tool was developed based on MWR research[16] to run
    commands on an ActiveSync server. The idea is that we can enumerate and access
    file shares in the domain through Exchange Server. The main cons of this tool
    are that the ActiveSync protocol must be enabled on the server and for the client’s
    account. Also, ActiveSync should be configured in a way that allows UNC paths
    and doesn’t limit SMB servers.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to remotely compromise Exchange is through exploitable vulnerabilities.
    In recent years, quite a few critical vulnerabilities have been found and disclosed.
    In the next section, we will cover available public exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Zero2Hero exploits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss the **Proxy*** exploit family, CVE-2020-0688,
    and **PrivExchange** (CVE-2018-8581). All of them have different root causes,
    but they all prove that Exchange is an extremely complex piece of software with
    a wide attack surface.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with the **Proxy*** exploit family. This class of vulnerabilities
    appeared when adversaries and researchers changed focus to a new attack surface
    – **Client Access Service** (**CAS**). We will start with the most famous vulnerability
    in Exchange history – **ProxyLogon**[17]. *Orange Tsai* from DEVCORE discovered
    two vulnerabilities (CVE-2021-26855 and CVE-2021-27065), which in combination
    allow bypassing authentication and achieving remote code execution.
  prefs: []
  type: TYPE_NORMAL
- en: CVE-2021-26855 is a **Server-Side Request Forgery** (**SSRF**) that allows bypassing
    authentication and sending requests with the highest privileges. When a user sends
    a request to the Exchange frontend, it will flow through the HTTP proxy module,
    which will then evaluate it and send it to the backend. It is possible to forge
    a server-side request by setting the X-BEResource cookie value to the desired
    backend URL. There are two scenarios to exploit this vulnerability. The first
    scenario is to access emails, but it requires at least two Exchange servers in
    the target environment. Another one is to authenticate to **Exchange Control Panel**
    (**ECP**) and then upload the web shell (CVE-2021-27065 and CVE-2021-26858). An
    excellent manual with step-by-step instructions and detections was published by
    *BI.ZONE*[18].
  prefs: []
  type: TYPE_NORMAL
- en: CVE-2021-27065 is a post-authentication arbitrary file write. In a nutshell,
    the attacker logs in to ECP and then, in the OAB virtual directory, edits the
    **External URL** field by inserting web shell code and requests a reset of the
    directory in order to save the web shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether Exchange is vulnerable, we can utilize a module from Metasploit
    – **auxiliary/scanner/http/exchange_proxylogon**. The result of the scan is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Exchange is vulnerable to a ProxyLogon vulnerability](image/B18964_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.14 – Exchange is vulnerable to a ProxyLogon vulnerability
  prefs: []
  type: TYPE_NORMAL
- en: 'For reliable exploitation, we can use a Metasploit exploit – **exploit/windows/http/exchange_proxylogon_rce**.
    All we need is one valid email address and that is it. The result of the exploitation
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Exploitation of the ProxyLogon vulnerability](image/B18964_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.15 – Exploitation of the ProxyLogon vulnerability
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let us cover **ProxyOracle**[19], which consists of the CVE-2021-31195
    (Reflected Cross-Site Scripting) and CVE-2021-31196 (Padding Oracle Attack on
    Exchange Cookies Parsing) vulnerabilities, which allow recovering the victim’s
    username and password in plaintext from the cookie. To check whether the target
    installation is vulnerable (in our case, Exchange Server in the lab with the IP
    address **192.168.56.106**), try to put this payload in the browser address bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see a pop-up alert box, as shown in the following screenshot, you found
    a vulnerable target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Reflected XSS in Exchange Server is required for successful
    ProxyOracle exploitation](image/B18964_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.16 – Reflected XSS in Exchange Server is required for successful ProxyOracle
    exploitation
  prefs: []
  type: TYPE_NORMAL
- en: 'Next on our list is another pre-authenticated RCE – **ProxyShell**[20]. It
    chains three vulnerabilities: CVE-2021-34473 (pre-authenticated path confusion,
    which leads to **Access Control List** (**ACL**) bypass), CVE-2021-34523 (privilege
    elevation on the Exchange PowerShell backend), and CVE-2021-31207 (post-authentication
    arbitrary file write).'
  prefs: []
  type: TYPE_NORMAL
- en: In brief, the first vulnerability abuses the faulty URL normalization process
    in order to access an arbitrary backend URL as the Exchange machine account. The
    second one is the elevation of privileges by putting the Exchange admin in the
    **X-Rps-CAT** request parameter, which is used to restore the user identity when
    the **X-CommonAccessToken** header is missing. The third one is writing a shell
    via Exchange PowerShell commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit has our back here as well with **exploit/windows/http/exchange_proxyshell_rce**.
    The result of the exploitation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.17 – ProxyShell successful exploitation](image/B18964_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.17 – ProxyShell successful exploitation
  prefs: []
  type: TYPE_NORMAL
- en: 'It is time to discuss the **ProxyNotShell**[21] vulnerability. It is similar
    to ProxyShell, as it consists of a pair of vulnerabilities, which are SSRF (CVE-2022–41040)
    and RCE via PowerShell (CVE-2022–41082). The difference this time is that it requires
    the attacker to be authenticated. Again, we have an exploit available in Metasploit–
    **exploit/windows/http/exchange_proxynotshell_rce**. An important note is that
    the exploit in Metasploit is only available for Exchange 2019\. We can see the
    result of running it against our environment as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.18 – ProxyNotShell exploitation aborted due to the Exchange version](image/B18964_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.18 – ProxyNotShell exploitation aborted due to the Exchange version
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will briefly talk about **ProxyRelay**[22] and **ProxyNotRelay**[23].
    The first exploit is a relay attack to either another Exchange Server (no CVE),
    backend (CVE-2022-21979), frontend (CVE-2021-33768), or Windows DCOM (CVE-2021-26414).
    The idea is identical to other coerced authentication and relays that we will
    cover later on in this book. ProxyNotRelay is not a separate vulnerability, but
    more a combination of ProxyRelay and ProxyNotShell.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to discuss two old vulnerabilities – CVE-2020-0688 and PrivExchange
    (CVE-2018-8581). It is very unlikely that you will encounter them in real life,
    but the idea is to show other attack surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: CVE-2020-0688[24] allows an authenticated attacker to execute arbitrary code
    due to the fixed cryptographic keys used during Exchange installation. Let us
    dive a bit deeper into the details. The bug was found in the **Exchange Control
    Panel** (**ECP**). The **validationKey** and **decryptionKey** values are supposed
    to be randomly generated per installation. These keys provide security for **ViewState**,
    which is a method to preserve the page and control values in ASP.NET web applications.
    An important caveat is that **ViewState** is serialized and stored on the client
    side. What is serialization? In plain words, it is a process to convert complex
    data into a sequence of bytes with a preserved state in order to be sent or stored.
    If the attacker can manipulate such data by supplying their own malicious values,
    insecure deserialization on the server side in certain circumstances may lead
    to RCE.
  prefs: []
  type: TYPE_NORMAL
- en: 'After logging in to ECP, an adversary collects **ViewStateUserKey** from the
    **ASP.NET_SessionID** cookie and the **__VIEWSTATEGENERATOR** value from the login
    page by simply using the browser with Dev Tools. The **validationkey** value is
    known (**CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF**). To generate a malicious
    payload for **ViewState**, we will use a tool called **ysoserial.net**[25]. This
    tool is a collection of known gadget chains discovered in common libraries. Gadgets
    are snippets of code that exist in the library code and may help the attacker
    to execute the payload by being executed one by one. This exploit uses the **TextFormattingRunProperties**
    library. We can run the following command to create a file in **C:\**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the execution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – CVE-2020-0688 successful exploitation](image/B18964_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.19 – CVE-2020-0688 successful exploitation
  prefs: []
  type: TYPE_NORMAL
- en: The file was created in **C:\**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – File was created in C:\ with the output of the whoami command](image/B18964_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.20 – File was created in C:\ with the output of the whoami command
  prefs: []
  type: TYPE_NORMAL
- en: The second vulnerability requires three conditions and is called **PrivExchange**[26].
    The first condition was that Exchange should have way too high privileges in the
    domain. The **Exchange Windows Permissions** group had **WriteDacl** permission
    on the domain object, which allowed the attacker to obtain **DCSync** rights.
    **DCSync** is a privilege that allows you to sync all the hashes in the domain.
    Usually, this privilege is used by domain controllers during replication. The
    attacker just requests a domain controller to send hashes for synchronization.
  prefs: []
  type: TYPE_NORMAL
- en: The second condition was the possibility of NTLM relay for machine accounts
    and the third was that the attacker could force Exchange to authenticate against
    the listener via the **PushSubscription** feature. We will discuss relay in more
    detail in [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us run the attack by using the **ntlmrelayx** tool and the **privexchange**
    exploit[27]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command is as follows. It’s important to mention that the
    user should have a mailbox on Exchange Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – PushSubscription API call was successful](image/B18964_01_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.21 – PushSubscription API call was successful
  prefs: []
  type: TYPE_NORMAL
- en: As we deployed Exchange Server 2016 CU12, it is not vulnerable to this attack.
    Microsoft removed the automatic authentication of Exchange when sending out notifications.
    Also, Exchange permissions were reduced.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will be about getting an initial foothold in the organization
    via Outlook rules, forms, and the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining a foothold
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will discuss ways to achieve RCE after mailbox compromise
    – via rules, forms, and the folder home page. These methods can still work if
    Outlook is not patched. An important note is that we are talking about client-side
    rules in Outlook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us start with Outlook rules[28]. Rules are stored in Exchange Server and
    the new Outlook instance receives all existing rules. We are interested in the
    action part of the rule and what triggers it. When we create a rule, two actions
    look promising: start application and run script. To execute the attack, we need
    a valid set of credentials, MAPI over HTTP enabled, and a malicious file dropped
    on disk or accessible via the UNC path (WebDAV can be used as well). This attack
    will not work on patched Outlook 2016 and upward. To perform this attack, we can
    use a tool called Ruler[29]. The following command will create a rule and trigger
    it after 30 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The rule was successfully created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22 – Creating a rule](image/B18964_01_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.22 – Creating a rule
  prefs: []
  type: TYPE_NORMAL
- en: Two important caveats are that we can’t provide command-line arguments and outgoing
    WebDAV traffic needs to be allowed. Also, after the Microsoft patch (KB3191938)
    in June 2013 for Outlook[30], rules to run both an application and a script were
    disabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will cover Outlook forms[31]. It was introduced after the Rule vector
    was killed by Microsoft. The idea is that we can create our own form with VBScript
    code inside. Luckily, this script engine is separate from the VBA Macro script
    engine, so disabling macros will not help. To trigger the form remotely, we need
    to send an email of the correct message class. We need to create the same form
    in Outlook. This technique is a great way to achieve persistence. Even if the
    victim changes the password, we can just send an email and get our shell. To run
    this attack, we can use Ruler again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In September 2017, when the KB4011091 update for Outlook[32] was published,
    the custom form script vector was destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a third vector to discuss, called the Outlook home page[33]. The home
    page allows us to customize the default view for any folder by specifying a URL
    to be loaded and displayed when the folder is open. Code execution comes from
    the **OutlookViewCtl** CLSID (**0006F063-0000-0000-C000-000000000046**) embedded
    as an object and available in the **CreateObject** method. All we need is to create
    our custom home page and, with the help of ruler, set it for the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command execution can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – Setting the Outlook home page](image/B18964_01_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.23 – Setting the Outlook home page
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft killed this vector completely by removing the home page feature in
    the KB4011162 update in October 2017[34]. Reducing the attack surface is the best
    way to fix issues.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed different attack vectors against Exchange Server.
    To mitigate password spray attacks, MFA and appropriate login monitoring are required.
    All RCE vulnerabilities sooner or later received patches. It is also necessary
    to patch client software, as it can be abused for lateral movement and persistence.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we deployed our lab for future activities. We are lucky to
    have two outstanding free projects available for training and research purposes.
    After that, we discussed the Active Directory kill chain, vital steps to compromise
    the target environment, and what OpSec is. Then, we dived deeper into the assume
    breach model, showing solid hurdles that need to be overcome to achieve stable
    initial access. We covered three main attack vectors for Exchange Server: credential
    access, Zero2Hero exploits, and abuse of client-side software. In the next chapter,
    we will scratch the surface of the defense evasion theme. It is a broad and deep
    topic, which you will see eventually narrows down to the rule *know* *your tooling*.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources for further study will help you dive deeper into the
    attacks covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Splunk Attack Range – [https://github.com/splunk/attack_range](https://github.com/splunk/attack_range)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Orange Cyberdefense GOADv2 – [https://github.com/Orange-Cyberdefense/GOAD](https://github.com/Orange-Cyberdefense/GOAD)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy GOADv2 on Proxmox – [https://mayfly277.github.io/categories/proxmox/](https://mayfly277.github.io/categories/proxmox/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DetectionLab project – [https://www.detectionlab.network/](https://www.detectionlab.network/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Active Directory kill chain diagram – [https://github.com/infosecn1nja/AD-Attack-Defense](https://github.com/infosecn1nja/AD-Attack-Defense)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Red team infrastructure wiki – [https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki](https://github.com/bluscreenofjeff/Red-Team-Infrastructure-Wiki)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EDR bypass team – [https://dispatch.redteams.fyi/red-team-edr-bypass-team/](https://dispatch.redteams.fyi/red-team-edr-bypass-team/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assume breach model – [https://www.redsiege.com/wp-content/uploads/2019/09/AssumedBreach-ABM.pdf](https://www.redsiege.com/wp-content/uploads/2019/09/AssumedBreach-ABM.pdf)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mind map to assess the security of Exchange Server – [https://github.com/Orange-Cyberdefense/arsenal/blob/master/mindmap/Pentesting_MS_Exchange_Server_on_the_Perimeter.png](https://github.com/Orange-Cyberdefense/arsenal/blob/master/mindmap/Pentesting_MS_Exchange_Server_on_the_Perimeter.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MailSniper – [https://github.com/dafthack/MailSniper](https://github.com/dafthack/MailSniper)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NameMash – [https://gist.github.com/superkojiman/11076951#file-namemash-py](https://gist.github.com/superkojiman/11076951#file-namemash-py)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: EmailAddressMangler – [https://github.com/dafthack/EmailAddressMangler](https://github.com/dafthack/EmailAddressMangler)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OABurl extraction script by *snovvcrash* – [https://gist.github.com/snovvcrash/4e76aaf2a8750922f546eed81aa51438#file-oaburl-py](https://gist.github.com/snovvcrash/4e76aaf2a8750922f546eed81aa51438#file-oaburl-py)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attacking Exchange web interfaces – [https://swarm.ptsecurity.com/attacking-ms-exchange-web-interfaces/](https://swarm.ptsecurity.com/attacking-ms-exchange-web-interfaces/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PEAS: Python 2 library and application to run commands on Exchange Server –
    [https://github.com/snovvcrash/peas](https://github.com/snovvcrash/peas)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MWR ActiveSync exfiltration research – [https://labs.withsecure.com/publications/accessing-internal-fileshares-through-exchange-activesync](https://labs.withsecure.com/publications/accessing-internal-fileshares-through-exchange-activesync)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ProxyLogon vulnerability discovery – [https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/](https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-1-ProxyLogon/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hunting ProxyLogon – [https://bi-zone.medium.com/hunting-down-ms-exchange-attacks-part-1-proxylogon-cve-2021-26855-26858-27065-26857-6e885c5f197c](https://bi-zone.medium.com/hunting-down-ms-exchange-attacks-part-1-proxylogon-cve-2021-26855-26858-27065-26857-6e885c5f197c)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blog post from a vulnerability researcher who discovered ProxyOracle – [https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/](https://devco.re/blog/2021/08/06/a-new-attack-surface-on-MS-exchange-part-2-ProxyOracle/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A full write-up about ProxyShell is available on the ZDI blog post here – [https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell](https://www.zerodayinitiative.com/blog/2021/8/17/from-pwn2own-2021-a-new-attack-surface-on-microsoft-exchange-proxyshell)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blog post by Palo Alto covering the ProxyNotShell vulnerability – [https://unit42.paloaltonetworks.com/proxynotshell-cve-2022-41040-cve-2022-41082/](https://unit42.paloaltonetworks.com/proxynotshell-cve-2022-41040-cve-2022-41082/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ProxyRelay author covers details of the vulnerability – [https://devco.re/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/](https://devco.re/blog/2022/10/19/a-new-attack-surface-on-MS-exchange-part-4-ProxyRelay/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write-up about ProxyNotRelay, which is a combination of ProxyRelay and ProxyNotShell
    – [https://rw.md/2022/11/09/ProxyNotRelay.xhtml](https://rw.md/2022/11/09/ProxyNotRelay.xhtml)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vulnerability CVE-2020-0688 leads to remote code execution on Exchange Server
    – [https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys](https://www.zerodayinitiative.com/blog/2020/2/24/cve-2020-0688-remote-code-execution-on-microsoft-exchange-server-through-fixed-cryptographic-keys)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ysoserial.net – [https://github.com/pwntester/ysoserial.net](https://github.com/pwntester/ysoserial.net)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Original research about the PrivExchange vulnerability – [https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/](https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PrivExchange – [https://github.com/dirkjanm/privexchange/](https://github.com/dirkjanm/privexchange/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compromise workstations through Outlook mail rules – [https://sensepost.com/blog/2016/mapi-over-http-and-mailrule-pwnage/](https://sensepost.com/blog/2016/mapi-over-http-and-mailrule-pwnage/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ruler tool – [https://github.com/sensepost/ruler](https://github.com/sensepost/ruler)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft bulletin KB3191938 – [https://support.microsoft.com/en-us/topic/description-of-the-security-update-for-outlook-2013-june-13-2017-d52f7b9a-488c-dd5a-0d43-da5832eaac5f](https://support.microsoft.com/en-us/topic/description-of-the-security-update-for-outlook-2013-june-13-2017-d52f7b9a-488c-dd5a-0d43-da5832eaac5f)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outlook Forms to achieve persistence – [https://sensepost.com/blog/2017/outlook-forms-and-shells/](https://sensepost.com/blog/2017/outlook-forms-and-shells/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft bulletin KB4011091 – [https://support.microsoft.com/en-us/office/custom-form-script-is-now-disabled-by-default-bd8ea308-733f-4728-bfcc-d7cce0120e94](https://support.microsoft.com/en-us/office/custom-form-script-is-now-disabled-by-default-bd8ea308-733f-4728-bfcc-d7cce0120e94)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Outlook home page functionality abuse – [https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/](https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft bulletin KB15599094 – [https://learn.microsoft.com/en-us/mem/configmgr/hotfix/2207/15599094](https://learn.microsoft.com/en-us/mem/configmgr/hotfix/2207/15599094)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
