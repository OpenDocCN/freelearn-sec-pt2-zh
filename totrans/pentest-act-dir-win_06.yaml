- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Domain Privilege Escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The probability that an attacker will need to escalate privileges in the target
    domain is high. We have already discussed why we will not touch upon the host
    privilege escalation theme. However, most concepts are universal. We check whether
    any privilege escalation exploits are applicable to the target environment. If
    there are none, the next step is to identify various misconfigured ACLs and GPOs
    and users with excessive group memberships that could have been unintentionally
    introduced by IT staff or during software installation in the Active Directory
    environment. We will reiterate these activities in every newly discovered path.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter starts with examples of good old point-and-click exploits. This
    will again emphasize the critical role patching plays in the security posture
    of an environment. Then, we will cover ACL misconfigurations and Group Policy
    abuses. The main caveat in detecting these escalation paths is that they can be
    hidden and not that obvious from the IT staff’s point of view. Also, there are
    specific security groups in Active Directory, the membership of which can lead
    to undesired consequences. We will go through them one by one. Last, but not least,
    is privilege escalation possibilities from the child to the parent domain. Privilege
    escalation involving Microsoft SQL Server and AD CS will be thoroughly covered
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Public Zero2Hero exploits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find and abuse ACL misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What can be achieved by manipulating GPO?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in security groups review, including **DNSAdmins**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escalate from the child to the parent domain inside a forest and **Privileged
    Access Management** (**PAM**) trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will need to have access to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and at least 55 GB of total space (more if you take snapshots)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux-based operating system is strongly recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant installed with a plugin for the virtualization platform in use and Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GOADv2 and DetectionLab projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero2Hero exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss available exploits that can provide a domain
    administrator’s level of access in a matter of minutes. In a mature environment
    with regular patching and vulnerability management, it is not very common to find
    such treasure. However, there is still a possibility, and checking will not hurt.
    We will start with a relatively old GoldenPAC vulnerability in Kerberos, discuss
    the root cause of Zerologon and exploit it, and get elevated privileges with PrintNightmare
    and noPAC. We will also briefly cover different types of “Potatoes” and discuss
    how wrong group membership assignment can lead to a complete domain takeover.
  prefs: []
  type: TYPE_NORMAL
- en: MS14-068
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**MS14-068** was a successor of **MS11-013**, meaning that it was a PAC validation
    vulnerability. The attacker was able to modify the existing TGT by adding privileged
    groups and the domain controller wrongly validated the tickets. This happened
    on the fly, so domain users’ group membership was not changed. All we need to
    exploit this vulnerability is a valid set of domain users’ credentials with a
    corresponding SID and domain controller FQDN. After the vulnerability was announced,
    the exploit was released by *bidord*[1].'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This vulnerability is not introduced in the lab. A good step-by-step attack
    guide can be found here: [https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/](https://www.trustedsec.com/blog/ms14-068-full-compromise-step-step/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Concisely, this is the command you need to run against an unpatched domain
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As a result, we can inject a TGT ticket and enjoy our new privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attack detection for Kerberos is difficult, as usual. Exploitation can be caught
    by examining event ID 4624 for a user SID and account name mismatch. Also, we
    can check new users in domain groups with an SID ending in **512**, **513**, **518**,
    **519**, or **520**. The usual recommendation applies here as well: patch your
    infrastructure. After KB installation, we can detect failed exploitation attempts
    in event ID 4769.'
  prefs: []
  type: TYPE_NORMAL
- en: Zerologon (CVE-2020-1472)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This vulnerability was a real disaster. The unauthenticated attacker was able
    to obtain domain admin privileges by compromising the domain controller. The vulnerability
    is in subverting Netlogon cryptography. **Netlogon** is a service for logon request
    verification, registration, authentication, and domain controller location. It
    uses the MS-NRPC interface as an authentication mechanism and MS-NRPC itself uses
    custom, insecure cryptography for Netlogon Secure Channel connection to domain
    controllers. The protocol vulnerability is the reuse of a static, zero-valued
    **initialization vector** (**IV**) in AES-CFB8 mode.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Original research by *Tom Tervoort* from *Secura*, with a detailed explanation,
    is available here: [https://www.secura.com/uploads/whitepapers/Zerologon.pdf](https://www.secura.com/uploads/whitepapers/Zerologon.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two exploitation scenarios for Zerologon: **relay**[2] and **password
    change**.'
  prefs: []
  type: TYPE_NORMAL
- en: To understand the password change exploitation scenario, there are seven key
    concepts summarized here[3].
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, the exploit steps are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploit cryptographic vulnerability to spoof the client credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore signing and sealing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spoof a call to bypass authentication with unlimited login attempts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the account’s password to null.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Abuse null password to gain domain admin privileges.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restore the computer’s password to ensure that replication between domain controllers
    is still working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let us try to exploit this vulnerability in our lab. We are going to scan
    all three domain controllers. We have a few exploits at our disposal, together
    with the Metasploit module (**auxiliary/admin/dcerpc/cve_2020_1472_zerologon**).
    I will use Impacket and the *VoidSec* exploit[4]. Also, I recommend creating a
    snapshot of the DC03 before exploitation. Running this exploit in production can
    cause disruption. If you still do so, do not forget to revert the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the exploitation is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Successful Zerologon exploitation](image/B18964_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Successful Zerologon exploitation
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this unpleasant situation, install security patches on a regular basis
    – and critical ones, immediately.
  prefs: []
  type: TYPE_NORMAL
- en: PrintNightmare (CVE-2021-1675 & CVE-2021-34527)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The name of the vulnerability can hint at which service introduced it. You
    guessed correctly – our good friend the **Print Spooler service**. There are three
    RPC protocols used by Spooler: **MS-RPRN**, **MS-PAR**, and **MS-PAN**. We are
    interested in the first two protocols. In general, the vulnerability lies in the
    functions allowing the installation of remote drivers by users. We need SMB share
    to be reachable from the server to host our malicious DLL. The client creates
    an object with the path to the attacker’s DLL and passes it to another object
    that is then loaded by **RpcAddPrinterDriverEx**. Also, we need to bypass **SeLoadDriverPrivilege**
    verification on the server by setting some bits in **dwFileCopyFlags**. Then,
    DLL will be loaded and can be found here: **C:\Windows\System32\spool\drivers\x64\3**)
    and here (**C:\Windows\System32\spool\drivers\x64\3\Old\{id}**. There are some
    conditions found by *StanHacked*[5] depending on the protocol. If the target refuses
    remote connections, this exploit can be used for local privilege escalation, but
    only if the **Point and Print** policy is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For exploitation, we can use an exploit written by *cube0x0*[6], a module in
    Mimikatz, or the Metasploit module. First of all, we need to check whether the
    Spooler service is running by using **CrackMapExec**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the CrackMapExec execution was the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Spooler service enumeration](image/B18964_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Spooler service enumeration
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can run an exploit from Metasploit against the target. This module
    has a pre-built check and will require standard domain user credentials for successful
    exploitation. They are not marked as mandatory options, but without them, the
    exploit failed, at least for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Successful PrintNightmare exploitation](image/B18964_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Successful PrintNightmare exploitation
  prefs: []
  type: TYPE_NORMAL
- en: It took some time for Microsoft to issue the correct fix. The most reliable
    mitigation is to completely disable the Spooler service where it is possible.
  prefs: []
  type: TYPE_NORMAL
- en: sAMAccountName Spoofing and noPac (CVE-2021-42278/CVE-2021-42287)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This attack is a combination of two vulnerabilities. The first one, CVE-2021-42278
    (Name Impersonation) lies in the fact that no validation process happened to ensure
    that the computer account has a trailing $ at the end. The second one, CVE-2021-42287
    (KDC bamboozling) abuses the fact that if the computer name is not found by DC
    during S4U2Self ticket request, the search will happen again with $ appended to
    the computer name in a TGT. To exploit these vulnerabilities, we need unpatched
    domain controllers, a valid domain user account, and a machine account quota above
    0.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Good step-by-step research was published by *exploitph* here: [https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml](https://exploit.ph/cve-2021-42287-cve-2021-42278-weaponisation.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the help of the **CrackMapExec** modules, we can find out the machine
    quota in the domain and check whether the domain controller is a vulnerability
    to **noPac**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the execution is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – MAQ and vulnerability check with CrackMapExec](image/B18964_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – MAQ and vulnerability check with CrackMapExec
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Manual exploitation steps are well described in this lab walk-through: [https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac](https://mayfly277.github.io/posts/GOADv2-pwning-part5/#samaccountname-nopac).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six steps to exploit these vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a computer account with **addcomputer.py** or **Powermad**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the SPN attribute of the created or controlled machine account with **Powerview**
    or **addspn.py**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **sAMAccountName** attribute of the created or controlled machine
    account to the domain controller’s one but without **$** at the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request a TGT for this machine account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert the **sAMAccountName** attribute of the created or controlled machine
    account to the original one or any other value, but not the domain controller’s
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request the TGS with **S4U2self** by presenting the obtained TGT and then use
    it for access to the domain controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will use an automated exploiter written by *cube0x0*[7], where all these
    steps are included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – noPac successful exploitation](image/B18964_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – noPac successful exploitation
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also exploit this vulnerability from a Linux machine, using an exploit
    written in Python[8]:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the execution is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – sam-the-admin noPac exploit version at work](image/B18964_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – sam-the-admin noPac exploit version at work
  prefs: []
  type: TYPE_NORMAL
- en: The best mitigation here is to install updates (**KB5008102**, **KB5008380**,
    and **KB5008602**). In addition, we can monitor for event ID 4662, **SAM Account
    Name**, changed to detect possible exploitation attempts.
  prefs: []
  type: TYPE_NORMAL
- en: RemotePotato0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Potato** in an exploit name always has an association with impersonation
    and **local privilege exploits** (**LPE**) such as **Hot**, **Lonely**, **Rotten**,
    **Juicy**, **Rogue,** **Sweet**, **God**, or the newly discovered **local** **potato
    flavors**[9].'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'By the way, you can refer to this good blog post if you get lost regarding
    different flavors: [https://jlajara.gitlab.io/Potatoes_Windows_Privesc](https://jlajara.gitlab.io/Potatoes_Windows_Privesc).'
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is to trigger authentication of the logged-in high-privileged
    user and relay it to the domain controller. Successful exploitation requires initial
    access on the same host that the high-privileged user is logged on to. SMB and
    LDAP signing are not enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploit requirements are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The attacker requires membership of the “Remote Desktop Management” group on
    the computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The member of the “Domain Admin” group must be interactively logged into that
    machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the GOADv2 lab, this vulnerability is not exploitable, however, it still
    works in DetectionLab. The exploit code is available here[10]. I used a domain
    controller and exchange server from DetectionLab. On a Kali machine, I started
    **ntlmrelayx** and then ran the exploit on the exchange server using a PSRemote
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I then ran the exploit on the exchange server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the exploitation is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – RemotePotato0 exploit execution](image/B18964_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – RemotePotato0 exploit execution
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, we can see that our user was added to **Enterprise** **Admin group**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – RemotePotato0 successful relay and shell](image/B18964_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – RemotePotato0 successful relay and shell
  prefs: []
  type: TYPE_NORMAL
- en: 'This vulnerability was silently fixed by Microsoft in October 2022 in a patch
    release. LDAP relay scenarios have gone, since NTLM authentication has the **SIGN**
    flag set. We can confirm it if we try to replicate the attack in the GOADv2 lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – RemotePotato0 exploit failed](image/B18964_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – RemotePotato0 exploit failed
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also confirmed by our **ntlmrelayx** output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Relay is not working, vulnerability was fixed](image/B18964_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Relay is not working, vulnerability was fixed
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss what ACL and ACE are and different ways
    to cook them for malicious purposes.
  prefs: []
  type: TYPE_NORMAL
- en: ACL abuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Access Control List (ACL) abuse** provides the attacker with unique and almost
    undetectable ways to escalate privileges, perform lateral movement, and achieve
    malware-less persistence.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most notable and comprehensive research on that theme was presented
    by *SpectreOps* ([https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/an_ace_up_the_sleeve.pdf)).
    We will refer to some parts of the research here and in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We will start with essential theory as an introduction. Each object in Active
    Directory has a security descriptor. Each object has associated lists of **Access
    Control Entities** (**ACEs**), which create two lists called the **Discretionary
    Access Control List** (**DACL**) and the **System Access Control List** (**SACL**).
    ACEs define which security principals have rights over the object. The SACL has
    great detection potential as it can be used for auditing access attempts. Object
    owners can modify the DACL. When we speak about domain objects, we are focusing
    our attention on user, group, computer, domain, and GPO objects. The last important
    concept to understand is inheritance. For all objects that have **AdminCount=0**,
    inheritance is enabled by default, meaning that if we apply ACE to OU or a container,
    it will be applied to all objects inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find misconfigured ACLs in the domain, we can use various tools, such as
    ACLScanner from PowerView or BloodHound. These rights look promising from an offensive
    perspective: **GenericAll, WriteDacl**, **GenericWrite (Self + WriteProperty)**,
    **WriteOwner and AllExtendedRights** **(****DS-Replication-Get-Changes(All)**,
    **User-Force-Change-Password)**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A comprehensive mind map for ACL abuse together with command examples can be
    found here[11]. We will cover them one by one to discuss abuse possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – ACL abuse mind map](image/B18964_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – ACL abuse mind map
  prefs: []
  type: TYPE_NORMAL
- en: As we can see on the mind map, the most powerful right is **GenericAll**. It
    opens an attacker to a vast variety of abuse options. The **ReadLAPSPassword**
    property was covered before, in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061).
    The **WriteProperty** permission applied to the **KeyCredentialLink** property
    for the computer and user can lead to a **shadow credentials attack**, which will
    be covered in [*Chapter 8*](B18964_08.xhtml#_idTextAnchor163) later, thus it’s
    not mentioned in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: One special case that is slightly unusual is related to **ReadGMSAPassword**
    ACL abuse. The attacker needs to control an object that is listed in the **msDS-GroupMSAMembership**
    ACL of the target object. In plain words, this is the list of objects that are
    allowed to query the password for the gMSA.
  prefs: []
  type: TYPE_NORMAL
- en: Group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From an offensive perspective, if an attacker controls the object with one
    of the following ACLs (**GenericAll**, **GenericWrite**, **Self**, **WriteProperty**,
    or **AllExtendedRights**) on the group, then it is possible to add an object to
    the group. The **WriteOwner** permission allows the attacker to get ownership
    of the group. If **WriteDacl** is also in control, it is possible to combine both
    rights and grant **GenericAll** privileges to itself, effectively getting full
    control of the group. We will perform the scan in the **sevenkingdoms** domain
    to detect misconfiguration with the help of **PowerView**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – tywin.lannister has the WriteDacl right on the Small Council
    group](image/B18964_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – tywin.lannister has the WriteDacl right on the Small Council group
  prefs: []
  type: TYPE_NORMAL
- en: 'To abuse the **WriteDacl** privilege, we need to add full control over the
    group to **tywin.lannister** and then add him to the group. We can do it with
    two PowerView commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding commands is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – tywin.lannister added himself to the Small Council group](image/B18964_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – tywin.lannister added himself to the Small Council group
  prefs: []
  type: TYPE_NORMAL
- en: The **WriteProperty** right on the group allows the attacker to add any principal
    to the group, but the **Self** right allows only the object itself to be added
    to the group.
  prefs: []
  type: TYPE_NORMAL
- en: Computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most common exploitation scenario when a computer object’s specific right
    is under control is Kerberos **resource-based constrained delegation** (**RBCD**).
    To perform Kerberos RBCD, an attacker needs to control one of the following permissions:
    **GenericAll**, **GenericWrite**, **Self**, or **WriteProperty** on the **ms-AllowedToActOnBehalfOfOtherIdentity**
    property. **WriteProperty** on the **Service-Principal-Name** attribute will allow
    an adversary to execute an SPN-jacking attack. This scenario involves **Kerberos
    Constrained Delegation** (**KCD**) abuse. In brief, the idea is that the attacker
    compromises the server with KCD and at the same time has the **WriteSPN** (**WriteProperty
    on Service-Principal-Name**) right over the target server, and the one that is
    listed in the compromised server’s constrained delegation configuration. Then
    the attacker will remove SPN from the second server and add it to the target one,
    running the full S4U attack on the compromised server. Then, they will edit the
    ticket’s SPN and pass it. As an example in our lab, such a situation may look
    like the following. An adversary compromised the **Castelblack** server, which
    had KCD configured for **Winterfell**. The final target was Legit-PC, where an
    attacker had the **WriteSPN** right. Firstly, add the SPN of **winterfell** to
    **Legit-PC**. Next, request the ticket for the same SPN and edit the ticket’s
    SPN with Rubeus **tgssub** to point to the Legit-PC service.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Original research is published at [https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/](https://www.semperis.com/blog/spn-jacking-an-edge-case-in-writespn-abuse/)
    and a set of commands to perform SPN-jacking can be found here: [https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking](https://www.thehacker.recipes/ad/movement/kerberos/spn-jacking).'
  prefs: []
  type: TYPE_NORMAL
- en: User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning, the **GenericAll** right will grant full control
    over the object. All attack paths discussed here are possible because of a certain
    set of controlled rights. The **GenericWrite** permission allows the attacker
    to take over a user account by changing the password without knowing the current
    one. The **WriteDacl** right allows the attacker to grant themselvesfull control
    over the user object. **GenericWrite** or **WriteProperty** opens certain attack
    venues, depending on the property itself. The property can be logon script attribute
    (**scriptPath** or **msTSInitialProgram**), **Service-Principal-Name**, or the
    **userAccountControl** attribute. The last two will allow us to perform **Targeted
    Kerberoasting** and **Targeted AS-REP Roasting**. I used an ADSI edit and added
    the **WriteProperty** right to **jaime.lannister** over the **lord.varys** user
    object. Now, enumerate and confirm it with the help of PowerView:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – jaime.lannister has WriteProperty over lord.varys](image/B18964_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – jaime.lannister has WriteProperty over lord.varys
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first attack will be targeted Kerberoasting. The idea is to set the SPN
    on the user, obtain the Kerberoast hash, and clear out the SPN to cover our tracks.
    This can be achieved with the following PowerView commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding commands is shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Successful targeted Kerberoasting of the lord.varys user](image/B18964_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Successful targeted Kerberoasting of the lord.varys user
  prefs: []
  type: TYPE_NORMAL
- en: 'Targeted AS-REP roasting is based on our control over the **userAccountControl**
    property, so we can change it to **not require Kerberos pre-authentication**.
    I will demonstrate it using PowerView and Rubeus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The successful attack is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Successful targeted AS-REP roasting of the lord.varys user](image/B18964_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Successful targeted AS-REP roasting of the lord.varys user
  prefs: []
  type: TYPE_NORMAL
- en: 'The most well-known abuse vector is when we have **AllExtendedRights** or the
    **User-Force-Change-Password** right over the user object, meaning that we can
    reset the user’s password without knowledge of the current one. This a venue was
    presented in our lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – tywin.lannister can reset the jaime.lannister user’s password](image/B18964_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – tywin.lannister can reset the jaime.lannister user’s password
  prefs: []
  type: TYPE_NORMAL
- en: 'The following PowerView commands will do the trick:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – tywin.lannister successfully resets the jaime.lannister user’s
    password](image/B18964_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – tywin.lannister successfully resets the jaime.lannister user’s
    password
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will have a look at the most powerful ACL that can be used to completely
    take over the whole domain.
  prefs: []
  type: TYPE_NORMAL
- en: DCSync
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WriteDacl** privileges on the domain object can be used to grant DCSync privileges
    (**DS-Replication-Get-Changes and DS-Replication-Get-Changes-All**). To simulate
    an attack, I used an ADSI edit and added **jaime.lannister** **Modify Permissions**
    and **Write all properties** rights. We can use PowerView and confirm that the
    changes were successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – The jaime.lannister user has WriteDacl privileges over the
    domain object](image/B18964_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – The jaime.lannister user has WriteDacl privileges over the domain
    object
  prefs: []
  type: TYPE_NORMAL
- en: 'We can grant DCSync privileges to the user and execute the attack with the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the DCSync attack is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Successful DCSync attack](image/B18964_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Successful DCSync attack
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss ways to abuse the GPO. It is also interconnected
    with misconfigured ACLs, but this time for the GPO. The attacker can use it for
    lateral movement, privilege escalation, and persistence in the domain. The detection
    of this attack was fully covered in [*Chapter 4*](B18964_04.xhtml#_idTextAnchor061).
  prefs: []
  type: TYPE_NORMAL
- en: Group Policy abuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Server and client Windows operating systems have various parameters that can
    be enabled, disabled, or configured. It is possible to apply required parameters
    locally on each object (local policy), but in the domain, it is much more convenient
    to prepare and push configuration changes via Group Policy to a set of machines
    and/or users. These sets of policies are called the **Group Policy Object** (**GPO**).
    Each GPO has its own GUID. Policy files are stored in the domain SYSVOL folder.
    By default, GPO creation and linking are allowed only to users with domain administrator’s
    privileges, however, these permissions can be delegated. The GPO needs to be linked
    to **Organizational Units**, a domain, or a site. The linking process requires
    an understanding of two more concepts: inheritance and enforcement. If GPLink
    is enforced, the GPO will apply to the linked OU and all child objects even if
    inheritance is blocked. If GPLink is not enforced, the GPO will apply to the linked
    OU and all child objects until **block inheritance** is enabled in any following
    OU. There are ways to apply the GPO even more gradually, such as WMI filtering,
    security filtering, and link order. But these are rarely used filtering options
    in practice. We have two main attack venues for the misconfigured GPO, depending
    on the privileges we obtained: create and link a new GPO or modify an existing
    GPO. However, we have much more freedom of action when we have successfully obtained
    control over the GPO itself. The following is a list of abuse scenario examples,
    which is just the tip of the iceberg, as with a certain level of creativity, only
    the sky is the limit:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a user to a privileged local group on the machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add user rights such as SeDebugPrivilege, RDP connection, and similar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure user and/or computer logon/logoff scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust registry keys and their DACL, including autorun, for persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure immediate scheduled tasks for the user or computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Malicious **.msi** file installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and edit services on the machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy a new evil shortcut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage firewall and Windows Defender settings (for example, exclude paths)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the time of writing, our lab had no vulnerable GPO introduced, so I created
    one myself in the **sevenkingdoms** domain and granted extra rights to the **jaime.lannister**
    user. Let us get down to practicing. We will start with GPO enumeration in the
    domain and ACL applied to it. The ACLs that we are looking for are our usual suspects:
    **GenericAll**, **GenericWrite**, **WriteProperty**, **WriteDacl**, **WriteOwner**,
    and **AllExtendedWrite and WriteMember**. We can use a PowerView one-liner to
    perform this action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, we look for the user with SID outside of usual privileged groups
    and accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.21 – User with GenericAll rights on the GPO](image/B18964_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.21 – User with GenericAll rights on the GPO
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we find out the user account with privileges for the GPO, the GPO name,
    and the OU name with the members to which this GPO is applied. This can be achieved
    with the help of PowerView:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This information is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.22 – GPO information](image/B18964_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.22 – GPO information
  prefs: []
  type: TYPE_NORMAL
- en: 'We can escalate privileges by adding **jaime.lannister** to the local administrator
    group with the help of **SharpGPOAbuse**[12], written by *F-Secure*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the exploitation is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23 – The jaime.lannister user was added to the local administrator’s
    group](image/B18964_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.23 – The jaime.lannister user was added to the local administrator’s
    group
  prefs: []
  type: TYPE_NORMAL
- en: 'Another privilege escalation scenario is to find users who can create and link
    policies in the domain. Creating a policy is not enough without linking it to
    the OU for anything meaningful. The Group Policy container is stored under the
    **CN=Policies**, **CN=System** container within the domain. By default, only “Domain
    Admins” and “Enterprise Admins” groups have permission to link the GPO to the
    OU, site, and domain. The name of this permission is **Write gPlink**. To introduce
    the preceding scenario in our lab, I will grant the **lord.varys CreateChild**
    user rights on the Group Policy Container and **Write gPlink** for Vale OU. This
    can be done by adjusting rights in the **Security** tab of the object’s properties
    in **ADSI Edit**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24 – The lord.varys user has new permissions](image/B18964_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.24 – The lord.varys user has new permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use PowerView to confirm that the **lord.varys** user indeed has
    such privileges. The first command will show who can create Group Policies in
    the domain. The second command will identify every user who has the **WriteProperty**
    right on the **GP-Link** property for each OU in the domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command’s execution is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.25 – The lord.varys user has rights to create a GPO and link it
    to the OU](image/B18964_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.25 – The lord.varys user has rights to create a GPO and link it to
    the OU
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can create the GPO and link it to the OU via a **PowerShell module**
    or **Group Policy MMC**. A PowerShell module has limited functions that can be
    used for malicious purposes such as **Set-GPPrefRegistryValue** and **Set-GPRegistryValue**,
    which allow you to create **Autorun** registry keys with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The next section is devoted to privilege escalation via membership in privileged
    security groups.
  prefs: []
  type: TYPE_NORMAL
- en: Other privilege escalation vectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will be focused on outstanding privilege escalation vectors. We
    will demonstrate the consequences of adding non-privileged domain users to the
    various built-in domain security groups. Then, we will describe privilege escalation
    from the child to the parent domain using Golden and inter-realm tickets. At the
    end, the PAM concept will be explained.
  prefs: []
  type: TYPE_NORMAL
- en: In general, privileged users, computers, and groups have to be reviewed on a
    regular basis. From an Active Directory perspective, there is no drastic difference
    between a user and computer account. If an attacker compromises a machine account
    that has membership of a privileged group, it will certainly lead to privilege
    escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Original research was presented by *XPN*: [https://secarma.com/using-machine-account-passwords-during-an-engagement/](https://secarma.com/using-machine-account-passwords-during-an-engagement/).
    The idea is to extract the machine account hash and use it for a pass-the-hash
    attack, as demonstrated here: [https://pentestlab.blog/2022/02/01/machine-accounts/](https://pentestlab.blog/2022/02/01/machine-accounts/).'
  prefs: []
  type: TYPE_NORMAL
- en: The primary preventive measure to avoid the elevation of privileges is the principle
    of least privilege. If you think that a machine account was compromised, it can
    be disabled. Also, the PowerShell **Reset-ComputerMachinePassword** command can
    reset a machine account’s password.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in security groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several *built-in security groups* with preconfigured rights for specific
    tasks in the domain. We are not going to discuss the usual highly privileged groups,
    such as *Domain*, *Schema*, or *Enterprise Admins*. Their purpose in a forest
    and domain is crystal clear. We will discuss rarely mentioned operator security
    groups such as **Account Operators**, **Print Operators**, and **Server Operators**.
    In the practical part, we will demonstrate the privilege escalation venue, where
    a user with membership of the **Backup Operators** group can dump **ntds.dit**
    from the domain controller. Also, we will achieve remote code execution as **SYSTEM**
    by exploiting the DNSAdmins user’s membership (CVE-2021-40469).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Good documentation about groups is provided by Microsoft: [https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups](https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups).'
  prefs: []
  type: TYPE_NORMAL
- en: We will start our review with the *Account Operators* group (**S-1-5-32-548**).
    As per Microsoft, this group is considered to be a service administrator group
    and their recommendation is to leave it empty. In case an attacker compromises
    a user with membership of such a group, they would be able to log in locally to
    the domain controller and create or modify accounts (although not administrative
    accounts).
  prefs: []
  type: TYPE_NORMAL
- en: Members of the *Server Operators* group (**S-1-5-32-549)** can administer and
    maintain domain controllers. This group exists only on them and is empty by default.
    Members of this group can’t change any administrative group memberships but can
    edit and start/stop services and back up and restore files. Being a member of
    this group opens great opportunities for persistence, as it is allowed to change
    binaries installed on the domain controller.
  prefs: []
  type: TYPE_NORMAL
- en: The *Print Operators* group (**S-1-5-32-550**) members are allowed to load drivers
    and manage printers connected to the domain controller, as well as logging on
    locally. An attacker can enable **SeLoadDriverPrivilege** and load a vulnerable
    driver, such as **Capcom.sys**[13]. However, since Windows 10 version 1803, it
    is not exploitable anymore, as registry references in **HKEY_Current_User** are
    not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will move on to practical exercises. The *Backup Operators* group (**S-1-5-32-551**)
    privileges are quite obviously derived from the group name: back up and restore
    files despite any permissions set on them. By default, this group is empty. To
    introduce this vulnerability, I will add the lord.varys user to the group. The
    exploitation itself is rather straightforward and involves three steps: connection
    to the remote registry, opening registry hives, and saving them locally or remotely.
    Registry hives are **SAM**, **SYSTEM**, and **SECURITY**. Then, an attacker can
    utilize **secretsdump** from **impacket** and use the machine account hash of
    the domain controller to dump ntds.dit. The exploitation code can be found here[14].
    First, let us run the exploit and save registry hives to the folder where we have
    access (it can be the UNC path as well):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command execution is the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26 – Successfully dumped registry hives](image/B18964_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.26 – Successfully dumped registry hives
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to extract the domain controller’s machine account hash and
    dump ntds.dit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, hashes were successfully dumped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27 – ntds.dit file was dumped from the domain controller](image/B18964_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.27 – ntds.dit file was dumped from the domain controller
  prefs: []
  type: TYPE_NORMAL
- en: The next example will demonstrate how to achieve remote code execution as **SYSTEM**
    on the domain controller by just being a member of the *DNSAdmins* security group.
  prefs: []
  type: TYPE_NORMAL
- en: DNSAdmins abuse (CVE-2021-40469)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an attacker is a member of the *DNSAdmins* group, it is possible to trigger
    the DNS server to load a DLL of our choice and execute it under the **SYSTEM**
    context. The path to the DLL is provided in the **ServerLevelPluginDll** value,
    which can be a UNC path as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A blog post by this finding’s author can be found here: [https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83](mailto:https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this technique, I will add the jon.snow user to the DNSAdmins
    group in the **north.sevenkingdoms.local** domain. Our exploitation path is to
    generate the DLL with the reverse shell and place it in the **Public** share folder
    on the **castelblack** server. Then, add the plugin, wait for the DNS server to
    restart, and obtain the reverse shell on our Kali machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After the DNS server restart, we obtained a reverse shell as **SYSTEM** on
    the domain controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28 – Successful exploitation of CVE-2021-40469 resulting in the
    reverse shell as SYSTEM on the domain controller](image/B18964_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.28 – Successful exploitation of CVE-2021-40469 resulting in the reverse
    shell as SYSTEM on the domain controller
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will cover privilege escalation from a child to a parent domain. Also,
    we will briefly discuss PAM trust and the concept of the bastion domain.
  prefs: []
  type: TYPE_NORMAL
- en: Child/parent domain escalation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During one of the previous attacks, we were able to dump **ntds.dit** of the
    **north.sevenkingdoms.local** domain. Now it is possible to add extra SIDs in
    our forge ticket to escalate privileges to the parent domain. To successfully
    forge tickets, we need the SIDs of both domains – the krbtgt hash for the golden
    ticket and the trust key for the inter-realm ticket. The following commands will
    find the domain SIDs and forge the golden ticket with the help of Mimikatz:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**/sid** is the SID of the child domain. **/sids** is the **Enterprise Admins**
    SID in the parent domain. The result is CIFS access to the domain controller in
    the parent domain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29 – Forged golden ticket provides access to the domain controller
    in the parent domain](image/B18964_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.29 – Forged golden ticket provides access to the domain controller
    in the parent domain
  prefs: []
  type: TYPE_NORMAL
- en: 'The second option is to create a referral ticket that is TGT-encrypted with
    a trust key. The trust key has the name format **domain$**. The command to forge
    the inter-realm ticket is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following result is the same as the one achieved with the forged Golden
    Ticket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.30 – Forged inter-realm ticket provides access to the domain controller
    in the parent domain](image/B18964_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.30 – Forged inter-realm ticket provides access to the domain controller
    in the parent domain
  prefs: []
  type: TYPE_NORMAL
- en: There is a way to prevent such a privilege escalation vector – enabling SID
    filtering between the child and parent domain. If we do not need SID history,
    for compatibility purposes, it can be disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A great blog post with examples of failed attacks was written by researchers
    from *Improsec* ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-3-sid-filtering-explained)).
  prefs: []
  type: TYPE_NORMAL
- en: However, it was shown in other research made by the same company that not all
    SIDs are filtered, so their privileges in the child domain should be carefully
    reviewed ([https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research](https://improsec.com/tech-blog/sid-filter-as-security-boundary-between-domains-part-4-bypass-sid-filtering-research)).
    Another SID filtering bypass is that **SYSTEM** on the child domain controller
    can link the GPO to the parent site. It will be replicated even with SID filtering
    enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Privileged Access Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Privileged Access Management** (**PAM**) is not a new concept; it was introduced
    by Microsoft as a part of the **Enhanced Security Administrative Environment**
    (**ESAE**) model, which also includes **Just-Enough-Administration** (**JEA**)
    and **Microsoft Identity Manager** (**MIM**). The idea is to create a hardened
    bastion forest for administrators (Red Forest) and connect it to the production
    forest by using one-way **Privileged Identity Management (PIM**) trust. Just a
    reminder that the direction of the trust is opposite to the direction of the access.
    Administrative access to the production forest is managed by **Shadow Principals**
    in the bastion forest. Users from the bastion forest are added to Shadow Principal
    groups, which are therefore mapped to privileged groups in the production forest.
    The **time-to-live** (**TTL**) value can be set to reduce the privileged access
    time. This allows administration of the production forest without interactive
    logons, group membership, and ACL changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'A great guide on how to deploy a bastion forest and establish PIM trust can
    be found here: [https://petri.com/windows-server-2016-set-privileged-access-management/](https://petri.com/windows-server-2016-set-privileged-access-management/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands from ADModule will check whether the current forest
    has PAM trust or is managed by a bastion forest and enumerate **Shadow** **Security
    Principals**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: As an attacker, our target is to compromise members of Shadow Security Principal
    or abuse the SID history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Great tips about persistence were added by *Nikhil Mittal* in this blog post:
    [http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml](http://www.labofapenetrationtester.com/2019/04/abusing-PAM.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: The obvious way is to add a user to an existing shadow security principal container.
    However, it can be easily detected during privileged group review. A more stealthy
    way is to grant a low-privileged user the **WriteMember** right on the Shadow
    Principal object. Access attempts to the production forest are logged via logon/logoff
    events but depending on the user account, an alert can be raised.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered how an attacker can escalate privileges inside the
    domain. We started our conversation with deadly exploits that grant the highest
    privileges in the blink of an eye. Regular patching and vulnerability management
    can help to mitigate this attack vector. Next, we looked at various ACL abuses
    against domain objects. We reviewed the most common privilege escalation paths,
    accompanied by practical examples. Special attention was paid to GPO abuse, as
    Group Policies can be deployed throughout the domain, providing an attacker with
    lateral movement, privilege escalation, and persistence opportunities all at once.
    We also discussed built-in domain groups that can be used for privilege escalation
    if a member of a such group has been compromised. Lastly, we looked at privilege
    escalation through trust relationships between child and parent domains. Also,
    briefly, we touched upon the PAM trust theme and possible misconfigurations that
    could ruin the whole ESAE model.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about ways an attacker can achieve persistence
    in the domain. It is critical to understand how an attacker can maintain access
    to the domain.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MS14-068 exploit: [https://github.com/mubix/pykek](https://github.com/mubix/pykek)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Zerologon relay scenario: [https://dirkjanm.io/a-different-way-of-abusing-zerologon/](https://dirkjanm.io/a-different-way-of-abusing-zerologon/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Zerologon change password scenario: [https://www.thehacker.recipes/ad/movement/netlogon/zerologon](https://www.thehacker.recipes/ad/movement/netlogon/zerologon)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Zerologon exploits: [https://github.com/VoidSec/CVE-2020-1472](https://github.com/VoidSec/CVE-2020-1472)
    and [https://github.com/dirkjanm/CVE-2020-1472](https://github.com/dirkjanm/CVE-2020-1472)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Printnightmare exploitation constraints: [https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints](https://www.thehacker.recipes/ad/movement/print-spooler-service/printnightmare#constraints)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Printnightmare exploit: [https://github.com/cube0x0/CVE-2021-1675](https://github.com/cube0x0/CVE-2021-1675)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Windows version noPac exploit: [https://github.com/cube0x0/noPac](https://github.com/cube0x0/noPac)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Linux version noPac exploit: [https://github.com/WazeHell/sam-the-admin](https://github.com/WazeHell/sam-the-admin)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Local potato: [https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/](https://decoder.cloud/2023/02/13/localpotato-when-swapping-the-context-leads-you-to-system/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remote Potato0: [https://github.com/antonioCoco/RemotePotato0](https://github.com/antonioCoco/RemotePotato0)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ACL mind map: [https://www.thehacker.recipes/ad/movement/dacl](https://www.thehacker.recipes/ad/movement/dacl)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SharpGPOAbuse tool: [https://github.com/FsecureLABS/SharpGPOAbuse](https://github.com/FsecureLABS/SharpGPOAbuse)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Print Operator privilege escalation: [https://neutronsec.com/privesc/windows/print_operators/](https://neutronsec.com/privesc/windows/print_operators/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Backup Operator to DA exploit: [https://github.com/mpgn/BackupOperatorToDA](https://github.com/mpgn/BackupOperatorToDA)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These aids for further study will let you dive deeper into the attacks covered
    in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I highly encourage you to read this blog post, as it has great insights into
    how the Remote Potato attack path was discovered and the general way of research
    thinking: [https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/](https://www.sentinelone.com/labs/relaying-potatoes-another-unexpected-privilege-escalation-vulnerability-in-windows-rpc-protocol/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A good demonstration of the Remote Potato exploit in action: [https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/](https://pentestlab.blog/2021/05/04/remote-potato-from-domain-user-to-enterprise-admin/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft documentation about Group Policy structure: [https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-gpod/260b58dc-da14-400b-8b82-6abbfd529fbf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft PowerShell GP-Link command reference: [https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps](https://learn.microsoft.com/en-us/powershell/module/grouppolicy/new-gplink?view=windowsserver2022-ps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
