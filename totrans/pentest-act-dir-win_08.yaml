- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Abusing Active Directory Certificate Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next two chapters, we will cover services that can be found in almost
    every environment but are not installed by default during Active Directory deployment.
    We will start with **Active Directory Certificate Service** (**AD CS**). This
    service is Microsoft’s implementation of a **Public Key Infrastructure** (**PKI**)
    integrated with Active Directory. It allows us to utilize public key cryptography
    throughout the Active Directory forest, providing certificates, digital signatures,
    code signing, and other capabilities. As usual, with great power comes great responsibility.
    AD CS has been often overlooked in terms of hardening and monitoring due to its
    complex nature. In June 2021, *SpecterOps* released a comprehensive research paper
    where they described known and new ways to attack AD CS[1].
  prefs: []
  type: TYPE_NORMAL
- en: We will start our learning journey by explaining the necessary PKI theory. We
    will then cover possible ways to steal certificates and achieve persistence on
    user and computer domain accounts. Finally, we will explore domain privilege escalation
    and persistence techniques that allow an adversary to compromise the domain environment.
    As usual, all attacks will be followed by detailed detection and prevention recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explore the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: PKI theory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate theft
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will need to have access to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VMware Workstation or Oracle VirtualBox with at least 16 GB of RAM, 8 CPU cores,
    and at least 55 GB of total space (more if you take snapshots)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Linux-based operating system is strongly recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the GOADv2 project, we will use DC03 and SRV03
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PKI theory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover the necessary theory and terminology that will
    be used later on in the chapter. First of all, what is **public key cryptography**?
    It is an asymmetric cryptographic system that uses a pair of related keys. Secondly,
    how does it work? In plain words, the user generates two keys (private and public)
    and uses the private key for decryption/signing the message. The second key is
    available for everyone (which is why it is called public) to encrypt/check the
    signature of the message. These two keys are mathematically tied, but it is not
    possible to recover the private key from the public key. Keeping in mind the concept
    that has just been described, we can now discuss PKI in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The most important components of PKI are the **Certification Authority** (**CA**),
    **Registration Authority** (**RA**), central directory, certificate management
    system, and certificate policy. The CA is the heart of PKI. Using its own private
    key, it signs the public key bound to a given user. The CA can be root and intermediate.
    The RA is in charge of the identity verification of the entities. The central
    directory stores keys and the certificate management system controls access to
    certificates and their delivery. The certificate policy defines entities of PKI,
    roles, and duties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now discuss available AD CS roles in Active Directory[2]. Microsoft
    creates six roles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CA** – issues certificates and manages their validity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CA Web Enrollment** – allows users to connect to the CA via the browser and
    request certificates and **certificate revocation** **lists** (**CRLs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online Responder** – evaluates the status information of the certificate
    and sends it back to the requestor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Device Enrollment Service** (**NDES**) – allows obtaining certificates
    for network devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Enrollment Web Service** (**CES**) – allows enrollment using
    the HTTPS protocol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Certificate Enrollment Policy Web Service** (**CEP**) – allows users and
    computers to obtain certificate enrollment policy information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will cover certificates, templates, and processes associated with them
    in more detail. A certificate is a digitally signed CA document, formatted in
    X.509\. Each certificate has its own purpose, such as client authentication, code
    signing, smart card logon, and so on. These purposes are described as **object
    identifiers** (**OIDs**) and are called extended key usages. The certificate template
    defines its purpose, what information will be required from the user to obtain
    the certificate, and applicable access controls. Treat the certificate template
    as a prototype that will be filled with the user’s information during the issuance
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us discuss how users can request certificates. This process is called
    **enrollment**. First, clients find an Enterprise CA, then generate a private
    and public key pair, put the public key and other relevant information in a **certificate
    signing request** (**CSR**), sign the CSR with its own private key, and send it
    to the Enterprise CA. Second, the CA performs checks such as user permissions
    to request a particular certificate template and whether the user is allowed to
    enroll at all. If all checks have passed successfully, the CA will fill the template
    with the supplied user information, sign the certificate with its own private
    key, and send it back.
  prefs: []
  type: TYPE_NORMAL
- en: Two protocols that support certificate authentication in Active Directory are
    Kerberos and **Secure Channel** (**Schannel**). Kerberos utilizes **Public Key
    Cryptography for Initial Authentication** (**PKINIT**). Users will sign the authentication
    challenge using the private key of their certificate and send it to the domain
    controller. If the verification process is successful, a TGT will be issued. Another
    protocol is Schannel. The domain controller requests a certificate from the client
    during authentication and maps the credentials to a user account by using the
    Kerberos S4U2self extension. If it fails, the next attempt is to map the certificate
    to the user’s account based on the **Subject Alternative Name** (**SAN**) extension,
    subject, and issuer fields. Schannel works well with LDAPS.
  prefs: []
  type: TYPE_NORMAL
- en: Pass-the-certificate is a pre-authentication stage in the authentication process
    where the certificate is used to obtain a TGT. In the case of PKINIT, we can request
    a TGT with an authentication certificate. If PKINIT is not supported, we can authenticate
    via LDAP/S with a tool called PassTheCert[3]. Great research from the tool’s author
    can be found at the link given later[4].
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, we need to enable auditing for AD CS so we can detect our
    own malicious activity. One of the best detection guides was presented at the
    PHDays conference[5]. In this presentation, you will also find ready-to-use searches.
    To enable logging through the Group Policy, we need to tick both **Success** and
    **Failure** under the following path in **Default Domain Policy**: **Computer
    Configuration** | **Policies** | **Windows Settings** | **Security Settings**
    | **Advanced Audit Policy Configuration** | **Audit Policy** | **Object Access**
    | **Audit** **Certification Services**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in the CA properties, we will enable **Auditing** for all events, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Enabling auditing for AD CS events](image/B18964_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Enabling auditing for AD CS events
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the key concepts of PKI, let us delve into the practical
    part. Of course, there is more theory to cover, but we will gradually introduce
    it when it is necessary for attack understanding. If you would like to have a
    deep dive first, feel free to go through the SpecterOps paper mentioned in the
    introduction. We will start our learning journey with certificate theft techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Certificate theft
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will focus on certificate theft at the endpoint. If AD CS is deployed
    in the environment, chances are high that certificates are being used for domain
    authentication. Windows uses a certificate in **.pfx** format, which contains
    the certificate itself and the corresponding private key. However, private keys
    can be stored separately – for example, on specialized hardware such as **Trusted
    Platform Modules** (**TPMs**), **Hardware Security Modules** (**HSMs**), or smart
    cards. Most companies do not introduce hardware elements, and keys are stored
    in the operating system. Windows protects keys with the help of the **Data Protection
    Application Programming Interface** (**DPAPI**). For the demonstration, let us
    issue the **khal.drogo** user certificate with a non-exportable private key. We
    can do it via the Certificates snap-in in **Microsoft Management Console** (**MMC**).
    Now, we are ready to start with the practice.
  prefs: []
  type: TYPE_NORMAL
- en: THEFT1 – Exporting certificates using the CryptoAPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to export certificates. The first one is via the GUI in
    **certmgr.msc** or with the help of a PowerShell cmdlet or with the CertStealer
    tool[6]. These tools use the Windows CryptoAPI and allow export only if the private
    key is exportable. If this is not the case, we can use Mimikatz. The idea is to
    patch either **CryptoAPI** (**CAPI**) or **Cryptography API: Next Generation**
    (**CNG**), depending on the key provider, to allow the private key export. It
    is important to mention that the CAPI patch is happening in the current process.
    The CNG patch is required when Microsoft Software Key Storage Provider is being
    used and will patch the **Key isolation** (**KeyIso**) service in the **lsass.exe**
    process, meaning you need “debug” privileges on the machine. The following command
    will show that **khal.drogo** has a certificate with a non-exportable private
    key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first export attempt failed with an error in the **Private export** field,
    but after that, the patch export was successful. The result of the command execution
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Successful certificate export for khal.drogo](image/B18964_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Successful certificate export for khal.drogo
  prefs: []
  type: TYPE_NORMAL
- en: The only way to detect this attack is when a CNG patch is required and access
    to **lsass.exe** is being monitored.
  prefs: []
  type: TYPE_NORMAL
- en: THEFT2 – User certificate theft via DPAPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DPAPI is a Windows component that allows applications to store sensitive data.
    This data is protected by a master key that is derived from the user’s password
    hash, SID, and Salt by applying the PBKDF2 function. Certificates are stored in
    the **HKEY_CURRENT_USER\SOFTWARE\Microsoft\SystemCertificates** registry key or
    the **%APPDATA%\Microsoft\systemcertificates\my\certificates** folder. Associated
    private keys are stored in **%APPDATA%\Microsoft\Crypto\RSA\User SID** for CAPI
    keys and **%APPDATA%\Microsoft\Crypto\keys** for CNG keys. Just a small remark:
    you will not be able to see keys in the folders, even when hidden files are enabled.
    To check the content of these folders, use the **dir** /**a:s** command line.
    To decrypt the certificate’s private key, we need the corresponding master key.
    There are certain ways to obtain the master key, but three of them require elevated
    privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: Backup keys from the domain controller (**lsadump::backupkeys**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DPAPI cached master keys (**sekurlsa::dpapi**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **DPAPI_SYSTEM** key (**lsadump::secrets**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By supplying the user’s hash or password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following Mimikatz commands will allow you to dump the certificate in the
    **.der** format, find out what the master key is via the **guidMasterKey** value,
    decrypt the master key, and finally, decrypt the certificate’s private key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With the help of **openssl** on a Linux machine, we can build a valid **.****pfx**
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding commands is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Successfully building a .pfx certificate for khal.drogo](image/B18964_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Successfully building a .pfx certificate for khal.drogo
  prefs: []
  type: TYPE_NORMAL
- en: 'One important caveat is that the**/rpc** key in the **dpapi::masterkey** command
    will initiate the connection to the domain controller’s **IPC**$ and create a
    **protected_storage** named **pipe**. We can see the traffic sample in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Traffic between machine and domain controller](image/B18964_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Traffic between machine and domain controller
  prefs: []
  type: TYPE_NORMAL
- en: Another way to detect certificate theft is via auditing the SACLs. By using
    Object Read SACLs, defenders can detect access to the DPAPI master keys and private
    keys. Windows event ID 4663 will be logged on to the server event log, including
    the process name.
  prefs: []
  type: TYPE_NORMAL
- en: THEFT3 – Machine certificate theft via DPAPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to steal machine certificates, an attacker requires elevated privileges.
    Machine master keys are located in the **C:\Windows\System32\Microsoft\Protect\S-1-5-18\User**
    and **C:\Windows\System32\Microsoft\Protect\S-1-5-18** folders. The machine certificates’
    private keys are located in **C:\ProgramData\Microsoft\Crypto\RSA\MachineKeys**
    for CAPI and **C:\ProgramData\Microsoft\Crypto\Keys** for CNG. To decrypt these
    private keys, the **DPAPI_SYSTEM** secret is required. To perform this attack,
    we will use **SharpDPAPI**[*7*]. We will run this tool with elevated privileges;
    it will automatically elevate to **SYSTEM**, dump the **DPAPI_SYSTEM** secret,
    and use it to find and decrypt master keys. As a last step, it will decrypt all
    the machine certificates’ private keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The elevation of privileges and obtaining of **DPAPI_SYSTEM** can be observed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – SharpDPAPI obtained DPAPI_SYSTEM](image/B18964_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – SharpDPAPI obtained DPAPI_SYSTEM
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of the SharpDPAPI execution can be seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – One of the machine certificates with decrypted private key](image/B18964_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – One of the machine certificates with decrypted private key
  prefs: []
  type: TYPE_NORMAL
- en: This attack uses the **DPAPI_SYSTEM** secret, so no traffic will be sent from
    the machine. The only possible detection is to audit via SACL reading of DPAPI-encrypted
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: THEFT4 – Harvest for certificate files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another effective attack is a simple search for certificates (**.crt**/**.cer**/**.pfx**),
    keys (**.key**), CSR (**.csr**), and Java KeyStores (**.jks**/**.keystore**/**.keys**).
    For password-protected certificates, a hash can be extracted with the help of
    the **pfx2john** tool and then cracked. To understand what the certificate’s purpose
    is, we can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command running against the extracted user’s certificate
    from the *THEFT2* attack is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Harvested khal.drogo certificate’s EKU](image/B18964_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Harvested khal.drogo certificate’s EKU
  prefs: []
  type: TYPE_NORMAL
- en: 'One important note: if you have an **invalid password** error during dumping,
    you need to add the **-legacy** option on the last step, when you build the **.pfx**
    certificate on your Linux machine with **openssl**.'
  prefs: []
  type: TYPE_NORMAL
- en: A suggested detection method is to introduce “honey certificates,” so defenders
    can detect and track malicious activities.
  prefs: []
  type: TYPE_NORMAL
- en: THEFT5 – NTLM credential theft via PKINIT (nPAC-the-hash)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PKINIT is a pre-authentication verification mechanism. Briefly, the idea is
    that we can extract LM and NT hashes from the **PAC_CREDENTIAL_INFO** structure
    in TGS-REQ when PKINIT is used to obtain the TGT. This functionality allows us
    to switch back to NTLM authentication when the remote server does not support
    Kerberos but still relies on PKINIT for pre-authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The attack steps are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Perform pre-authentication with PKINIT and obtain the TGT with a session key.
    PAC in the TGT will contain the **PAC_CREDENTIAL_INFO** structure with NT and
    LM hashes, but because it is encrypted with the **krbtgt** key, it cannot be decrypted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, request a service ticket by combining S4U2self and U2U.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The obtained service ticket will contain PAC with the **PAC_CREDENTIAL_INFO**
    structure, which is encrypted with a session key that can be decrypted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The important thing to mention is that we need access to the certificate and
    its password. This sounds a bit complicated, but all of it can be done with a
    single command in Rubeus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – UnPAC-the-hash of the khal.drogo user](image/B18964_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – UnPAC-the-hash of the khal.drogo user
  prefs: []
  type: TYPE_NORMAL
- en: Detection of this technique can be made based on flags set on the ticket during
    U2U and S4U2self requests. If the **Forwardable**, **Renewable**, **Renewable_ok**,
    **Enc_tkt_in_skey**, and **Canonicalize** options are set in TGS-REQ, there is
    a high probability of Certipy, Kekeo, or Rubeus usage[8]. Another way is to track
    Windows event ID **4768** for certificate information values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss account persistence techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Account persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After an adversary gains an initial foothold, the next step is usually to establish
    persistence. In this section, we will only cover persistence techniques that rely
    on certificate usage.
  prefs: []
  type: TYPE_NORMAL
- en: PERSIST1 – Active user credential theft via certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users can request a certificate from the CA in the environment for any available
    template that they are allowed to enroll in. An attacker will probably focus on
    templates allowing client authentication. An important caveat is that the template
    should not require manager approval or “authorized signatures” issuance requirements.
    This requirement defines how many digital signatures must be applied to the certificate
    request for approval. There is a default template called **User**, but it may
    be disabled. To find any other available templates, we can use a tool called **Certify**[9].
    The following command will send LDAP queries and show available templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command execution is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Certify found the client authentication certificate template](image/B18964_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Certify found the client authentication certificate template
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, an authorized signature is not required and domain users can
    enroll. Then, the attacker can request a certificate in the GUI, with the **certreq**
    utility or Certify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The certificate was successfully issued:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – User certificate was issued](image/B18964_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – User certificate was issued
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to copy the private key and certificate from the output in
    the file and save it with the **.pem** extension. Then, using **openssl**, convert
    it to **.pfx**, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a certificate that can be used to request a TGT until the certificate
    expiration. Also, a change in the user’s password does not influence the certificate.
    As was shown previously in *THEFT5*, an adversary can nPAC-the-hash of the user
    and obtain the account’s NT hash at any time. This is a stealthy and long-term
    credential access technique.
  prefs: []
  type: TYPE_NORMAL
- en: To detect this type of persistence, it is necessary to query the CA database
    with the help of **certutil.exe**. There is a lot of valuable information that
    is not shown in the Windows event log – in particular, the used OS version, user/process
    information, the subject in the certificate, and so on. These parameters can be
    helpful to detect malicious activity.
  prefs: []
  type: TYPE_NORMAL
- en: PERSIST2 – Machine persistence via certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Issuing a machine certificate requires elevated privileges. Certify will elevate
    automatically to **SYSTEM** and obtain the machine certificate with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Machine certificate was issued](image/B18964_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Machine certificate was issued
  prefs: []
  type: TYPE_NORMAL
- en: Further steps are pretty straightforward. An attacker can obtain a service ticket
    to any service as any user through S4U2self on the machine. Persistence will work
    until the certificate expires or the system name changes. It is very stealthy
    as no changes on the host have happened.
  prefs: []
  type: TYPE_NORMAL
- en: Detection will be the same as it was for *PERSIST1*.
  prefs: []
  type: TYPE_NORMAL
- en: PERSIST3 – Account persistence via certificate renewal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An adversary can use a certificate during the validity period and renew it during
    the renewal period or earlier. This approach is difficult to detect as it uses
    built-in functionality and leaves almost no artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Shadow credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This technique is an account takeover; however, it can still be treated as account
    persistence. The original research was published by *Elad Shamir*[10]. If the
    user is a member of **Key Admins** or **Enterprise Key Admins** or has **GenericWrite**
    or **GenericAll** rights over other users or computer accounts, it is possible
    to add **Key Credentials** to the **msDS-KeyCredentialLink** attribute. This attribute
    stores raw public keys that will then be used to perform Kerberos authentication
    using PKINIT as that account. An attack can be performed via **Whisker**[11] or
    **Certify** as well. As a first step, the attacker will identify users to whom
    we have required rights.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – The khal.drogo user has GenericAll over viserys.targaryen](image/B18964_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – The khal.drogo user has GenericAll over viserys.targaryen
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the following command will add information to the **msDS-KeyCredentialLink**
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Under the hood, Whisker will interact with the domain controller via LDAP and
    Kerberos. The attack steps are shown in the tool output together with the Rubeus
    command to execute the nPAC-the-hash attack.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Shadow credentials attack](image/B18964_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Shadow credentials attack
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the attribute has been successfully updated, an attacker can
    run the **list** command. An attribute contains the user ID, attestation data,
    public key, last logon time, and device ID, but the output will show only the
    last two:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Attribute value check](image/B18964_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Attribute value check
  prefs: []
  type: TYPE_NORMAL
- en: Detection is possible by monitoring event ID **4768**, where the certificate
    information is shown. Another detection approach is to configure SACL for the
    user’s Active Directory object and monitor event ID **5136**. Yet another event
    ID, **4662**, can also be examined. Some important information is the GUID (**5b47d60f-6090-40b2-9f37-2a4de88f3063**)
    and **Write property** access[8]. A prevention recommendation is typical for ACL
    abuse scenarios – find misconfigured accounts and fix them. Also, it is recommended
    to explicitly deny **Everyone** from writing to this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will cover domain privilege escalation attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Domain privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore practical techniques to escalate privileges
    by exploiting various security issues, such as template and extension misconfigurations
    (ESC1, 2, 3, 9, and 10), improper access controls (ESC4, 5, and 7), CA misconfiguration
    (ESC6), and relay attacks (ESC8 and 11). I have chosen such a grouping of the
    attacks from[12]. But to begin with, we will start with a critical vulnerability
    discovered by *Oliver Lyak*, called **Certifried**, which evolves into ESC9 and
    ESC10 after the patch.
  prefs: []
  type: TYPE_NORMAL
- en: Certifried (CVE-2022-26923)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This vulnerability has much in common with **samAccountName** spoofing (CVE-2021-42278).
    Original research by the author is published here[13].
  prefs: []
  type: TYPE_NORMAL
- en: 'In AD CS, by default, there are two authentication certificates: user and machine.
    Every user account has a **User Principal Name** (**UPN**) that must be unique.
    The UPN is embedded into the certificate and used by KDC during authentication.
    Computer accounts do not have a UPN, as **dNSHostName** is used instead. The creator
    of the computer account has the right to write this property, called **Validated
    write to DNS host name**. There is no requirement for uniqueness of the attribute,
    but after **dNSHostName** has been changed, SPNs will be changed as well. SPNs
    have a uniqueness requirement in the domain, but the computer account creator
    can change SPNs (**Validated write to service principal name**). The idea of the
    attack is to create a computer account, clear SPNs with FQDN in them, change **dNSHostName**
    to match the target, (e.g., domain controller), and request the certificate. It
    is important to mention that the **dNSHostName** property is only used when the
    certificate is requested, not for certificate mapping.'
  prefs: []
  type: TYPE_NORMAL
- en: To perform attacks in this section, we will use a tool called Certipy[14]; however,
    there is a fork called **certipy-ad**, which can be installed on Kali. The syntax
    for both tools is identical. Both tools support all privilege escalation scenarios,
    Shadow Credentials attacks, and Golden Certificate forgery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we make the necessary preparations for our attack. We will create
    a computer account, clear SPNs, and change the **dNSHostName** property to match
    the domain controller. The following PowerShell commands and **StandIn** tool
    will do the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding command execution is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Preparation for Certifried exploitation](image/B18964_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Preparation for Certifried exploitation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, using **certipy-ad**, we request the certificate and authenticate as a
    domain controller computer account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command execution is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Obtaining the hash and TGT for the domain controller](image/B18964_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Obtaining the hash and TGT for the domain controller
  prefs: []
  type: TYPE_NORMAL
- en: After certificate retrieval, it is recommended to change **dNSHostName** back
    to the original one[15]. Now, we have obtained the NT hash of the domain controller’s
    computer account, which can be used for authentication or Silver Ticket forgery.
    To prevent exploitation, install a patch provided by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how template and extension misconfigurations
    can lead to privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Template and extension misconfigurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following subsections detail some common ways to misconfigure certificate
    templates and extensions.
  prefs: []
  type: TYPE_NORMAL
- en: ESC1 – Misconfigured certificate templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A specific set of settings, including default ones, makes templates vulnerable.
    This privilege escalation scenario requires the following configuration settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard users have enrollment rights granted by the Enterprise CA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate template defines any of the client authentication EKUs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate template allows requesters to specify **subjectAltName** in
    CSR (**msPKI-Certificate-Name-Flag** is **0x00000001**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The last point effectively allows the user to request a certificate as anyone,
    including the domain administrator. This behavior is defined by the **CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT**
    flag in the **mspki-certificate-name-flag** property of the certificate template’s
    AD object. To find such a misconfigured template, an adversary can use Certify/Certipy
    or pure LDAP queries. The LDAP query looks complex, but it is just a concatenation
    of the preceding configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – LDAP query to find ESC1 vulnerable template](image/B18964_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – LDAP query to find ESC1 vulnerable template
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will verify the result of the LDAP query, issue a certificate for the
    built-in domain administrator, and authenticate using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Successful exploitation of ESC1](image/B18964_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Successful exploitation of ESC1
  prefs: []
  type: TYPE_NORMAL
- en: To prevent privilege escalation, template hardening is required. The best approach
    is to disable the **Supply in Request** setting together with the enforcement
    of CA certificate manager approval. Next, user enroll rights can be tightened
    and EKU in certificates can be reviewed as well. Lastly, on a domain controller,
    strict user mapping can be enforced in the **HKLM\SYSTEM\CurrentControlSet\Services\Kdc**
    registry key with the DWORD **UseSubjectAltName** value set to **0**.
  prefs: []
  type: TYPE_NORMAL
- en: There is no straightforward way to reliably detect ESC1 using a Windows event
    log, so it is better to consider prevention steps.
  prefs: []
  type: TYPE_NORMAL
- en: ESC2 – Misconfigured certificate templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This technique is similar to ESC1 with a small deviation. The **Any Purpose**
    EKU allows an attacker to request an authentication certificate not on behalf
    of another user, but as the user itself. Conditions for vulnerability to exist
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard users have enrollment rights granted by the Enterprise CA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate template defines the **Any Purpose** EKU or no EKU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The LDAP query to find a vulnerable template is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – LDAP query to find the ESC2 vulnerable template](image/B18964_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – LDAP query to find the ESC2 vulnerable template
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands will allow you to request a certificate for **khal.drogo**
    and use it for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Successful exploitation of ESC2](image/B18964_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Successful exploitation of ESC2
  prefs: []
  type: TYPE_NORMAL
- en: The prevention recommendations for this are identical to the ones for ESC1.
  prefs: []
  type: TYPE_NORMAL
- en: ESC3 – Misconfigured enrollment agent templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This privilege escalation vector abuses a different EKU – **Certificate Request
    Agent** (OID **1.3.6.1.4.1.311.20.2.1**). This EKU allows you to enroll for a
    certificate on behalf of another user. The principal enrolls in such a template
    and uses the issued certificate to co-sign a CSR on behalf of another user. The
    next step is to enroll in a template that allows to send co-signed CSR on behalf
    of a user and then the CA will issue the certificate for this user. For this attack,
    two conditions should be met. The first condition requires an enrollment agent
    certificate template to allow users to enroll. The following configuration parameters
    must be present for the attack to be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard users have enrollment rights granted by the Enterprise CA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager approval is disabled (**mspki-enrollment-flag** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorized signatures are not required (**msPKI-RA-Signature** is **0x00000000**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate template defines the **Certificate Request** **Agent** EKU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As we did before, we will utilize the LDAP query to find a template that matches
    the first condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, we found the ESC3-CRA template to match the first condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21 – LDAP query to find the Certificate Request Agent template](image/B18964_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – LDAP query to find the Certificate Request Agent template
  prefs: []
  type: TYPE_NORMAL
- en: 'The second condition allows the user to use a certificate from the first condition
    to request a certificate on behalf of another user for authentication purposes.
    For this condition, the following configuration parameters must be met:'
  prefs: []
  type: TYPE_NORMAL
- en: The Enterprise CA grants low-privileged users enrollment rights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manager approval is disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The certificate template defines EKUs that enable authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrollment agent restrictions are not implemented on the CA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template schema version 1 or is greater than 2 and specifies an **Application
    Policy** issuance requirement as the **Certificate Request** **Agent** EKU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It sounds a bit complicated, but the following LDAP query can clarify requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, we found the ESC3 vulnerable template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22 – LDAP query to find the ESC3 vulnerable template](image/B18964_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – LDAP query to find the ESC3 vulnerable template
  prefs: []
  type: TYPE_NORMAL
- en: 'The attack will consist of two steps – request a certificate for the agent
    and then use it to request a certificate on behalf of the domain administrator.
    The following commands will achieve the desired result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command execution is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23 – Successful exploitation of ESC3](image/B18964_08_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Successful exploitation of ESC3
  prefs: []
  type: TYPE_NORMAL
- en: Prevention will be similar to the previous two attacks, but it is also important
    to constrain enrollment agents as well. We can define who can be an enrollment
    agent, and which users and certificate templates agents are allowed to enroll
    on behalf of.
  prefs: []
  type: TYPE_NORMAL
- en: ESC9 – No security extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This and the next attack vector were discovered by *Oliver Lyak* following Microsoft
    security updates in May 2022\. Original research can be found here[16]. In order
    to fix Certifried (CVE-2022–26923), Microsoft introduces a new **szOID_NTDS_CA_SECURITY_EXT**
    security extension that embeds the requester’s **objectSid** property into the
    certificate. Also, two new registry key values were created – **HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\Schannel\CertificateMappingMethods**
    and **HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Kdc\StrongCertificateBindingEnforcement**.
    These two values correspond to Kerberos and Schannel certificate mappings.
  prefs: []
  type: TYPE_NORMAL
- en: '**StrongCertificateBindingEnforcement** may have three values, which correspond
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**0** – no strong certificate mapping check. KDC verifies that the certificate
    is issued by a trusted CA and can be used for authentication. Next, map it to
    an account via the UPN or DNS SAN value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1** (default) – checks contained identifiers in the **altSecurityIdentities**
    property of an account object. If not, then the domain controller will validate
    a new SID extension (**szOID_NTDS_CA_SECURITY_EXT**) in the certificate. If no
    extension is present, mapping is performed as if the value is **0**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2** – all checks are the same as in the value of **1**, except for a missing
    extension, which will lead to authentication denial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Schannel authentication does not directly use new security extensions. It will
    instead use S4U2self to map the certificate via Kerberos because it supports a
    new extension. However, the patch has broken certificate authentication in a lot
    of environments, and Microsoft suggested putting the value of the registry key
    to the old one. This means that certificates with a UPN or DNS name and **CertificateMappingMethods**
    value of **0x4** will not be influenced by new security extensions during mapping.
    Let’s summarize the conditions for ESC9:'
  prefs: []
  type: TYPE_NORMAL
- en: '**StrongCertificateBindingEnforcement** is not set to **2** or **CertificateMappingMethods**
    contains the **0x4** value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template contains the **msPKI-Enrollment-Flag** value with the **CT_FLAG_NO_SECURITY_EXTENSION**
    flag being set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template specifies the client authentication EKU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A compromised user has **GenericWrite** permission over a user who can enroll
    in a vulnerable template. Our final target is the user who will be compromised
    with the help of an enrolled user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To emulate this attack, we need to install the May 2022 patch on the CA and
    domain controller[17]. I encourage you to make snapshots before installation.
    Then, we will create and publish the ESC9 template, set the flag from the second
    condition, grant enroll permissions to **viserys.targaryen**, and finally, execute
    an attack. From the Shadow Credentials attack, we already know that **khal.drogo**
    has the **GenericAll** right over **viserys.targaryen**. Let us emulate this scenario
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that we correctly prepare our lab, run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be as in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Conditions to execute the ESC9 attack are met](image/B18964_08_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – Conditions to execute the ESC9 attack are met
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieve the NT hash of **viserys.targaryen**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the UPN of **viserys.targaryen** to the administrator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request the certificate as **viserys.targaryen** using the ESC9 vulnerable
    template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the **viserys.targaryen** UPN back to the original:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obtain the NT hash of the administrator via nPAC-the-hash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of the attack is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Successful exploitation of ESC9](image/B18964_08_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Successful exploitation of ESC9
  prefs: []
  type: TYPE_NORMAL
- en: 'The best prevention recommendation is to set **StrongCertificateBindingEnforcement**
    to **2**; however, it can possibly break certificate authentication in the domain.
    Also, remove **msPKI-Enrollment-Flag** from the template with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: ESC10 – Weak certificate mappings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This attack technique has two scenarios – when **StrongCertificateBindingEnforcement**
    is set to **0** or **CertificateMappingMethods** contains the value **0x4**. In
    simple words, it means that the certificate’s SAN is preferred over the new security
    extension. The requirements regarding the template with the client authentication
    EKU and **GenericWrite** permissions on the user still must be met. The first
    scenario is identical to the ESC9 attack, but any certificate template can be
    used. The second scenario targets machine accounts and the default domain administrator,
    as they do not have the UPN property. Our goal will be to compromise the domain
    administrator. Again, we will use **khal.drogo** with the **GenericAll** permission
    over **viserys.targaryen**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To ensure that we correctly prepare our lab, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be as in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.26 – The CertificateMappingMethod value is 0x4, which allows an
    ESC10 attack](image/B18964_08_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – The CertificateMappingMethod value is 0x4, which allows an ESC10
    attack
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieve the NT hash of **viserys.targaryen**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the UPN of **viserys.targaryen** to **Administrator@essos.local**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enroll in any certificate template that allows client authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the **viserys.targaryen** UPN back to the original:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Obtain the LDAP shell via Schannel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of the attack is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Successful exploitation of ESC10](image/B18964_08_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Successful exploitation of ESC10
  prefs: []
  type: TYPE_NORMAL
- en: To prevent this attack, remove the **0x4** part from the **CertificateMappingMethods**
    setting in the registry.
  prefs: []
  type: TYPE_NORMAL
- en: Improper access controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As everything in Active Directory is an object, it means that every object has
    its own ACL. In previous chapters, we discussed ACL abuse; now, we are going to
    reuse our knowledge, but from an AD CS perspective.
  prefs: []
  type: TYPE_NORMAL
- en: ESC4 – Vulnerable certificate template access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Certificate templates are objects in Active Directory. They have a security
    descriptor, which defines principals and their permissions over the templates.
    Weak access controls may allow an adversary to edit template settings, making
    the template vulnerable to the techniques previously covered. Critical rights
    from a security point of view are ownership, full control, and any type of **Write***
    primitives. There are a variety of tools helping to identify and abuse vulnerable
    templates: **PowerView**, Bloodhound, StandIn, Certipy, and **modifyCertTemplate**[18].
    A great step-by-step guide on how to exploit ESC4 solely with PowerView can be
    found here[19]. We will stick to the **certipy-ad** tool at the beginning. We
    detect vulnerable templates and users that can abuse them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the following command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.28 – khal.drogo has excessive permissions over ESC4](image/B18964_08_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 – khal.drogo has excessive permissions over ESC4
  prefs: []
  type: TYPE_NORMAL
- en: The next steps are to make the template vulnerable to an ESC1 attack by adding
    the **ENROLLEE_SUPPLIES_SUBJECT** property to the template. For a better understanding
    of the attack, let us do it step by step with the help of the **modifyCertTemplate**
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will check the ACL and the attributes of the certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, we will see a list of attributes and confirm that **khal.drogo**
    has **Write** privileges over the template. Next, we will configure the template
    in a way that will fulfill the requirements for the ESC1 attack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will disable the “Manager Approval” requirement with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Disable the “Authorized Signature” requirement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enable SAN specification in the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an EKU that allows domain authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the “Application Policy” to allow domain authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of the preceding commands is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.29 – Vulnerable template adjusted to fit the ESC1 attack path](image/B18964_08_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 – Vulnerable template adjusted to fit the ESC1 attack path
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can abuse the misconfigured template in the same way as in the ESC1
    attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As a result, it was possible to request a certificate and obtain a TGT as domain
    administrator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.30 – Successful exploitation of ESC4](image/B18964_08_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 – Successful exploitation of ESC4
  prefs: []
  type: TYPE_NORMAL
- en: To prevent this attack, it is recommended to regularly review the certificate’s
    ACLs to ensure that high privileges are assigned only to the correct group of
    users. Detection is possible via event ID **5136**, but it requires adjustment
    in the auditing policy. This event ID monitors the modifications of the critical
    certificate template attributes that we changed previously. Another helpful thing
    for detecting the event ID is **4899**. However, there is no information in the
    event log on which account made changes and this event will be logged only after
    enrollment with a modified template happens[20]. The SACL on the template AD object
    can be enforced as well, giving a more granular view in event ID **4662**.
  prefs: []
  type: TYPE_NORMAL
- en: ESC5 – Vulnerable PKI object access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If an adversary has certain privileges over the following objects, it is possible
    to compromise the entire PKI system:'
  prefs: []
  type: TYPE_NORMAL
- en: CA server’s computer account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CA server’s RPC/DCOM server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any descendent object/container in the **CN=Public** **Key Services,CN=Services,****CN=Configuration,DC=<COMPANY>,or**
    **DC=<COM>** container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, let us cover the following scenario. An adversary was able to compromise
    the CA server’s computer account through RBCD. After getting the access, the NT
    hash of the domain account with local administrative privileges on the CA server
    was dumped. The adversary now can forge a Golden Certificate. To replicate this
    attack, I will add **viserys.targaryen** to the local administrator’s group.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a local administrator, it is possible to back up the CA certificate and
    private key with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will forge a certificate for the domain administrator and use it for
    authentication. Keep in mind that the **-template** option is used to avoid the
    Kerberos **KDC_ERR_CLIENT_NOT_TRUSTED** error, which means incorrect forging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the attack is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.31 – Successful exploitation of ESC5](image/B18964_08_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.31 – Successful exploitation of ESC5
  prefs: []
  type: TYPE_NORMAL
- en: 'Another technique, called **CertSync**, was recently published. It allows dumping
    **ntds.dit** remotely without DRSUAPI by combining the Golden Certificate and
    UnPAC-the-hash[21]. Obviously, privileged access to the CA is required. A Golden
    Certificate is a certificate that is forged with the private key of the CA certificate.
    We will cover forgery in more detail later when we explore domain persistence
    techniques. The steps of a C**ertSync** attack are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dump the list of users, CA information, and CRL from LDAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dump the CA certificate and private key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Forge offline a certificate for every user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UnPAC-the-hash for every user to obtain the NT hash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The command to launch the attack is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, NT hashes of all users are dumped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32 – Successful certsync attack](image/B18964_08_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.32 – Successful certsync attack
  prefs: []
  type: TYPE_NORMAL
- en: The tool also has options to improve OpSec (e.g., apply timeout between authentication
    requests, mimic existing templates, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Another exciting piece of research was published by *SpecterOps* about elevating
    to Enterprise Administrator from Domain Administrator by using ESC5\. You can
    read more here[22].
  prefs: []
  type: TYPE_NORMAL
- en: To prevent ESC5, apply hardening to the CA server and ensure that only necessary
    accounts can access it. Detection is possible via the monitoring of certificate
    template modifications by auditing SACLs.
  prefs: []
  type: TYPE_NORMAL
- en: ESC7 – Vulnerable certificate authority access control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This attack is possible when ACLs on the CA itself are not tight enough. The
    two main rights we are interested in are **ManageCA** (CA administrator) and **Issue
    and Manage Certificates** (certificate manager). **ManageCA** allows the addition
    of the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag, effectively making CA prone to
    ESC6 attack. However, a service restart will be required to introduce this change.
    Also, the installed May 2022 security updates kill ESC6\. A good example of how
    to turn excessive rights into ESC6 with the help of the PowerShell PSPKI module
    can be found here[23].
  prefs: []
  type: TYPE_NORMAL
- en: However, the **ManageCA** permission allows you to grant yourself **Issue and
    Manage Certificates** access rights. This role allows us to approve pending requests,
    negating the manager approval issuance requirement. Now, we can combine new rights
    to execute an attack. The default **SubCA** template is vulnerable to ESC1 and
    has the **Any purpose** EKU. An adversary can request a certificate using the
    **SubCA** template, but the request will be denied because only administrators
    can enroll in it. However, requests can be manually approved using an account
    with **ManageCA** and **Issue and Manage Certificates** permissions. It is important
    to note that both permissions are required. The certificate can then be manually
    retrieved and used for domain authentication.
  prefs: []
  type: TYPE_NORMAL
- en: To show the preceding scenario, I will grant the **khal.drogo** user **ManageCA**
    permission. This can be granted in the **Security** tab of **CA Properties** in
    **Certification Authority (certsrv) MMC**. We will start with the ACL enumeration
    of the CA. We can use a PowerShell module called PSPKI or **Certify.exe** with
    the **cas** parameter. It will show that **khal.drogo** has the **ManageCA** right.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33 – ACL enumeration of the ESSOS-CA](image/B18964_08_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.33 – ACL enumeration of the ESSOS-CA
  prefs: []
  type: TYPE_NORMAL
- en: 'We will grant the **khal.drogo** user **Issue and Manage Certificates** rights,
    also known as O**fficer**. Then, we will enable the **SubCA** template if it was
    disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the execution of the preceding command is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34 – Enabling the SubCA template and granting the officer right
    to khal.drogo](image/B18964_08_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.34 – Enabling the SubCA template and granting the officer right to
    khal.drogo
  prefs: []
  type: TYPE_NORMAL
- en: 'We will launch the attack by requesting a certificate using the **SubCA** template,
    manually approving it, and lastly, retrieving the issued certificate. The following
    commands will execute the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding commands is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.35 – Successful ESC7 attack](image/B18964_08_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.35 – Successful ESC7 attack
  prefs: []
  type: TYPE_NORMAL
- en: There is some intriguing research published by *Tarlogic*. It shows that it
    is possible to achieve remote code execution by uploading a web shell if an adversary
    has **ManageCA** permissions. Research can be found here[24].
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent ESC7, review principals with sensitive security permissions over
    the CA. Detection is possible via the Sysmon registry rule for the scenario when
    the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag will be set by an attacker. A change
    of the CA security permissions generates event ID **4882**, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.36 – khal.drogo added Certificate Manager permissions](image/B18964_08_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.36 – khal.drogo added Certificate Manager permissions
  prefs: []
  type: TYPE_NORMAL
- en: The next section will demonstrate that, in the past, the default CA configuration
    led to a complete AD CS takeover.
  prefs: []
  type: TYPE_NORMAL
- en: CA misconfiguration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we are going to touch upon an attack that was patched by Microsoft in May
    2022, but you still may encounter it in older environments.
  prefs: []
  type: TYPE_NORMAL
- en: ESC6 – EDITF_ATTRIBUTESUBJECTALTNAME2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the **EDITF_ATTRIBUTESUBJECTALTNAME2** flag is set on the CA, any request
    can have defined values in the subject alternative name. Effectively, any domain
    user can enroll in any template configured for domain authentication and obtain
    a certificate as any other user, including the domain administrator. The difference
    from ESC1 is that account information is stored in a certificate attribute, not
    in a certificate extension. This flag is stored in the registry and can be verified
    with **certutil.exe/certify** from an unelevated context; however, a remote registry
    service should be up and running if the check is happening over the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Certify will detect this flag and raise an issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.37 – Flag is set](image/B18964_08_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.37 – Flag is set
  prefs: []
  type: TYPE_NORMAL
- en: 'Exploitation is relatively straightforward. We request a user certificate with
    the domain administrator as an alternative name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.38 – Successful ESC6 attack](image/B18964_08_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.38 – Successful ESC6 attack
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent this attack, disable the flag with the following command (domain
    administrator privileges required) and restart the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The May 2022 security updates kill ESC6; now, it works only combined with ESC10\.
    The patch enforced new certificates to have a security extension that embeds the
    requester’s **objectSid** property, not the value from SAN.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will revisit relay attacks from [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093),
    but only in new ways that apply to AD CS.
  prefs: []
  type: TYPE_NORMAL
- en: Relay attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discussed relay attacks before in [*Chapter 5*](B18964_05.xhtml#_idTextAnchor093).
    Here, we will just revisit them but now with a focus on AD CS.
  prefs: []
  type: TYPE_NORMAL
- en: ESC8 – NTLM relay to AD CS HTTP endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If additional AD CS server roles are installed, they may introduce several
    HTTP-based enrollment methods. These HTTP-based enrollment methods are vulnerable
    to NTLM or Kerberos relay attacks. An adversary uses **PetitPotam**, for example,
    to coerce NTLM authentication from the domain controller to the host of choice.
    Then, NTLM credentials are relayed to the AD CS web enrollment page and a domain
    controller certificate is issued. Using this certificate, an adversary will request
    a TGT and access the domain controller via pass-the-certificate. There are various
    versions of how this attack can be performed depending on available tools and
    protocols[25]. We will stick to the Linux way, following the walk-through of the
    lab author, *Mayfly*[26]:'
  prefs: []
  type: TYPE_NORMAL
- en: Find enrollment endpoints by using **Certify.exe** with the **cas** parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a listener on our Kali machine to relay SMB authentication to the AD
    CS HTTP endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We chose the **DomainController** template because we target the domain controller.
    If we target a workstation, we can use a **Machine** template, and for the domain
    user, the **User** template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Coerce authentication with **PetitPotam**; however, you can choose any other
    method as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the certificate after coerced authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.39 – Obtain the domain controller’s computer account certificate](image/B18964_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.39 – Obtain the domain controller’s computer account certificate
  prefs: []
  type: TYPE_NORMAL
- en: 'Request a TGT by using pass-the-certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the TGT, obtain the NT hash of **daenerys.targaryen**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result of the attack is in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.40 – Successful ESC8 attack](image/B18964_08_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.40 – Successful ESC8 attack
  prefs: []
  type: TYPE_NORMAL
- en: 'Certipy-ad also has this attack embedded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'After using any of the coerce methods, we obtained the certificate and NT hash:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.41 – Successful ESC8 attack](image/B18964_08_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.41 – Successful ESC8 attack
  prefs: []
  type: TYPE_NORMAL
- en: The prevention recommendations are to enable **Extended Protection for Authentication**
    (**EPA**) for Certificate Enrollment Web Service, disable unused AD CS HTTP endpoints,
    and disable NTLM authentication at the host and IIS level. Detection is possible
    via event ID **4624** on the CA server from machine accounts using NTLM and event
    ID **4768** where the domain controller’s computer account certificate is used
    to request the TGT.
  prefs: []
  type: TYPE_NORMAL
- en: ESC11 – NTLM relay to RPC endpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This attack is similar to ESC8, but the relay is done to the RPC endpoint,
    not the HTTP one. Original research can be found here[27]. The certificate request
    is sent to the RPC endpoint over the **ICertPassage Remote** (**ICPR**) protocol.
    There are two conditions to be met in order for an attack to be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: The **IF_ENFORCEENCRYPTICERTREQUEST** flag is not set (it is set by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NTLM signing is not required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back compatibility with older OS versions (< Windows Server 2012) can be the
    reason for the flag to be unset. For demonstration purposes, we will unset it
    on **braavos.essos.local** machine by running the following command from the elevated
    context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The following steps will successfully emulate the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check whether the CA is vulnerable to ESC11 by using **certipy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result is shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.42 – CA is vulnerable to ESC11](image/B18964_08_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.42 – CA is vulnerable to ESC11
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the listener with the **DomainController** template targeting the CA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Coerce authentication by using the **Coercer** tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Authenticate using the domain controller’s computer account certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.43 – Successful ESC11 attack](image/B18964_08_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.43 – Successful ESC11 attack
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate this attack, enforce packet signing and encryption by setting the
    **IF_ENFORCEENCRYPTICERTREQUEST** flag. Detection recommendations are the same
    as for ESC8.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss possible ways to achieve persistence in
    the domain by abusing built-in AD CS functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Domain persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore techniques to achieve persistence in the domain
    using a compromised CA. We will gain an understanding of the typical vectors an
    adversary will utilize to keep high-privileged access to the environment and explore
    approaches to detect such activities.
  prefs: []
  type: TYPE_NORMAL
- en: DPERSIST1 – Forge certificates with stolen CA certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If an adversary has compromised a CA and obtained a CA certificate with a corresponding
    private key, it is possible to forge any certificate in the domain environment.
    To differentiate the CA certificate from others, pay attention to certain characteristics
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The issuer and subject are set to the distinguished name of the CA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a “CA Version” extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No EKU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These characteristics are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.44 – CA certificate information](image/B18964_08_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.44 – CA certificate information
  prefs: []
  type: TYPE_NORMAL
- en: It is important to mention that forged certificates cannot be revoked because
    the CA is not aware of their existence. One of the scenarios of how to obtain
    a CA certificate was explained in the ESC5 example. If you need to forge the certificate
    on a Windows machine, there is a tool called **ForgeCert**[28] to assist you.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, the CA should be treated as a critical asset from a security point
    of view. The root CA can be put offline and delegate certificate issuance to the
    subordinate CA. In case of a compromise, the root CA still will be secure and
    can revoke the subordinate CA certificate. The private key of the CA certificate
    should be stored separately on a hardware device with all physical security measures
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: DPERSIST2 – Trusting rogue CA certificates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During authentication, the domain controller checks the **NTAuthCertificates**
    object for a CA entry, which is specified in the **Issuer** field. The idea of
    this technique is to generate a self-signed rogue CA certificate and add it to
    the **NTAuthCertificates** Active Directory object. After that, any forged certificate
    signed by a rogue CA certificate will be valid. An adversary needs high-privileged
    access to be able to push rogue certificates to the **NTAuthCertificates** object.
    It can be done by the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Such activity can be detected if SACL audit for **Write** and **Modify** actions
    against the **CN=NTAuthCertificates,CN=Public Key Services,CN=Services,CN=Configuration,DC=essos,DC=local**
    object is enabled. This will generate event ID **5136**.
  prefs: []
  type: TYPE_NORMAL
- en: DPERSIST3 – Malicious misconfiguration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With high-privileged access to the CA, an adversary can achieve persistence
    by introducing malicious misconfiguration via security descriptor modifications
    of AD CS components. In this case, the only limit is the attacker’s imagination.
    All attacks from the domain privilege escalation section can be implemented together
    with additional excessive permissions set on the key elements of AD CS. Detection
    of this technique is quite difficult. Event ID **4882**, as shown in ESC7, will
    be logged every time security permissions for certificate services are changed.
    Also, the SACL audit of critical AD objects will be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about techniques to compromise AD CS. The techniques
    presented in the chapter were grouped into four categories: theft, account persistence,
    domain privilege escalation, and domain persistence.'
  prefs: []
  type: TYPE_NORMAL
- en: In the theft category, we covered different ways to steal certificates from
    a compromised endpoint. Next, we introduced you to account persistence techniques,
    such as the request and renewal of user and machine certificates. Also, we learned
    about domain privilege escalation and persistence techniques, respectively, to
    achieve the highest privileges on the domain level as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into Microsoft’s solution for databases –
    Microsoft SQL Server. We will cover offensive techniques, prevention, and detection
    recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SpecterOps – Certified Pre-Owned: [https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf](https://specterops.io/wp-content/uploads/sites/3/2022/06/Certified_Pre-Owned.pdf)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Microsoft official documentation about AD CS: [https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs](https://learn.microsoft.com/en-us/training/modules/implement-manage-active-directory-certificate-services/2-explore-fundamentals-of-pki-ad-cs)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PassTheCert tool: [https://github.com/AlmondOffSec/PassTheCert](https://github.com/AlmondOffSec/PassTheCert)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certificate authentication without PKINIT: [https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml](https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.xhtml)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Hunting for AD CS abuse: [https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse](https://speakerdeck.com/heirhabarov/hunting-for-active-directory-certificate-services-abuse)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'CertStealer tool: [https://github.com/TheWover/CertStealer](https://github.com/TheWover/CertStealer)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SharpDPAPI tool: [https://github.com/GhostPack/SharpDPAPI](https://github.com/GhostPack/SharpDPAPI)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Detecting UnPAC-the-hash and Shadow Credentials attacks: [https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce](https://medium.com/falconforce/falconfriday-detecting-unpacing-and-shadowed-credentials-0xff1e-2246934247ce)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certify tool: [https://github.com/GhostPack/Certify](https://github.com/GhostPack/Certify)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Shadow Credentials attack: [https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml](https://shenaniganslabs.io/2021/06/21/Shadow-Credentials.xhtml)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Whisker tool: [https://github.com/eladshamir/Whisker](https://github.com/eladshamir/Whisker)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AD CS cheat sheet: [https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services](https://hideandsec.sh/books/cheatsheets-82c/page/active-directory-certificate-services)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certifried original research: [https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4](https://research.ifcr.dk/certifried-active-directory-domain-privilege-escalation-cve-2022-26923-9e098fe298f4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certipy tool: [https://github.com/ly4k/Certipy](https://github.com/ly4k/Certipy)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Semperis write-up for CVE-2022-26923: [https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/](https://www.semperis.com/blog/ad-vulnerability-cve-2022-26923/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ESC9 and ESC10 author’s blog post: [https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7](https://research.ifcr.dk/certipy-4-0-esc9-esc10-bloodhound-gui-new-authentication-and-request-methods-and-more-7237d88061f7)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Microsoft patch for Certifried: [https://catalog.update.microsoft.com/Search.aspx?q=KB5025228](https://catalog.update.microsoft.com/Search.aspx?q=KB5025228)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The modifyCertTemplate tool: [https://github.com/fortalice/modifyCertTemplate](https://github.com/fortalice/modifyCertTemplate)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exploit ESC4 using PowerView: [https://redteam.wiki/postexploitation/active-directory/adcs/esc4](https://redteam.wiki/postexploitation/active-directory/adcs/esc4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Detecting ESC4: [https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4](https://www.fortalicesolutions.com/posts/adcs-playing-with-esc4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Certsync attack: [https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/](https://www.redpacketsecurity.com/certsync-dump-ntds-with-golden-certificates-and-unpac-the-hash/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SpecterOps – From DA to EA with ESC5: [https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c](https://posts.specterops.io/from-da-to-ea-with-esc5-f9f045aa105c)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PSPKI to turn ESC7 to ESC6: [https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7](https://luemmelsec.github.io/Skidaddle-Skideldi-I-just-pwnd-your-PKI/#esc7)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From ManageCA to RCE: https://www.tarlogic.com/blog/ad-cs-manageca-rce/'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ESC8 exploitation versions: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Active%20Directory%20Attack.md#esc8---ad-cs-relay-attack'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AD CS GOADv2 lab walk-through: https://mayfly277.github.io/posts/GOADv2-pwning-part6/#esc8---coerce-to-domain-admin'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ESC11 original research: https://blog.compass-security.com/2022/11/relaying-to-ad-certificate-services-over-rpc/'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'ForgeCert tool: https://github.com/GhostPack/ForgeCert'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
