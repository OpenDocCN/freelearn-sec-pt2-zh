- en: '*Chapter 2*: Route the Hardware'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will take you on the lovely journey of understanding how to connect
    physical **hardware** to virtual infrastructure. Understanding how a machine is
    running **ESXi** can route communications through to local **Programmable Logic
    Controllers** (**PLCs**), **Human Machine Interfaces** (**HMIs**), and other such
    devices. This section will utilize **Koyo Click** software and hardware to start
    with, as the Koyo Click PLC is a very cost-effective choice, and the engineering
    programming software is free to use, unlike other mainstream vendors who require
    you to pay hefty sums of money to license their programming software. Know that
    the principles and methods discussed in this chapter are reflected in those of
    other automation vendors, such as Siemens, Rockwell, Schneider, Omron, Mitsubishi,
    and many others. If getting access to a Koyo Click proves to be difficult, you
    can follow along with a PLC of your choice. Note that you will be required to
    get access to the engineering program software of the vendor that you choose.
    We will be installing the **Click software**, setting up the physical **PLC**,
    and finally, configuring the communication between a *virtual machine* and the
    physical PLC.
  prefs: []
  type: TYPE_NORMAL
- en: Familiarizing yourself with how industrial technology is programmed will drastically
    increase your success rate in a pentest. Knowing the intricacies of how the software
    reacts, the resources it uses, and the communication method will allow you to
    detect possible vectors of entry going forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Click software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Koyo Click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Koyo Click software, which you can download from here: [https://www.automationdirect.com/support/software-downloads?itemcode=CLICK](https://www.automationdirect.com/support/software-downloads?itemcode=CLICK)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Koyo Click hardware, which you can find here: [https://www.automationdirect.com/adc/overview/catalog/programmable_controllers/click_series_plcs/](https://www.automationdirect.com/adc/overview/catalog/programmable_controllers/click_series_plcs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Windows 7 Machine, which was covered in the previous chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ESXi, as was covered in the previous chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Click software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the first topic of the chapter. In this section, we will be stepping
    through the installation of the Koyo Click software. This software will let us
    communicate with, and upload and download programs to and from, the Koyo Click
    PLC.
  prefs: []
  type: TYPE_NORMAL
- en: I am going to preface this chapter by saying that, once again, this is not a
    sales pitch for Koyo Click or AutomationDirect; it simply is a very flexible,
    versatile, holistic, and cost-effective choice of PLC. Additionally, AutomationDirect
    is a one-stop-shop, whereby you can place an order and obtain everything you need
    to build a complete lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that disclaimer out of the way, let''s navigate over to the AutomationDirect
    website. Please click on the following link: [https://www.automationdirect.com/support/software-downloads?itemcode=CLICK](https://www.automationdirect.com/support/software-downloads?itemcode=CLICK).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to download the software for programming a Koyo Click from AutomationDirect.
    Once you have navigated to the preceding link, this will land you on the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Click software download'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.01_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Click software download
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will proceed by clicking the green **DOWNLOAD** button, and this
    will then cast a notification update and require an **Email Address**, as shown
    in *Figure 2.2*, followed up by a *confirmation of the email address* to proceed
    further:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Email confirmation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.02_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Email confirmation
  prefs: []
  type: TYPE_NORMAL
- en: Once your email address is confirmed, the software starts to download. Now you
    should have the software downloaded. You will have to transfer it to your **Windows
    7** virtual machine that we created in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*. There are many ways of doing this – building a second
    interface on the VM and placing it in the VM network segment on the **ESXi hypervisor**
    is one method that can be used. There are multiple different file transfer protocols/tools
    for moving this file. I simply default to what is the easiest option and this
    has become second nature to me. During assessments, I have performed many file
    drops and reverse shell pushes on boxes/machines by simply spinning up a **Python
    3** web server and having the **Windows 7** machine navigate to the file and download
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the command for initiating the Python 3 web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Initiating the python3 web server'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.03_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Initiating the python3 web server
  prefs: []
  type: TYPE_NORMAL
- en: 'When the client connects, you can see an HTTP 200 OK success status response
    code as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Response code for success status'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.04_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Response code for success status
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the Windows 7 machine connects and downloads the software file.
    The following screenshot shows the **Directory listing** hosted on the local server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Python HTTP server directory listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.05_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Python HTTP server directory listing
  prefs: []
  type: TYPE_NORMAL
- en: I have touched on this because it would be a good habit to build moving forward
    as it will come in handy during future **pentesting** engagements when you need
    to move files between your host machine and the box that you are trying to crack.
  prefs: []
  type: TYPE_NORMAL
- en: 'This screenshot shows the **CD Image** that can be extracted to begin the installation
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Koyo Click CD Image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.06_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Koyo Click CD Image
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the software downloaded to our Windows 7 **Virtual Machine**
    (**VM**), we want to extract the **CD Image** and run the **Install** option that
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Install Click software'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.07_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Install Click software
  prefs: []
  type: TYPE_NORMAL
- en: 'This will then trigger a **User Account Control** (**UAC**) dialog box, shown
    in *Figure 2.8*, that we will want to click the **Yes** button on. After clicking
    **Yes**, the software will generate a dialog box allowing us to install the **CLICK
    Programming Software**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Accept UAC install validation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.08_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Accept UAC install validation
  prefs: []
  type: TYPE_NORMAL
- en: 'The next series of screenshots will walk you through installing the Click programming
    software. We will click the **Install Software** button first, as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Click programming software'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.09_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Click programming software
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should see the page shown in *Figure 2.10.* Click the **Next >** button
    to proceed with the **InstallShield Wizard**, which will trigger a dialog box
    indicating that you should disable anti-virus software on your Windows 7 machine
    as it will cause issues with installing the programming software correctly and
    completely:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Click InstallShield'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.10_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Click InstallShield
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, you would have to simply click **OK** once you know that the
    anti-virus software is not on, and technically it should not be because we never
    installed any in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013), *Using
    Virtualization*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Anti-virus check'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.11_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Anti-virus check
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screenshot, we want to accept the **License Agreement** and press
    **Next >**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – License Agreement'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.12_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – License Agreement
  prefs: []
  type: TYPE_NORMAL
- en: 'This will result in the page shown in *Figure 2.13*. In the boxes, fill out
    your **User Name** and **Company Name**. From *Figure 2.13*, you can tell that
    I''ve used my name, **Paul Smith**, and **ICS Lab** as the company name. This
    is an example of what to do but you would need to put in your own information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Configure Customer Information'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.13_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Configure Customer Information
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the following page will load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Choose Destination Location'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.14_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – Choose Destination Location
  prefs: []
  type: TYPE_NORMAL
- en: 'On this page, you will choose the destination of your software installation.
    I personally just kept the default folder structure as you can see in *Figure
    2.14* to the left of the **Change** button. Then, you will click on the **Next
    >** button, which then generates another dialog window to click through as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Install the program'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.15_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – Install the program
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the program is installed, InstallShield will ask you if you want to **Create
    a Desktop Icon**, shown in *Figure 2.16*. I chose this option as it will be easy
    to find going forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16 – Create a Desktop Icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.16_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.16 – Create a Desktop Icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are at the end of the installation, and it shouldn''t have been
    too painful. Click on **Finish**, as seen in *Figure 2.17*, and then let''s launch
    the software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17 – Finish the installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.17_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.17 – Finish the installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the **CLICK Programming Software** icon by double-clicking. It should
    be visible on your desktop as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18 – CLICK Programming Software icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.18_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.18 – CLICK Programming Software icon
  prefs: []
  type: TYPE_NORMAL
- en: 'This will launch the following dialog, allowing us to **Start a new project**,
    **Open an existing project**, or **Connect to PLC**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19 – Start a new project'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.19_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.19 – Start a new project
  prefs: []
  type: TYPE_NORMAL
- en: Once we are here, we are all set up and ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I wouldn''t be doing you any justice if I didn''t point out the obvious,
    and maybe you are asking yourself the same question: **Where is the hash?** This
    is a prime example of what a **watering hole attack** looks like. A watering hole
    attack is an exploit whereby an attacker has poisoned a software package or update
    and has published it to a website where users of the equipment or software come
    to download this corrupted file. This is very similar to what occurred with the
    **SolarWinds** attack, which we touched on briefly in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*. This type of attack can have a very deep and wide fallout
    if a well-used piece of technology is compromised.'
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, going forward, be very wary of where you get software for your **Industrial
    Control System** (**ICS**) equipment and what control impact it has on your SCADA/ICS
    system. Now we will move on to setting up the hardware, but we will return to
    the software shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Koyo Click
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have a number of these different units, but I will be focusing on the model
    **C0-10ARE-D**, which is the Ethernet Basic PLC Unit. Once again, if you don't
    have access to a Koyo Click, you can use any other type or model of PLC and engineering
    software to follow along. The choice to use Koyo comes from the fact that it is
    one of the few controllers that I have spare that isn't wrapped up in a project.
    More importantly, however, this device is specifically used for the Ethernet communication
    port that comes with this PLC and the engineering software is free. Additionally,
    it leverages the discrete I/O to energize and de-energize coils and will help
    establish a correlation between real-world processes and equipment, and the equipment
    we will be simulating in our **ICS** lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the **Koyo Click** comes with two native protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: Modbus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ethernet/IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you remember from the previous chapter, the tools that we installed were
    focused on these protocols to allow us to interact with equipment using the native
    communication paths. Now, another detail about the **Koyo Click** that is enticing
    is the *design* and *expandable nature* of the Click's modularization. The modularization
    allows you to add on different control capabilities, from analog to digital, to
    relay control, and specialty modules. You can stack them together and expand the
    control range to accommodate almost any project with an endless amount of I/O.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link will take you to *AutomationDirect* and the **CLICK PLC**
    equipment: [https://www.automationdirect.com/adc/overview/catalog/programmable_controllers/click_series_plcs/](https://www.automationdirect.com/adc/overview/catalog/programmable_controllers/click_series_plcs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now it is possible to run your own power supply to the PLC, however, for the
    price of the C0-01AC, it is just as easy to package them together. The reason
    why I am suggesting 01AC over the 00AC power supply is that you would be future-proofing
    your lab, and 01AC has 1.3 A, which allows it to support and drive a fully expanded
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an image of the *C0-01AC* power supply:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20 – C0-01AC power supply'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.20_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – C0-01AC power supply
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an image of the Koyo Click model **C0-10ARE-D** that I will be using
    in the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21 – Controller'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.21_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.21 – Controller
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the power supply and PLC in your lab, then make sure to wire up
    the terminals from your wall to your power supply and from your power supply to
    the bottom of your controller.
  prefs: []
  type: TYPE_NORMAL
- en: You will see the terminals required to supply power to the controller. Now that
    we have power to the controller, go ahead and connect an Ethernet cable linking
    the PLC to your computer. This can be done via a direct connection or through
    a switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will be to open the CLICK programming software and select **Connect
    to PLC**, and this should bring up a **Windows Security Alert** dialog box asking
    you to allow this connection type on private networks and on public networks.
    Since this is a lab, and isolated, I have chosen to enable both, as seen in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22 – Firewall access'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.22_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.22 – Firewall access
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have clicked on **Allow access** at the bottom of the screen, you
    will be presented with a dialog window allowing you to connect to a **CLICK PLC**.
    From here, you have to select the **Port Type**, which has three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**USB**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serial**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ethernet**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will select **Ethernet** of course, and then proceed to our next option,
    which is selecting the specific **Network Adapter**. Depending on your system,
    there could be any number of adapters. Select the **Network Adapter** that has
    a path to the **CLICK PLC**. If a path exists between the PLC and the Windows
    7 virtual machine, you should see the PLC listed with the **IP Address**, **Subnet
    Mask**, **Part Number**, **Firmware**, **Mode**, **Status**, and **MAC Address**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23 – Connect to PLC'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.23_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.23 – Connect to PLC
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you can select the PLC and click on the **Connect** button. It will
    display another **Windows Security Alert**, but this time it is for the **Communication
    Server** and allowing it to communicate on private or public networks. You can
    see what this looks like in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24 – Allow Firewall Access'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.24_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.24 – Allow Firewall Access
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Allow access** at the bottom of your screen. Once this occurs, you
    should get a networking mismatch error as shown in the following screenshot, because
    we still need to configure the network connectivity through **ESXi** to the PLC
    and place the PLC in the correct network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25 – Subnet Matching Error'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.25_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.25 – Subnet Matching Error
  prefs: []
  type: TYPE_NORMAL
- en: This leads us onto the next section of the chapter, where we will configure
    the hardware to communicate and sit in the correct subnet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring communication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we know that there is a path through to the physical PLC, however, we are
    not able to communicate with it. The solution to this is that we will have to
    adjust the IP address of the Windows 7 VM to align with the subnet that the PLC
    is in. This will allow us to connect directly to the PLC and configure the address
    to align with the subnet that we established for the virtual PLC developed in
    the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'By looking at *Figure 2.26*, we want to make sure that we provide Windows 7
    with an **IP** address that can ping the Koyo CLICK. I have decided to arbitrarily
    choose **192.168.0.20** because my CLICK has a default address of **192.168.0.10**,
    however, depending on the default address that your Koyo CLICK may have, you will
    need to adjust this appropriately:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26 – Configure Windows interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.26_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.26 – Configure Windows interface
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set your IP address, you can launch the CLICK programming software
    and click on **Connect to PLC**, then select the PLC that you see. If everything
    is configured correctly, you should see a page as shown in *Figure 2.27*. This
    step now allows you to read the pre-existing project inside the PLC or simply
    skip over reading it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27 – Pre-existing project inside the PLC'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.27_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.27 – Pre-existing project inside the PLC
  prefs: []
  type: TYPE_NORMAL
- en: Tip/important note
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to always read the project from the PLC. There is a good
    chance that no one has a backup of the current project file running, and this
    one-time connection might be the only chance to get a copy.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to be L337 to cause major disruption if an attacker has a foothold
    at this level whereby they can access the PLC and read/write project files. They
    simply need to write a blank project file to the PLC and now the process grinds
    to a halt. If they don't have any project backups locally, this could mean millions
    of dollars in losses because of downtime. It is a common practice that large companies
    place the responsibility and management of these backups on the third-party engineering
    firm they have contracted for the operation and maintenance of the equipment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see there are two options that are presented
    to us. As stated previously we will select **Read the project from the PLC**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28 – Read the project file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.28_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.28 – Read the project file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should have a blank project sitting in front of you. We are going to
    go and change the PLC address information to align with our design from [*Chapter
    1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013), *Using Virtualization*. You will
    need to click **Setup** and then select **Com Port Setup** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.29 – Com Port Setup'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.29_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.29 – Com Port Setup
  prefs: []
  type: TYPE_NORMAL
- en: 'This will then present you with the layout of the CLICK PLC and let you choose
    the setup of the two available ports. Proceed by selecting the **Port 1** setup,
    which will be the Ethernet port as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.30 – Koyo Click COM Port Setup'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.30_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.30 – Koyo Click COM Port Setup
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you can see two options as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use default fixed address**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set manually:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.31 – Com Port Setup Details'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.31_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.31 – Com Port Setup Details
  prefs: []
  type: TYPE_NORMAL
- en: We are going to set the information manually, so select the **Set manually**
    option as you can see in *Figure 2.32*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open **IP Address**, **Subnet Mask**, and **Default Gateway**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.32 – Set the IP address'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.32_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.32 – Set the IP address
  prefs: []
  type: TYPE_NORMAL
- en: 'As a friendly reminder from [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*, we know that our virtual PLC resides inside **Level 1:
    Process**, as seen in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_2_Table_1_B16321.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will pre-assign IP addresses to the virtual machines that we have built
    out.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assign the following IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PLC**: **192.168.1.10**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SCADA**: **192.168.2.10**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workstation**: **192.168.3.10**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kali**: **172.16.0.1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are going to set our physical PLC to reside in the same subnet, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CLICK**: **192.168.1.20**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set IP Address**: **192.168.1.20**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Mask**: **255.255.0.0**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set Gateway**: **192.168.1.1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, to commit your changes, you need to write the project to the PLC, navigate
    to the PLC menu, and select **Write Project into PLC…** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.33 – Write Project into PLC'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.33_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.33 – Write Project into PLC
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you followed along, the programming software should throw an error that
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.34 – Syntax error'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.34_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.34 – Syntax error
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the output window, you should see a helpful hint, which is **No
    unconditional END instruction in the Main Program** as seen here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.35 – Debug window'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.35_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.35 – Debug window
  prefs: []
  type: TYPE_NORMAL
- en: 'If for some reason, you are missing the output window, navigate to **View**
    | **Window** | **Output** to turn it on as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.36 – View selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.36_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.36 – View selection
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, we need to add an *unconditional end* to one of our rungs. Look
    under **Instruction List** and scroll until you find the **End** function as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.37 – Instruction List'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.37_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.37 – Instruction List
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, drag the **End** function to one of the **( NOP )** outputs as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.38 – Ladder logic'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.38_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.38 – Ladder logic
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see that the **END** function replaces **( NOP )** as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.39 – Instruction replacement'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.39_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.39 – Instruction replacement
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s return to writing the project to the PLC, which as a refresher
    is under the **PLC** menu item. Now our project should compile and present us
    with a dialog box showing us our changes that we made to **Port 1**. Click the
    button at the bottom of the newly changed Port1 configuration, which is labeled
    **Use This Setup** as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.40 – Set project details'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.40_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.40 – Set project details
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is clicked, this will show us an error indicating that the communication
    will be lost between the Windows 7 VM and the CLICK as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.41 – Confirm update'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.41_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.41 – Confirm update
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **OK** and proceed to the **Write Project into PLC** screen as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.42 – Write project details'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.42_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.42 – Write project details
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are prompted with the final check before pushing the changes to the
    PLC. If you have no errors, click **OK** and once everything is completed you
    will be presented with a **Transfer completed** dialog box as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.43 - Transfer completed'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.43_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.43 - Transfer completed
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can see that the IP address has changed, so click on the **Connect**
    button as shown in *Figure 2.44*, and you should get a timeout error. This is
    OK as we moved subnets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.44 – PLC Connect'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.44_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.44 – PLC Connect
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you remember back to our ESXi network architecture, you will notice
    that **No physical adapters** has been set, as seen in *Figure 2.45*. This means
    that the virtual PLC and the physical PLC have no means of communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.45 – vSwitch topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.45_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.45 – vSwitch topology
  prefs: []
  type: TYPE_NORMAL
- en: 'We can quickly test this by logging into the virtual PLC and try to ping the
    physical PLC as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.46 – Ping connection test'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.46_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.46 – Ping connection test
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the host is unreachable. What we need to do is add an uplink
    to the virtual switch. Select **vSwitch1** and click **Add uplink** as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.47 – Add uplink'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.47_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.47 – Add uplink
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can see that **Uplink 1** is showing a dropdown with a list of physical
    network adapters. This is all dependent on your hardware setup. I have decided
    to keep things consistent with **vSwitch0** being associated with **vmnic0** and
    **vSwitch1** associated with **vmnic1** as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.48 – Connect physical PLC to virtual switch'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.48_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.48 – Connect physical PLC to virtual switch
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when you look at the topology, you should see a physical adapter associated
    with your vSwitch and connecting the port groups created in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.49 – vSwitch topology with physical connection'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.49_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.49 – vSwitch topology with physical connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and try pinging the physical PLC from the virtual PLC now. You should
    get a reply back as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.50 – Connection test'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.50_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.50 – Connection test
  prefs: []
  type: TYPE_NORMAL
- en: 'Now for a little cleanup. As I added a secondary adapter to the Windows 7 VM
    to connect to the Koyo CLICK via the VM network and **vmnic0** adapter, I am going
    to go back and disconnect that adapter and test to see if I can still connect
    to the CLICK through **vmnic1** next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.51 – Connect to PLC'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_2.51_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.51 – Connect to PLC
  prefs: []
  type: TYPE_NORMAL
- en: And Voila! We have a path from Windows 7 to the **CLICK PLC**. Now, for you
    networking gurus reading this, I know that you are probably smirking to yourselves
    and thinking, *Duh, we are using a class B subnet mask! Of course, we can communicate
    between the subnets!* Firstly, I want to thank you for reading this book, as it
    means a lot to me, and secondly, I felt this was the path of least resistance
    over assembling firewalls into VMs and writing policies, as that could be a dedicated
    book on its own.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have installed the Koyo Click programming software on our Windows 7 virtual
    machine. We have also wired our power supply to our Koyo Click PLC and powered
    it on. We have successfully configured the physical network of the Koyo Click
    PLC to communicate through the ESXi vSwitch and to the network interface of the
    Windows 7 interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrapping up this chapter, we have a running Koyo CLICK PLC sitting in the **Level
    1: Process** network segment, and we have installed and tested the CLICK programming
    software on the Windows 7 VM that is sitting in the **Level 3: Operations network**
    segment. We tested the network communication between the virtual PLC and the physical
    PLC as well. We added a physical adapter uplink to the ESXi virtual switch that
    we configured in the previous chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a better understanding of how an automation engineer spends their
    time when they begin a project. Understanding how to orchestrate and install software
    will allow you to shape and hone your pentesting skills in future engagements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be writing our first PLC program and downloading
    it onto the Koyo CLICK.
  prefs: []
  type: TYPE_NORMAL
