- en: '*Chapter 5*: Span Me If You Can'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered the importance of using open source research
    to build a profile of your client, their company, users, and technology. In this
    chapter, we are going to dive deeper down the rabbit hole and discuss out-of-band
    network monitoring. For the last few years, **intrusion detection systems** (**IDS**)
    have been dominating the industrial cybersecurity space.
  prefs: []
  type: TYPE_NORMAL
- en: Companies such as Security Matters (acquired by ForeScout), Indegy (bought by
    Tenable), Sentryo (bought by Cisco), CyberX (bought by Microsoft), Claroty, Nozomi
    Networks, SCADAfence, and many others have flourished. Money from **venture capital**
    (**VC**) and **investment banking** (**IB**) has been poured into the passive
    monitoring space to provide awareness about the importance of automation technology,
    and the impact it has on critical infrastructure has grown as well.
  prefs: []
  type: TYPE_NORMAL
- en: All this technology relies on the network infrastructure to be able to either
    use a **Switch Port Analyzer** (**SPAN**) or **Test Access Point** (**TAP**) on
    the traffic and send it to the IDS technology. It is imperative to understand
    how to perform out-of-band monitoring using the aforementioned methods, and understand
    what this means during your pentest if your customer has invested in a particular
    IDS vendor.
  prefs: []
  type: TYPE_NORMAL
- en: As we move through this chapter, we are going to review what SPAN is and how
    to mirror traffic to a port, what a TAP is and how we can utilize it in a pentesting
    engagement, and discuss the various IDS technologies that utilize SPAN in the
    industrial space and what to expect when you encounter them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Wireshark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is SPAN and how can we configure it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a TAP during an engagement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating IDS security monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TP-Link TL-SG108E Smart Switch**: This is a relatively inexpensive switch
    and allows for simple port mirroring. We will look at this to get an understanding
    of how to configure port mirroring. A TP-Link TL-SG108E Smart Switch can be found
    on Amazon ([https://www.amazon.ca/TP-LINK-TL-SG108E-8-Port-Gigabit-Switch/dp/B00JKB63D8](https://www.amazon.ca/TP-LINK-TL-SG108E-8-Port-Gigabit-Switch/dp/B00JKB63D8)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Throwing Star LAN TAP**: This is an inexpensive LAN TAP that we can use to
    extract network packets and then review them later. A Throwing Star LAN TAP can
    be found at: [https://www.amazon.ca/Throwing-Original-Monitoring-Ethernet-Communication/dp/B077XY2TGD/ref=sr_1_1?dchild=1&keywords=throwing+star+lan+tap&qid=1626109845&sr=8-1](https://www.amazon.ca/Throwing-Original-Monitoring-Ethernet-Communication/dp/B077XY2TGD/ref=sr_1_1?dchild=1&keywords=throwing+star+lan+tap&qid=1626109845&sr=8-1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wireshark/TShark, which can be installed from the following link: [https://www.wireshark.org/#download](https://www.wireshark.org/#download).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tcpdump.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After some soulful debate, I decided to move this section to the beginning of
    this chapter. I had planned it to be in the following chapter, but after reviewing
    this, I felt that it flowed nicely with the plans ahead. That being said, let's
    jump right into it. Wireshark is the de facto tool that's used by network engineers
    and security personnel alike to monitor all the bits of data moving through the
    network. When an issue arises, the first thing the individual or team does is
    open their laptop and start up Wireshark. I cannot emphasize this enough; Wireshark
    is fundamentally one of the most important tools that is used by the security
    industry and ironically, people seldom qualify it as a security tool. Wireshark
    is an absolute must for the proverbial tool bag that you are assembling for a
    pentesting engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.wireshark.org/#download](https://www.wireshark.org/#download)
    to be taken to Wireshark's stable release section. At the time of writing, this
    stable release is version 3.4.4 and was released March 10, 2021\. Now, for some
    of the "Terminal junkies," "CLI connoisseurs," and "shell samurais" out there,
    or even those that may be using "Brew" on an Apple laptop or Linux distro, the
    following commands are for you.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install Wireshark with Brew like so:'
  prefs: []
  type: TYPE_NORMAL
- en: brew install wireshark
  prefs: []
  type: TYPE_NORMAL
- en: Linux distros
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install Wireshark with **apt-get** like so:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get install wireshark
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I am simply going to leave you with this link: [https://en.wikiversity.org/wiki/Wireshark/Install](https://en.wikiversity.org/wiki/Wireshark/Install).'
  prefs: []
  type: TYPE_NORMAL
- en: The installation is straightforward and there are lots of YouTube videos, wikis,
    blogs, and forums that you can reference.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: During your installation, you will want to ensure that you install additional
    or complementary components. This is where TShark, dissector plugins, Editcap,
    Mergecap, and other key components come into play. As we move through the next
    few chapters, we'll touch on a number of these items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have installed Wireshark, open the program by double-clicking the
    desktop icon and make sure you can see all your network interfaces, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Wireshark capture interfaces'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.01_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Wireshark capture interfaces
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will be able to pick an interface and start to listen to the traffic
    on the network. The key here is that the only network traffic you will see is
    broadcast, multicast, and unicast traffic that's directly related to that interface.
    If you were to select your Wi-Fi interface, for example, you would see lots of
    devices communicating on the network via multicast and broadcast communication,
    especially if you are like me and embrace the **Internet of Things** (**IoT**).
    I am making a special note of this as it leads into the next section, where we
    will look at more interesting data. By this, I mean data provided by unicast communication
    between specific devices. You must have access to a SPAN/mirror port or have installed
    a TAP between the devices communicating.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to install Wireshark using different methods,
    depending on our operating system. We made sure that we saw a list of network
    interfaces that we could utilize to capture traffic. Finally, we noted that the
    information that's gathered by simply listening to a network port is not a complete
    and detailed picture. We require access to SPAN or a TAP to see true device-to-device
    unicast communication. In the next section, we will discuss what SPAN/mirroring
    is and learn how to configure this functionality on a simple managed switch.
  prefs: []
  type: TYPE_NORMAL
- en: What is SPAN and how can we configure it?
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we quickly installed Wireshark as a means to capture
    network traffic. We can now use Wireshark to verify our results. We will be able
    to do this once we've configured a simple SPAN/mirror port in this section. So,
    what is SPAN and what does it do? SPAN allows a user to duplicate all traffic
    on one or more ports on a managed switch, that supports SPAN/mirroring, to one
    or more ports on the same switch. This is commonly referred to as local SPAN.
    This is the primary method that is used to feed data to an IDS. There are extensions
    of SPAN called **Remote SPAN** (**RSPAN**) and **Encapsulated Remote SPAN** (**ERSPAN**).
  prefs: []
  type: TYPE_NORMAL
- en: RSPAN allows the user to associate remote network traffic with a dedicated VLAN
    and then trunk that data into an additional switch. This comes at a cost, however,
    as you start to dedicate switch ports to RSPAN traffic. You can no longer use
    those specific ports for normal traffic, thus reducing the number of ports that
    can be utilized for operational switching. However, utilizing RSPAN is very useful
    for monitoring data moving through the network during a pentest, since key information
    can be captured and used to breach the system. Credential data, operating systems,
    ports and services, and other useful information is passed across the network
    and directly into your machine via SPAN and captured with Wireshark, TShark, or
    Tcpdump.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using local SPAN or RSPAN causes the switch to increase load. If the switch
    is under heavy load, which means there's lots of traffic moving through the switch,
    using SPAN could cause packet loss and other unwanted behavior, such as production
    disruption. Loss of revenue due to downtime caused by an overloaded switch that
    starts to drop packets is the worst possible outcome during an engagement. So,
    be warned when performing this on switches that you don't fully control or understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the terms SPAN and port mirroring are interchangeable as they ultimately
    mean the same thing. So, if you were asking yourself why I was writing SPAN/mirror,
    it''s because they mean the same thing essentially and SPAN is really a Cisco-centric
    term. The switch mentioned in the *Technical requirements* section – the TP-Link
    TL-SG108E Smart Switch – utilizes port mirroring. A typical setup or architecture
    for a local SPAN is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – SPAN traffic'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.02_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – SPAN traffic
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use any number of switches to test this setup. We are going to check
    the port settings; in the following screenshot, you can see that this switch is
    a simple eight-port switch. Four ports are being utilized – three operating at
    1 GHz and one operating at 100 MB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Port Setting screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.03_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Port Setting screen
  prefs: []
  type: TYPE_NORMAL
- en: Seeing that one port is negotiating at a lower speed, it is safe to say that
    PLC communication is on that port, with the port being port 2\. Granted I know
    this because I set up the lab, but during a real pentest, if you happen to get
    this level of access, it is safe to assume that lower speeds are due to industrial
    hardware communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reviewing our port settings on the switch, we have a clear idea of what
    port is being used for the PLC, as well as what ports are open to be used to mirror
    the communication back to our host. Next, we will want to set up port mirroring.
    Select the **Monitoring** option from the menu on the left and then select **Port
    Mirror**. You will be taken to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Port Mirror screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.04_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Port Mirror screen
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, I am going to choose **Enable** for the **Port Mirror** feature
    and select **Mirroring Port**, which will be **Port 1**, and click the **Apply**
    button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Enable Port Mirror'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.05_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Enable Port Mirror
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to select the port that we want to monitor. As we discovered
    from reviewing the port settings, port 2 has the PLC connected to it. So, click
    on **Port 2** and enable both **Ingress** traffic and **Egress** traffic, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Port 2 mirrored'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.06_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Port 2 mirrored
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything has worked according to the previous steps, the table will indicate
    that **Port2** has been enabled for both **Ingress** and **Egress** traffic, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Confirm Port 2 mirror'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.07_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Confirm Port 2 mirror
  prefs: []
  type: TYPE_NORMAL
- en: If you are following along and were able to get your hands on a Koyo Click,
    then proceed and open the CLICK Programming Software that we installed in [*Chapter
    2*](B16321_02_Epub_AM.xhtml#_idTextAnchor027), *Route the Hardware*, on the Windows
    7 host and connect to your PLC. If you are using a different vendor, such as Rockwell,
    make sure you open Studio 5000 or RSLogix and connect to your hardware. This communication
    between the engineering software and the PLC will create traffic across port 2
    on our switch. This is exactly what we want, since duplicated packets are being
    mirrored to port 1\. Connect a cable between port 1 and your host machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your host machine, open Wireshark and select the interface that you want
    to monitor. In my case, I have a **Thunderbolt** adapter on my Mac and I am using
    the interface labeled **en6**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Interface selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.08_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Interface selection
  prefs: []
  type: TYPE_NORMAL
- en: 'Once selected, you will see the communication between the engineering software
    and the PLC, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Wireshark'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.09_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Wireshark
  prefs: []
  type: TYPE_NORMAL
- en: Deep diving into Wireshark logs is outside the scope of this book, but we will
    briefly touch on a few key aspects in the next couple of chapters. Click on any
    packet and review the source and destination. If everything has been set up correctly,
    you will see the MAC address resolve to **KoyoElec_##:##:##**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark is just one way of examining traffic on the network graphically.
    If you want to review the same data from the Terminal, you can use Tcpdump. Open
    a Terminal and find your interface that is connected to port 2\. Type in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump -i <interface> -v -X
  prefs: []
  type: TYPE_NORMAL
- en: 'Tcpdump is the application that will capture the mirrored traffic. **i** in
    the command allows you to select the interface that you would like to listen to.
    In my case, this is the **en6** interface. The **v** command tells Tcpdump to
    display verbose data. Finally, **X** displays headers and data from each packet
    in hexadecimal and ASCII, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Tcpdump command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.10_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Tcpdump command
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from Tcpdump should match the same capture that was seen using Wireshark.
    Compare the two to make sure that you are seeing the same information. This capture
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Tcpdump output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.11_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – Tcpdump output
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are probably wondering, *how does this apply to me and my
    pentesting future?* Understandably, it would be very odd to gain access to a switch
    console and just spend time setting up a SPAN session since many other interesting
    things can be done at that level of access. I am simply covering the core building
    blocks that IDS use to absorb data. This is very important since in the last 5
    or so years there has been an explosion in the adoption of passive monitoring
    in the industrial automation space. You will encounter IDS solutions in some form
    or another, and it is key to understand how they work and function. We will cover
    this in greater detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we covered the importance of understanding what SPAN/port mirroring
    is and the technology that it enables. We walked through configuring a mirror
    port and using both Wireshark and Tcpdump to review and capture the traffic between
    the Koyo CLICK PLC and the engineering software. In the next section, we are going
    to discuss what a TAP is and how it compares to SPANing traffic. We will also
    discuss how TAPs are invaluable in terms of pentesting when you have physical
    access to your customer's infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Using a TAP during an engagement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed what SPAN is and how to configure and
    use it. In this section, we are going to review what a TAP is, the different types
    of TAPs, and how they can be used in an engagement. Typically, TAPs are hardware
    devices that are inserted between two communication links so that we can perform
    full packet replication. TAPs can duplicate traffic to a single destination, or
    multiple destinations, which is called **regeneration**, or the TAP can provide
    consolidated traffic, which is referred to as aggregation.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of differences between TAPs and SPANs, but the most important
    in my mind is that SPAN is not a true passive solution as it creates overhead
    on the switch. That being said, TAPs produce a complete copy of the traffic, without
    this impacting the performance of the switch and knocking it over. The downside
    is that for you to gain access to the packets, you must do a cable swap, which
    could cause temporary disruption in the service.
  prefs: []
  type: TYPE_NORMAL
- en: There are two primary types of TAPs – active and passive. Passive taps have
    no physical disconnect between interfaces, which allows communication to be maintained
    even if the TAP fails. Active TAPs, on the other hand, use power to duplicate
    communication between the interfaces, allowing it to operate at 1,000 M, whereas
    passive TAPs support 10/100 M networks. Using a passive TAP on gigabit networks
    will cause the network to degrade and produce performance issues. As you may recall,
    in the previous section, we saw that the PLC communication was operating at 100
    M by default. This allows us to use a passive TAP in an engagement without us
    having to worry about causing performance issues, but once again, I have to emphasize
    that you should really know what the network is doing prior to installing an implant
    into the network. This is a cautionary tale as I have definitely knocked over
    critical networks in the past during pentests. In our lab environment, you don't
    have to worry about taking anything critical out of service. This is part of the
    charm of having a lab to work with and test behavior in.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular passive TAP is the Throwing Star LAN TAP by Great Scott Gadgets.
    It can be found at [https://greatscottgadgets.com/throwingstar/](https://greatscottgadgets.com/throwingstar/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Throwing Star LAN TAP'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.12_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Throwing Star LAN TAP
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four connectors on the Throwing Star labeled J1 – J4, where J1 and
    J2 are the inline connections and J3 and J4 are the monitoring ports. For our
    lab, we will connect J1 to the Koyo CLICK PLC and then use a cable to connect
    J2 to the switch. Once you''ve done that, connect J3 to your laptop and use Wireshark,
    TShark, or Tcpdump to capture the traffic, as we did in the previous section.
    In this example, we will use TShark to capture and display the traffic. As you
    may recall from the *Installing Wireshark* section, TShark is an optional component
    that can be added during the installation process. Type in the following command
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Tshark -i <interface>
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to Tcpdump, the **-i** handle allows you to choose which interface
    you would like to utilize for the capture process. I will use the same interface
    we did previously here; that is, **en6**. You can see the command for this in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Throwing Star LAN TAP capture'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.13_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – Throwing Star LAN TAP capture
  prefs: []
  type: TYPE_NORMAL
- en: 'The packets that are captured will and should be the same format we saw previously.
    I am including a screenshot here so that you can compare it with the previous
    capture of Tcpdump:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – TShark packet capture'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.14_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – TShark packet capture
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see how using a TAP can be very useful for gaining insight into
    a network. If you have physical access to a switch, you can simply insert the
    TAP and start capturing the data exchange on that port. This will allow you to
    understand the protocols being used, and possibly capture unique and sensitive
    information being passed and exchanged on the network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many vendors sell LAN TAPs, but I do recommend looking at what Hak5 has to
    offer in this space. Here is a link to their store and their implant tools in
    particular: [https://shop.hak5.org/collections/implants](https://shop.hak5.org/collections/implants).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Throwing Star LAN TAP, the Throwing Star LAN TAP Pro, and
    other great implant tools such as the Packet Squirrel and the Plunder Bug LAN
    TAP. A Plunder Bug LAN TAP can be used to capture traffic in real time, exactly
    the same way as the Throwing Star LAN TAP does, to capture straight to USB-C.
    I wish to briefly mentioned Packet Squirrel as it can be left behind on engagements;
    you can recover it at a later date. We can set the payload to auto-generate PCAPs,
    which are very helpful when you want to discover possible credentials floating
    across the network. I know this strictly isn''t a TAP per se, but you can connect
    it to Hak5 Cloud C2 for management and exfil, which allows you to gain access
    to the network traffic of interest:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Packet Squirrel'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.15_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Packet Squirrel
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the payload select switch, you will see that you can launch a
    number of pre-canned exploits. You can also spend time writing your own custom
    payload.
  prefs: []
  type: TYPE_NORMAL
- en: Story time
  prefs: []
  type: TYPE_NORMAL
- en: In the fall of 2016, I traveled to California to hang out at the Hak5 office.
    They were hosting a Red Team training event called **Pentest with Hak5**. There
    were a number of us attending the training event and the group hung out with Darren
    Kitchen, Sebastian Kinne, Rob "Mubix" Fuller, and Shannon Morse "Snubs." We spent
    a week doing hands-on training, learning how to use the Wi-Fi Pineapple, LAN Turtle,
    Rubber Ducky, and deep dive Metasploit. We practiced using the tools provided
    to us and at the end of the week, we were tasked with trying to stop the Evil
    Robot from deleting all the cat images from the internet. The Hak5 team is producing
    new and interesting tools that can and should be utilized in the field. I definitely
    recommend looking at their gear and becoming familiar with it. **– ThunderCats
    2016**
  prefs: []
  type: TYPE_NORMAL
- en: So far, we've talked about portable "implant" type TAPs. However, there are
    commercial-grade TAPs that companies utilize to build out-of-band security monitoring
    networks. There are some key vendors that play in this space, with one of the
    most notable being Gigamon. These larger "active" TAP solutions can support 1G
    and 10G networks, thus duplicating all the traffic to a monitoring device. We
    will see these devices specifically in "nuclear" installations and, potentially,
    depending on corporate security budgets, energy and other notable industrial industries.
    I'm saying this as the cost of the hardware and the sheer volume of the installation
    is typically a non-starter for most organizations, hence the de facto use of SPAN/mirror
    ports for IDS passive monitoring solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed how you will encounter TAPs in some shape or form
    throughout your career, whether it be from gaining access to an out-of-band network
    while pentesting or from leaving an implant behind. It is very important to familiarize
    yourself with the different vendors in this space and to also utilize them in
    your lab. We installed a Throwing Star LAN TAP and used TShark to verify that
    we were capturing unicast communication between the Koyo Click PLC and the engineering
    software we installed in [*Chapter 2*](B16321_02_Epub_AM.xhtml#_idTextAnchor027),
    *Route the Hardware*. This has acted as a lead-up to the next section, where we
    will discuss IDS and the important role it started to play in industrial networks.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating IDS security monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have installed Wireshark, learned about and configured a SPAN/mirror
    port, and installed a "passive" TAP. This has all led to this section. For those
    of you who are "purists" that may doubt the veracity of passive monitoring, note
    that various vendor technologies have been widely adopted and are encountered
    in almost all pentest engagements. I guess there is something to be said about
    a company''s security maturity: as they engage in third-party pentests, it would
    be safe to say that these same companies invest in new monitoring tools for their
    industrial networks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will touch on the various vendors in the IDS security monitoring
    space, provide a high-level overview of what they typically detect, how they plug
    into the broader security suite of tools for events and alerting, and learn how
    to bypass these products and go undetected during a pentesting engagement. This
    is because it is quite defeating having an IDS detect your IP address and send
    an API call to a **Network Access Control** (**NAC**), and then have that NAC
    push a set of new **Security Group Tags** (**SGTs**), essentially dropping your
    MAC address on all the switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – IDS'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_5.16_B16321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – IDS
  prefs: []
  type: TYPE_NORMAL
- en: The idea and implementation of IDS has been around since the 1980s. This technology
    was driven by the need to bolster network security. Over the last 4 decades, many
    companies have either been bought, sold, or faded away. The evolution of IDS is
    very interesting and history-rich, but I want to narrow down and focus on the
    direct impact of IDS as it relates to the industrial space. In 1998, "Snort" was
    created, an "open source" network IDS. Like most technologies, "Snort" allowed
    hobbyists and other new start-up companies to leverage the rule-based engine and
    develop deeper detections. Fast forward another decade and companies such as Digital
    Bond and Industrial Defender started using custom rules tailored for industrial
    equipment and detecting malicious activities and attacks.
  prefs: []
  type: TYPE_NORMAL
- en: In 2009, a company called "Security Matters" was founded in the Netherlands,
    focusing specifically on industrial network detection. 11 years ago, in March
    2010, a paper titled "Sophia Proof of Concept Report" was published by three researchers
    working for the Idaho National Laboratory. The idea was to visually fingerprint
    industrial networks by simply listening to network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: In 2013, two companies were founded – one in the United States called "Dragos"
    and another in Switzerland called "Nozomi Networks" – both of which had products
    in the passive monitoring space. The former "Dragos" had a product called Cyberlens
    and the latter "Nozomi Networks" had a product called SCADAguardian.
  prefs: []
  type: TYPE_NORMAL
- en: In 2014, the industrial intrusion detection market exploded with a dozen or
    more companies launching such systems. The bulk came out of Israel and were championed
    by ex 8200 IDF members, though notable mentions include Indegy, SCADAFence, and
    Claroty. Sentryo was also founded in 2014 and was headquartered in France. All
    these companies are in a "protocol dissector" race, a race to see which company
    can produce the most diverse and comprehensive arsenal for asset discovery.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to deep dive into protocols and how they
    are structured, but for now, the most important take away is that IDS monitoring
    devices perform deep packet inspection and analyze the traffic for malicious behavior.
    All the systems mentioned previously track when new key elements occur, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: New MAC address detected in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New IP address detected in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New protocol detected in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New communication path detected in the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are elements you should keep in the back of your mind as you pivot through
    your customer's network from the corporate side down into the industrial network.
    Knowing that your machine will be detected and fingerprinted will help you develop
    different techniques and strategies to cover your tracks. At this point, we know
    that if these systems detect a new device and new communication, they will generate
    an event or alert, depending on the naming convention for each system. Understanding
    how the alert is handled by the IDS will be crucial; is the system integrated
    with an NAC or firewall? Will the integration cause an issue with traversing deeper
    into the network? Does the firewall block our connection attempts to lower-level
    systems? Does the NAC push SGTs to the switches it manages, ultimately dropping
    packets? All these are important questions to address when navigating a network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all is lost, however, even with systems fully tuned and deploying the latest
    packet rules, YARA rules, signatures, and integrations. Fortunately, these IDS
    monitoring systems have weaknesses in their armor that we can exploit. Here is
    a short list of exploitable tactics we can use to subvert passive monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: Node license saturation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alert exhaustion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other protocol or uncommon port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypted protocol usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Living off the land
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I would be doing a disservice if I were to leave you with the impression that
    all IDS are vulnerable to these exploits. These are simply some tactics that have
    been discovered through previous engagements and research, and they affect various
    IDS devices in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Node license saturation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This technique works by introducing numerous new nodes to the network, which
    ultimately causes the monitoring solution to hit the license node count. After
    that, you can introduce your attack strategy since the IDS solution won't detect
    and/or alert your device as you pivot deeper into the network. By doing this,
    you have effectively blinded the system from viewing your activity.
  prefs: []
  type: TYPE_NORMAL
- en: Alert exhaustion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is similar to node license saturation, but the IDS solution isn't vulnerable
    to a license count limit. Instead, it simply creates so much noise that the end
    user will never find the activity. Once again, this introduces an excessive number
    of new nodes and activity into the network, which can easily create hundreds of
    thousands of alerts in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Other protocol or uncommon port
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This works by utilizing uncommon ports to pass your attack through the system.
    Depending on the monitoring system, if the port hasn't been associated with a
    dissector, the IDS will tag the traffic as "other" and not perform any further
    analysis on it. An example would be passing HTTP over a non-standard port.
  prefs: []
  type: TYPE_NORMAL
- en: Encrypted protocol usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is specifically for referencing or utilizing port **443** or HTTPS for
    a reverse shell through the network. Communication via port **443** is typically
    allowed as it gets tagged as HTTPS communication, so no further analysis is typically
    performed on the link, allowing us to pass through undetected.
  prefs: []
  type: TYPE_NORMAL
- en: Living off the land
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most evasive tactic when it comes to performing pentests, since
    we can utilize devices and protocols that are already present in the network to
    go undetected. Very prominent attacks in the past utilized this strategy and led
    to a certain nuclear program being crippled – and yes, this is a reference to
    "Stuxnet." Gaining access to an HMI, data historian, or operator workstation allows
    us to send set point changes or configuration changes via normal methods and actions.
    Opening and closing valves from an HMI appears to be normal behavior and will
    go unnoticed in the network.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed what an IDS is and the history of the evolution
    of industrial IDS. We discussed what and how an IDS discovers and detects, and
    we also covered some methods for obfuscating our attacks from detection. Knowing
    about and utilizing these details will help you in the future during a customer
    engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what SPAN/mirroring and TAPs are, as well as the
    importance of understanding how they fit into the ICS ecosystem. Knowing what
    to look for on the network and how to interact with it is key to having a successful
    outcome. Discovering what traffic is communicating and exchanging data allows
    us to build out a network topology of the assets the client has in their network.
    Utilizing technologies such as Wireshark, TShark, and Tcpdump to listen to and
    review the traffic in real time is required during an engagement. More advanced
    technologies, such as the IDS vendors listed in this chapter, will even divulge
    auto-discovered vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, which is all about listening to a SPAN or TAP on the network,
    we will build packet captures that will allow us to analyze and dissect protocols
    being passed on the network. This is the secret sauce that IDS companies use to
    build out their product. This is an arms race for protocol dissectors. We will
    be deep diving into the packets and packet captures in the next chapter, [*Chapter
    6*](B16321_06_Epub_AM.xhtml#_idTextAnchor063)*, Packet Deep Dive*.
  prefs: []
  type: TYPE_NORMAL
