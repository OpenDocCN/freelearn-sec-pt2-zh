- en: '*Chapter 12*: I See the Future'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the previous chapter, if you are reading this in the order as it was written,
    then we have pivoted through our corporate network through the firewall and now
    have a remote desktop session on our Windows 7 machine. We have come full circle
    as we started this book by building the lab, routing virtual traffic to our physical
    **Programmable Logic Controller** (**PLC**), and building our first program. This
    Windows 7 machine is what we used to configure our first PLC program and push
    it to Koyo Click. On this adventure, we have slowly added bits and pieces to our
    lab, building our skillset and knowledge along the way. Arriving here indicates
    that the finish line is within sight. However, we have one last challenge, and
    that challenge is connecting to the process and simulating disruption. Simulation
    is the keyword here; as we've mentioned throughout this book, process disruption
    could have an extreme impact in terms of costs and potentially life-threatening
    issues, so you must tread lightly when you are at this level in your customer's
    network.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be updating the firewall that we installed in the previous
    chapter by adding a second interface to handle the local control network. We will
    then connect our Ignition SCADA to our LABCORP domain using the **Lightweight
    Directory Access Protocol** (**LDAP**) to emphasize the dangers of credential
    reuse. We will then use the packages we installed in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*, to configure a simple **File Transfer Protocol** (**FTP**)
    server and **Hypertext Preprocessor** (**PHP**) web server to simulate low-level
    access points.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Additional lab configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User interface control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A pfSense firewall, which we installed in [*Chapter 11*](B16321_11_Epub_AM.xhtml#_idTextAnchor130),
    *Whoot… I Have To Go Deep*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kali Linux VM must be open and running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3j2HgiS](https://bit.ly/3j2HgiS)'
  prefs: []
  type: TYPE_NORMAL
- en: Additional lab configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To round out our lab, we will add more segmentation by adding an interface
    to our firewall. This interface will allow us to add rules between our Level 3
    and Level 2 network segments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we need to make changes to our ESXi server. On our ESXi server,
    we will need to add an additional network adapter to our pfSense firewall. The
    following screenshot shows how I added **Level 2: Local Control** where the SCADA
    VM sits:![Figure 12.1 – New Network Adapter'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_001.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.1 – New Network Adapter
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After adding the network adapter, we must restart our pfSense firewall and navigate
    to the web interface. From here, we want to log in to the web portal, select **Interfaces**,
    and then **Assignments**, as shown in the following screenshot:![Figure 12.2 –
    Interfaces | Assignments
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.2 – Interfaces | Assignments
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will now see our newly added adapter sitting in the **Interface** list
    being addressed as **Available network ports**, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Available network ports'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](image/B16321_12_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.3 – Available network ports
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Continue by clicking the **+ Add** button and then **Save** the configuration.
    You should see that your interface has been added and given a new interface name,
    as shown here:![Figure 12.4 – OPT1 interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.4 – OPT1 interface
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once created, go back to the **Interfaces** menu. At this point, you should
    see **OPT1** in your drop-down list. Select the **OPT1** interface, as shown in
    the following screenshot:![Figure 12.5 – New OPT1 interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.5 – New OPT1 interface
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you should see the **General Configuration** screen for your newly minted
    **OPT1** interface. From here, you can enable the interface, change the description''s
    name, select IPv4 configuration, and more. From here, we want to make sure that
    we enable the interface and change **IPv4 Configuration Type** to **Static IPv4**
    as we are going to use this interface as our DHCP server for our **Level 2: Local
    Control** network segment. Here is the screenshot of the initial settings:![Figure
    12.6 – Enabling Static IPv4'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.6 – Enabling Static IPv4
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to set the static IP address for this interface. If you remember
    our initial setup, we gave the **Level 2: Local Control** network segment a subnet
    of **192.168.2.0/24**. I am going to set our interface to **192.168.2.1/24**,
    as shown here:![Figure 12.7 – Static IPv4 address'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.7 – Static IPv4 address
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Save** button and then the **Apply Changes** button to commit the
    new interface settings. After this, we must set up the DHCP server for this new
    interface by navigating to **Services** | **DHCP Server** from the top menu bar,
    as shown here:![Figure 12.8 – DHCP Server services
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_008.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.8 – DHCP Server services
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Similar to our initial configuration for our LAN interface, we are going to
    configure it for OPT1\. Go back to [*Chapter 11*](B16321_11_Epub_AM.xhtml#_idTextAnchor130),
    *Whoot…. I Have To Go Deep*, for a refresher; the only thing I will add here is
    the IP address pool, which is picking a range from **192.168.2.10** to **192.168.2.254**,
    as shown in the following screenshot:![Figure 12.9 – DHCP Server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.9 – DHCP Server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, we have to create a vulnerable *any*:*any* rule in our firewall to
    allow our new interface to communicate northbound. Navigate to **Firewall** |
    **Rules**, as shown here:![Figure 12.10 – Firewall | Rules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.10 – Firewall | Rules
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From here, click the **Add Rule** button. You will be presented with a screen
    that will allow you to edit a new rule. Set **Action** to **Pass**, **Interface**
    to **OPT1**, **Address Family** to **IPv4**, and **Protocol** to **Any**, as shown
    here:![Figure 12.11 – Any rule
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.11 – Any rule
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Save** button and then **Apply Changes**. After that, try and ping
    various elements in your network. You should be able to ping the Corp Domain Controller
    on the WAN interface from our SCADA VM, and our Windows 7 host should be able
    to ping the SCADA VM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have tested that you can route between networks, we are going to
    connect our Ignition SCADA to our LABCORP domain.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To connect our Ignition SCADA to our LABCORP domain, we will perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will need to log in too our Ignition SCADA interface. Once we have
    established a connection, navigate to the **Config** icon and then select **Users,
    Roles** from under the **SECURITY** section, as shown here:![Figure 12.12 – Users,
    Roles
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.12 – Users, Roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Selecting the **Users, Roles** link will bring up the **Users Sources** configuration
    screen. From here, we are going to select the **Create new User Source…** link,
    as shown here:![Figure 12.13 – Create new User Source
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_013.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.13 – Create new User Source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we have clicked the link to create a new user source, a list of credential
    source options will be presented. We want to focus specifically on the **Active
    Directory** options. Here, we have one traditional and two hybrid sources. I am
    going to use the **AD/Internal Hybrid** source as it allows me to leverage the
    auth mechanics of AD and maintain group access and control granularity inside
    Ignition. You can see these options in the following screenshot:![Figure 12.14
    – New sources
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_014.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.14 – New sources
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you have selected the **Next >** button, a new screen will be presented,
    allowing us to configure the elements of our **AD/Internal Hybrid** source selection.
    We are going to provide the source with a name; I used the name **Operators**
    here. Next, scroll down to **Active Directory Properties** and fill in the required
    items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Domain**: **labcorp.local**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AD Username**: **operator1**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AD Password**: **Password1**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain IP Address**: **172.16.0.2**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LDAP port #**: **389**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows these configuration fields:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Active Directory Properties](image/B16321_12_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 12.15 – Active Directory Properties
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After updating the fields and saving the configuration, Ignition SCADA will
    use the configuration to reach out to the domain controller and perform a user
    search. This will build a list of domain users who can be leveraged to access
    the Ignition SCADA platform. See the following list of users that Ignition pulled
    in from the domain controller that I created in [*Chapter 10*](B16321_10_Epub_AM.xhtml#_idTextAnchor112),
    *I Can Do It 420*:![Figure 12.16 – Domain users
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.16 – Domain users
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we need to add the role of **Administrator** and assign it to our **Operator1**
    user, as shown here:![Figure 12.17 – Roles
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_017.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.17 – Roles
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After creating the **Administrator** role and adding it to the **Operator1**
    user account, we are going to update the **Identity Providers** list by creating
    a new identity provider, as shown here:![Figure 12.18 – Identity Providers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_018.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.18 – Identity Providers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we click the **Create new Identity Provider** link, we will be presented
    with a screen with multiple sections to configure the new identity. We want to
    give our new identity provider a name here. I used **ActiveDirectory** as it makes
    for a clear reminder. Then, I changed **User Source** to **Operators**, as shown
    here:![Figure 12.19 – Basic Details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_019.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.19 – Basic Details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After saving your configuration updates, you should see the newly created provider
    in the list, as shown here:![Figure 12.20 – Identity Provider added
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_020.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.20 – Identity Provider added
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, we want to change our **General Gateway Security Settings**. We want
    to switch **System Identity Provider** to **ActiveDirectory**, as shown here:![Figure
    12.21 – Switching Identity Provider
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B16321_12_021.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.21 – Switching Identity Provider
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we must test our **operator1** domain user by logging in to the Ignition
    SCADA user interface with the domain credentials that we discovered in [*Chapter
    10*](B16321_10_Epub_AM.xhtml#_idTextAnchor112), *I Can Do It 420*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.22 – operator1 login'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.22 – operator1 login
  prefs: []
  type: TYPE_NORMAL
- en: After connecting and testing our **operator1** credentials, you should have
    a better awareness of the pitfall that many organizations suffer from with widespread
    credential reuse. If you find credentials on a domain-connected system, there
    is a high likelihood that those credentials will help you gain access to different
    systems inside the network.
  prefs: []
  type: TYPE_NORMAL
- en: Storytime
  prefs: []
  type: TYPE_NORMAL
- en: During an engagement, I was able to gain a foothold into the network by leveraging
    a domain service account that was used for provisioning new computers and joining
    them to the domain. For some reason, the Ansible-like script failed to remove
    the service account from the newly provisioned system and, to my surprise, it
    failed to remove the service account from all computers. This service account
    was a unique find as it allowed me to navigate and jump around the system, but
    its most interesting use was the access rights it had to the domain information.
    I used this account to analyze every user in the domain, as well as understand
    their titles and what machines they owned. This was very useful for narrowing
    down my search for staff members that would have direct access to the **Distributed
    Control System** (**DCS**). After quickly discovering the specific lead operations
    account and the computer that this individual owned, I used **Remote Desktop Protocol**
    (**RDP**) to navigate to the machine and then dumped the credentials, similar
    to what we did in [*Chapter 10*](B16321_10_Epub_AM.xhtml#_idTextAnchor112), *I
    Can Do It 420*. After gathering the user's credentials, I was able to reuse them
    to gain a foothold through a saved putty connection stored on their desktop.
  prefs: []
  type: TYPE_NORMAL
- en: PHP setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will round out this lab configuration section by creating and updating our
    **ftp** folder and configuration file. We installed **vsftp** in [*Chapter 1*](B16321_01_Epub_AM.xhtml#_idTextAnchor013),
    *Using Virtualization*, and now we are going to use it. We will perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a public folder for our **ftp** server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo mkdir -p /var/ftp/pub**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Change the ownership of our public folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo chown nobody:nogroup /var/ftp/pub**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo chown -R ftp /var/ftp/pub**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a backup of our original **vsftp** config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo rm /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new configuration file using vulnerable settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo echo "listen=NO" > /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "listen_ipv6=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anonymous_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "local_enable=NO" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "write_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anon_upload_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anon_mkdir_write_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anon_root=/var/ftp/" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "no_anon_password=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "hide_ids=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anon_umask=022" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "anon_other_write_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "dirmessage_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "use_localtime=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "xferlog_enable=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "connect_from_port_20=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "pam_service_name=vsftpd" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**sudo echo "utf8_filesystem=YES" >> /etc/vsftpd.conf**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Spin up a PHP server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo systemctl restart vsftpd**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**echo ''Finished -Running Webserver''**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cd /var/ftp/pub**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**php -S 0.0.0.0:8000**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once implemented, we will have a fully baked FTP and a PHP web server running.
    As simple as these tools might seem, they truly do replicate real-world installations
    and setups. It is very common to find FTP servers inside the industrial network
    as these are typically used to pass control software updates, patches, and even
    firmware around. Finding these servers is key as typically, they allow read and
    write access, which we can leverage to escalate our privileges at this level in
    the network. In the next section, we will build a tunnel and use proxy chains
    to gain access to the **User Interface** (**UI**) control of the SCADA network.
  prefs: []
  type: TYPE_NORMAL
- en: User interface control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, I know that we installed a SCADA system into our lab for testing purposes,
    and yes, we have been beating up on Ignition SCADA throughout this book, but know
    that performing these actions and practicing these attacks translates into real
    industry installations. At the core of all SCADA and **Distributed Control Systems**
    (**DCS**) lies the same underlying principle:'
  prefs: []
  type: TYPE_NORMAL
- en: Take in the input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run logic and routines against the input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deliver the output to the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This means that even though countless companies are producing SCADA and DCS
    software, they all function the same way. The following are a few systems that
    you may see:'
  prefs: []
  type: TYPE_NORMAL
- en: Weatherford **Cygent** SCADA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schneider Electric **Telvent**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emerson **Zedi Solutions**, **Ovation**, **Progea**, and **DeltaV**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aveva **Citech** SCADA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honeywell **Experion**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ABB **SCADAvantage**, **Symphony**, and **800xA**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GE **Cimplicity**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SurvalentOne** SCADA'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list goes on, and the one supplied here is a generalized list of systems
    you will come across. There is still a healthy mixture of older legacy systems
    still being utilized in various parts of the world. It has often been the motto
    *If it isn't broken, don't fix it*, which means if the process is running and
    generating revenue, then there is no need to replace the system. So, gaining a
    working knowledge of these systems will allow you to leverage them further in
    your pentesting career. In this section, we will be leveraging the knowledge that
    we gained in the previous chapter. We will pivot deeper into the network and go
    down to our workstation, which has access to our SCADA system. We will then exploit
    a credential reuse attack to gain access to the user interface of the SCADA system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows our attack path to the SCADA user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23 – Attack path'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.23 – Attack path
  prefs: []
  type: TYPE_NORMAL
- en: 'Using a dynamic SSH tunnel and running **xfreerdp** via proxy chains, as we
    covered in [*Chapter 11*](B16321_11_Epub_AM.xhtml#_idTextAnchor130), *Whoot….
    I Have To Go Deep*, we can establish a remote connection to our SCADA host. As
    a quick refresher, running the following command will build our dynamic SSH tunnel:'
  prefs: []
  type: TYPE_NORMAL
- en: ssh -D 9000 -fN operator1@172.16.0.4
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we will want to run **xfreerdp** with **proxychains** by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: proxychains xfreerdp /u:operator1 /p:Password1 /v:172.16.0.7
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, you will find that the workstation is typically
    logged in to the SCADA system or at least has the web portal up and running for
    easy access. The worst case is that there is a link sitting on the desktop. Now,
    this is certainly not *hacker-sexy* as it were because we are merely leveraging
    poor security practices, bad policies, and broken firewall rules. However, the
    entire point of pentesting a system is to help the customer find flaws in their
    system, as well as leverage, exploit, and document them. More often than not,
    you will find *reusable credentials*, default creds, or vendor commissioned credentials
    as a point of entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once our remote session has been established, use our **operator1**/**Password1**
    credentials to access our Ignition console, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – Credential reuse'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.24 – Credential reuse
  prefs: []
  type: TYPE_NORMAL
- en: 'Once inside the system, you should make note of the equipment and controls
    that this SCADA solution has access to. We want to build our situational awareness
    and document the findings for reporting purposes. We will talk about this in more
    detail in the next chapter. Here is a quick checklist of items to look for:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the process that this SCADA system controls?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What assets have read/write access?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How is the security set up for this system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there connected databases, such as data historians?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding how much access there is can determine the level of impact you
    might have on an organization. At the user interface access level, most people
    default to the fact that you have ultimate control over the process. Yes, this
    is a scary scenario where attackers could shut down and disable a process or a
    plant but think about deeper and broader scenarios. If the system is domain-connected,
    just like our SCADA system is, what if the attacker removed the configuration?
    This would mean that no one from the domain could authenticate to the SCADA system
    to make changes. This would create havoc as the process is still running but now
    there is a loss of control.
  prefs: []
  type: TYPE_NORMAL
- en: You might be saying to yourself, *If I can shut down the process, why do I care
    about loss of control?* This is a good question and you would be right, but most
    of these operations can still be operated locally and manually. When incidents
    like this occur and, funnily enough, they occur more often than you would think
    – not from threat actors but more from misconfigurations – the operators would
    disconnect remote access and run the process manually. Look at the following screenshot;
    how many different items could you upgrade, downgrade, restore, or change to cause
    havoc in the system?
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25 – User interface configuration access'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_025.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.25 – User interface configuration access
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Once again, just because you can gain this level of access doesn't mean that
    you should implement or change anything. These types of actions can land you in
    prison.
  prefs: []
  type: TYPE_NORMAL
- en: The reasoning behind addressing abstract and out-of-band actions is solely for
    reporting purposes. It might be the case that you come across a client that has
    gone to great lengths to implement and deploy security measures to thwart your
    actions. You may not be as lucky to gain the full control and access that we have
    shown in this lab, so you will need to adapt, think on your feet, and dig deep
    to find points of risk to report on. In the next section, we will explore getting
    deeper access into the SCADA server by utilizing scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Script access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed the level of access and control that we
    can perform by gaining UI control. In this section, we are going to look at trying
    to gain deeper access into the SCADA server, which will allow us to bypass the
    UI control and communicate directly with the physical equipment. In our case,
    this would be Koyo Click.
  prefs: []
  type: TYPE_NORMAL
- en: 'From our workstation, we want to test whether our SCADA server is running some
    sort of file share that is open for easy intranet file transfers. Run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: ftp 192.168.2.11
  prefs: []
  type: TYPE_NORMAL
- en: 'This will bring us to a login prompt. I tend to always check whether a service
    is running with anonymous credential access. In this case, we will use the username
    **anonymous**. As you can see from the **230 Login successful** response, we have
    anonymous access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.26 – FTP connection to SCADA'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_026.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.26 – FTP connection to SCADA
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will want to switch to the **pub** folder and check our access rights.
    We can quickly do this by creating a folder inside the **pub** folder using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: mkdir images
  prefs: []
  type: TYPE_NORMAL
- en: 'And like that, we know that we have write access to this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.27 – Write access to the pub folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_027.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.27 – Write access to the pub folder
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we are cheating a little bit as we did configure this FTP server in the
    first section of this chapter, but I want you to get a feel for how the flow works
    and go through the motions of accessing the system at this level. We know that
    we have a PHP server listening on port **8000** of the SCADA server, so on our
    compromised workstation, we can browse to that port and see the server hosting
    data. Now, this is a development server, which means that there will be *no* native
    directory listing like that of Apache or **Internet Information Services** (**IIS**),
    so don't be alarmed when you encounter a **Not Found** message. This can be corrected
    by simply adding a blank **index.php** file to the root folder or by creating
    a dedicated PHP file that performs the directory listing for you, which is outside
    the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to upload a PHP **webshell** to our FTP server. When using Kali
    Linux, by default, there are **webshells** stored under the **/usr/share/webshells**
    folder and if you view a listing of that folder, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.28 – webshells'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_028.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.28 – webshells
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to copy the PHP **php-reverse-shell.php** file to our Kali working
    directory and then perform some slight changes. If you scroll partway down the
    file, you will come across the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.29 – php-reverse-shell.php'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_029.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.29 – php-reverse-shell.php
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we want to change the **$ip** information and the **$port** information
    so that it matches our Kali Linux host IP address and port of our choosing. Once
    you have changed this information, we are going to get this file onto our Windows
    7 workstation. As a refresher, I always use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: python3 -m http.server
  prefs: []
  type: TYPE_NORMAL
- en: 'I have done this to generate a temporary server that I can navigate to and
    pull down files. Once you have placed your **php-reverse-shell.php** file onto
    the victim''s workstation computer, you must run the following command to get
    the file into the FTP server on the SCADA box:'
  prefs: []
  type: TYPE_NORMAL
- en: put php-reverse-shell.php
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything worked correctly, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.30 – PUT php-reverse-shell.php'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_030.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.30 – PUT php-reverse-shell.php
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we want to make sure that we have a listener set up on Kali by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: nc -nvlp 4444
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to change your port number so that it matches the port that you configured
    in the **webshell** file. After setting up the listener, navigate back to the
    workstation and browse to the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.31 – Navigating to the reverse shell'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_031.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.31 – Navigating to the reverse shell
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go back to your Kali listener, you should see that you have a new shell,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.32 – New reverse shell'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16321_12_032.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.32 – New reverse shell
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a reverse shell and we are running as root. From here,
    we can simply copy in the scripts that we wrote in [*Chapter 8*](B16321_08_Epub_AM.xhtml#_idTextAnchor097),
    *Protocols 202*, and exploit the physical PLC by turning the lights ON and OFF.
    In a professional engagement, when we gain this level of access, we can load in
    tools to discover equipment that the SCADA/DCS system has connectivity to. Depending
    on the level of engagement, you may be asked to go deeper and determine what hardware
    can be comprised.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: I do caution that like the UI control, making changes and being active at this
    level of the network can have adverse effects that may cause disruption, damage,
    and possibly death. Even if your client encourages you to go deeper, I would caution
    you to abstain as the byproduct of change is seldom discovered until it is too
    late.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have full access to the network, from top to bottom. Now,
    we can move and push any changes and configurations we want. We completely own
    the system, and that is part of the rush that comes with the career of a pentester.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we segmented our lab network further by adding a new interface
    to our firewall. We then utilized the skills we learned about in [*Chapter 11*](B16321_11_Epub_AM.xhtml#_idTextAnchor130),
    *Whoot…. I Have To Go Deep*, to gain a dynamic shell and launch a remote desktop
    session with proxy chains to our workstation victim. After this, we discussed
    the various SCADA and DCS systems that we could encounter in our pentesting journeys.
    We reused various credentials to exploit the UI of our SCADA system before capitalizing
    on a misconfigured FTP server and, in turn, gaining a reverse shell back to our
    attacking box. We exploited the system right up to the control hardware and in
    doing so, discussed the pitfalls of going deeper into the control plane. Gaining
    this deep of a foothold should suffice for 99.99% of the engagements that you
    will be part of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Understanding the technology and the ramifications and outcome of going deeper
    will be an important addition to the out brief report. We will do this in the
    next chapter, and this is the final stage of all pentesting engagements: the reporting
    phase.'
  prefs: []
  type: TYPE_NORMAL
