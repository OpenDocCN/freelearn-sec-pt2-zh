- en: Secure Network Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter you learned about the basic concept of infrastructure
    security and built a strong foundation for the different areas required to understand
    the need for information security based on current security threats that exist
    in cyber space.
  prefs: []
  type: TYPE_NORMAL
- en: The internet has grown dramatically and has reached a stage where everyone must
    be connected in order to exchange information. Imagine that billions of people
    with internet enabled devices are directly connected to the internet, and some
    sort of unsecured network becomes a target for cyber criminals.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we describe how to secure a network and look at the significance
    of network security. In a layered fashion, we will also discuss methods and approaches
    to building a secure network based on business aims.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Access control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network management and security design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardening your TCP/IP stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DoS and DDoS attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ping sweeps and port scans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-factor authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an application or network owner, we should know who or what is accessing
    our network resources. If we do not know or do not keep track of our activity
    and instead just assume what is happening on the network, we cannot guarantee
    data security and the safety of end-users.
  prefs: []
  type: TYPE_NORMAL
- en: We need to start with the basics of security. This begins with understanding
    what's on our network.
  prefs: []
  type: TYPE_NORMAL
- en: Asset classification and physical security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most basic (but often most overlooked) element of network security involves
    keeping hardware protected from theft or physical intrusion.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, the first thing we need to classify is our assets. Once
    data classification is identified, network servers, network switches and other
    core network components should be protected in well-guarded facilities. Cages
    and racks should be locked and permission should be granted based on requirements
    with proper approval and proper security guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication, authorization, and accounting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Authentication, authorization, and accounting** (**AAA**) is a function for
    centrally and securely controlling access to IT infrastructure resources. This
    is achieved by enforcing policies and providing audit functionality by keeping
    track of activities performed on a given device. In simple terms, authentication
    can refer to identifying a user with a username and password. The AAA server matches
    user''s authentication credentials against credentials setup and stored in a back-end
    database. The authorization process validates whether the user has the authority
    to do a specified task or not. This can include accessing or executing any command
    on a given resource. The final piece in the AAA function is accounting, which
    records all the activity on resources consumed by a user during access.'
  prefs: []
  type: TYPE_NORMAL
- en: AAA functions are always offered by an exclusive centralized AAA server, a software
    program that performs all these functions. A current standard by which network
    access servers interface with the AAA server is the **Remote Authentication Dial-In
    User Service** (**RADIUS**) or **Terminal Access Controller Access Control System** (**TACACS**)
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: TACACS can be further connected to domain controller security groups, which
    gives elevated security access. You will have to create two security groups on
    domain controller, for example, *RO* and *RW*. After one or two human security
    approvals, your user account will be automatically added to the *RW* group. This
    provides a way to dynamically request administrative (admin) access to production
    machines. After the specified time, the account will be removed from there automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Network management and security design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For managing network and networking assets, there must always be a centralized
    secure management utility subnet for services such as DNS, DHCP, NTP, AAA, and
    network management. By defining boundaries, it becomes much easier to troubleshoot
    problems with the services when they are in known locations with a few well-known
    access paths and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Network segmentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of us focus on front door security and threats coming from the outside
    world by putting some sort of firewall on the perimeter. In reality, relying upon
    perimeter security alone does not protect your network and information data. Doing
    this is like putting money into a bank which depends on one armed guard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The concept of *segmentation* is based on ancient history, when Roman empires
    formed and fought units based on the ethnic and geographic identity of captured
    warriors. The idea was very simple: groups of warriors were formed on the basis
    of their similar backgrounds so that they could bond with each other and ultimately
    become better fighting units.'
  prefs: []
  type: TYPE_NORMAL
- en: Resource consolidation, virtualization and network consolidation can be beneficial
    when focusing on infrastructure security. The consolidation of network infrastructure
    with improved security has been a crucial part of the segmentation strategy. A
    legacy model of distributed applications and services with complex designs are
    now migrating to shared physical infrastructure or cloud networks that require
    separation to maintain strong isolation. Similarly, networks have gone through
    abrupt changes over the past few years with the introduction of virtualization, **Software
    Defined Network** (**SDN**), containers, wireless connectivity, hosting services,
    Data Center infrastructure and the **Internet of Things** (**IoT**). Network separation
    can be achieved by implementing Layer-2 technologies such as VLANs, Layer-3 technologies
    such as **virtual routing and forwarding** (**VRF**) for routing separation, and
    zone based firewalls for segment separation.
  prefs: []
  type: TYPE_NORMAL
- en: In today's cyber security environment, you have to assume that you are not 100%
    immune to these threats and something malicious might already be on a network. Using
    a multi-layer approach, network segmentation makes it more difficult for an attacker
    to launch an attack throughout your entire network. It also adds an additional
    layer of deterrent for insiders because you can isolate valuable data and resources
    from insider attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a network design point of view, networks with limited segmentation, a
    high number of users and various applications typically experience access control
    issues. Every user group has access to pretty much every application in the enterprise
    network. All departments can connect to all other resources on a network, as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3a6e366a-700a-4789-bfaf-38912b41c9f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Segmentation strategy steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Segmentation design and strategy should be based on the critical asset value
    or resource, not simply on network boundaries-based isolation. This design strategy
    should start as a high level network design which segregates the various zones
    through traditional network boundaries such as DMZ, data center, virtual cloud
    and campus network. It then consistently drills into each zone to provide isolation
    between the applications within it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5fe10efc-47fb-49d4-bc3a-b2af1909ea02.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Virtual LAN (VLAN)**: A flat local area network segment forms a single broadcast
    domain. This means that if a user broadcasts information on a LAN, the broadcast
    will be heard by all other users on the same LAN. To limit the broadcast and to
    separate users and applications, the LAN segment can be divided into logical segments
    called **VLAN **while still sharing the same common wired physical network. In
    the following diagram, you can refer to the first VLAN as VLAN_1, which is dedicated
    to the finance team; VLAN_2 is dedicated to HR and VLAN_3 to payroll. All VLANs
    share the same physical media but are logically separated in order to limit broadcast:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/34fb2433-6ad2-4521-ab18-14af6125e1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following diagram, each color represents a different VLAN. This diagram
    demonstrates what the connection will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/214f9ba7-e644-4df2-b3df-ffba8aea161e.png)'
  prefs: []
  type: TYPE_IMG
- en: The red cable represents VLAN1, the violet cable represents VLAN2 and the yellow
    cable represents VLAN3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual Routing and Forwarding** **(VRF)**: Virtualization is a technique
    which has the great advantage of hiding the physical characteristics of computer
    resources shared with multiple operating systems. An end user interacts with those
    resources without even knowing the common shared resources. VRF is a technique
    for **Internet Protocol** (**IP**) network routers that allows multiple instances
    of a routing table to exist in a router and work simultaneously. VRF also increases
    network security, which is the reason why these VRF resources cannot talk to each
    other unless they talk via a separate Layer-3 device. The main advantage of VRF
    is that they can have overlapping IP addresses without having any conflict. For
    example, in an MPLS network, multiple customers are using the same IP range and
    service provider resources are shared. VRF provides the flexibility to use the
    same IP space for multiple customers and security as well. As shown in the following
    diagram, there are four VRFs and all are using the same IP range on the same router:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/27582320-33b4-4d51-a237-25760d994ac9.png)'
  prefs: []
  type: TYPE_IMG
- en: Network protection consideration and design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LAN protection revolves around Layer-2 protection on OSI models. All layers
    of TCP/IP have got its own security threats and vulnerabilities. A firewall is
    one very simple way to protect a LAN, but this only protects traffic which is
    coming from outside. Layer-2 attacks are sources from *inside* a LAN.
  prefs: []
  type: TYPE_NORMAL
- en: It is difficult for an outsider to achieve a Layer-2 attack, but never underestimate
    the power of insiders. Insiders can do more damage than outsiders by launching
    malicious attacks from inside the network. The proactive deterrence for this would
    be to keep track of your logs and setup your IDS to detect such attacks!
  prefs: []
  type: TYPE_NORMAL
- en: Before going deeper into this topic, let's get an understanding of how network
    switches work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us examine a topology in a VLAN segment: A, B & C are three hosts which
    are connected to three different ports on a single switch. When host A sends data
    to host B through port `Fastethernet0/1`, the switch learns that host A is located
    on port `Fastethernet0/1` and records mapping into the **Content-Addressable Memory**
    (**CAM**). If host B does not initiate a connection and does not send even a single
    packet, then the switch is not able to locate host B and will therefore flood
    the packet originated by A to all VLAN ports. Learning by flood is the basic behavior
    of the switch which is carried out to discover hosts on a network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/159b11c3-b9b9-4820-a9a2-880ad140c2a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the known major Layer-2 attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CAM OVERFLOW / MAC FLOODING**: Switches store MAC addresses in a CAM table.
    Memory size varies according to each model and capacity, but memory size is limited.
    It is very possible to flood the network switch with fictitious MAC address data.
    The switch, not knowing how to handle the excess data, falls into a trap and starts
    acting as a HUB. After the attack, you can use a program like Wireshark or any
    other generic sniffer to listen to all the traffic on the network, because the
    switch will be forwarding data out of all other ports. Macof is a member of the
    `dsniff` suit tool set and is mainly used to flood the switch on a local network
    with MAC addresses. Macof generates thousands of packets per second, and each
    packet is sent random source and destination IP addresses. A source and destination
    MAC address is also different for each Ethernet frame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CAM Flow Protection and Defensive Measures**: Port security features can
    be used to protect a network against this kind of attack, which limits the number
    of MAC addresses on an interface. Cisco is built into the IOS, and this allows
    you to shut the port down if the switch receives more than a certain number of
    MAC addresses on one port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nexus 3064 switch can hold 128k entries. Total MAC addresses learned by this
    switch can be viewed using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1363132c-b03b-454c-bdce-8d562b8076dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cisco IOS switch 2960 can hold 8k entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fa21c692-f226-4d26-bda0-419680df252f.png)'
  prefs: []
  type: TYPE_IMG
- en: As soon as you launch the `macof` attack, available addresses become zero and
    the switch starts acting as a HUB.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can limit the number of MAC addresses learned on this switch interface
    and define the violation action. Keep in mind that this is a simple step to secure
    the user port, but in the case of data center environments where virtualization
    is used, more MAC addresses are expected to be learned on the same switch port:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3149a86e-6568-48d0-8943-78e1870b433b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a virtual environment and multiple MACs are being learned on the same
    interface. This is not an attack but you can still limit the number of MACs in
    accordance with the design guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e295cea8-3fcc-44cd-b86a-dc128f4280bd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**ARP SPOOFING: Address Resolution Protocol** (**ARP**) is a protocol or process
    used for finding an unknown MAC address for a known IP address. All network devices
    that need to communicate on the network broadcast ARP queries in the system to
    find out other machines'' MAC addresses. In simple terms, for any communication
    on an IP network, we need to know the MAC address of the next hop in order to
    place the packet on the wire.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of ARP messages that can be sent:'
  prefs: []
  type: TYPE_NORMAL
- en: ARP request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARP reply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In an ARP request message, the sender broadcasts the ARP request to all computers
    in a subnet in order to discover the MAC address of the targeted IP address.
  prefs: []
  type: TYPE_NORMAL
- en: In an ARP reply, the target system sends the reply to the sender, giving the
    MAC address.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the target spoofed may be the internet gateway router. The attacker
    spoofs the router''s MAC address. To divert traffic, you will have to put the
    same IP on the other device. However, this will cause IP duplication and may alert
    the network administrator. There are very few ARP requests transmitted by a router
    because the ARP caching time for such a device may be huge (for example, default
    CISCO router configuration takes eight hours). All of this magic happens with
    gratuitous ARP, which automatically causes ARP to broadcast its MAC address to
    the entire network. In this case, attackers will send **Gratuitous ARP** (**GARP**)
    to poison the ARP table in a victim''s machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c70826fa-2114-40ca-ba65-81d96f7b0f6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding diagram demonstrates the normal process for learning the MAC
    address of the gateway. A victim''s host machine sends ARP requests to the default
    gateway `192.168.1.1` and gets a response which contains the MAC address `CC:CC:CC:CC:CC`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1e9c2144-a1fe-4f70-9735-5683206dceaf.png)'
  prefs: []
  type: TYPE_IMG
- en: Attackers send G-ARP, which tells the victim that they now own the default gateway
    `192.168.1.1` and the source IP `192.168.1.2`. This is where the game begins.
    The communication can now be hijacked with the sniffer. This will enable the victim
    and the internet gateway to exchange traffic through the attacker's PC without
    notifying them.
  prefs: []
  type: TYPE_NORMAL
- en: '**WAN protection**: WAN is a geographically distributed connectivity that connects
    multiple networks. A typical WAN may consist of a connection to an internet service
    provider''s multiple locations, internet connection between ISPs, connectivity
    to branch offices, collocation facilities, cloud services, public internet connectivity,
    and other locations. For example, MPLS WAN, INTERNET WAN, PRIVATE LEASE LINES,
    IPLC CIRCUITS, and DARK FIBER CIRCUITS.'
  prefs: []
  type: TYPE_NORMAL
- en: To protect confidentiality and integrity for data travelling over the WAN, we
    need to ensure data is encrypted. Over internet VPNs, IPsec and SSL encryptions
    can provide comprehensive protection.
  prefs: []
  type: TYPE_NORMAL
- en: All MPLS service providers use the term **Virtual Private Network** (**VPN**),
    indicating some level of security. But in reality, MPLS does not provide encryption
    by default. Instead, technology allows service providers to keep the separate
    routing tables for each customer. Attackers cannot directly gain access to an
    MPLS customer network, but they might gain access to the core network. The lack
    of inbuilt encryption would mean that the attacker could sniff data and analyze
    it. Just in case the core network is compromised, IPsec offers additional security
    over an MPLS network.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7b2da8b1-0d2f-4912-af7d-23f9855456f2.png)'
  prefs: []
  type: TYPE_IMG
- en: When planning for encryption, we need to decide which layer we want to encrypt.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why encrypt Layer-1?**'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypting IP data traffic at higher layers can significantly increase the latency
    between two network nodes, while Layer-1 encryption gives extremely low latency
    and high throughput. Keeping in mind the rise of 100 Gigabits (and beyond) network
    connectivity, the desired results can be achieved by encrypting data on Layer-1\.
    The complexity of the network and encryption management also increases with higher-layer
    encryption, more devices to manage, and complex encryption key management. Optical
    encryption includes the encryption and decryption process together with the key
    distribution between the transmitter and receiver.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major use case is **data center interconnect** (**DCI**) over dark fiber:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/778976d0-4974-452e-8c03-e9ad019c498e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Why encrypt Layer-2?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'An Ethernet encryptor that encrypts the network at Layer-2 is the best option
    when it comes to securing an Ethernet based VPN. The tapping of networks is a
    common and unpreventable practice. Layer-2 encryption is hardware processed which
    operates at almost full wire speed and is adaptable to an L2 network (point-to-multipoint
    and multi-mode links):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f35b0a72-7a18-4e6a-bcf1-046985b3de6d.png)'
  prefs: []
  type: TYPE_IMG
- en: MACsec offers you Layer-2, hop-by-hop encryption. Every hop device will encrypt
    and decrypt packets, but the IP and IP payload will be encrypted. If you look
    at a packet in transit, you will only see the Layer-2 header and nothing else.
    MACsec is the IEEE 802.1AE standard for authenticating and encrypting packets
    between two MACsec capable devices. Not all switches support MACsec. Check switch
    capabilities before implementing MACsec.
  prefs: []
  type: TYPE_NORMAL
- en: TrustSec uses AES-128 **GCM and GMAC** (**Galois/Counter Mode Advanced Encryption
    Standard 128**). MACsec can be configured between hosts - in this mode, the switch
    is called **Downlink MACsec**. MACsec also works between switches - this mode
    is called **Uplink MACsec**.
  prefs: []
  type: TYPE_NORMAL
- en: 'For downlink mode, we need to have NIC, which helps MACsec or Cisco to reply
    on any connected software:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dd388e5c-3f34-4d84-8cfe-3f54731acb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Why encrypt Layer-3?**'
  prefs: []
  type: TYPE_NORMAL
- en: Public internet is cheap and more flexible. Keeping in mind that public internet
    is not safe, IPsec provides a lot of flexibility to encrypt data and to provide
    a framework to maintain confidentiality, integrity, authentication, and anti-replay.
    IPsec offers a  standards based end-to-end encryption solution that is agnostic
    to the underlying physical network infrastructure. IPsec also has several limitations.
    This includes the fact that it does not support non-IP traffic flows, including
    data center storage protocols such as **Fiber-Channel** (**FC**).
  prefs: []
  type: TYPE_NORMAL
- en: 'IPsec encryption takes place at the network layer (Layer-3) in the OSI model.
    Layer-2 and Layer-1 encryption technologies provide bump-in-the-wire with 100%
    throughput at line rate and far lower latency than IPsec VPNs, which operate at
    Layer-3\. Layer-3 encryption is a better choice for low-bandwidth environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6d758c62-b58d-4f26-9284-eefaf70f299f.png)'
  prefs: []
  type: TYPE_IMG
- en: Hardening your TCP/IP stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any given operating system, tuning of the TCP/IP stack can be performed
    by the system administrator. Changing the default values of TCP/IP stack variables
    provides another layer of protection and helps you to secure your hosts in a better
    way.
  prefs: []
  type: TYPE_NORMAL
- en: This is all about determining and making decisions about how many connections
    the server can maintain in a half-open state before TCP/IP triggers SYN flooding
    attack protection. This simply means that to configure the threshold value of
    the TCP connection, requests must be exceeded before SYN flood protection is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameters can be adjusted on an operating system level to tune
    TCP/IP stacks. These are not only applicable to the operating system, but also
    to network devices such as firewalls and load balancers, which allow you to fine
    tune TCP stacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TcpMaxHalfOpen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TcpMaxHalfOpenRetried`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TcpMaxPortsExhausted`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TcpMaxConnectResponseRetransmissions`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss DoS attacks in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: DoS and DDoS attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Denial-of-Service is an attack in which online services do not respond to
    connections from legitimate hosts due to their resources being overused by malicious
    requests. This attack becomes a **Distributed Denial-of-Service** (**DDoS**) attack
    when it comes from multiple sources and it becomes difficult to block the source
    with IP or Geo-location.
  prefs: []
  type: TYPE_NORMAL
- en: 'DDoS attacks usually take the form of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Volume-based attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application layer attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low-rate attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volume-based attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Volume based attacks are by far the most common type of DDoS attacks.
  prefs: []
  type: TYPE_NORMAL
- en: According to Arbor Networks, 65% of DDoS attacks are volumetric in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Volume-based attacks are characterized by an excessive amount of traffic (sometimes
    in excess of 100 Gbps). They do not mandate large amounts of traffic to be generated
    by one location or one source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of such an attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NTP Amplification**: The NTP amplification attack is a volume based DDoS
    attack in which an attacker exploits the publicly accessible **Network Time Protocol**
    (**NTP**) server functionality. This command, called `monlist`, sends the requester
    a list of the last six hundred hosts that were connected to the queried server.
    So, for a small query, response data is very high. Let us consider the fact that
    the ratio of query:response is 1:50\. This means that attackers can generate 50
    Gpbs of traffic using a NIC of 1 Gbps, and the same thing will be replicated across
    multiple sources. This can cause multiple terabits of traffic in a network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following diagram, you can see that attackers generate a query to public
    NTP servers with the spoofed IP of a victim. In response to an NTP query, the
    server sends a huge amount of data to the victim''s IP, which chokes the network
    for the victim and make resources unavailable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9b5eedcb-06a3-4c20-af21-5c2f8a453979.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Mitigation**: Source IP verification should be activated to prevent spoofed
    packets from leaving the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other similar examples of volume based attacks are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Datagram Protocol** (**UDP**) Floods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ICMP floods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Domain Name Servers** (**DNS**) Amplification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Character Generator** (**Chargen**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application layer attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application attacks are low traffic rate attacks which are very hard to detect.
    These are targeted at weaknesses in an application or server with the goal of
    establishing a connection and exhausting processes and transactions. Such attacks
    do not require a botnet type army; generating a low traffic rate needs few sources
    and the traffic type seems to be legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: The most famous example of a Layer-7 attack is the HTTP Get/Post DDoS attack.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTP Flood Attack**: HTTP flood is a very common type of DDoS attack in which
    the cyber criminal exploits HTTP `GET` or `POST` requests to attack an online
    web server or application. The attacker forms a botnet army to send the targeted
    server a very large number of GET (image content) or POST (files) requests. The
    targeted web server attempts to answer each request coming from the botnet army.
    In accordance with normal application behavior, the server allocates the maximum
    number of resources to handle the requests. This prevents genuine requests coming
    from authentic users to reach to the web server or application. This simply turns
    into a denial of service:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/a5544048-c144-4080-ad79-d8dac8ae4b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Cloud is a new platform for attackers**: To create a zombie botnet army cloud
    series provides a new platform to hackers. Thousand of VMs/hosts can be created
    and deleted in a few seconds and the traffic looks legitimate:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/04418ac6-0091-4c88-936a-2ef24ba28116.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Mitigation**: A ring-based Anycast solution offers inbuilt DDoS protection
    against such flood attacks. The most highly-effective mitigation mechanisms rely
    on a combination of traffic profiling methods, including identifying the IP reputation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low-rate attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Low-rate attacks are focused on bringing a target down quietly. This is very
    different to high rate brute-force attacks. These attacks leave connections open
    on the target by creating a relatively low number of connections over a period
    of time and leaving those sessions open for as long as possible. A famous example
    of these types of attacks is the **Slowloris** tool, which allows an attacker
    to take down a victim's web server with minimal bandwidth requirements and without
    launching numerous connections at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Slowloris** is an application layer (Layer-7) DDoS attack which operates
    by utilizing valid partial HTTP requests. The attacker sends HTTP headers with
    opening connections to a targeted web server and then keeps those connections
    open for as long as possible, but never completes a request. To avoid connection
    timeout, the attacker periodically sends another set of partial request headers
    to the target in order to keep the request alive. This ultimately overflows the
    maximum concurrent connection pool, and leads to denial of service for subsequent
    connections from legitimate users.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mitigation**:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase server availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate limit incoming requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit the number of connections coming from one IP address.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IP spoofing is the creation of IP packets using somebody else's IP address as
    the source address of an IP packet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at IP headers in an IP packet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7ba889e6-2926-4365-918f-c30ea7af289f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following diagram, the attackers represent someone else''s IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7fe47706-01ea-46a4-8bca-0f48536e90a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Anti-spoofing using access lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A network operator can implement an anti-spoofing access-list filter to prevent
    packets with incorrect source IP addresses from entering and leaving the network.
    With the following command, the access list will prevent incoming packets that
    have the internal IP address from coming in. `220.x.x.x` is a network which I
    own, so I do not expect to encounter any packets coming from outside my own IP
    address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cisco IOS command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another possible way to prevent IP spoofing is to encrypt all network traffic
    to prevent source and destination hosts from being compromised.
  prefs: []
  type: TYPE_NORMAL
- en: Anti-spoofing using RPF checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RPF is a feature with multi vendor support to prevent IP spoofing. It can be
    used for both unicast and multicast. RPF checks the source address of a packet
    as well as the interface it's being learned from. If the source address is present
    in the routing table, then the packet is accepted by the routing device. If not,
    it will drop the packet. The only problem with RPF is that it does not work with
    asymmetric routes and therefore requires strictly symmetric routing patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Ping sweeps and Port scans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's try to understand ping before we discuss ping sweep.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ping**: Ping is a tool commonly used to find the status of a host on a network.
    Ping is based on the ICMP protocol. When a Ping process request is sent out as
    an ICMP echo to the target host, it replies with an ICMP echo reply.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ping Sweep**:Ping sweep is a technique that can be used to find out which
    hosts are alive in a network for a defined IP range. Network admins who allow
    ICMP are vulnerable to ICMP based attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multiple tools are available for ping sweeps. You can even develop your own
    tool with a small script. Here is a simple example of how to run a ping sweep
    from a Windows machine: `FOR /L` loop, which is a counter, the variable is `%i`.
    It starts at `1` and increases by `1` with each iteration through the loop, going
    up to `255`. I want to ping through a /24-sized subnet for network `192.168.0.0/24`
    and ping each IP address once (`-n 1`). Filters can be used `| find “Reply"`,
    but this will only show the IPs you get a reply from. In my live network, I have
    four IPs responding to the ICMP ping, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1eee94ed-95b4-4379-ab9f-a8fa981cd2ad.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Port Scan**: Firstly, let''s explore what port is. Any application on a host
    should have a valid port which acts like a small door to communicate with other
    hosts on the network. You can have a total of 65,535 TCP ports and another 65,535
    UDP ports. Port ranges `0` to `1023` are reserved for privileged services and
    are designated as well-known ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A port scan is a process that sends client requests to a range of server port
    addresses on a targeted host, with the aim of looking for active ports and exploiting
    a known vulnerability of that service.
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP Port Scan**: TCP port scan is the most basic form of TCP scanning. Port
    scanning tools can scan a target at a very quick speed of approximately one thousand
    ports per second or more. These tools use operating systems to open a connection
    to any port on the target machine in order to detect the number of available services
    for a given target. If the port is listening, an initial connection handshake
    will succeed, otherwise the port will not be reachable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TCP SYN scanning**: TCP SYN scan is based on the TCP three-way handshake
    and is also known as **half-open** scanning. The attacker does not open a full
    TCP connection but sends a SYN packet and waits for a response. A SYN/ACK response
    from the target indicates that the port is listening and as soon as a SYN/ACK
    is received, the attacker sends an RST response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mitigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple solution to this problem is to stop ICMP totally. ICMP can be stopped
    on a firewall layer, network layer or even on a host layer. We understand that
    ICMP is a very common troubleshooting tool for network admin and system admin,
    but instead of relying upon an ICMP based ping, we should rely upon a TCP ping.
    Such scans can also be detected and stopped by the IPS/IDS system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a host-based example,  ICMP Echo can be easily blocked on Windows by configuring
    an inbound rule. A new rule can be created by using the utility `wf.msc` from
    the Windows system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/656f9a9b-61c1-439c-a24d-7a38c55c63c8.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS continues to be a very attractive target for hackers and a very important
    piece of network from a user's point of view. We use it seamlessly almost every
    time we hit a web page or application throughout a day, without even knowing that
    it exists.
  prefs: []
  type: TYPE_NORMAL
- en: DNS provides a way to resolve the IP address of any host on the internet with
    directory services.
  prefs: []
  type: TYPE_NORMAL
- en: How does DNS work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A host sends a DNS query request to a DNS server and, in response, gets the
    IP address `1.1.1.1` for  `www.abc.com`. The host can now make a direct request
    to `www.abc.com` using  the IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e55dcfae-01b0-426f-a47a-544512a61b53.png)'
  prefs: []
  type: TYPE_IMG
- en: DNS protocol attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DNS spoofing or DNS cache poisoning**: DNS spoofing occurs when particular DNS
    server records are altered to redirect traffic to the attacker. This redirection
    of traffic allows the attacker to steal data because it is hard for users to recognize
    the difference between an actual web page and a false web page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, users are trying to get the IP address for a real web server
    which is `1.1.1.1` but attackers have manipulated the DNS record and, consequently,
    users are redirected to the IP address for a fake website, which is `2.2.2.2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7ec0665b-0d51-43b7-9801-836d7f06a147.png)'
  prefs: []
  type: TYPE_IMG
- en: Mitigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Domain Name System Security Extensions** (**DNSSEC**) is a secure technology
    based on digitally signed DNS records to help determine data authenticity. DNSSEC
    creates a secure domain name system by adding cryptographic signatures to existing
    DNS records. The main goal for DNSSEC is to strengthen trust in the internet by
    helping to protect users from being redirected to fraudulent websites and unintended
    addresses.'
  prefs: []
  type: TYPE_NORMAL
- en: Two factor authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Two-Factor Authentication** (**2FA**) is an optional layer of security which
    adds another level of protection to your account. This process combines something
    you have (a token or code) with something you know (a password). Two-factor authentication
    is more effective in securing account access than a password alone, making it
    more difficult for attackers to access your accounts since they become dynamic
    in nature. The two common methods of 2FA are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication App or Token**: Generate a security code using a trusted app
    or security RSA token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMS Verification**: Send a security code to the phone number linked to your
    account via an SMS text message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of two-factor authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Most banks now have two-factor authentication available to their customers.
    A good example of network administration is to combine an RSA feature with Cisco
    TACACS or Radius to gain access for any network device. VPN users must be authenticated
    with 2FA to validate an identity.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware tokens (in the form of key fobs or card readers) are difficult to maintain
    due to logistic support and tokens are also usually small and easily lost. 2FA
    makes life easier by utilizing mobile phone SMS technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is an image of an RSA Hardware Token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/910d4143-4e7c-4114-84fc-c2eb6f1da0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of designing a secure network requires identifying an insecure area,
    understanding the methods of network attacks and the best solutions to meet the
    needs of a business. The four fundamental technical requirements of network design
    are scalability, availability, security, and manageability.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the importance of using the right approach to safeguard against
    security threats in an increasingly internet oriented world. We also covered the
    security weaknesses for all networking layers including routers, switches, firewall
    configuration systems and risks when connected to the internet. We have also learnt
    the best security methods and how to protect the network from vulnerabilities,
    threats and attacks by applying security configurations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss more about server security, encryption
    methods and policy enforcement with regards to data protection.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does AAA stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authority
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Accounting
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two most common AAA protocols?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: TCP/IP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: RADIUS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TACACS+
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PPP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An attack which attempts to make targeted systems unavailable to its intended
    users is called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Denial-of-Service attack
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Slow read attack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Spoofed attack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Starvation attack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not an attack, but a tool which searches for available services
    to identify vulnerabilities in order to attack a given target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Denial-of-Service
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Port scanning
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Memory access violation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dumpster diving
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For references and further information, refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://gcn.com/Articles/2014/08/07/Layer-1-network-encryption.aspx](https://gcn.com/Articles/2014/08/07/Layer-1-network-encryption.aspx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.uebermeister.com/files/inside it/2016_Introduction_Encryption_Metro_and_Carrier_Ethernet.pdf](http://www.uebermeister.com/files/inside%20it/2016_Introduction_Encryption_Metro_and_Carrier_Ethernet.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ieeexplore.ieee.org/document/7781061/](http://ieeexplore.ieee.org/document/7781061/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
