- en: Application Security Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed data protection and security techniques
    for cloud hosted applications. In this chapter, we will discuss application security
    for web-based applications.
  prefs: []
  type: TYPE_NORMAL
- en: While applications can provide efficiency, risks still remain. This is a result
    of the fact that there are a number of new security threats which could potentially
    pose significant risks to an organization's IT infrastructure. It is essential
    to understand the vulnerabilities commonly found in various applications and provide
    users with a better experience. In this chapter, we will focus on the security
    aspect of web-based applications with **General Data Protection Regulation** (**GDPR**)
    around the corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: GDPR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Application Firewall and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blacklisting and whitelisting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTPS for everything
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GDPR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a digital transformation era, customers' sensitive personal information held
    by business organizations pose a significant risk if they are stolen and misused.
    The data protection laws across the globe have a common goal to protect the privacy
    of individuals. The general data protection regulation was introduced, which specifies
    how customer data should be used and protected. Most of us share our personal
    information on many web portals by clicking I Agree or I Accept the Terms and
    Conditions. Personal data contains information about the individual, including
    who they are, what they do, and where they go. Each of us leaves a digital footprint
    of our personal data in the cyber world. Data mining is new oil to the industry;
    it provides insights and a competitive advantage.
  prefs: []
  type: TYPE_NORMAL
- en: The GDPR compliance deadline is May 25, 2018\. Every organization that keeps
    or uses European personal data inside or outside of Europe—regardless of the nature
    of the business in which it operates—is affected by the new data protection law.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at an example of how this impacts organizations worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: A US organisation which collects data from EU personnel would be under the same
    legal obligations as the organisation's head-office which is anywhere within the
    EU. Even though they do not have an actual physical server or office in the EU,
    the basic idea was that if the data was not physically located in the EU zone,
    then the rules didn't even apply. For example, any social networking portal has
    to keep user information and if the user belongs to the EU, the information is
    stored on a server which is outside of EU boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Legislation has to be enforced by 25th May 2018 and this may result in huge
    penalties for organizations that fail to comply. The maximum penalty is €20 million
    or 4% of an organization's global turnover. This amount would be enough to close
    down many businesses. To avoid these steep consequences, preparation is the key
    to success.
  prefs: []
  type: TYPE_NORMAL
- en: Getting consent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consent is a key factor of GDPR legislation, which offers individuals a choice
    and control over how their data is used, with a desire to build their trust and
    engagement. Your web-portal which collects personal data must make visitors understand
    exactly how you are planning on using their personal information. They must then
    agree to each specific purpose. Even if you have someone's email address, phone
    number, and credit card information after they use a shopping cart feature, you
    are not allowed to share this information without their agreement.
  prefs: []
  type: TYPE_NORMAL
- en: WhatsApp now lets users see the data that it collects from them.
  prefs: []
  type: TYPE_NORMAL
- en: Access to data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another key feature of GDPR is to make it possible to view who has access to
    the personal data that is stored on your website and backend system. The first
    thing to understand is who these entities are and if they have a valid reason
    to get access to this data. Also, all data collected from individuals must be
    linked and a one-click job should be enough to delete all system data which is
    no longer required.
  prefs: []
  type: TYPE_NORMAL
- en: Encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any data that is submitted to your website must be encrypted in order to comply
    with GDPR. An SSL/TLS certificate must be installed on your site to encrypt the
    data in order to avoid man-in-the-middle attacks.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on GDPR you can visit [https://www.eugdpr.org](https://www.eugdpr.org).
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL Injection is one of the oldest and most widely used application layer vulnerabilities
    used by attackers to steal valuable data from SQL based databases. Attackers leverage
    an SQL Injection vulnerability to bypass a web application''s authentication system
    and to retrieve information. SQL Injection can also be used to make changes like
    adding, deleting, and modifying data records. The following diagram shows a 3-Tier
    application architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3f6891e5-a423-46bc-97d7-5f8e58587090.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The 3-Tier application has the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Interface**: **User Interface** (**UI**) is basically a user friendly
    way to interact with an actual application. This can be a mobile application,
    web UI or API method to interact with applications. A UI layer requests data from
    a business layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Logic**: A business logic can be considered an application layer
    which is responsible for handling data validation, business rules and task-specific
    behavior. Business rules fetch or insert data into the database layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database Layer**: This is the third and most critical layer of the 3-Tiers,
    which hosts the actual data and is responsible for feeding data to the other above-mentioned
    two layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's worth mentioning here that running a SQLi attack against a website without
    the owner's permission could well land you in legal trouble with the state law
    enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss how SQLi works in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On a web portal login page, when you submit a username and password, the SQL
    query will look like the following. If the correct credentials have been provided,
    everything will work fine:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The same method becomes vulnerable due to a small trick which bypasses the
    login forms on web portals:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the username field is empty and the password field has a closed
    apostrophe. The magic starts here with the `OR` statement `'1'= '1'` which will
    always return true and the whole query returns all `username` and `password` from
    the entire database.
  prefs: []
  type: TYPE_NORMAL
- en: We have discussed the basic idea of what an SQL Injection is and how it works.
    The preceding example is a very basic attack that can run very complicated queries
    to crack databases. It is highly recommended to test the system or a website with
    databases against this type of attack every time it is launched for public access.
    Just think, if you can play tricks with a banking system which is vulnerable to
    SQLi, you can probably rob the bank by manipulating the amount reflected on your
    account or by transferring an amount to someone else.
  prefs: []
  type: TYPE_NORMAL
- en: Do remember that this SQL Injection test should only be tested in the test environment.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention of SQL Injection attack on web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The good news is that there is actually a lot that website owners can do to
    prevent SQL Injection. The bad news is that there is not one complete, foolproof
    solution to database security:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dbab3a48-cfcd-4149-834b-7da42873065e.png)'
  prefs: []
  type: TYPE_IMG
- en: Employing comprehensive data sanitization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very important for all websites to filter all user inputs and to exploit
    works because of weak input filtering or no filtering at all. You can also call
    this *validation*. For example, if the input field is supposed to be a cell phone
    number, you can certainly validate that field to make sure that it contains only
    numbers and, of course, is the length of a cell phone number. This will not just
    protect your application from SQLi but it will also protect you from undesired
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Web Application Firewall
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web Application Firewalls** (**WAFs**) are essential security mechanisms
    used on almost all commercial websites today. Using a WAF is a very effective
    way of preventing known attacks. The WAF combats commonly known attacks against
    web servers using a number of security checks to filter inbound HTTP/HTTPS requests.
    In addition to managing requests, you can apply WAF security checks to modify
    the responses sent back to users. Despite the excellent protection they offer
    against many types of attacks, WAF is inadequate for protecting against today''s
    sophisticated **SQL Injection** (**SQLi**) attacks. You can consider WAF a rule-based
    second layer of defense for protecting web servers against known threats XSS,
    SQLi, and DDoS attacks.'
  prefs: []
  type: TYPE_NORMAL
- en: Limit database privileges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key element of database security is access control privileges for everyone,
    from DBA to application schema. To limit database privileges, create multiple
    database user accounts with a minimum level of privilege for their usage environments.
    You should also grant an application with the minimum possible access to the database.
    Unless absolutely necessary, do not allow DROP, DELETE, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Finding vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have written your application, we do not know if it is vulnerable to
    SQL Injection. Obviously, you could examine the source code and find any instances
    of concatenating user input with SQL, but that could be very tedious and time
    consuming. You must use a good, updated vulnerability scanner to find the most
    frequently found vulnerabilities. Performing SQL Injection generates high network
    bandwidth and sends a lot of data, so make sure you are the owner of the website
    you are testing. If not, make sure you have taken prior permission from the owner.
    A few famous tools such as sqlmap, Acunetix, Vega, and Netsparker can be used
    for scanning.
  prefs: []
  type: TYPE_NORMAL
- en: WAFs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WAFs provide additional security between users and web applications to protect
    web servers from unauthorized access and malicious attacks. WAF vendors offer
    hardware, software, virtual, and cloud-based firewall solutions. Web applications
    are extremely vulnerable and are also the backbone of business, so they must be
    protected. The biggest challenge in application security is detecting a vulnerability
    in your application, at which point the trouble begins when you are patching and
    fixing the code, as these are time-consuming tasks. This is where WAFs come in;
    as soon as a vulnerability is detected, you can apply patches to WAF. Any request
    which comes after the WAF patches are updated will stop attacks associated with
    the vulnerability that has been found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following diagram. Non-HTTP/HTTPS attacks are blocked
    by a perimeter firewall, but the perimeter firewall does allow HTTP/HTTPS connections.
    These HTTP/HTTPS connections can also become attacks and are therefore blocked
    by WAF, which acts as a second layer of security. Consequently, only a clean connection
    is passed by both layers and reaches the application server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/94d3d922-4516-45f7-a26c-ecf1856be5c9.png)'
  prefs: []
  type: TYPE_IMG
- en: WAF protection against common web attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A WAF protects your web servers from common threats which can compromise the
    security of websites. We will list the common threats and WAF security checks
    you can use to counter these attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Buffer overflow attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie tampering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forceful browsing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web form security attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request protection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bot check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute force and credential stuffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer-7 DoS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blacklisting and whitelisting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A simple approach and fundamental principle in IT security is to allow what
    is really needed. Security is all about access control and keeping track of activity
    with identity. In cyber security, access is granted based on identity and intent.
    Whitelists are identities with good intent and blacklists are identities with
    bad intent. This is a debatable topic and we will discuss it further with regards
    to requirements and implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/27eafffc-3d16-4932-bb63-f6be4ee27ec2.png)'
  prefs: []
  type: TYPE_IMG
- en: What is blacklisting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the antivirus suites on the market work with a blacklist approach to
    detecting and preventing viruses and malware. In the 1980s, antivirus was first
    introduced with blacklist. Today, the antivirus industry still follows the same
    principle. This works similar to creating a list of all cyber criminals in the
    world. However, what happens if you miss a few criminals, or if they are new and
    are not on the list? Depending on the IT environment, blacklisted entities might
    extend to users, applications, processes, IP addresses, and organizations known
    to carry threats to an individual or other organization.
  prefs: []
  type: TYPE_NORMAL
- en: Blacklisting delivers almost no value against zero-day threats.
  prefs: []
  type: TYPE_NORMAL
- en: Benefit and disadvantage of blacklisting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary advantage of blacklisting is its simplicity. You can exclude known
    threats from the system and the intelligence lies with the software vendor. Its
    effectiveness totally depends on how often the vendor releases or updates the
    known threat database. From a user's point of view, all of the updates are fetched
    automatically. Users do not have an option to differentiate between good and bad
    data traffic until the software says it's bad. The major drawback of blacklisting
    architecture is knowing how to deal with unknown threats. For example, ransomware
    continues to evolve with new patterns and variants that have not been seen before.
  prefs: []
  type: TYPE_NORMAL
- en: What is whitelisting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application whitelisting uses the reverse logic. Here, you can create a list
    of trusted entities such as applications, emails, users, trusted partners, services
    and IPs. These are allowed to access IT resources and block everything which seems
    to be unwanted for your business. With whitelisting architecture, you must have
    a tight access control policy and grant appropriate permission to users. Since
    you block all unwanted entities, this reduces the attack surface which gives automatic
    protection from zero-day attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Benefit and disadvantage of whitelisting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary goal of whitelisting is to protect high-risk security environments.
    This approach only allows trusted software, applications, users and IPs, which
    drastically reduces intrusion. The main advantage is that nothing comes inside
    the network which is outside of the list, and nothing that is not on the list
    can come inside the network. A good example would be the way the salesforce application
    portal operates. With this, you gain access to an application only for the allowed
    IP range and users. We all know that salesforce is a critical application. This
    does not scale well for a large network or every time you need to add new entries,
    making it tough to manage.
  prefs: []
  type: TYPE_NORMAL
- en: Which is better?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each approach to security has its advantages and disadvantages. It may sound
    strange, but you need both. A typical business organization which uses a limited
    number of applications and knows about the users and network connections required
    for this application should follow a whitelisting approach. The next step is to
    combine this approach with blacklisting to ensure that if authorized users enter
    the network with a known threat, your network will still be protected. Of course,
    there is less of an administrative effort involved in blacklisting compared to
    whitelisting, and the difference increases with the size of the whitelist. You
    can take a whitelist approach for applications which can be opened from all over
    the world, such as banking web portals and online shopping carts.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTPS for everything
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Around two billion people are connected to the internet all across the globe,
    and the internet world has become the backbone of the species. HTTP is one of
    the most famous protocols which has become critical in today's digital era and
    it is the primary protocol for applications used on computers, tablets, smartphones,
    and many other devices. You should always protect all of your websites with HTTPS,
    even if they don't handle sensitive communications. This is because in today's
    world, there is no such thing as non-sensitive web traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning in July 2018 with the release of Chrome 68, Chrome will mark all HTTP
    sites as *not secure*.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS is a very serious and sensitive subject, and in this section we will discuss
    website security.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP versus HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hypertext Transfer Protocol** (**HTTP**) is a protocol that allows communications
    between client and server. Most commonly, it is used for transferring data from
    a web server to a browser to view web contents. The main problem is that HTTP
    does not encrypt the data being transmitted and can be snooped by someone else.
    As the first part of the diagram shows, a web server running on service port `80`
    and all the content being transferred between client and server are in plain text.
    In the next section of the diagram, the web service is running on the service
    port `443` and data is being transferred in encrypted mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2e31c94a-2731-4d41-99f7-1103792bc99d.png)'
  prefs: []
  type: TYPE_IMG
- en: HTTPS is the secure form of HTTP, which simply means that the information being
    exchanged between the browser and web server you are visiting is encrypted. Any
    web servers currently using HTTP can be migrated to HTTPS. However, there is a
    small cost if a **Secure Sockets Layer** (**SSL**) certificate must be purchased.
    HTTPS helps to prevent attackers from hijacking communication sessions between
    your web-server and user browsers when using public infrastructures such as public
    Wi-Fi, ISPs, or hotels.
  prefs: []
  type: TYPE_NORMAL
- en: Web application security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every developer wishes their application could be more secure. This section
    highlights some of the top security considerations and best practices when designing
    or migrating to HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: SSL/TLS deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choose a **Certification Authority** (**CA**) that is reliable and serious about
    its certificate business, security and reputation. A reliable CA will also provide
    a wide variety of certificate types and flexible licensing models.
  prefs: []
  type: TYPE_NORMAL
- en: SSL/TLS key size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is always preferable to have longer key lengths, but for public-key cryptography
    (asymmetric ciphers), 2048-bit keys have the same sort of property, so longer
    keys are meaningless. **National Institute of Standards and Technology** (**NIST**)
    suggests that a 2048-bit RSA key has a strength of 112 bits, therefore there are
    theoretically two thousand, one hundred and twelve possibilities to crack the
    private key. RSA claims that 1024-bit (asymmetric) keys are likely to be cracked
    sometime between 2006 and 2010, and 2048-bit keys are sufficient until 2030\.
    At the same time, longer key sizes like 4096 significantly decrease server performance,
    which directly impacts browser response time.
  prefs: []
  type: TYPE_NORMAL
- en: The NIST recommends 2048-bit keys for RSA.
  prefs: []
  type: TYPE_NORMAL
- en: Signing algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secure Hash Algorithm** (**SHA**) is a hashing algorithm used in secured
    connections to provide the integrity and authenticity of a message to the receiver.
    SHA algorithm is the default hash algorithm set in SSL/TLS certificates. SHA-2
    is a set of hash functions including SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224
    and SHA-512/256\. The most common hash function used is SHA-256\. Generally speaking,
    SHA-2 = SHA-256 and that is the minimum requirement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Hash Algorithm 3** (**SHA-3**) is the latest member of the Secure
    Hash Algorithm family of standards, released by NIST on August 5, 2015\. A wider
    implementation for SHA-3 is probably many years away.'
  prefs: []
  type: TYPE_NORMAL
- en: Secure protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do not use SSL 3.0\. For secure implementation, configure a server and software
    that supports the latest versions of the TLS standards TLS 1.1 and TLS 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing an authentication hacking attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authentication plays a very critical role in the security of web applications.
    Attackers will try to find passwords or session IDs and get access to the desired
    information. Here are a few ways to prevent an authentication hacking attack:'
  prefs: []
  type: TYPE_NORMAL
- en: Prevent an automated brute force attack by adding CAPTCHA. However, this is
    not perfect. Along with CAPTCHA, use account lock-down. This is a very effective
    deterrent against brute force attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transfer session keys in cookies (do not show session IDs in the URL) and session
    keys should be unpredictable. Showing session IDs with the URL is a method that
    is normally used when cookies are blocked by client side or a fallback method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the duration shorter for session IDs and ensure that they are rejected
    by the server after logout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use two-factor authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During a session fixation, the attacker wants you to access your account with
    a Session ID of his choosing. An easy fix for this problem is to not let a client
    choose session IDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not leave your session active once you are done with your activity; ensure
    that you log out at the end of every session. Session logout also forces attackers
    to log out automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cookies securely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cookies are a set of information stored on the client browser, which are then
    sent to the server with every subsequent request made by the client during the
    session. Cookies are primarily used for authentication and maintaining sessions.
    It becomes very important to secure cookies effectively in order to avoid session
    hijacking. Cookies can be secured by properly setting cookie attributes. These
    attributes are:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPOnly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A developer only encrypts the main login page. Other sensitive and non-sensitive
    information is sent to the server in an unencrypted format. Keep in mind that
    cookies are also sent along with these requests. If they are unencrypted then
    this gives an attacker the opportunity to sniff data to steal session information
    from these cookies. To avoid leaking session information to attackers, make sure
    that the cookies are also only transmitted over HTTPS connections, not HTTP connections.
    This can be done with the help of the secure attribute of a cookie. You can also
    play with all other attributes such as HTTPOnly. This protects you from XSS cross
    site scripting, which can steal data from cookies.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the adoption of digital transformation by businesses and organizations,
    web applications have become a lucrative target for attackers. Web applications
    are often plagued by vulnerabilities and misconfigurations due to poor coding
    and broken hardening policies. Network and security admins must use web application
    security scanners to perform testing on a web application and identify security
    vulnerabilities. Scanners do not access the actual source code, they only perform
    functional testing and try to find security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Server security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prepare your server for safe and secure operations. Here are a few steps you
    need to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Update the server to the latest operating system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on inbuilt firewall
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable automatic critical updates for OS security
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable logging or integrate with SIEM system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduce a bug bounty program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bug bounty programs are incentive-based and result-oriented programs designed
    to encourage security researchers to find the vulnerabilities and security risks
    associated with a product. They are then encouraged to report them to the sponsoring
    organization. These programs are considered highly beneficial as they represent
    a global community of professionals and researchers that are available all the
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you are familiar with the basics of application security. We have covered
    enough background information in this chapter to understand a multi-layer security
    approach. Although web applications can efficiently exchange information, the
    fact still remains that these applications can be attacked. A number of new security
    threats have also arisen. If not handled properly, these issues could potentially
    pose significant risks to an organization's information technology infrastructure.
    Since it is all about data security, individual data is very important. Consequently,
    it becomes very important for organizations to design a robust web system aligned
    with GDPR to protect users' information.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss an overall approach for infrastructure
    security and future technology.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following is not a factor in securing the environment against a
    security attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The education of the attacker
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The system configuration
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The network architecture
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The business strategy of the company
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The level of access provided to DBA
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `http` you type at the beginning of any site's address stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hyper Text Transfer Protocol
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTML Transfer Technology Process
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hyperspace Terms and Technology Protocol
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hyperspace Techniques and Technology Progress
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL Injection is an attack in which what kind of code is processed to the database
    server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Malicious
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Redundant
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Non-malicious
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a security exploit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Eavesdropping
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cross-site scripting
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL Injection
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the most vulnerable to injection attacks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Session IDs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Registry keys
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Network communications
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL queries based on user input
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above are vulnerable to injection attacks
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, please refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.sans.org/reading-room/whitepapers/analyst/started-web-application-security-36735](https://www.sans.org/reading-room/whitepapers/analyst/started-web-application-security-36735)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.eugdpr.org/](https://www.eugdpr.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.sans.org/reading-room/whitepapers/application/web-application-firewalls-35817](https://www.sans.org/reading-room/whitepapers/application/web-application-firewalls-35817)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.cisecurity.org/wp-content/uploads/2017/05/SQL-Injection-White-Paper2.pdf](https://www.cisecurity.org/wp-content/uploads/2017/05/SQL-Injection-White-Paper2.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
