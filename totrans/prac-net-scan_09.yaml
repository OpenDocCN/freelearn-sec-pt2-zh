- en: Public Key Infrastructure-SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about network mapping tools and port scanning
    techniques used to detect the remote OS.
  prefs: []
  type: TYPE_NORMAL
- en: In today's digital era, more and more internet users are growing web businesses.
    Small to large businesses are coming up with higher numbers of marketing tools
    such as ads, web services, emails, social media, digital content, online banking,
    online cell phone apps and, of course, online shopping. However, no one wants
    to store or send information on the internet until information security is guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure Socket Layer** (**SSL**) provides transport layer security for web-based
    applications and also provides end users or customers with a secure browsing experience.
    In this chapter we are going to discuss what SSL is, how it works and who needs
    it. We will also discuss the evolution of SSL, focusing on what you need to know
    in order to implement it. This will include looking at current threats and verification
    methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Foundation of SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS versus SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public Key Infrastructure** (**PKI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks against PKI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Windows and IIS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL Management tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundation of SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn the basics of SSL from the point of view of the
    end user, focusing on what users should know about SSL for the purpose of safe
    browsing. Having an SSL certificate stamp on your website is very important for
    security. In order to protect data from attackers, SSL technology is used to create
    an encrypted connection between an end user (typically a web browser) and the
    web server. SSL allows sensitive information such as credit card numbers, social
    security numbers, and login credentials to be transmitted securely in an encrypted
    format. Even if an attacker is able to intercept all of the data sent between
    a client and a web server, they still cannot read and use the information in encrypted
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand where SSL fits into a TCP/IP or OSI model, let''s take a look
    at the following diagram. For secure applications such as HTTPs, SSL/TLS comes
    in between the application and the Layer 4 transport layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6c0b2db3-8277-4f42-8120-9a1134fbaf21.png)'
  prefs: []
  type: TYPE_IMG
- en: How do I know that SSL is working?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before exchanging any information, it is very important for users to know that
    the area of a website they are on is safe and secure. Different browsers have
    different ways of showing SSL status but you can usually find it by checking the
    address bar at the top of the browser. Let''s take a look at a few browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Microsoft Edge:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ea3bfa5e-9d0a-4da8-9839-f081ca88bfcf.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Microsoft IE:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/56a38bc8-cf40-4807-b14d-b712c50df092.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Google Chrome:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/efb1a16f-0d17-441b-9aeb-fc4901bd01ef.png)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly observe that each is similar in the sense that they all have
    a green accent color, a padlock symbol and the information is displayed in the
    status bar, which tells you that this is a secure site.
  prefs: []
  type: TYPE_NORMAL
- en: Why no PadLock?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Browsers are smart enough nowadays. Let''s take a look at the alarming error
    message I was getting when accessing a banking website. In this situation, you
    should not share your information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6ccfa3df-0b1d-407b-9768-9c2568b08f33.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can clearly see that there is no green color and no padlock sign on
    the status bar. The browser also indicates a reason why this site is not secure.
  prefs: []
  type: TYPE_NORMAL
- en: SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An SSL certificate is a digital public document that binds a cryptographic key
    to the details of an owner or organization such as through domain name, host name
    or location. This verifies that a legitimate company owns the website which is
    being accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'An SSL certificate has three specific functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Encryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, the SSL certificate will have information about who has issued
    the certificate and to whom it is issued. This is not limited to web servers,
    it can also be used for end user machines, mobile phones and many more applications.
    Every SSL certificate will have an expiry date attached to it, which is similar
    to how an exam certificate cannot be used after its expiry date. Consequently,
    to extend the validity of the certificate, it must be renewed. An SSL certificate
    will also have a public key and digital signatures. As the name suggests, a public
    key is incorporated into the SSL certificate shared with web browsers and a digital
    certificate is a process that guarantees that the contents of a message have not
    been altered in transit.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of SSL and TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Transport Layer Security** (**TLS**) protocol is the most widely used protocol
    on the internet today. SSL was originally developed by Netscape in 1993\. Let''s
    take a look at the history of the SSL protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SSL 1.0**: This was the first specification by Netscape in early 1994, which
    was never released for public use. This is because it was heavily criticized by
    the cryptographic community for the implementation of weak cryptographic algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL 2.0**: In early 1995, Netscape released SSL 2.0, an improved version
    of the original. However, this also did not succeed. In this version, message
    authentication used MD5, which most security-aware users had already moved away
    from. Handshake messages are not protected. This permits a MITM attack to trick
    the client into picking a weaker cipher suite than it would normally choose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL 3.0**:SSL version 3 was released by Netscape in 1996 to enhance SSL version
    2 and to support more algorithms. Many SSL version 2 platforms were already deployed
    at the time so there was no clean way to cut over to SSL version 3\. This forced
    SSL version 3 to allow the backward compatibility to SSL version 2\. Therefore,
    unless you definitely know which SSL versions the server supports, your SSL application
    should run in both SSL version 2 and SSL version 3 mode. This enables a client
    to communicate with both SSL version 2 and SSL version 3 servers. This also allows
    the server to have connections with SSL version 2 and SSL version 3 clients. However,
    if either the client or the server supports only SSL version 2, only that version
    will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL 3.0 was vulnerable to the POODLE attack, marking the end to the SSL 3.0
    era. This was discovered by the Google security team and disclosed to the public
    on October 14, 2014.
  prefs: []
  type: TYPE_NORMAL
- en: '**TLS 1.0**:The TLS protocol itself is based on the SSL 3.0 specification as
    published by Netscape in January 1999\. The differences between this protocol
    and SSL 3.0 are not dramatic, but they are significant enough that TLS 1.0 and
    SSL 3.0 do not inter-operate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TLS 1.1, TLS 1.2 and TLS 1.3**: RFC 4346 was released in April 2006 and TLS
    1.1 is an update to TLS 1.0\. The changes that were brought about included replacing
    the implicit **initialization vector** (**IV**) with an explicit IV to protect
    against **Cipher block chaining** (**CBC**) attacks. In August 2008, TLS 1.2 was
    based on TLS 1.1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of January 2018, TLS 1.3 is the latest protocol, though it is a working draft.
    Let's take a look on a browser (Internet Explorer) for current supported version
    of SSL and TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Current Supported Standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For Microsoft Internet Explorer, follow these steps: Tools|Internet Options|Advance.
    In the following screenshot, we can see that TLS 1.o to TLS 1.2 options are checked
    while SSL 3.0 is disabled or unchecked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/31de327e-4e4b-4f38-bc4c-c2a54eb4358a.png)'
  prefs: []
  type: TYPE_IMG
- en: Why hasn't TLS 1.3 been implemented yet?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Such security upgrades are complex in nature. In a multi-vendor internet environment,
    you need to update both client and servers to support a new security standard.
    So far, no major browsers have TLS 1.3 enabled by default. It cannot be assumed
    that by a specific date, every server and end user device will support all new
    security standards. Furthermore, TLS 1.3 is not an extension but a major change
    with complete revamping. The way TLS or SSL version negotiation works is that
    an end user device sends the latest version of a supported protocol to a server,
    which responds with the latest version and chooses something which is supported
    by both of them.
  prefs: []
  type: TYPE_NORMAL
- en: Time to say goodbye to SSL and early TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to **PCI Data Security Standard** (**PCI DSS**) for safeguarding payment
    data, 30 June 2018 is the deadline for disabling SSL/early TLS and implementing
    a more secure encryption protocol of TLS 1.1 or higher. There are many vulnerabilities
    in SSL and early TLS that, left unaddressed, put organizations at risk of being
    breached. The widespread POODLE and BEAST exploits are just a couple of examples
    of how attackers have taken advantage of weaknesses in SSL and early TLS to compromise
    organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following website for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blog.pcisecuritystandards.org/are-you-ready-for-30-june-2018-sayin-goodbye-to-ssl-early-tls](https://blog.pcisecuritystandards.org/are-you-ready-for-30-june-2018-sayin-goodbye-to-ssl-early-tls)'
  prefs: []
  type: TYPE_NORMAL
- en: SSL certificate component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first discuss client side SSL, and then we will focus on server side.
    Your browser comes pre-installed with trusted CAs. Every time we visit a website,
    your browser verifies a trust chain and, during handshake, ends with one of the
    locally trusted root certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Root certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at Microsoft IE pre-installed CAs. You can check this in
    the browsing directory through Tools|Internet Options|Content|Certificates|Trusted
    Root Certification Authorities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bb6072b8-53af-44a6-9cd8-7ceb08f7164b.png)'
  prefs: []
  type: TYPE_IMG
- en: Root certificates do have an expiry date, but they tend to have exceptionally
    long validity times (often between 10-20 years). As part of a browser or operating
    system update patch, you will get fresh root certificates before the old ones
    expire. Lacking a CAs root certificate, no browser would know whether to accept
    an SSL certificate issued by that CA. These SSL certificates are known as *single
    root* certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Intermediate certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From a security point of view, the private key of the root certificate is critical
    and should be kept in the certificate provider's secure data center. Furthermore,
    the public key of the root certificate is given to browsers such as Microsoft
    and Google to be added to their list of trusted roots. Any compromise of the root
    certificate's key would deem the complete certificate chain built by the certificate
    provider as untrustworthy.
  prefs: []
  type: TYPE_NORMAL
- en: An intermediate certificate authority is an entity that is authorized to sign
    certificates. Logically, the root CA must sign all certificates. For security
    reasons, the intermediate CA signs certificates on behalf of the root CA, but
    intermediate certificates are signed by the root CA.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s browse a few sites and look at an intermediate certificate. In this
    example, I have opened [www.google.com](http://www.google.com) in IE. I have mentioned
    that GeoTrust Global CA [Root] reflects root signing authority, Google Internet
    Authority G2 [Intermediate] reflects Intermediate Certificate and, finally, *.google.com
    [End Host] is the End host identity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9dc68e93-18c8-4c5e-a63c-4fe81cd53ec5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take another example. This time we have [www.flipkart.com](http://www.flipkart.com).
    Here, there are two intermediate certificates and, by logic, there can be multiple
    since these are a subset of a main certificate. The confusing aspect comes in
    when you try to relate different classes and groups associated with a certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/471227e6-ab2b-4f45-b5df-474f11f63a05.png)'
  prefs: []
  type: TYPE_IMG
- en: These classes are vendors defined but pretty much consistent across all top
    level certificate authorities. Let's take a look at the different possible classes
    of certificates that CAs will offer to their clients and what these classes mean
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: SSL certificates classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CA uses the concept of classes for different types of digital certificates,
    but these classes are not specified in any SSL/TLS RFC. Let's try to understand
    what different classes mean to SSL end users.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class 1**: Class 1 certificates are delivered without any prior verification.
    This is also known as a **Domain Validation** (**DV**) certificate and relies
    on the `WHOIS` information database (you must prove you own the domain). A DV
    certificate is a low authentication product which does not guarantee the identity
    of the website''s owner nor the actual existence of the organization. This simply
    refers to two entities talking over an encrypted channel without knowing each
    other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: This can be heavily misused by attackers by launching phishing sites.
    Users assume that the website has a valid certificate issued by a major certificate
    authority.Never use low—authentication certificates for web based applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Class 2**: ForClass 2 certificates, (Medium Security Level) a background
    check is required which includes looking at the organization, business, or person
    who owns the domain, and confirming its existence. These are typically called
    the organization validated certs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class 3**: These are client certificates (Extended validation High Security)
    that are delivered after an audit. They check details of the organization, including
    verifying the physical address using multiple sources of truth and the certificate''s
    owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class 4**: Class 4 certificates are intended for online business transactions
    between companies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class 5**: Class 5 certificates are intended for private organizations or
    governmental security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS versus SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both TLS and SSL are security frameworks that provide data encryption and authentication
    for web based applications to ensure data protection. An SSL and TLS handshake
    is a mechanism for web based applications which takes place just after the TCP
    handshake occurs between a client and a server. The handshake doesn’t encrypt
    anything on its own, but actually negotiates for a shared secret and encryption
    type which both sides agree on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the diagram below, we can see that just after the TCP and SSL handshake
    starts, a secure client sends a ''hello'' message to the server with a supported
    set of ciphers. The server responds with a top support cipher and also shares
    its certificate with the public key:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/965fe4f0-54d0-4d40-8abb-87aa82f7b48a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look  at Wireshark to validate. A client sends all available
    cipher suits to a server marked in the black box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6e79f3fe-d239-4476-8dc2-848b62bc17ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In server hello, the sever sends the top cipher it can use for security, shown
    in the black box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/efd89ff1-fd94-4c5e-b584-4769ba637400.png)'
  prefs: []
  type: TYPE_IMG
- en: Public Key Infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PKI refers to processes and technologies which provide a secure data exchange
    between two nodes over unsecured infrastructure. It uses private and public key
    pairs to achieve the underlying security service.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of cryptography algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: Symmetric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asymmetric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetric encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In symmetric encryption, a single key is used both to encrypt and decrypt traffic.
    Symmetric encryptions are fast, simple and easy to implement. However, some easy
    ciphers are vulnerable to brute-force attacks, making management a complex job.
    If the key is compromised, then the whole system becomes vulnerable. **Data encryption
    standard** (**DES**) and **Advance encryption standard** (**AES**) are symmetric
    systems, but AES is much more reliable than DES.
  prefs: []
  type: TYPE_NORMAL
- en: 'The symmetric encryption scheme has five elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plain-text**: Refers to the original data that needs to be encrypted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encryption Algorithm**: Refers to a combination of ciphers used to encrypt
    data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure Key**: Refers to input in the encryption algorithm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cipher-text**: Refers to output and format, which is dependent upon plain-text
    and key input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decryption Algorithm**: This works in reverse of encryption - the cipher
    test becomes input data and the output becomes plain-text original input:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/424a0987-21c0-4764-83a1-81d5d9c12e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Asymmetric encryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Asymmetrical encryption is also known as public key cryptography, which is
    a relatively secure method compared to symmetric encryption. In this method, two
    keys are used. One key is used for encryption and the other key is used for decryption. The
    public key is what its name suggests— public. It is made available to a browser
    when accessing the web server during the SSL handshake process. On the other hand,
    the private key must remain confidential and secure to its respective owner. Let''s
    assume that the client generates the secret, encrypts it using the server''s RSA
    public key and sends it to the server, which decrypts it using its private key. It
    is very important to protect the private key, because if the key is lost, then
    the system becomes void:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4a7d8759-5630-4215-9881-ed79cd5f5822.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Two of the most popular Asymmetric Encryption Algorithms are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rivest-Shamir-Adleman (RSA)**: This is the most widely used asymmetric algorithm.
    Let''s take a look at the SSL certificate to verify what algorithm is being used.
    Under certificate details, you can see that the Public Key value is RSA (2048)
    and this indicates RSA encryption:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/e98ec20c-6b8e-4ebf-8163-61589637591e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Elliptic Curve Cryptography (ECC)**: In the second example, you can see that
    the Public Key value is ECC by viewing certificate details. ECC is gaining fame
    within the industry as an alternative to RSA:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/ff82e4f8-f056-47c4-8003-09a8eebfbdad.png)'
  prefs: []
  type: TYPE_IMG
- en: Hash function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A hash is a number generated from the information inside a file, maybe a clear
    text file. The resulting string is a fixed length, and will vary widely with small
    variations in input. Hashing differs from encryption and does not use a process
    to encrypt and decrypt data. Hashing, however, is a one-way function that scrambles
    plain text to produce a unique message digest. With a properly designed algorithm,
    it works in a one-way direction, hence there is no way to reverse the hashing
    process to reveal the original password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/828c9e62-8de9-476b-9cc9-be9589578067.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's understand the working.
  prefs: []
  type: TYPE_NORMAL
- en: A user enters a password and a User ID in a browser and sends it to the authentication
    server over a secure channel. The server uses the User ID to look up the associated
    message digest. The password submitted by the user is then hashed with the same
    algorithm, and if the resulting message digest matches the one stored on the server,
    it is then authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the popular Hashing Algorithms are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MD Family**: MD2, MD4 and MD5 (1989 -1992). All of these were 128 bit hash
    functions. MD5 is the most famous hash algorithm. MD6 also came into the industry
    but never gained popularity and was replaced by SHA3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SHA Family**: There are four versions of SHA. This includes SHA0 (most vulnerable),
    SHA1 (most popular), SHA2 (widely deployed) and SHA3, which was introduced in
    2012.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AES Family**: AES comes with three block ciphers. This includes AES-128,
    AES-192 and AES-256\. Each cipher encrypts and decrypts data in blocks of 128
    bits using cryptographic keys of 128, 192 and 256 bits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacks against PKI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you ask any security expert if PKI is 100% safe, the answer would be a big
    *NO *- there are a few concerns that are raised by security experts from time
    to time. I will begin by looking at the management of CA certificates and private
    keys. The internet is full of billions of websites and services, and so there
    are multiple certificate authorities. Rolling out new standards takes many years
    since this affects the whole security ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: As a system, PKI is nothing but mathematics. Once someone cracks the formula,
    a new formula will be introduced to the industry, which looks stronger and more
    secure. But for how long would this be the case?  Another major issue comes with
    securing private keys. The normal scenario is that you, as a client, generate
    your private key pair on your own machine, then send the CSR to the CA as part
    of a certificate request. In some cases, it is a good idea to let the CA generate
    the key pair and send it to you. In case of private key loss, your CA can provide
    you with a private key.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a recent incident in which this happened. Thousands of
    customers received emails from the security firm DigiCert to say that their SSL
    certificates were being revoked because of a security compromise at Trustico. If
    the certificate is currently in an active state, this would mean that customers
    would begin receiving untrusted certificate warnings. According to an official
    statement, 23,000 private keys were compromised. This mainly affected customers
    who used Trustico's website to generate both their private/public keys and their
    CSRs.
  prefs: []
  type: TYPE_NORMAL
- en: You should never trust anyone with your private keys. They should be generated
    and kept safe only on the servers upon which you wish to install the certificates.
  prefs: []
  type: TYPE_NORMAL
- en: You can also visit [https://www.ssllabs.com/ssl-pulse. ](https://www.ssllabs.com/ssl-pulse)SSL
    pulse is a continuous and global dashboard for monitoring the quality of SSL/TLS
    support over time across 150,000 SSL and TLS-enabled websites, based on Alexa's
    list of the most popular sites in the world.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Windows and IIS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss SSL certificate installation with Microsoft
    IIS:'
  prefs: []
  type: TYPE_NORMAL
- en: Start IIS manager and double click server certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Actions menu (on the right) and click on Create Certificate Request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/e9ffe029-73e3-418f-af6d-b6e2a9e7ee63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the Request Certificate wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/07d1cb3b-824c-4341-886d-492b71909e7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Cryptographic Service Provider Properties window, leave both settings
    at their default values (Microsoft RSA SChannel and 2048) and then click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/911c39b8-3ca6-42d5-87a4-d8e482f82a21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a filename and location to save your CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f0913621-55a0-48db-bf7c-6f3104afd9f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now open the text file to check the CSR request. This file should go
    to CA to receive a signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/29f59753-a127-461e-9256-be755a3b3b44.png)'
  prefs: []
  type: TYPE_IMG
- en: OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenSSL is an open source project that consists of a cryptographic library and
    an SSL toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the project''s website itself, the OpenSSL Project is:'
  prefs: []
  type: TYPE_NORMAL
- en: '"A collaborative effort to develop a robust, commercial-grade,'
  prefs: []
  type: TYPE_NORMAL
- en: full-featured, and Open Source toolkit implementing the **Secure Sockets Layer**
    (**SSL**) and **Transport Layer Security** (**TLS**) protocols as well as a full-strength
    general purpose cryptography library. The project is managed by a worldwide community
    of volunteers that use the Internet to communicate, plan, and develop the OpenSSL
    toolkit and its related documentation."
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL libraries can be used to create a certificate request (CSR), a self-signed
    certificate and even to issue a certificate as a CA. If you are running a small or
    corporate organization  and have the ability to import a root trust certificate
    to all computer systems, you can become your own CA and issue certificates yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I will be using my Ubuntu server. This is an old release but of
    course you have the choice to upgrade it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/249bedcf-beb7-48bb-afd9-cf43217ef3f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The latest version can be downloaded from the OpenSSL official website: [https://www.openssl.org/source/](https://www.openssl.org/source/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6b4fb64f-567e-41b2-80cb-31742111bdca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Ubuntu server, you can locate files under the `/usr/lib/ssl` path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/634f8b3f-abe4-4e49-b5b1-0dce18908b67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at how to generate a private key and the CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will generate the private key. This will be an RSA 2048 key. However,
    you have the option to choose DSA or EC keys. The fields which ask for your email
    address, optional company name and challenge password can be left blank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9ab59c42-d987-4d88-a90c-aa088fd86803.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In step two you will be asked for the information required for the certificate,
    organization, state, organization name, FQDN and email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c25e5fd3-089f-4429-ba9c-77989a573795.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The private key and CSR can now be located in same folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b7b608f0-0b53-49b6-b01c-9953083d527b.png)'
  prefs: []
  type: TYPE_IMG
- en: This is just an overview. For more information, you can visit [https://www.openssl.org/](https://www.openssl.org/) or
    main pages.
  prefs: []
  type: TYPE_NORMAL
- en: SSL Management tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my personal experience, the most common issue with managing certificates
    is the certificate expiry. For small organizations, manual tracking is possible,
    but this would be a strenuous exercise. It is better to have an automated framework
    to monitor the certificate expiry/renewal across all service assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few of the very famous SSL management tools include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SolarWinds SSL Certificate Management**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Qualys CertView**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter served as an introduction to understanding the world of PKI. The
    chapter began with the basic fundamentals of SSL from a user's point of view and
    discussed how SSL works for web-based applications. We also covered what functions
    and algorithms are available for us to generate a strong certificate. In addition,
    we have seen how certificates are generated for Windows IIS and looked at how
    to use the OpenSSL tool. This chapter also gave you an insight into the threats
    to PKI and how to safeguard against them for a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss firewall as a security appliance and explore
    its place in network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The full form of SSL is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Serial Session Layer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Secure Socket Layer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Session Secure Layer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Series Socket Layer
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What provides security at the transport layer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SSL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: TLS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: either (1) or (2)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: both (1) and (2)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the standard TCP port for an SSL supported application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`420`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1032`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`443`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`322`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you identify a secure site? Select all correct answers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the open padlock
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the locked padlock
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, refer to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tools.ietf.org/html/rfc6101](https://tools.ietf.org/html/rfc6101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://tools.ietf.org/html/rfc5246](https://tools.ietf.org/html/rfc5246)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ssllabs.com/](https://www.ssllabs.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blog.pcisecuritystandards.org/are-you-ready-for-30-june-2018-sayin-goodbye-to-ssl-early-tls](https://blog.pcisecuritystandards.org/are-you-ready-for-30-june-2018-sayin-goodbye-to-ssl-early-tls)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.openssl.org/](https://www.openssl.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
