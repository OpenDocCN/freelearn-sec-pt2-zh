- en: All About Using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are getting closer and closer to becoming a pro in application security
    testing. This chapter is dedicated to an amazing application called **Burp Suite**.
    It is a mandatory tool for testing web application security. I'm not trying to
    sell you the application; rather, I'm giving you an honest opinion, based on my
    own experience as a web application penetration tester. Burp was written by PortSwigger
    Ltd. I can't thank them enough for allowing us to test web applications, making
    sure that they are secure against threats.
  prefs: []
  type: TYPE_NORMAL
- en: You're probably wondering, why Burp? Why not one of the fancy, expensive, single-button
    tools out there on the market?
  prefs: []
  type: TYPE_NORMAL
- en: First of all, just because they are expensive doesn't mean that they are good;
    secondly, don't be a slave to the Gartner charts. Big companies increase their
    prices when they appear at the top of the Gartner chart; they are big businesses,
    and they want to make big bucks. On the other hand, Burp offers many options (from
    manual to automated tests) for only 350 USD per year, compared to other big name
    scanners, which cost thousands of dollars per year. When you work in the security
    field, you will be amazed by how expensive these tools are. Our job, as professionals,
    is to help our clients or companies choose the right tools for their budgets,
    while also providing a professional outcome.
  prefs: []
  type: TYPE_NORMAL
- en: False positives (fake vulnerabilities that are flagged by the scanner) will
    always be there, and it is your job to differentiate the real vulnerabilities
    from the false ones. Never copy and paste the contents of any report without understanding
    its contents. Try to test a vulnerability and make sure that it's real before
    putting it into a final report.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will do my best to cover the ins and outs of Burp Suite,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical examples of how to use Burp Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Burp Proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install the Burp SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to crawl a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find hidden items using Burp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Burp vulnerabilities scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Repeater tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the functionalities of the Intruder tab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install additional applications in Burp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite is a simple platform for web application security testing. This application
    has many tools, combining to form a monster at your fingertips. It will help you
    to test every component of your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Burp will be the key in cases where you need to check how strong your website
    security is, how predictable your session tokens are, or how valid the checkpoint
    data in your application is. Furthermore, Burp allows for detailed manual assessments
    and automated technique combinations, leading to enumerate and analyze web application
    security analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Burp has two editions that are available for download:'
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite Community Edition (pre-installed on Kali)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burp Suite Professional Edition (requires a yearly license, around 350 USD per
    year)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, Burp is a local web proxy that allows you to manually modify, intercept,
    and inspect HTTP/S requests and responses between a user's browser and the target
    website that you're trying to test. While the user navigates through the web application
    manually, the tool intercepts all of the necessary details on all visited pages.
    The traffic between the server and the browser can be analyzed, modified, visualized,
    and, eventually, repeated multiple times. The professional version of Burp allows
    you to scan and find web application vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The different tools included in Burp Suite can be seen in the tabs area (see
    the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6554e2b6-f780-4734-a441-8227865424ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Target: This tool allows you to visualize your target application''s contents
    in a folder structure hierarchy that corresponds to the site''s URL structure. This section
    shows all of the content that has been discovered until now, by manually browsing
    the site''s pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Proxy: This is the main engine of Burp, which allows it to intercept and modify
    all web traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Spider: This is a web spider tool that crawls applications to locate contents
    and functionalities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scanner: This tool is a web vulnerability scanner, which discovers numerous
    types of web vulnerabilities (SQLi, XSS, and CSRF) automatically. It is available
    in the professional version only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intruder: This is a powerful tool for carrying out automated, customized attacks
    against web applications. I call it the web fuzzer; web fuzzing typically involves
    sending unexpected input to the target application. This process may help to identify
    web application security flaws.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Repeater: As the name suggests, it is used to manually modify and reissue web
    requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sequencer: This analyzes the quality of randomness in an application''s session
    tokens or other important data items that are intended to be unpredictable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Decoder: This allows for encoding and decoding data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Comparer: The Burp Comparer is a handy utility for performing a visual diff
    between any two items of data, such as pairs of similar web responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extender: Burp Extender (BApp Store) allows you to load Burp extensions, which
    extend Burp's functionalities through using third-party apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before I start to dig deeper into the functionality of each section, it is best
    to start with a simple example, so that you can quickly visualize how you can
    use this amazing application. *"Not just talking but by doing!"*
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to be an oversimplified example, so I will not go into too much
    detail. I want you to understand the big picture. Later in this chapter, you will
    learn the nitty-gritty details of the functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: Fire Burp up, and open your browser in Kali Linux (I already set the Proxy settings
    in Firefox; I will show you how to do that later).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the Mutillidae home page; you will see that the page is not loading,
    and that's normal, because the Proxy in Burp has intercepted the request and is
    waiting for you to take action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to Burp, and you will see the web request in the Proxy/Intercept section.
    At this point, you can change the request, but I will just send it to the server
    using the Forward button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6615c299-985d-4d4e-a743-dc66e5099b3a.png)'
  prefs: []
  type: TYPE_IMG
- en: When you click on the Forward button, Burp will send the request to the web
    server. If you enabled the option to intercept the response in the Options tab,
    then you'll see that, as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, the response is not intercepted; if you would like to change this
    behavior, go to the Options tab, and make sure that you have the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d6073314-886a-431c-8354-bb8db9bac982.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding settings are the ones that I use for request and response interception
    in Burp on a daily basis (by default, you will have different settings for request/response
    interception).
  prefs: []
  type: TYPE_NORMAL
- en: What's next? Let the response go back to the client by clicking on the Forward
    button. Then, switch the interception off by clicking on the Intercept is on button.
    Note that by clicking on this button, Burp will still collect the web requests/responses,
    but they will not stop the page from loading, and it will not give you a chance
    to intercept and change the contents (of the web request/response).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I will now go back to the Mutillidae website and try to log in, and then manually
    browse to a couple of pages, because I want burp to start recognizing the structure
    of this website. Now, go back to Burp and click on the Target tab, and you should
    see something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c4d4da74-7f40-4965-9eea-b24e6dce70e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks like Burp intercepted everything that my browser was trying to connect
    with, and that''s normal, because I did not filter or set the scope yet. To do
    this, I will right-click on the Mutillidae server IP address and select Add to
    scope:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f8167248-10ec-48ac-a2a9-89b55b4ce8f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I''m not done yet; we still need to clean up the mess, showing only the scope
    in the site map tree. To make this happen, click on the Filter: Hiding not found
    items; section, a menu will appear. Select the checkbox to Show only in-scope
    items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/33c87914-83cd-4ba5-bee1-8f6d91a1f070.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alright! You''re done with this basic tutorial. Here''s what a pen tester can
    do after finishing all of the preceding steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spider** the web application branch'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discover the **hidden contents**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inspect** the web request/response of each page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Passively scan** the web application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Actively scan** the web application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Perform some manual tests** using the Intruder and Repeater tabs'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the vulnerabilities for **false positives**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate a **report**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have purchased Burp Pro, then you can start it through the Terminal
    window by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '` java -jar -Xmx2G /[path]/[burp.jar]`'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the application structure using Burp Target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you saw how an application can be mapped by using Burp
    in the Target tab. In this section, I want you to learn how Burp Target works
    (in a simplified way) so that you can handle the workflow when you're doing the
    pen tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Burp Target tool offers you the following functionalities (I will only
    list the important ones):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visualize** the application structure using the Site Map tab.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define the **scope** of your target website using Add To Scope.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Spider** the web application to discover more contents using Spider this
    branch.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **hidden contents** using the Discover Content functionality.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conduct a **passive scan**, using Passively Scan this branch to identify some
    vulnerabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List **comments**, **scripts**, and **references** by using the Engagement Tools
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analyze** the web application target to identify all of the dynamic URLs
    and parameters by using Analyze Target.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Send** **web requests** to another tool tab (for example, Repeater, Sequencer,
    Decoder, Comparer, and Intruder).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conduct a full web application vulnerability scan using Actively scan this branch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the **reports** by branch using Issues/Report issues for this branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/09ba47e3-e462-4389-9022-1db9c8b0bf98.png)'
  prefs: []
  type: TYPE_IMG
- en: As you may have realized, the Target tab is your **dashboard** for everything
    that you want to initiate using Burp. You will frequently spend your time on this
    section/tab. Looking at the preceding screenshot, you can see, in the middle section,
    all of the **web requests/responses** to the application (under the Contents section)
    for further analysis. On the right-hand side of the screen, Burp shows the Issues,
    and the Advisory to fix every single flaw. Amazing, right?
  prefs: []
  type: TYPE_NORMAL
- en: Intercepting the requests/responses using Burp Proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Proxy tool is the heart of Burp. In summary, it intercepts all of the requests
    and responses that you try to manually visit using your browser. It operates as
    a web proxy server, and it sits as a man-in-the-middle between your browser and
    destination web servers. This lets you intercept, inspect, and modify the raw
    traffic passing in both directions (request/response):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/699789be-8924-4d2b-96f1-2580688d38ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the proxy in your browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm assuming that you are using Kali Linux for your web application penetration
    testing, so you will be using Firefox or Iceweasel as a browser. You can install
    Chrome, but the instructions that I'm using are for Firefox (if you're using Chrome,
    don't worry; the settings should be very similar to Firefox).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Burp''s port Proxy number is `8080`, and this can be changed in
    the Options sub-tab under the Proxy tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a36a2a91-dd3c-453e-8350-933658a57557.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open Firefox and select Preferences from the menu. Click on the Advanced tab
    in the left menu; after that, select the Network tab in the top menu, and click
    on the Settings button in the Connection section. Finally, enter the proxy settings
    in the Manual proxy configuration section (see the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/35e022fa-7ce1-4080-ac37-1a67186fc74e.png)'
  prefs: []
  type: TYPE_IMG
- en: Don't forget to disable the proxy when you're done with your pen tests; otherwise,
    your browser will not load any pages when you turn Burp off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that the No Proxy for: textbox does not contain the value `127.0.0.1:8080`,
    or else Burp will not intercept the connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a nice, easy shortcut to avoid making all of these changes manually.
    You can use the FoxyProxy plugin for Firefox. Try it out!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BURP SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use Burp Proxy most effectively with HTTPS websites, you will need to install
    Burp''s CA certificate as a trusted root in your browser. If you have not already
    done so, configure your browser to use Burp as its proxy, and configure Burp to
    generate a CA-signed, per-host certificate (this is the default setting). Let''s
    look at how to install it in Kali''s Firefox browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Firefox and browse to `http://burp`, then click on the CA Certificate button
    to download it locally to your `Downloads` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1a9c21cf-758b-406c-ab26-af2dac8933f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you''ve downloaded your CA file, open the Firefox Preferences from the
    menu. Click on the Advanced tab in the left menu; after that, select the Certificates
    tab in the top menu, and click on the View Certificates button. Finally, click
    on the Import button to install the certificate that you just downloaded from
    Burp (see the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/157fb174-29cd-4163-bbfa-4dcd67652f2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Burp Proxy options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the practical example that I shared with you previously, I showed you my
    configuration for the requests/responses in the Proxy/Options tab. Check it out,
    and try to implement it, if that is what you are looking for during your web intrusion
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'I intercept requests/responses for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: To inspect the contents of the requests/responses for analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To intercept the request to override JavaScript validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To intercept the response when I need to override any values that the server
    has sent (for example, any header value)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An interesting configuration section is the Response Modification, which allows
    you to Unhide hidden form fields or Remove JavaScript form validation automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ec7083d2-5745-457b-9bbb-ea88dc72ce40.png)'
  prefs: []
  type: TYPE_IMG
- en: Crawling the web application using Burp Spider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The idea here is simple: all you need to know is how to find all of the pages
    for the web application of your target scope. There are three ways to accomplish
    this task:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually crawling by using the Intruder tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically crawling by using Burp Spider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically finding hidden items by using the Discover Content tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually crawling by using the Intruder tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In some cases you want to run a manual crawling using one of the predefined
    dictionary file, to do this perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the root path; in our example, it''s `mutillidae`, because this is our
    starting point for crawling. Next, right-click on the request and send it to the
    Intruder tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/040a69db-5ab9-4f4b-ab02-51de5f9d965f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, the Intruder tab will start blinking, which tells you that it''s
    ready (let''s click on the Intruder tab). The first thing that you will encounter
    in the Intruder tab is the Target section; leave it as it is, and move on to the
    Positions section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5da1b1b5-ca26-4128-a923-f8c24ce45f90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Positions sub-tab, leave the attack type to Sniper, and write any word
    (in my case, I''ve chosen the word `attack`) after `mutillidae/`. After that,
    we need to make sure that we have a clean slate, so click on the Clear button
    to remove any pre-generated positions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/203ae874-ded8-4a65-a248-23ceec3fdb86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select the word that you just wrote. In the preceding screenshot, I selected
    the word `attack` and clicked on the **Add** button, to tell Burp that this is
    where I am going to fuzz for directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/726439d5-3940-4a68-8be3-7f3aa627788f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, click on the Payloads tab, and make sure that the Payload type
    is a simple list. Next, select Directories – short from the Add from list ... drop-down
    menu. You''re now ready to click on the Start Attack button, which will launch
    a pop-up window to show you the progress of the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/db0e239e-9373-4b40-91df-b1581649983b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click on the Status column header to sort the items by the response
    status code. For the Mutillidae application, I found an interesting passwords
    region (see the preceding screenshot). I will leave it as an exercise for you
    to check the contents of the passwords directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/82765259-874a-4bf2-a396-9f2ac70e387c.png)You can use the Repeater
    tab, which we will explore in upcoming sections, to verify the preceding findings.'
  prefs: []
  type: TYPE_NORMAL
- en: Automated crawling and finding hidden spots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding section, I showed you the manual method for finding interesting
    directories, and you can do the same for finding pages, as well. If you have no
    time and you want to use an automated method, Burp offers you an easy way to scan
    your projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Target tab, and, in the site map, right-click on your Target project
    and select Spider this branch from the menu. At this point, the Spider tab will
    blink, telling you that it's in progress; depending on the application depth,
    this action should not take too long to execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to check for the progress of the crawling, go to the Spider tab
    and select the Control sub-tab, and you should get an idea of what is going on
    there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/764fe834-5e2d-4852-85f8-6f9cea6e926c.png)'
  prefs: []
  type: TYPE_IMG
- en: An even more powerful and time-consuming tool that can find hidden files and
    directories also exists in Burp. Be careful with this one, because it is aggressive,
    and it can sometimes cause the site to malfunction. If you use it, ask the development
    team to back up the database, in case things go in the wrong direction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To find hidden contents, right-click on the `Application` directory in the
    Target/Site map section. From the menu, select Engagement tools; then, click on
    the Discover content menu item. After this action, a pop-up menu will appear.
    To run it, all you have to do is click on the Session is not running button, and
    the advanced crawling will start executing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/03301533-3dcf-4b18-bc7c-9c10e131dfb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Looking for web vulnerabilities using the scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For an effective web application penetration test, you will need to perform
    both a manual test and an automated test. If you only do one of them, you're not
    doing the right thing. This has been a debate, and sometimes, I see teams relying
    on fancy, automated tools, because they lack the knowledge for manual tests. On
    the other hand, I've seen teams with sky high egos; they think that manual tests
    are for the elite, and that those tests should be enough. My philosophy is that
    you need both. In this section, I will show you the automated method to scan for
    vulnerabilities. The manual method will be covered in an upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In Burp, the first type of scan is the passive scan, which involves analyzing
    the HTTP messages for evidence of certain types of vulnerabilities. It does not
    send any additional requests to the server. This can be accomplished when you're
    browsing manually, and you can trigger it by right-clicking on the target scope
    on the site map. Then, from the menu, click on Passively scan this branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second scan technique is the one that really automates the fuzzing to find
    web application vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute it, simply right-click on the directory that you wish to test, and
    then, from the menu, click on Actively scan this branch. After this action, a
    pop-up menu will appear. In general, I use the options that you can see in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b56b820c-6e14-4e8d-8695-dfd9761e8d64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Next, and a second step will show you the list of files that will
    be scanned in this process. Check them out, then click on the OK button to start
    the scanner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/39deb50a-778a-4351-9263-3804a7f3e094.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To check out the progress of this event, select the Scanner tab, then click
    on the Scan queue sub-tab. At first, you will see that the scanner has started
    to look for vulnerabilities; you can use the Status column as an indicator of
    the progress of the scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/6b5f8169-ca4f-4124-b1b3-a937d4ea0a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Later, when all of the statuses turn into a Finished state, you can start taking
    a peek at each item by double-clicking to see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f7ba025e-72b4-47c4-935a-894add890d69.png)'
  prefs: []
  type: TYPE_IMG
- en: This dialog window (seen in the preceding screenshot) allows you to analyze
    the Request that Burp generated to produce the error Response. Later, you will
    use the Repeater tab to double-check the results and make sure that there's not
    a false positive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it''s time to generate a report. To do this, go back to the Target
    tab and select your target application root directory (in our case, it''s going
    to be the `mutillidae` folder). Right-click and select Issues from the menu, then
    click on Report issues for this branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/652f2721-67a4-43b8-9883-021ea3582318.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you will have a few dialog windows to fill out; they''re pretty
    straightforward. I usually just choose the default options until the report is
    generated in an HTML format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f4f662da-1e4f-496d-9191-4e6fe58cca2e.png)'
  prefs: []
  type: TYPE_IMG
- en: At this stage, your role is to identify the false positives. Logically speaking,
    when you see Burp telling you that the confidence is **Certain** that is more
    than 90%, it is a real flaw. When the confidence is **Firm**, it means 60% it's
    not a false positive and **Tentative** most probably is a false positive. Flaws
    and vulnerabilities are called issues in Burp—just to make sure that you understand
    the terminology this application uses to identify web application vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Please do not copy the Burp report and give it to your client without checking
    for false positives; if you want to have a good reputation, then don't. I've seen
    reports from companies where the flaws were copied directly from the report—I've
    recognized the fonts in the Burp reports, and then you can assume what I did say
    when I saw that report.
  prefs: []
  type: TYPE_NORMAL
- en: Replaying web requests using the Repeater tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the name suggests, the Repeater tab allows you to repeat web requests manually.
    Why? To check the web response. Most of the time, you will use the Send to repeater menu
    item to send the results to this section. After that, just click on the Go button,
    and you will be able to replay the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ed0a709c-ae78-4ab0-bff1-2d60549eab45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the checklist that I implement when I want to use the Repeater
    tab:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing the logic flaws of a page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checking for false positive issues after generating a report
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the parameter values (for example, testing input-based vulnerabilities)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fuzzing web requests using the Intruder tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Burp Intruder is a monster of automation, and it allows you to enumerate, fuzz,
    and harvest data from the target web application. In the old days, when I started
    using Burp, the first thing that I learned was to use the Intruder tool to brute-force
    login credentials. We will cover more examples in the upcoming chapters, but for
    this section, I want you to understand the basics of this tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b730ca43-8044-427f-9e0c-3a827df3cfc7.png)'
  prefs: []
  type: TYPE_IMG
- en: Intruder attack types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most confusing things for beginners are the attack types in the
    Intruder tool. I will do my best to explain them to you in a practical way, so
    they won''t be an obstacle for you to use this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sniper**: This is the most popular one, and you can use it for only *one*
    payload. A practical example of this type of payload is the one that we saw earlier,
    for fuzzing directory names. Another example would be to fuzz the query string
    value. Hackers fuzz the product number in the URL, to see which products are on
    a discount before they appear online.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Battering ram**: This uses a *single* payload, as well, but it allows you
    to place the *same payload into all defined positions*. A practical example is
    when you want to insert the email address in the form field and the query string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cluster bomb**: This one uses *multiple* payloads for each position (the
    maximum is 20). In other words, this attack is used when an attack requires different,
    but *unrelated,* input to be inserted in multiple places in the request. The best
    way to explain it to you is through a practical example, which is the *password
    credentials attack*—my favorite one. So, you would use the username in one field
    and the password in the password field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pitchfork**: This one uses *multiple* payloads for each position (the maximum
    is 20). In other words, this attack is used when an attack requires different,
    but *related* (the opposite of the cluster bomb), input to be inserted in multiple
    places in the request. For example, when you want to insert a username in a field,
    and its associated ID in another field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practical examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, you have probably guessed what this tool can do, but let me widen your
    imagination and give you more examples that you can use when you want to handle
    the Intruder tab:'
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating usernames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating account IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating any ID (articleID, BlogID, ProductID, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating documents (PDF, TXT, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing for vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuzzing usernames/passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more; this is just a sample, including the most important ones,
    which I use on a daily basis. I hope they'll help you, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Installing third-party apps using Burp Extender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before I start on this section, I would like to inform you that I did not include
    the Sequencer, Decoder, and Comparer tabs in this chapter. In fact, I excluded
    them on purpose, because their usage is very straightforward. You will rarely
    use them in your daily career, so why waste your time?
  prefs: []
  type: TYPE_NORMAL
- en: 'Burp Extender is an important tab; it will allow you to include additional,
    powerful functionalities in Burp. For example, if you want to add the functionality
    to scan for outdated JavaScript libraries, then you can install the module `Retire.js`,
    and it will do the work for you. There is a tool for every need: WAF, errors,
    Java, .NET, SQLi, XSS, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Before starting to use the BApp Store, you will need to download the **Jython**
    standalone JAR from:[ http://www.jython.org/downloads.html](http://www.jython.org/downloads.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Jython is a library for Java and Python, and some apps use this library, so
    it''s a prerequisite for the apps to work. After downloading the file, go to the Extender/Options
    tab, and include the path where you copied the downloaded file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f5daf1af-9c00-4d95-88b1-7b817490b82e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To install your favorite app, go to the BApp Store tab and pick the application
    that fits your needs, then click on the Install button to install it. Sometimes,
    it takes a few seconds to install the app, so be patient. Some applications will
    inject an additional tab in Burp, so you will be able to configure it and manage
    the results at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a11b9059-e54b-4896-aab4-95f26a1633d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I use these apps a lot, and I thought I should share a list of my favorite
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: Active Scan ++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional Scanner Checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backslash Powered Scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CO2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error Message Checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON Beautifier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Random IP Address Header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retire.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan manual insertion point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLiPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAFDetect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wordlist Extractor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you see an error, like `java.lang.OutOfMemoryError: PermGen space`, you
    can fix it by starting Burp using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`java -XX:MaxPermSize=1G -jar [burp_file_name.jar]`'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You now know the ins and outs of Burp. In future chapters,
    we will use Burp to conduct our Web Intrusion Tests. I invite you to start practicing
    and using Burp; it is your Swiss Army knife for every Web Application Intrusion
    Test. If you can afford to buy a license, do it now! It is worthwhile for practicing
    and enhancing your web application hacking skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, I will show you the basics of web application vulnerabilities:
    a nice, exciting topic that will allow you to enhance and deepen your penetration
    testing skills.'
  prefs: []
  type: TYPE_NORMAL
