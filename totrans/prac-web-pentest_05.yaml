- en: Understanding Web Application Vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is going to be your main pillar of application security. You will
    learn the logic behind the most popular vulnerabilities in this field. Most attacks
    that are executed remotely use the web application infrastructure to get in. Finding
    a vulnerability such as SQL Injection on a site can be very harmful, as the attacker
    can take complete control of the server.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications are written in different programming languages, but the most
    popular ones are Java, .NET, and PHP. These days, we see a shift in web application
    programming, where the JavaScript language or the frontend takes an important
    part. Companies are using light-weight frontend technologies such as AngularJS
    to implement the idea of Single-Page Applications. As an application security
    pentester, you need to be aware of the vulnerabilities that exist for these types
    of technologies because developers tend to use these shiny functionalities without
    understanding the security risks that come with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this chapter will explain attacks that can happen to a web application,
    and after finishing it, you will be able to use your skills to manually manipulate
    your findings during pentests. In this chapter, you will learn about the following
    important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Remote and Local File Inclusion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Site Scripting** (**XSS**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Injection** (**SQLi**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Top 10 List
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File Inclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, this vulnerability can be exploited by including a file
    in the URL (by entering the path). The file that was included can be local to
    the server, and thus be called **Local File Inclusion**, or it (the path of the
    file) can point to a remote file, and thus be called a **Remote File Inclusion**.
  prefs: []
  type: TYPE_NORMAL
- en: Modern programming languages and web servers have built-in mechanisms to protect
    against this flaw. Unfortunately, in real life, you will encounter a lot of applications
    developed by legacy programming languages such as JSP (Java), ASP (Microsoft),
    and PHP, so the chance of finding a similar vulnerability is still there. One
    problem that can cause this issue is when the developer forgets to include a validation
    on the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Local File Inclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Local File Inclusion** (**LFI**) is exploited by including a file path in
    the URL that points to the local web server that hosts the web application. This
    vulnerability, when exploited, will allow directory traversal characters (such
    as dot-dot-slash) to be injected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What if I can change the `hackme` file to another file on the web server system?
    Let's check it out!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Interesting, right? This will load the `passwd` file on a Linux Web Server.
    Let''s see a more concrete example using Mutillidae:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the Mutillidae homepage and select OWASP 2017 from the left menu,
    then Broken Access Control | Insecure Direct Object References, and after that,
    click on Arbitrary File Inclusion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/fc68a497-ee64-4ca4-af1e-677fc38967be.png)'
  prefs: []
  type: TYPE_IMG
- en: Look at the URL, do you see the same pattern that we just saw together?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bac93bbf-0b5f-4442-a21c-0c3055d02a46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to see whether we can display a file from the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5c137226-15c4-48b9-980b-17d5bf230405.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! I just exploited this vulnerability. Now, try it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Remote File Inclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Remote File Inclusion** (**RFI**) is exploited by including a file path in
    the URL that points to the remote file outside the boundaries of the web server
    that hosts the web application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding URL, the victim server will load the `malware.php` page that
    resides on the hacker''s server. Let''s see a practical example using Mutillidae:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to the Mutillidae homepage and select OWASP 2017. We will choose the
    same menu that we used previously for the Local File Inclusion, that is, Broken
    Access Control | Insecure Direct Object References | Arbitrary File Inclusion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, it''s the same page that we tested for the Local File Inclusion but now,
    we will see if we can include a remote file. Before exploiting this vulnerability,
    we need to change a few things at the server level first. This page provides you
    with the help for changing the config file on the server. I will log into the
    web server and change the `php.ini` file under `C:\xampp\php\` (your path will
    be different if you''re using Linux to host Mutillidae):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/272546aa-e68a-4963-b07a-7de690a06c43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have changed the configs, restart the web server using the XAMPP
    Control Panel. Let''s see if we can hack this page. So, change the URL and let
    it point to and load another site, `http://ethicalhackingblog.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d030faaa-d5c6-48da-b8cd-e305ea5e9603.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see I was able to load my blogging website inside the Mutillidae
    application. Imagine a hacker loading his infected website inside another application
    that is accessible to millions of people, such as Facebook, or your client/employer
    website; the damage could be disastrous.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Site Scripting** (**XSS**), is exploited when the attacker can successfully
    execute any type of script (for example, JavaScript) on the victim''s browser.
    These types of flaws exist because the developer did not validate the request
    or correctly encoded the response of the application. JavaScript is not the only
    script language used for XSS but it is the most common (in fact it''s my favorite);
    attackers sometimes use scripting languages such as VBScript, ActiveX, Flash,
    and many more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'XSS is very popular and I encounter it every day while testing web applications. Every
    time I see a message displayed on the page that reflects a user input or behavior,
    then most probably it is vulnerable to XSS. But don''t worry, with experience
    and practice, things will become more obvious to you as well. There are three
    types of XSS attacks: **Stored**, **Reflected**, and **DOM Injection**. Let''s
    start with the easiest to understand, the reflected XSS.'
  prefs: []
  type: TYPE_NORMAL
- en: Reflected XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This flaw is exploited often when the page displays to the user something that
    can be manipulated dynamically through a URL or in the body of the page. Nothing
    is better than a visual example so let''s see a reflected XSS case using Mutillidae:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Kali Linux, open your browser and go to the Homepage, then on the left
    Menu, choose OWASP 2017 | Cross Site Scripting | Reflected | DNS Lookup. The first
    thing that you need to test is the happy path, so let''s enter a real IP address
    (for this example, I will use the IP `10.0.0.1` which is my home router) and click
    on the Lookup DNS button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9df0c55d-d7bb-49ab-b8a8-311a449f0ece.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the page has displayed the IP address that we just entered.
    This means that if I replace the IP address with a JavaScript code, it will execute
    it. In the textbox, replace the IP address with a test script, `<script>alert(1)</script>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/85fdcd68-6932-4bc9-9393-91ce925c5175.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Lookup DNS button and see if this script will execute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/ba165874-4227-4642-816d-b33d77000095.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, I used the `alert(1)` JavaScript, and that's probably all you
    need during the penetration tests. On the other hand, a hacker will use a more
    sophisticated JavaScript logic to collect personal information from its victim.
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced XSS attacks check out **Beef XSS Framework** on your Kali
    Linux host. After using this tool you will be amazed by the attack choices that
    an XSS vulnerability can bring to the table.
  prefs: []
  type: TYPE_NORMAL
- en: Stored XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second type of attack is stored XSS. Exploiting this one will be accomplished
    by saving the script (JavaScript) into a stored location through a page (for example,
    Blogs, CMS, Forums) into some sort of a storage file (for example, database, file,
    and logs). This flaw is dangerous because it is persisted and will execute when
    anyone visits the infected page later. Imagine that on Facebook (or any social
    media platform), you can submit a post that contains a JavaScript code that will
    execute by anyone who sees that post; amazing, right?
  prefs: []
  type: TYPE_NORMAL
- en: Please don't try it on Facebook - I'm just giving an example here, you don't
    want to get yourself in trouble! (By the way, Facebook and other big companies
    offers bug bounty programs and they will pay you money if you find any bugs).
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s why we have Mutillidae; to test our concept and check how things work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the homepage of Mutillidae, then on the left menu, choose OWASP 2017 |
    Cross Site Scripting | Persistent | Add to your blog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9a648e7d-4020-4407-890d-5d92129a2351.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Same as before, we will try to insert the same JavaScript alert that we did
    before and try to execute it by clicking on the S**ave Blog Entry** button (but
    this time, it will be stored as a blog):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/46a21ef1-1296-490c-9fdf-e08df6957321.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, every time a user visits this blog, he or she will be prompted when the
    page loads with the JavaScript alert because it's stored in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting stored XSS using the header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another interesting example that I would like to share with you is using the
    header to inject JavaScript into the page. Tricky right? But don't be surprised
    to see that the nature of web applications will allow us to manipulate the web
    page through the header.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s visualize this case so you can understand things better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the homepage of Mutillidae then on the left menu, choose OWASP 2017 |
    Cross Site Scripting | Persistent| Show Log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/61535c9b-ec47-476d-88c7-7e660cd120ce.png)'
  prefs: []
  type: TYPE_IMG
- en: This page records every visit to the Mutillidae application. The third column
    stores the Browser Agent value of the visitor. What if that visitor is malicious
    and replaces his browser agent with JavaScript using Burp?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/3da42edd-402c-4dd1-b124-054ce70ba03e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, I will intercept the page using the Proxy tab in Burp, then modify the
    Browser Agent with a JavaScript alert and forward it to the server (using the
    Forward button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d823e34d-89d3-4fee-a66e-43f83dee368e.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! This is the result of changing the user agent of our browser using our
    XSS trick in Burp. Again, this is a persistent XSS and every time the admin of
    the site visits this page, he or she will be prompted with our payload.
  prefs: []
  type: TYPE_NORMAL
- en: DOM XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first two types above, we''ve used the HTML to exploit the XSS vulnerability.
    DOM XSS injection, however, is accomplished through the JavaScript code instead
    of the HTML elements. Let''s see a practical example:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the homepage of Mutillidae, then on the left Menu, choose OWASP 2017 |
    Cross-Site Scripting | DOM-Based | Password Generator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This page uses the username query string value (which is anonymous in this case)
    to display on the page (it shows in the message This password is for [username]).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s try to change the anonymous username value to `gus` in the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bb031df2-a069-45d5-930f-e0f8779e76d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s inspect the page source by hitting the *F12* key on your keyboard, and
    see if we can analyze it. In the developer inspector section of Firefox, hit *Ctrl*
    + *F* to find the word `gus` in the DOM. The first match shows you the HTML part
    and the second one shows you the JavaScript part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the results, we can manipulate the DOM string to look legit and
    executable in JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, go to the Decoder tab in Burp/Decoder and paste the value there to encode
    it as an URL (in the right section select Encode as... then select URL from the
    dropdown list):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a1a530db-bed8-415e-a052-00904193f822.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s paste the encoded result in the Password Generator page URL.
    Hit the refresh button in your browser and you should get an alert:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/657ac18d-c372-4553-b01b-c0923e50db59.png)'
  prefs: []
  type: TYPE_IMG
- en: JavaScript validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What if the page is protected by JavaScript validation, do you think we still
    can hack it? Of course we can; the JavaScript validation is not enough—we should
    do it on the server as well. Let''s see how to overcome JavaScript using Burp:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will switch the security level to 1, which will enable JavaScript
    validation, by clicking on the **Toggle Security** button in the Mutillidae menu
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7205fec2-33d0-442c-becb-4243e7f43129.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Try to visit the same page above from the menu; on the left menu, choose OWASP
    2017 | Cross Site Scripting | Reflected | DNS Lookup and let''s try to execute
    our alert script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5df9510f-e162-48eb-9e77-fd42e5a29fb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the script was blocked by the browser, it didn''t even allow
    me to continue typing my script because of the validation rule applied to the
    textbox field. But this should not be a reason to stop us from going forward;
    I will enable the proxy in my browser (as I showed you in the previous chapter)
    and start Burp/Proxy to intercept the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/233caa85-4e52-402b-81a6-c54ed2770280.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I will change the `target_host` value and insert my alert script. Next, let''s
    forward it to the server (using the Forward button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5f410111-bbf7-4090-adb7-b74dacf061d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check this out! The JavaScript has executed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5daeb0be-427b-41bb-a23c-e1f39e21352a.png)'
  prefs: []
  type: TYPE_IMG
- en: Cross-Site Request Forgery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **Cross-Site Request Forgery** (**CSRF**) (some people pronounce it as *sea
    surf*), can be exploited when an attacker takes advantage of the user session
    to perform state-changing requests such as posting to a social network platform,
    money transfers, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This attack will involve some social engineering efforts from the attacker
    to convince the victim to visit the infected site. Imagine that the victim is
    an admin of a system, then the attacker can manipulate that system if it doesn''t
    have a CSRF protection. The most popular question in interviews for Application
    Security Engineer positions is the following: *What is the difference between
    XSRF and XSS? *The simpler the answer is, the better. In summary, XSS attacks
    rely on executing JavaScript in the victim''s browser, while XSRF relies on taking
    advantage of the victim''s session. Next time you have an interview, keep that
    in mind, maybe it will get you your dream job!'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, you need to understand an important basic concept. When you first
    authenticate to a website, a session cookie will be created uniquely for you and
    this cookie will remain until it expires. Another tricky thing about this concept
    is that your session cookie will remain even if you browse to another site (for
    example, the attacker site). Let''s take a look at an example of CSRF:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 01 – victim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The poor victim in this scenario will log into his account using the login
    page of Mutillidae. Once in, he browses to his blog page (using the left menu
    and then selecting OWASP 2017 | CSRF | Add to your blog). He uses his blog to
    add a new article (you know the guy is a super blogger!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c27254ef-6e66-4faa-af34-77e5a26939c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 02 – attacker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the other hand, the attacker has already accessed the same blog site and
    he has a different account that he uses to blog about anonymous activities on
    a daily basis. The attacker saw that this site is already vulnerable to Cross-Site
    Request Forgery using his favorite scanner, Burp. Next, he will build a malicious
    page to infect his victims. To build his page, he enabled the proxy/intercept
    in Burp to analyze the contents of the web requests. On the Intercept page, he
    will right-click on the request and try to generate a CSRF POC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2ea37056-11d3-41d4-b5a0-0d508e016f80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, a new pop-up window will show. At this moment, the attacker can
    take the generated HTML code and use it by copying the contents (using the Copy
    HTML button) generated by Burp:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ffe55a27-821c-4f63-b7fb-97ae7d96c51c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, Elliot, the attacker, takes this HTML code and saves it on his Kali machines''
    web server (he copied the HTML file to the `/var/www/html/` directory and later
    started his Apache server using the command `service apache2 start`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c5e6b56f-827c-4b78-aec1-fda47c73a910.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, Elliot''s server is ready for his victim to visit. He used social engineering
    tactics to convince his victim to go to that page and click this magic button:'
  prefs: []
  type: TYPE_NORMAL
- en: For this attack to work, the victim needs to be already signed in using Mutillidae.
    Remember, we will use his session, so we need it to be active by having the victim
    logged in to the system.![](Images/716b77e0-3182-439f-9063-18fe7fe9ca59.png)
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After clicking on this button (the Submit request button), the victim will be
    surprised when he visits his blog page and sees a blog that he did not save. Oops!
    Too bad Mr. Victim, that's because the blog is vulnerable to a CSRF flaw!
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/26945e0b-3789-4db7-a6a7-487f90b06a09.png)'
  prefs: []
  type: TYPE_IMG
- en: SQL Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SQL Injection is my favorite one, and it's the most dangerous one that you
    will encounter in your career. An SQL Injection vulnerability will allow a malicious
    user to execute SQL commands on the database through the web browser. The cause
    of this problem is like any other web vulnerability; the developer forgot to add
    any validation on the server side to protect against SQLi attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the most interesting part; an SQLi vulnerability will allow you to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Query the database using a `select` statement (for example, select the users
    table, thereby extracting the usernames and passwords)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bypass the login page by executing successful query results (you'll see an example
    soon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute system commands in the database in order to compromise the web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute inserts/delete commands to manipulate the records in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's time to see some actions folks! You will be shocked to see how powerful
    this vulnerability can be to a system.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication bypass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a user tries to authenticate to a system, the backend will execute a query
    that looks like this (for this example I''m using the credentials that I use to
    log in to Mutillidae):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the preceding query, the database will check if the record
    exists and if yes (the record exists) then a Boolean `True` value is returned
    and the user is authenticated. Hackers will take advantage of this theory to trick
    the database with a query that will always return a `True` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`or 1=1` will always return a true value and the `--` symbol is telling MySQL
    that everything after it is a comment, so it will ignore the rest of the query;
    tricky right?'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test this idea in Mutillidae, in the menu, select: OWASP 2017 | Injection
    SQL | SQLi - Bypasss Authentication | Login.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re on the login page, enter the magic query that we saw previously
    to bypass the authentication of this page (sometimes you have to enter a space
    character after the `--` for this query to work):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b51e1cb5-bbb8-48c4-8543-2ea89915a3ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check this out, folks! I''m a super admin authenticated user (see the following
    screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/30b736fe-bba7-4529-b52f-6b5b12f8a3fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Extracting the data from the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most of the leaked online passwords are done through this kind of attack. If
    you encounter this vulnerability during your pentests then it means you just hit
    the jackpot. The idea here is to be able to execute the famous query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Assuming that the database has a users table, this query will extract all the
    user's records from the database. It's like Christmas day; you're going to have
    all the usernames and passwords in a wrapped gift.
  prefs: []
  type: TYPE_NORMAL
- en: Error-based SQLi enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This technique relies on manipulating any input (for example, query string)
    to the backend and waiting for an error message to appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing is better than a real example, so let me show you one using Mutillidae:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the home page of Mutillidae, select the following item from the left menu:
    OWASP 2017 | Injection SQL | SQLi - Extract Data | User Info (SQL).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the User Lookup page, enter your credentials and hit the View Account Details
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/20e2b93f-38a5-4700-bc38-bbbcf2a4458d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This page is executing a query in the backend to get our username and password.
    Let''s enter a single quote `''` in the name field and check the results (the
    single quote):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9a91645d-1559-488a-b472-57ed42fbc8a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see at the bottom, we have an error message telling us that the
    SQL server did not understand our single quote:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In other words (in the hacker world), the SQL database has executed our single
    quote, hence, we can write our own query to extract data from the database. If
    we try to execute the magic query that we used to bypass the login page (`admin''
    or 1=1 --` ), then guess what? The database will be happy to return all the records
    in the accounts table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/42092b0c-9d00-488f-9ea6-a873af4fb1ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Blind SQLi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we don''t have a verbose error message and the database still executes
    a query in the backend, then we can blindly SQL inject our query: it''s called
    **Blind SQL Injection**. You can use the same examples shown previously, but assume
    that the server will not return an error message for you. In the end, you can
    still execute the magic query (`admin'' or 1=1 --`).'
  prefs: []
  type: TYPE_NORMAL
- en: Command Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command Injection is very simple, you just exploit it by executing commands
    on a web page because it allows you to do so. In other words, if you ever see
    a page that offers the functionality of executing a command in the backend, then
    it's probably vulnerable to this attack. Command Injection is very popular in **Capture
    the Flag** (**CTF**) because it allows you to completely own a remote machine
    (the machine that hosts the web application).
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, let''s see a practical example using Mutillidae. Open the left menu 
    OWASP 2017 | Injection | Command Injection | DNS Lookup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bde5d290-7055-4588-bc6a-141aa9d646f4.png)'
  prefs: []
  type: TYPE_IMG
- en: This page executes the DNS Lookup command in the backend. In this example, I
    entered the IP address `10.0.0.1` and clicked on the **Lookup DNS** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you think we can override the normal behavior of this page and execute any
    command of our liking? (Or maybe execute a backdoor such as `netcat`, just a hint).
    Let''s analyze the functionality on this page first. We are passing the IP address
    (or hostname) as a variable to a function in the backend that executes most probably
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If we''re lucky and the developer didn''t validate it, we can append other
    commands after the variable and the application will be happy to execute it for
    us. Our goal is to make the backend execute something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's see if this is going to work! For the POC, I will use the `dir` command
    (since it's a Windows machine that hosts Mutillidae).
  prefs: []
  type: TYPE_NORMAL
- en: 'I will enter the IP address and the `dir` command in the Hostname/IP: `10.0.0.1
    && dir` and click on the Lookup DNS button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d4b6ae29-8760-4808-a4da-ae8746892390.png)'
  prefs: []
  type: TYPE_IMG
- en: Amazing! The `dir` command has executed successfully!
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Top 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, you've seen the most important web application vulnerabilities
    in the OWASP Top 10\. The OWASP list includes even more items than what you have
    witnessed up until now. Application Security Professionals always keep the OWASP
    Top 10 as a reference in their career. This list is always kept up to date by
    the OWASP community and the latest version is the one that you saw in the Mutillidae
    Menu OWASP Top 10 – 2017; if you're reading this book in the future then there
    will probably be a newer list.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any doubts about the understanding of any of the top 10 items, then
    don't worry, because we will revisit those items one more time in the web intrusion
    tests later in this book with more practical examples; for the time being, try
    to see the big picture.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the Top 10 items in a simplified way so you can understand
    these vulnerabilities from a high-level overview.
  prefs: []
  type: TYPE_NORMAL
- en: 1 – Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Injection flaws can happen when an attacker can inject and execute a custom
    command in the backend because of missing sanitization. In this chapter, you've
    seen SQL Injection and Command Injection but there are more, for example, LDAP,
    XPath, NoSQL,**Object Relational Mapping** (**ORM**) tool, XML Parsers, and SMTP
    Headers (and the list is increasing over time).
  prefs: []
  type: TYPE_NORMAL
- en: 2 – Broken Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This flaw occurs when a hacker finds the user''s identity, credentials (both
    username and password), or web session. This can happen when a system:'
  prefs: []
  type: TYPE_NORMAL
- en: Allows automated attacks, where the attacker can guess valid usernames and passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Permits brute force or other automated attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows default, weak, or well-known passwords, such as `Password123`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses weak or ineffective credential recovery and forgot-password methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses plain text, encrypted, or weakly hashed passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposes Session IDs in the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not manage the Session properly after a successful login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3 – Sensitive Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This flaw occurs when the web application handles confidential information
    in clear text, either at rest (for example, a database connection string password
    in clear text) or in transit (for example, HTTP instead of HTTPS). In practice,
    you need to look for the following issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Missing security headers (I will show you the security headers in upcoming chapters
    when we talk about secure coding practices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any weak cipher algorithms used at rest or in transit (for example, MD5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any clear text protocols used to transmit data (for example, HTTP, FTP, Telnet,
    or SMTP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any issues with the TLS/SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 – XML External Entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Old applications that still use XML/SOAP web services are the ones that are
    the most susceptible to this kind of attack. In fact, any application (or backend)
    that uses XML to execute its functions will be a victim of this kind of flaw;
    this attack can lead to DOS (denial of service). So, here''s the list that you
    should keep in mind when handling XML items:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the application using a SOAP version older than 1.2?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application use SAML within a federated or **single sign-on** (**SSO**)
    environment?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application support any XML file upload?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application execute any of the items in the XML that can be manipulated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 – Broken Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This attack can happen when the attacker can execute functionalities that he
    is not allowed to perform (for example, admin privileges). This flaw can lead
    to information disclosure and performing unwanted actions such as deleting, adding,
    or changing data. From a practical point of view, as a penetration tester, ask
    yourself the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you call the back-end web services (SOAP or REST) and perform unintended
    actions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a normal user, can you call admin functions?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the server validate the **JSON Web Tokens** (**JWT**)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 – Security Misconfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This flaw is due to a nonsecure configuration on any of the servers (web, web
    service, or database). This includes the infrastructure and not only the application
    level configurations. As an application security expert, you need to check both
    the infrastructure level security and the application level as well. Let''s see
    a few tips that can give us some ideas about this issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Are any of the production servers (web, web service, or database) missing any
    patches?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do any of the production servers (web, web service, or database) have some default
    non-secure settings? (For example, default credentials.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are any unnecessary services enabled on any of the servers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the application using default error messages that display to users details
    about the stack trace?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are any dev environments deployed into production? (For example, test pages,
    test credentials, test data.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7 – Cross-Site Scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You already know this one, right? Just a quick reminder: this flaw is exploited
    when the attacker can execute JavaScript on the browser (reflected, stored, or
    DOM-based).'
  prefs: []
  type: TYPE_NORMAL
- en: 8 – Insecure Deserialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This one is rare and you will probably never see it in your career, but since
    it's there on the list, I still owe you an explanation. This attack can be executed
    on any system that serializes/deserializes data. This attack can be achieved when
    the attacker modifies the application's logic or tries to run a remote code execution
    if there are objects in the application that can change behavior or execute during
    or after deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: 9 – Using Components with Known Vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This flaw is related to unsecured or vulnerable application components  (for
    example, third-party libraries). In practice, always ask yourself the following
    questions to know if you have this type of flaw:'
  prefs: []
  type: TYPE_NORMAL
- en: Are any unsecured libraries used in the application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is any unpatched/legacy software used?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are any unsecured components used to support the application? (Flash, ActiveX,
    VBS, and so on; you get the idea.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 – Insufficient Logging & Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Insufficient logging and monitoring will allow an attacker to execute an attack
    without any detection. Also, insufficient logging will not allow us to prove any
    actions. In other words, we cannot verify the repudiation of the user action.
    For example, a user can buy an item with 0$ from our online store, but we have
    no proof that he/she did it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that you understood this chapter very well! I mean it; this chapter is
    key to your success in understanding application security vulnerabilities. If
    you're hesitant about any of the preceding topics, please stop and try to review
    them one more time. You should already have installed Mutillidae on your lab machine
    and started practicing all the preceding examples.
  prefs: []
  type: TYPE_NORMAL
- en: The topics that we discussed in this chapter do not incorporate all web application
    vulnerabilities, but I covered the most important ones that you will encounter
    in your career. SQLi is the most dangerous one and XSS is the most popular one
    that you will face during Web Intrusion Tests.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we will re-visit these vulnerabilities over and over again, and that's
    why you must master this chapter; if you don't, you will find the upcoming chapters
    difficult to understand.
  prefs: []
  type: TYPE_NORMAL
