- en: Application Threat Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have dedicated a whole chapter to this topic because people underestimate
    the importance of **Application Threat Modeling** (**ATM**). If you're an employee
    or a consultant in application security, you will always encounter projects that
    will deliver new releases of their product, and you will need to make sure to
    test these projects before they are deployed into the production servers. ATM
    happens at the beginning when the project is still in the Architecture phase.
    In fact, ATM is a security architecture document that allows you to identify future
    threats and to pinpoint the different pentest activities that need to be executed
    in the future deployment of the web application project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the plan for this amazing chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the software development life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Threat Modeling at a glance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Threat Modeling in real life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Threat Modeling document structure and contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A practical example of an Application Threat Modeling document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of principles in this chapter (and this book, as well) can be found at
    the **OWASP** website. I highly recommend that you keep the OWASP website in mind
    for your application security daily tasks: [http://www.owasp.org](http://www.owasp.org).
  prefs: []
  type: TYPE_NORMAL
- en: Software development life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every application proceeds into a development life cycle before it is deployed
    into production. First, the project team comes up with an idea for a new product
    (a website) that allows the business to earn more money and clients. This is the
    **Analysis/Architecture** phase, where everyone sits around the table to discuss
    all the challenges of this new project. At the end of this phase, an Architecture
    document will be produced and presented to the Architecture Board who will approve
    it if the project meets the company''s policies. After the approval, the project
    will start in the **Development** phase, where a team of developers and quality
    assurance engineers will join together to deliver the product. After a few sprints,
    a stable release will be ready for deployment into the production; the team will
    test this application and make sure that it''s free of bugs. If everything is
    good (gating), then the team will proceed and deploy the web application into
    the production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/48ea8a84-abf0-4010-8da8-ae1ae751b66d.png)'
  prefs: []
  type: TYPE_IMG
- en: You, as an application security professional, play an important role in this
    workflow. During the first Architecture/Analysis stage, you are required to attend
    the meetings to understand the new application. Once the architecture document
    is completed, you will create your ATM document. Later, during the Development
    phase, you will execute all the penetration tests activities (Source Code Review,
    Web Intrusion Tests, and Infrastructure Security Tests) based on the ATM document
    that you wrote at the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Application Threat Modeling at a glance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ATM is a methodology for analyzing the security posture of an application and
    it aims to help you lay out the foundations before starting the penetration testing
    activities. The document should address the security risks during the Architecture
    phase by identifying and quantifying them before project reaches the Development
    phase. You will see so many approaches out there for how to handle the threat
    modeling document (the best one that I recommend is the OWASP Application Threat
    Modeling document; check it out yourself and you will understand what I mean),
    but from my personal experience, I suggest you make it as simple as possible and
    don't waste your time over-describing the security risks of the application, because
    in this case, you're stepping on the feet of the information security risk assessment
    document. Use this document as a guide and a brainstorm to achieve the goal of
    the penetration tests' activities.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start writing this document, you need to attend a few meetings (project
    kick-off meetings) so that you understand the application that you will be testing.
    Generally, at the end of the Architecture phase, a detailed architecture document
    will be produced, and this will allow you to finalize your work.
  prefs: []
  type: TYPE_NORMAL
- en: Application Threat Modeling in real life
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the end of this chapter, I will provide a practical sample of an ATM document.
    If you feel that any of the items that I'm trying to discuss here are not clear
    (very theoretical), then I invite you to look at the example at the end of this
    chapter. If you want your team to be successful during the pentest phase, then
    you must do an ATM document prior to your penetration test activities. Let's take
    an example that I witness on a daily basis when I use this approach. A new project
    comes in, and the **Project Manager** (**PM**) contacts management, asking for
    an expert in application security, because they're going to build a new website.
    The management team then assigns you to that new project, which is still in the
    Architecture phase. You attend a couple of meetings to understand the contents
    of the project. Most probably, another security analyst from the information security
    department will be assigned to attend these meetings as well because his/her job
    is to write a risk assessment document for the same project. When the project
    team is ready, an architecture document will be produced and sent by email. Then,
    I can start on my application threat modeling document, of which I will send a
    copy to the Information Security Analyst and the Project Manager so they can use
    it as a guideline for the next phases. See the following table to understand how
    each phase is affected by our intervention.
  prefs: []
  type: TYPE_NORMAL
- en: 'This table contains a list of actions that I have witnessed in multiple big
    companies; the company that you work for probably has a different approach, but
    this is the best one that I''ve ever seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Requirements** | **Architecture** | **Development** | **Gating Before Deployment**
    | **Production** |'
  prefs: []
  type: TYPE_TB
- en: '| **Training**: Developers, DevLeads, and Architects should be trained about
    application security best practices. The company should encourage the security
    training for IT. Every team member should know their role:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Security Champion'
  prefs: []
  type: TYPE_NORMAL
- en: '- Dev Lead'
  prefs: []
  type: TYPE_NORMAL
- en: '- Developer'
  prefs: []
  type: TYPE_NORMAL
- en: '- Quality Assurance Agent'
  prefs: []
  type: TYPE_NORMAL
- en: '- Project Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '- Architect'
  prefs: []
  type: TYPE_NORMAL
- en: '- Application Security Agent'
  prefs: []
  type: TYPE_NORMAL
- en: '- Information Security Agent'
  prefs: []
  type: TYPE_NORMAL
- en: '- Architecture Peer review team'
  prefs: []
  type: TYPE_NORMAL
- en: '- Operation Security'
  prefs: []
  type: TYPE_NORMAL
- en: '- Deployment Gating Agent | **Architecture phase**: The project team will invite
    the **Application Security Agent** (**ASA**) to their kick-off meetings. By attending
    these meetings the ASA will discover any flaws in the design and he/she can give
    recommendations regarding the application security.**Application Threat Modeling**:
    In the end the ASA should write an Application Threat Modeling document that will
    live with the security risk assessment written by the **Information Security Agent** (**ISA**).
    | **Communication**: There are some major key roles in the development phase:**Security
    Champion**: Generally a dev lead, this person will communicate with the Application
    Security Agent for revising the flaws in the static/dynamic code analysis. False
    positives will always be there so the ASA''s role is to help the champion to figure
    out and differentiate the good flaws from the bad flaws. The Security Champion
    will make sure that his/her team is following the secure coding best practices.**QA**:
    The Quality Assurance Agent should know who the ASA is because they will need
    each other to determine when the pre-prod environment is ready for testing. |
    **Intrusion Test**: A Manual Intrusion Test should be executed before deploying
    into production. The Automated Test executed in the CI during the development
    phase is not enough to tackle any hidden web application-based vulnerability.**Code
    Review**: A Manual Static Code Analysis should be done and the ASA should be expert
    enough to not rely on the automated tools for discovering vulnerabilities.**Infrastructure
    Test**: A network vulnerability assessment will be executed against the web server
    where the application will be deployed to discover and assess the existing vulnerabilities.**Information
    Security:** The ISA will get the results of the tests and will communicate with
    higher management to sign any risks associated with the deployment of the web
    application.  | **Operation Security**: The **Operation Security Agent** (**OSA**)
    will be aware of the deployment of the new application and he/she will revise
    all the security documents written by the ASA and ISA. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Requirements**: Secure Coding Standards should be in place for developers
    to use. This document should be in the hands of the developers the first day they
    join the company. Having this document will decrease security flaws later in the
    development life cycle. | **Peer Review**: After everyone has done their job and
    we have an official architecture document plus the security documents described
    previously, then the peer review board will verify that everything is in respect
    of the company''s policies. | Generally, the QA will supply the ASA with the test
    credentials and the URL for testing.**PM**: The project manager will communicate
    with the ASA for the timesheet and for raising any impediments that could delay
    the deployment of the project. | **Gating**: The Deployment Gating Agent will
    check if the security tests are executed before allowing the project to go into
    production.The Deployment Gating Agent will communicate with the ISA and ASA to
    verify that everything is done correctly. | **Health Check**: The OSA will ensure
    that the application will be tested regularly (at least once per year).The test
    should cover the three categories; source code, intrusion test, and infrastructure
    test. |'
  prefs: []
  type: TYPE_TB
- en: One of the big advantages of the ATM document is that it allows me to remember
    what the project is all about when it's time to execute the tests. In reality,
    there will be a delay of many months between the Architecture phase and the deployment
    of the project into production. In general, you don't work on a single project,
    and because of the high number of tests that you're going to encounter, this document
    will be your reference to help you remember what happened at the beginning of
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Application Threat Modeling document parts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ATM document has multiple sections. In fact, this document can be between
    40-70 pages long. Understanding each section is crucial for a successful project.
    I know I told you previously to keep this document simple, but not too much; you
    should not miss the important details of an ATM document.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, here''s the list of the most important sections that an ATM document should
    contain:'
  prefs: []
  type: TYPE_NORMAL
- en: Data Flow Diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust levels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entry points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security risks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Flow Diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I placed this title, **Data Flow Diagram** (**DFD**), at the beginning for
    a reason; because it''s my favorite section and I use it as a reference in the
    ATM document. The DFD will allow us to gain a better understanding of the application
    by providing a visual representation of the different pieces of the web application.
    The focus of the DFD is on how data moves through the application from the user
    until it reaches its final destination (for example, a database or filesystem).
    Generally, I use the architecture document that you already received during the
    Architecture phase, from the project team, to develop the DFD (the architecture
    document should contain the architecture diagram of the application):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/93d59a9c-b315-4d40-a0a6-46a73453ad75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding diagram, there are a number of shapes that
    the application security community uses when designing a DFD:'
  prefs: []
  type: TYPE_NORMAL
- en: '**External Entity**: This shape represents the entity that interacts with an
    application (for example, customer, employee, manager, and so on):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/79eb318d-90e6-490f-9689-66ca2e19fa6a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Privilege boundary**:The privilege boundary shape is used to represent the
    change of privilege levels as the data flows through different areas in the system.
    It is represented by a red dotted line (see the preceding DFD example).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, I use the dotted rectangle shape to group the boundary for a group of
    items (for example, inside the company boundary).
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Flow**:The data flow shape represents data movement within the application.
    The direction of the data movement is represented by the arrows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/27bc82a7-6fa0-44eb-b214-66d1210f56b8.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Subprocess**:This shape is used to present a collection of subprocesses.
    You use this one when you know that the task can be broken down into its subprocesses
    in another DFD:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/2af3f5e9-13de-421a-b612-5f8e1883da79.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Process**: The process shape represents a piece that handles data within
    the application. In practice, I use the subprocess shape most of the time, but
    that''s me and you''re not obliged to follow my methodology (it''s nice to sometimes
    step outside the norms and not be a victim of the shapes):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/ee1b5861-760d-48de-988c-6762cc17ad6e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Data Store**:The data store''s shape is used to represent locations where
    data is stored (for example, file and database). I usually use the following shape:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/4189d367-7e71-4018-8906-0526fa7432ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I also use this shape (OWASP style):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4b50aacd-e48a-4cb7-87f3-b23d5e1c4119.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some rules that I learned by myself in order to have a successful
    DFD diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep it simple (don't add too many details), but don't miss the important details
    either
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be artistic and don't be a slave to the design that the community is using,
    you can have your own, too (discuss this with your manager if you have one)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The diagram should be self-explanatory, even if you look at it after a year
    (or more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This one can sometimes be confusing because of its name. External dependencies
    are typically the items that interact with the web application. The examples are
    endless here, but here are the ones that you will encounter most of the time:'
  prefs: []
  type: TYPE_NORMAL
- en: The web server vendor/OS (for example, IIS, Apache, and Linux Redhat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database server OS and version (for example, MSSQL, MySQL, Oracle, and Windows
    server 2016)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The firewalls and their versions (for example, Palo Alto Firewalls)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web service server (for example, IBM Datapower)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External suppliers web services/cloud services (for example, MS Azure, Amazon,
    and cloud services)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do NOT list all the details such as Cisco switches or routers, in the *External
    dependencies* section; you get the idea.
  prefs: []
  type: TYPE_NORMAL
- en: Trust levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Trust levels represent the access rights that the application will grant to
    any entity that is interacting with the web application. For example, if the web
    application stores its data in the database, in the backend, then ask yourself
    this question: who interacts with the database? The simple answer would be the
    Database Administrator, Database Read Users, and Database Read/Write Users. You
    should ask this question for every item that interacts with the web application
    (for example, web services, filesystems, logs, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: Entry points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entry points are the ways through which a potential attacker can interact with
    the application (read/write data). Examples can be any web page or web service
    endpoint. If you have a house, this will represent any door or windows to your
    house that allows a thief to get inside and steal things.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assets are the different parts of the application that a hacker would be interested
    in getting (also known as Threat target). Most of the time, the attacker is interested
    in the data, but here are more examples that you can use while developing this
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: Read user data (for example, passwords, credit cards, personal information)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute unauthorized functionalities (for example, add a new user and delete
    an account)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to unauthorized systems (for example, access to the database, access
    to the web server file system through a terminal window)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different systems availability (for example, DOS against a web server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Your ATM document should include the different security tests that you will
    execute before deploying into production. You need to explain to the project why
    you're doing the tests and what the necessary details for this task are. For example,
    you need to specify the environment of the test (Dev, Staging, or Production).
    Also, will you need credentials for testing? If so, how many? (For example, admin
    or guest.)
  prefs: []
  type: TYPE_NORMAL
- en: Security risks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ATM document is not a replacement for risk assessment, but it is a guide
    for you to get only the high-level application security risks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Always ask the following questions to get a quick risk level of the application
    as a whole:'
  prefs: []
  type: TYPE_NORMAL
- en: Does the application handle any confidential data? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application write data to the backend? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any impact on the company's public image? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any impact on the company's clients? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the application accessible from the internet? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the application accessible from mobile devices? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application interact with third-party services? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the application developed by a third-party? Y/N
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wait, there is more—this is just an overall questionnaire that can give you
    a head start. Next, you need to classify the attacker''s goals using the **STRIDE** methodology,
    which stands for:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spoofing**: When a hacker steals the credentials/session of the victim'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tampering**: The threat is accomplished by manipulating data at rest and
    in transit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repudiation**: This happens when we cannot trace who did what'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Information Disclosure**: This threat reveals confidential information to
    a hacker without being authorized to do it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denial of Service**: Threat targeting the systems and making them unusable
    by clients'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elevation of Privilege**: Threat aimed to gain administrator privileges on
    the remote system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we take each security threat and give it a risk rank point using the **DREAD** methodology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a simple explanation of the **DREAD** ranking:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Damage** (impact?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reproducibility** (how easy it is?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exploitability** (time and effort?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Affected Users** (how many users, including clients and employees?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discoverability** (easy to discover?)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To calculate it, you need to give a rank number for each from 1 to 10, where
    1 is low and 10 is high. After that, you add all the scores together and divide
    them by five and you will get the average result. Don't worry, you will see a
    practical example soon; for the time being, try to get the big picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to get a score/rating using DREAD is easy; the following table tells
    the story:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Name** | **High (8-10)** | **Medium (4-7)** | **Low (1-3)** |'
  prefs: []
  type: TYPE_TB
- en: '| D | Damage  | The attacker can subvert the security system; upload contents;
    get a remote shell; run as administrator. | Leaking some confidential information.
    | Leaking non-confidential Information. |'
  prefs: []
  type: TYPE_TB
- en: '| R | Reproducibility | It can be reproduced in a short period of time. | It
    can be reproduced in certain situations. | It''s very hard to reproduce the attack.
    |'
  prefs: []
  type: TYPE_TB
- en: '| E | Exploitability | A script kiddie can exploit the vulnerability. | It
    takes some skills to exploit the vulnerability. | It takes someone with highly
    advanced skills to exploit the vulnerability. |'
  prefs: []
  type: TYPE_TB
- en: '| A | Affected Users | More than 1,000 customers affected. | Between 100 and
    1,000 customers affected. | Less than 100 customers affected. |'
  prefs: []
  type: TYPE_TB
- en: '| D | Discoverability | Can be easily discovered using trivial tools. | Discovering
    the vulnerability will take some skills. | Discovering the vulnerability is highly
    difficult. |'
  prefs: []
  type: TYPE_TB
- en: 'Some people like to use the Information Security formula to calculate the security
    risk:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Risk = Likelihood x Impact*'
  prefs: []
  type: TYPE_NORMAL
- en: Practical example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our practical example is based on the Company Name XYZ Inc. The marketing team
    in XYZ wants to add a blog page to attract more clients and they want to call
    the project xBlog. You attended a few kick-off meetings and now, finally, they
    have sent you the architecture document, and inside it, you have the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/87f5f0c6-2e8b-4a42-8055-f694f1a039e7.png)'
  prefs: []
  type: TYPE_IMG
- en: According to this diagram, the clients (customers) will be able to access the
    blog from anywhere and they can add comments (the authentication process for customers
    is out of scope because clients will be authenticated through the main page of
    the company's website). On the other hand, the employees of XYZ can add a blog
    or approve a client comment through the WordPress CMS. Simple, right? Your job
    as an application security expert is to submit an ATM document to the project
    team before going to the architecture review board; let's start!
  prefs: []
  type: TYPE_NORMAL
- en: xBlog Threat Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cooperation with the [Company Name] objectives, which are aiming to preserve
    the security of its digital information resources, it is important for the administration
    of [Company Name] to be aware of the security risks and threats associated with
    the use of the [xBlog] application during normal business operation.
  prefs: []
  type: TYPE_NORMAL
- en: This document consists of a security assessment report using Application Threat
    Modeling techniques. We will be evaluating the application [xBlog] to understand
    the security risks that can make an impact on the business operations of [Company
    Name].
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This document will be applied only to the application [xBlog] of [Company Name].
    The application [xBlog] is physically located at the [Company Name] facilities.
  prefs: []
  type: TYPE_NORMAL
- en: Threat Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define Threat Modeling here, refer to the *Application Threat Modeling at a
    Glance* section of this chapter.]'
  prefs: []
  type: TYPE_NORMAL
- en: Project information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will add the description of the [xBlog] web application.
    The following table aims to identify the big picture for this project and to identify
    the users that will interact with it as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Application Version** | [xBlog v1.0] |'
  prefs: []
  type: TYPE_TB
- en: '| **Description** | The application [xBlog] is a new application that will
    target the [Company Name] customers and allow them to read blogs and comments
    to those blogs as well. The Blog [`blog.domain.com`] will be hosted separately
    using the WordPress CMS. A local admin will be able to administer the blog by
    adding new articles and managing the blog''s comments as well.Two types of users
    will use this application:'
  prefs: []
  type: TYPE_NORMAL
- en: Customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress administrators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Document Owner** | Gus Khawaja |'
  prefs: []
  type: TYPE_TB
- en: '| **Participants** |'
  prefs: []
  type: TYPE_TB
- en: John Doe (Solution Architect)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jane Doe (Project Manager)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elliot Doe (Information Security Director)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Data Flow Diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define Data Flow Diagram here, refer to the *Data Flow Diagram* section
    of this chapter:]'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2369771e-67fb-4dea-a451-48f7dfbbb0a3.png)'
  prefs: []
  type: TYPE_IMG
- en: External dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define External Dependencies here, refer to the *External dependencies* section
    of this chapter:]'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | The Website [`www.domain.com`] is protected by Cisco firewalls in DMZ
    Zone and the only communication available is TLS. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | The Website [`www.blog.domain.com`] is using WordPress and is protected
    by a Cisco firewall in a DMZ Zone. The only communication available is TLS. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | The Admin page for WordPress [`wpadmin.blog.domain.com`] is accessible
    internally through an HTTPS Link. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | The web server of [`www.domain.com`] is using Microsoft IIS and Windows
    Server 2016 with the latest security patches. (See the Nessus report on the intranet
    [rs66988_nessus.pdf].) |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | The web server of [`www.blog.domain.com`] is using Apache and Ubuntu
    Server 2016 with the latest security patches. (See the Nessus report on the intranet
    [rs56389_nessus.pdf].) |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | The database is using MySQL and is stored on the same server as the web
    application. (See the Nessus report on the intranet [rs56389_nessus.pdf].) |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | Customers will access the blog through a hyperlink located on the menu
    of the website [`www.domain.com`], which will redirect them to [`www.blog.domain.com`].
    |'
  prefs: []
  type: TYPE_TB
- en: Trust levels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define trust levels here, refer to the *Trust levels* section of this chapter:]'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Anonymous Web User | This is any web anonymous user that is trying to
    use the [xBlog] application. This type of user will read blogs but will not be
    able to add comments since they did not log in previously. |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Customers | The Customers will use the [xBlog] application to read blogs
    and add comments. The customer should be logged in order to add comments to the
    blog article. |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | WordPress Administrator | The WordPress Administrator will manage the
    website and approve blog articles. The role of the administrator is to approve
    customer comments as well before they go online. |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Blogs Creator | The Blog Creator will create a new blog and the administrator
    will later approve this blog before it''s published. |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Database Administrator | The Database Administrator is a MySQL professional
    who will make sure to maintain and manage the database that stores the data of
    WordPress. |'
  prefs: []
  type: TYPE_TB
- en: Entry points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define the Entry Points here, refer to the *Entry points* section of this
    chapter:]'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Name** | **Description** | **Trust levels** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | HTTPS | The website will be only accessible through TLS. All the pages
    of this website will use it as well. |'
  prefs: []
  type: TYPE_TB
- en: Anonymous web user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 2 | Blogs Page | This is the blogs articles listing page. |'
  prefs: []
  type: TYPE_TB
- en: Anonymous web user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| 3 | WordPress Login Page | The WP-Login page will be the one the employees
    use to log in to WordPress. |'
  prefs: []
  type: TYPE_TB
- en: WordPress administrator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs creator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define Assets here, refer to the *Assets* section of this chapter]. Optionally,
    you can add the Trust Levels (users) as an additional column to this table, but
    I don''t include it most of the time in my ATM documents; it''s your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Blog | Assets related to the blog''s website |'
  prefs: []
  type: TYPE_TB
- en: '| 1.1 | Access to WordPress | Get the credentials of an Admin/Moderator to
    access the WordPress platform |'
  prefs: []
  type: TYPE_TB
- en: '| 1.2 | Availability of the website | The ability to make the site unavailable
    to clients or employees who manage it |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Database | Assets related to the MySQL database that holds the website
    data |'
  prefs: []
  type: TYPE_TB
- en: '| 2.1 | Access to the database | Being able to access the MySQL locally or
    remotely |'
  prefs: []
  type: TYPE_TB
- en: '| 2.2 | Availability of the database | Making the database unavailable to users
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2.3 | Ability to execute SQL statements | Being able to execute SQL queries
    to extract or manipulate data in the database |'
  prefs: []
  type: TYPE_TB
- en: '| 2.4 | Access to Audit Logs data | Access the audit logs looking for confidential
    information |'
  prefs: []
  type: TYPE_TB
- en: Threats list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[To define Security Risks here, refer to the *Security risks* section of this
    chapter.]'
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing – authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | Threat action aimed to illegally access and use
    another user''s credentials, such as username and password. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | Customer and employee credentials. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | An attacker can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Steal the credentials through social engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute-force attempts to get into the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform an SQL injection to bypass authentication or extract a user's credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intercept and steal the session cookie from a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Counter-Measure** |'
  prefs: []
  type: TYPE_TB
- en: Secure Password Policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sessions Timeout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account Lockout against brute-force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging failed attempts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation against SQLi and XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The admin console for WordPress is only accessible through the intranet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing Counter-Measure** | N/A - it''s a new project |'
  prefs: []
  type: TYPE_TB
- en: 'The DREAD review is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage |'
  prefs: []
  type: TYPE_TB
- en: Getting an admin account will allow the hacker to upload a remote shell and
    own the box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a client account will allow the hacker to only post blogs on his behalf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | It can be reproduced in a mid-long period of time. | 6
    |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | It doesn''t take a lot of skill to execute this attack.
    | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | An attack can be targeting a single user.Dumping the MySQL
    database will include most of the customers and the admin account as well. | 7
    |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | The Login page (for admin authentication) in WordPress
    is only accessible through the intranet. So, discovering the application will
    be limited to the intranet zone. | 3 |'
  prefs: []
  type: TYPE_TB
- en: '|  | **Total** | **6.2** |'
  prefs: []
  type: TYPE_TB
- en: Tampering – integrity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | Threat action that mainly aims to alter the data
    at rest or in transit. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | The site data. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | An attacker can do the following for this type of threat:'
  prefs: []
  type: TYPE_NORMAL
- en: Can manipulate data through an SQL injection Attack / XSS Attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An internal attacker can manipulate data by accessing the database directly
    without having the right privilege
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An attacker can intercept the communication and alter it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Counter-Measure** |'
  prefs: []
  type: TYPE_TB
- en: The admin console for WordPress is only accessible through the intranet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database will not be accessible directly by a DB admin (only accessible
    through WordPress)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication is only accessible through TLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing Counter-Measure** | N/A - it''s a new project. |'
  prefs: []
  type: TYPE_TB
- en: 'The DREAD review is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage  | Manipulating the data will damage the blog site and its integrity
    as well. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | It can be reproduced in a mid-long period of time. | 6
    |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | It takes a lot of skill to execute this attack. | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | Most of the clients could be affected by this type of attack.
    | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | The Login page (for admin authentication) in WordPress
    is only accessible through the intranet. So, discovering the application will
    be limited to the intranet zone. | 3 |'
  prefs: []
  type: TYPE_TB
- en: '|  | **Total** | **4.6** |'
  prefs: []
  type: TYPE_TB
- en: Repudiation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | Threat action aimed to perform illegal operations
    in a system that lacks the ability to trace the prohibited operations. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | Website (WordPress) functionalities. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | An attacker can deny his/her attacks if the application
    does not support proper security logging. |'
  prefs: []
  type: TYPE_TB
- en: '| **Counter-measure** | The application should:'
  prefs: []
  type: TYPE_NORMAL
- en: Log all the activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throw errors in case of a threat (for example, an SQLi attempt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing Counter-measure** | N/A - it''s a new project. |'
  prefs: []
  type: TYPE_TB
- en: 'The DREAD review is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage | Some or little. | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | Can be reproduced any time. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | The attacker will need some experience in application logging.
    | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | It can vary from 1 to more than 100. | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | The attacker needs to know the logging/monitoring architecture.
    | 1 |'
  prefs: []
  type: TYPE_TB
- en: '|  | **Total** | **3.6** |'
  prefs: []
  type: TYPE_TB
- en: Information disclosure – confidentiality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | Exposing information (at rest and in transit) to
    someone not authorized to see it. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | Application (WordPress) data. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | An attacker can do the following for this type of threat:'
  prefs: []
  type: TYPE_NORMAL
- en: Read data in transit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read data from logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read data from error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blog article contents can reveal confidential information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hacker can exfiltrate data through SQL Injection attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hacker can query data if he/she has access directly to the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Counter-measure** |'
  prefs: []
  type: TYPE_TB
- en: Use only TLS for data in transit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logs should not contain confidential information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error messages should be generic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blog articles will be approved by admins before they are published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admins will approve the comments of the customers before they are published
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database will not be accessible directly by a DB admin (only accessible
    through WordPress)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing Counter-measure** | N/A - it''s a new project. |'
  prefs: []
  type: TYPE_TB
- en: 'The DREAD report is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage | The damage of seeing the data inside WordPress is limited to the
    blogs of the company. | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | Can be reproduced any time. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | The attacker will need some experience in application programming
    and advanced attacks. | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | It can vary from 1 to more than 100. | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | The attacker needs to know the application architecture.
    | 3 |'
  prefs: []
  type: TYPE_TB
- en: '|  | **Total** | **4.2** |'
  prefs: []
  type: TYPE_TB
- en: Denial of service – availability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | The application will be temporarily unavailable
    or unusable. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | Application operations. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | An attacker can send a huge number of requests aiming
    to bring the site down.   |'
  prefs: []
  type: TYPE_TB
- en: '| **Counter-measure** | Putting a threshold in the application configuration
    file or web server. |'
  prefs: []
  type: TYPE_TB
- en: '| **Existing Counter-measure** | Production Servers Load Balancing. |'
  prefs: []
  type: TYPE_TB
- en: 'The DREAD report is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage | The website will be inaccessible. | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | Can be reproduced any time. | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | A script kiddie can execute it. | 8 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | Between 100 and probably more than 1,000. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | Anyone can discover it using the URL. | 9 |'
  prefs: []
  type: TYPE_TB
- en: '|  | Total | **8** |'
  prefs: []
  type: TYPE_TB
- en: Elevation of privilege – authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| **Threat Description** | Threat aimed at gaining privileged access to resources,
    for gaining unauthorized access to information or to compromise a system. |'
  prefs: []
  type: TYPE_TB
- en: '| **Threat Target** | Network Infrastructure. |'
  prefs: []
  type: TYPE_TB
- en: '| **Attacker Steps** | After getting authenticated into the system, an attacker can
    upload a remote shell to manipulate the server remotely. If there are any missing
    configurations or patches, the hacker can take advantage of the flaw and escalate
    his/her  privileges. |'
  prefs: []
  type: TYPE_TB
- en: '| **Counter-measure** |'
  prefs: []
  type: TYPE_TB
- en: Servers are always scanned for missing patches and configurations as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring the applications for any suspicious activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Existing Counter-measure** |'
  prefs: []
  type: TYPE_TB
- en: Intrusion Detection Systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart Data Loss Prevention Systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smart Firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network Separation using VLANs and Firewalls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'The DREAD report is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DREAD** | **Details** | **Score /10** |'
  prefs: []
  type: TYPE_TB
- en: '| Damage | The damage is very high in this case because the hacker will own
    the system and the network as well. | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Reproducibility | It can be reproduced any time when the countermeasures
    are not implemented. | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Exploitability | The attack can be executed by an intermediate skill hacker.
    | 9 |'
  prefs: []
  type: TYPE_TB
- en: '| Affected Users | Between 100 and probably more than 1,000. | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| Discoverability | The flaw can be discovered internally because the admin
    console is not accessible to the outside perimeter. | 6 |'
  prefs: []
  type: TYPE_TB
- en: '|  | Total | **8.4** |'
  prefs: []
  type: TYPE_TB
- en: Test strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application security team under Information Security Management will conduct
    the necessary security tests to enhance the web application''s security posture.
    The activity listed in the following table will include all the items that need
    to be executed during the security penetration tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **Name** | **Tools** | **Description** | **Environment** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Manual Source Review |'
  prefs: []
  type: TYPE_TB
- en: Veracode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio IDE  for .NET
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse IDE for JAVA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| We don''t need to inspect the source code since the application will be using
    WordPress CMS. | Pre-Prod |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Web Intrusion Tests | Burp Suite Pro | The security analysts will execute
    a manual and automated Web Intrusion Test. This will simulate an attack that can
    happen on the website. | Pre-Prod |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Web Services Fuzzing | Burp Suite Pro | N/A | N/A |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Webserver Infrastructure Test |'
  prefs: []
  type: TYPE_TB
- en: Nessus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| The security analyst will test the web server infrastructure security and
    be looking for any missing security patches or non-secure settings. | PROD |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you've seen in this chapter, ATM is not so hard after all. People underestimate
    the importance of this document, but once you start using it, you won't be able
    to stop because it has so many benefits. Be creative and don't stick to the same
    template discussed in this chapter; instead, use it as a guideline for your next
    application threat modeling document.
  prefs: []
  type: TYPE_NORMAL
- en: Any professional website project starts with an architecture phase, and that's
    when you need to show your skills and consider the ATM document as a security
    architecture document as well. Your job is not only to be a pentester, and that's
    a very important concept to understand in the security field. Feel free to add
    your desired sections, for example monitoring, logging, secure coding, security
    controls, or any recommendations that you feel will help the project at the beginning
    before they start with the development phase.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss another important topic in application
    security; static code analysis (Source Code Review). I won't go into details about
    it for the time being. I will leave the fun of discovering all the interesting
    stuff for the next chapter.
  prefs: []
  type: TYPE_NORMAL
