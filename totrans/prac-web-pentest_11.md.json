["```\npython Automate.py\n```", "```\nseparator_single_line = '------------------------------------------------------------' separator_double_line = '============================================================'\n```", "```\n# Printing Red Text for errors def print_red(text): print(\"\\033[91m {}\\033[00m\".format (text))\n\n# Printing Green Text for messages def print_green(text): print(\"\\033[92m {}\\033[00m\".format (text))\n\n# Printing Yellow Text for warnings def print_yellow(text): print(\"\\033[93m {}\\033[00m\".format (text))\n```", "```\ndef save_results(results, folder_name, file_name):\n    try:\n        # Save the results to a folder/file\n  file_name_path = folder_name + \"/\" + file_name\n\n        # If the folder does not exist then create it\n  if not os.path.isdir (folder_name):\n            os.mkdir (folder_name)\n\n        # Create the file object\n  file_to_save = open (file_name_path, 'w')\n        # Make sure the output is correctly encoded\n  results = results.encode ('utf-8')\n        # Write the changes\n  file_to_save.write (results)\n        # Close file object\n  file_to_save.close ()\n    except Exception, e:\n        exception_message = str (e)\n        print_red ('[!] Error: Cannot save the results to a file! Reason:\\r\\n' + exception_message)\n```", "```\ndef execute_cmd(tool_name, cmd):\n    start_msg = \"[+] Starting %s ...\" % tool_name\n    print_green (start_msg)\n    # The output variable that stores the output from the command line\n  output = ''    try:\n        # Cleanup the command string\n  cmd = cmd.rstrip()\n        # Execute the command\n  output += subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)\n        # Add a new line\n  output += '\\r\\n'\n  except Exception, e:\n        exception_message = str (e)\n        output += exception_message\n        print_red (\"[!] Error executing the command: \" + cmd + \" Reason:\\r\\n\" + exception_message)\n        output += '\\r\\n'    output += separator_single_line + '\\r\\n'    end_msg = \"[+] Finished %s ...\" % tool_name\n    print_green (end_msg)\n    return output\n```", "```\ndef error_execution(tool_name): print_red (\"Error Executing \" + tool_name)\n```", "```\nnmap_ftp_tool_name = 'NMAP FTP Enum' def execute_nmap_ftp_enum(ip_address, port_number):\n command = \"nmap -sV -p %s --script=ftp* %s\" % (port_number, ip_address)\n return execute_cmd (nmap_ftp_tool_name, command)\n```", "```\nnmap_tool_name = 'NMAP HTTP Enum' crawler_tool_name = 'Gobuster'   # Description: Execute an Nmap HTTP enum command # Return: The output after command execution def execute_nmap_http_enum(ip_address, port_number):\n    command = \"nmap -sV -p %s --script=http-enum,http-vuln*  %s\" % (port_number, ip_address)\n    return execute_cmd (nmap_tool_name, command)\n\n# Description: Execute an HTTP browsing enum command # Return: The output after command execution def execute_directories_http_enum(ip_address, port_number):\n    command = \"gobuster -u http://%s:%s -w /usr/share/wordlists/dirb/common.txt -s '200,204,301,302,307,403,500' -e\" % (\n        ip_address, port_number)\n    return execute_cmd (crawler_tool_name, command)\n```", "```\nclass ServiceDTO:\n    # Class Constructor\n  def __init__(self, port, name, description):\n        self.description = description\n        self.port = port\n        self.name = name\n```", "```\ndef start_nmap_tcp_scan(ip_address):\n    nmap_tcp_command = \"nmap -T4 -sS -sV -sC -p- -O --open --osscan-guess --version-all %s\" % ip_address\n    nmap_tcp_output = execute_cmd ('Nmap TCP Scan', nmap_tcp_command)\n    #Parse the nmap scan results\n  service_names_list = parse_nmap_output(nmap_tcp_output)\n    #Start the enumeration process\n  start_enumeration_process(service_names_list,ip_address)\n    print_yellow(\"[!] The Program Scanner Has Finished The Execution (report saved to /reports)\")\n```", "```\ndef parse_nmap_output(nmap_output):\n    service_names_list = {}\n    nmap_output = nmap_output.split (\"\\n\")\n    for output_line in nmap_output:\n        output_line = output_line.strip ()\n        services_list = []\n        # if port is opened\n  if (\"tcp\" in output_line) and (\"open\" in output_line) and not (\"Discovered\" in output_line):\n            # cleanup the spaces\n  while \"  \" in output_line:\n                output_line = output_line.replace (\"  \", \" \")\n            # Split the line\n  output_line_split = output_line.split (\" \")\n            # The third part of the split is the service name\n  service_name = output_line_split[2]\n            # The first part of the split is the port number\n  port_number = output_line_split[0]\n\n            # It's time to get the service description\n  output_line_split_length = len (output_line_split)\n            end_position = output_line_split_length - 1\n  current_position = 3\n  service_description = ''    while current_position <= end_position:\n                service_description += ' ' + output_line_split[current_position]\n                current_position += 1    # Create the service Object\n  service = ServiceDTO (port_number, service_name, service_description)\n            # Make sure to add a new service if another one already exists on a different port number\n  if service_name in service_names_list:\n                # Get the objects that are previously saved\n  services_list = service_names_list[service_name]\n\n            services_list.append (service)\n            service_names_list[service_name] = services_list\n\n    return service_names_list\n```", "```\n# Start the enumeration process after the TCP scan def start_enumeration_process(nmap_output_services_list, ip_address):\n    enum_output = ''\n  for service_name in nmap_output_services_list:\n        services = nmap_output_services_list[service_name]\n        if service_name == \"http\":\n            for service in services:\n                port_number = service.port.split(\"/\")[0]\n                enum_output += enum_http(ip_address,port_number)\n        elif \"ftp\" in service_name:\n            for service in services:\n                port_number = service.port.split (\"/\")[0]\n                enum_output += enum_ftp(ip_address,port_number)\n\n    save_results(enum_output,'./reports', ip_address+\".txt\")\n```"]