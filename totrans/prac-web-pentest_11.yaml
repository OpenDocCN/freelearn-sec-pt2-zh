- en: Pentest Automation Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Folks, this is the last chapter of this book, and I would like to congratulate
    you on getting this far. Only disciplined and motivated people get to the finishing
    line, and you all have my respect. So far, you've learned many Terminal commands
    that you can execute during security tests. However, one thing that you will realize
    during pentests is that a lot of commands will just repeat over and over again,
    so why not **automate** these commands using a scripting language such as Python?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I will quickly show you how to install a Python IDE on Kali,
    and after that, we will look at a practical scenario and try to develop a program
    using Python. I will walk you through all the steps needed for you to start automating
    your penetration testing tasks, using practical examples as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: I created a full reference section for Python in *Appendix E. C*heck it out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Are you ready to start? First, let me give you a heads up of the contents of
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to install a Python IDE on Kali
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning how to develop an automated script in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need a Python **Integrated Development Environment** (**IDE**) to develop
    your own scripts. You're not obliged to use a Python IDE, and instead, you can
    use any text editor in Kali Linux (for example, nano, vim, or gedit). However,
    using a professional IDE is a must if you want to easily develop large scripts
    that allow you to debug errors, format the source code, visualize the output,
    and detect errors even before the application is run. In this chapter, we will
    use a very popular and free Python IDE called **PyCharm**. You can find it at [https://www.jetbrains.com/pycharm/](https://www.jetbrains.com/pycharm/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the Python interpreter using your Terminal window. Let''s
    say you have an idea and you want to test it quickly. Open your Terminal window
    in Kali, type `python`, and then press *Enter*. Let''s look at an example. I will
    create a variable called `ip_address`, give it a value, and then print it on the
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b47ecd04-5c8c-42f9-ac1c-3a1981fd99f4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see in the preceding screenshot that the default Python interpreter
    in Kali is 2.7.14, and in fact, that's the one that I will be using in this chapter.
    Yes, there is a newer version of Python (version 3), but it will not be covered
    in this book. If you would like to deepen your knowledge of Python, I advise you
    to watch some online courses to speed up the learning process and buy at least
    one book as a reference for your advanced projects as well (also, don't forget
    to check out *Appendix E*).
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will download and install PyCharm on Kali:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and head straight to the download section at [https://www.jetbrains.com/pycharm/download](https://www.jetbrains.com/pycharm/download):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c127d2ad-bcf5-49fe-bd75-d51af530a5fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are on the Download page, download the free community edition of PyCharm.
    After the download is finished, you will need to right-click on the newly downloaded
    file and select Extract Here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/32cf4360-8961-46be-b376-7327027730f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you extract the archived directory, try to open the `bin` folder, then
    execute the `pycharm.sh` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/41e4824e-6d5b-4c97-bc2f-587e4c7fb74e.png)'
  prefs: []
  type: TYPE_IMG
- en: After executing the preceding command, you will be prompted by a few dialogs
    to help the installation. Nothing special! All you need to do is accept the agreement
    and the default installation parameters. Don't worry, because you can edit them
    later if you change your mind. With that said, we're done with downloading and
    installing PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm quick overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will try to execute a simple `Hello World` example using
    PyCharm, and we will change its configuration to use Python version 2.7 as well.
    To run it, execute the `pycharm.sh` code phrase that we executed earlier when
    we installed PyCharm:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the dialog window, click the Create New Project button. Next, select the
    path to the location where you want to save your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/038a3841-e810-4a18-9248-cb26432977a5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, I changed the Base interpreter to
    Python 2.7 to make sure the code will compile according to this version's syntax
    specification. Also, take note that in the preceding example, I've chosen to save
    the source in the `/root/PycharmProjects/test` path. Click on the Create button
    to create the new project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The IDE UI will open, and the first thing you will need to do is create the
    Python file. To do this, right-click on the `test` directory in the left section
    of PyCharm, choose New, then click on Python File from the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/4531c68b-878e-46ab-8d92-508bfec5b4ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I will call the `HelloWorld` file and create it. Next, let''s try to create
    your first Python program. I will add the following simple line of code to print
    the phrase `Hello World` to the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8bf0be0c-d363-475f-880f-ee85b54aa098.png)'
  prefs: []
  type: TYPE_IMG
- en: 'What if you made a mistake? The IDE will let you know before you run the code
    by underlining the mistake with a red line. It will also tell you what is wrong
    with your code. Next, let''s run the `Hello World` script. To do this, select
    the Run menu and choose Run... from the list to execute the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/58f4e733-5050-4aee-8f0a-89dc40f5d875.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look closely at the bottom of the IDE, you will see the output of the
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2b6d7b8f-b96f-4964-b5c9-8b7acff0082b.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You just finished building your first program using the PyCharm
    IDE. Let's go to the next section and develop the real automated script.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I will show you how to develop a fully functioning application
    that can automatically perform a TCP scan and  perform a service enumeration as
    well. The application will first execute an Nmap TCP scan, then we will check
    whether the FTP or HTTP ports are opened, and finally we will enumerate those
    services. I have limited this application to only FTP and HTTP ports, but you
    can add more services to your liking.
  prefs: []
  type: TYPE_NORMAL
- en: Automate.py in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I highly encourage you to go ahead and try to download the source code from
    [https://github.com/PacktPublishing/Practical-Web-Penetration-Testing](https://github.com/PacktPublishing/Practical-Web-Penetration-Testing).
    Be sure to install `gobuster` in Kali (using the `apt-get install gobuster` command).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Kali Linux, open the Terminal window and execute the following command in
    your Terminal window (make sure you are in the same directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](Images/6ff267f2-f0d4-45f2-aa12-4bf2803e80f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After executing the command, you will enter the target IP address that you
    want to scan, and the application will show you the progress of the scan until
    it has finished. Finally, you can check the report contents of your scan in the
    `reports` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6f7bb6a0-e6e9-461f-8530-88ba723a5351.png)'
  prefs: []
  type: TYPE_IMG
- en: Utility functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section of the tool, I added the utility functions that we will reuse
    throughout the source code. These functions are shown in the following bullet
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For printing the separators lines, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For printing the colored texts on the Terminal window, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For saving the report results to a file, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute a Terminal window command, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To print error messages after the command''s execution, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Service enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I mentioned earlier, the application will enumerate the HTTP and FTP services
    after running the Nmap TCP scan (if the ports are open):'
  prefs: []
  type: TYPE_NORMAL
- en: 'For FTP enumeration using Nmap, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For HTTP, I used Nmap for script scanning and `gobuster` to find hidden URLs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: DTO service class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **data transfer object** (**DTO**) service class will hold the results
    of each service that is found after a TCP scan. A service will have three criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: Service port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will call this class when using the Nmap results parser, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The scanner core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The core section will run the TCP scan using Nmap, then we parse the results,
    and finally, for all the services that are found, we call the enumerate methods
    that we talked about previously, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the TCP scan using Nmap, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To parse the Nmap output results, use the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the enumeration process after both the TCP scan and the parsing of the
    results:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Again, I invite you to download the source code from GitHub and play with it
    in your IDE in Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re done, folks! I hope that you loved reading this book, and to make sure
    that I can help you with any questions or comments regarding the contents of this
    book, here''s a list of contact details that you can use to communicate with me:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email**: `gus.khawaja@guskhawaja.me`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Twitter**: `@gusKhawaja`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LinkedIn**: `https://ca.linkedin.com/in/guskhawaja`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blog**: `http://ethicalhackingblog.com`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hacking is not a sin—it''s an art!**'
  prefs: []
  type: TYPE_NORMAL
