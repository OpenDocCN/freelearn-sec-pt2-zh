- en: Python Quick Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This appendix contains a quick overview of the amazing programming language,
    Python. This reference will contain the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Basics of using Python language
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators in Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make a condition statement in Python
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python variable types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling files and much more
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick Python language overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start learning Python. I included this section in the book for
    two reasons. The first is that I want you to use it as a reference for when you
    develop your Python scripts in the future. The second reason is that I want to
    refresh your memory about this amazing programming language. It is important to
    note that I can't fit all the information about this programming language in an
    appendix, so I will include the most important elements of Python that will help
    you to achieve the most results in your career. You can enjoy learning and experimenting
    with the following examples using your Terminal window's Python interpreter—just
    type Python in your terminal window and you're ready to go.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Basics of Python
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, I will list all the basic operations that you need to be aware
    of when using the Python language:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a Python file, execute the following in your Terminal window:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before executing the preceding command, you will need to give it the permission
    to execute:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To add comments to your code in Python, use the following syntaxes:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a one-line comment use the `#` character, and use `"""` for a multiple-line
    comment :'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To organize your blocks in Python, remember to press *Tab* to insert a new
    block section underneath the semicolon character:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we must create a new block underneath the `if` statement (exactly
    after the `:` character)
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you want to go to a new line, use the backslash character, except for `[]`,
    `{}`, or `()`. For example:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To combine three reports together, use the following:'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To write a list of long IP addresses, use the following:'
  id: totrans-26
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To import other external libraries to use their functionalities, use the `import`
    keyword:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To print a message to the console output, use the `print` function:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To accept user input from the Terminal window, use the `raw_input` function:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Null objects in Python are represented by the `None` keyword:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Operators
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are so many types of operators that exist in the Python programming language.
    What is an operator? A simple example is the `==` operator, which is used by the
    `if` condition statement (for example, `if` `x==1`). In general, operators come
    under the following categories:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic calculation operators
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| `+` | **Adds** values | `x + y + z = 5` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| `-`  | **Subtracts** values | `num1 – num2 = 3` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| `*`  | **Multiplies** values | `x * y = 9` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| `/`  | **Divides** the left operand by the right operand | `b / a = 3` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| `%` | **Divides** the left operand by the right operand and returns the **remainder**
    | `x % a = 0` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| `**`  | **Performs an exponential** **(power) calculation** on operators
    | `a**b =9 ` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: Assignment operators
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| `=` | **Assigns** values | `x=y` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| `+=`  | **Adds** the right operand to the left operand and assigns the result
    to the left operand | `x +=y` (same as `x = x+y`) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| `-=`  | **Subtracts** the right operand from the left operand and assigns
    the result to the left operand | `y -=x` (same as `y=y-x`) |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| `*=`  | **Multiplies** the right operand by the left operand and assigns
    the result to the left operand | `x *= a` (same as `x = x * a`) |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| `/=`  | **Divides** the left operand by the right operand and assigns the
    result to the left operand | `x /= a` (same as `x = x / ax`)  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| `%=`  | **Performs a modulus** on operators and assigns the result to the
    left operand | `x %= a` (same as `x = x % a`) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `**=`  | **Performs an exponential (power) calculation** on operators and
    assigns the result to the left operand | `x **= a` (same as `x = x ** a`) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: Comparison operators
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| `==` | If the two operands are **equal**, then the condition becomes true
    | `x==y` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| `!= or <>` | If the two operands are **not equal**, then the condition becomes
    true | `x!=y` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `>` | If the left operand is **greater** than the value of the right operand,
    then the condition becomes true | `x>y` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| `<` | If the left operand is **less** than the value of the right operand,
    then the condition becomes true | `x<y` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| `>=` | If the left operand is **greater than or equal** to the value of the
    right operand, then the condition becomes true | `x>=y` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| `<=` | If the value of the left operand is **less than or equal** to the
    value of the right operand, then the condition becomes true | `x<= y` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: Membership and identity operators
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '| `in` | Evaluates to true if it is a variable in the specified sequence |
    `if ''tcp'' in results:` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| `not in` | Evaluates to false if it is a variable in the specified sequence
    | `if not ''http'' in results:` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| `is` | Evaluates to true if the variables on either side of the operator
    are equal |  `if results is None:` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| `is not` | Evaluates to true if the variables on either side of the operator
    are not equal | `if results is not None:` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: Binary operators
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| `&`  | **AND** operator checks whether the result exists in both operands
    | `1&1 = 1 ` |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | **OR** operator checks whether the result exists in either operand
    | `0&#124;1=1` |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| `^` | **XOR** operator checks whether the result exists in one operand but
    not both | `0^1=1` |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| `~` | **NOT** operator refers to the opposite bit | `~0=1` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: Making an if decision
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| `if` | Makes a decision based on the operands | `if service == 80: print
    ''HTTP''` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| `if-else` | Takes a different action after an `if` decision | `if service
    == 80:``    print ''HTTP''``else:``    print ''Not HTTP''` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| `if-elif` | Makes multiple sequential decisions | `if service == 80:``   
    print ''HTTP''``elif service == 443:``    print ''TLS''``else:``    print ''Not
    HTTP or TLS''` |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: Variables
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables are used in Python and in other programming languages to store temporary
    values in memory in order to reuse them in multiple places in the source code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'We have various types of variables in Python, as shown in the following list:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numbers
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At any stage in your source code, you can cast from one variable to another
    using the following **type casting** syntaxes:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Strings
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the string variable type when you want to store a set of characters into
    that variable:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the string variable type as shown in the following example:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To concatenate two string variables together, use the `+` sign:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To format a string using the `%` operator, do the following:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can use the following formatters:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%s`: String'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d`: Integer number'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%f`: Float number'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%x`: Hexadecimal number'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Escape String Characters
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Backslash notation | Hexadecimal character | Description |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| `\a` | 0x07 | Bell or alert |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| `\b` | 0x08 | Backspace |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| `\e` | 0x1b | Escape |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| `\f` | 0x0c | Formfeed |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| `\n` | 0x0a | Newline |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '| `\r` | 0x0d | Carriage return |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: '| `\s` | 0x20 | Space |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '| `\t` | 0x09 | Tab |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: 'To remove trailing and leading white spaces from a string, include a white
    space before the `Welcome` and a leading space after the `Python`:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To get the length of a string, do the following:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To split a string and return the value in a list, do the following:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Numbers
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the most common numerical types that Python supports:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '**int**: These are sometimes called integers, and they are positive or negative
    whole numbers with no decimal point (for example, 11).'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**long** (**long integers**): These are integers of unlimited size, written
    like integers and followed by an uppercase or lowercase L (for example, 788739888999L).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**float** (**floating points**): These represent real numbers, and are written
    with a decimal point (99.9999). Floats are sometimes used in scientific notation,
    with E or e indicating the power of 10 (2e2 = 2 x 10²).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the maximum or minimum of two numbers, do the following:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To generate a random number from a range, do the following:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Lists
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A list is a collection of items (for example, strings, numbers, objects, and
    so on). In other programming languages, it''s called an array. Now, should you
    hear that word in the future, you''ll know that it means a list in Python:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a list:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To add a new item to the list, use the `append` function:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To access each item in the list, use its index number. For example:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To change an item in a list, just use its index and assign it a new value.
    For example:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To delete an item from the list, do the following:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To get the length of a list, use the `len` function. For example:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Tuples
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tuples are similar to lists, but they''re read only. I rarely use them, but
    they exist in Python, and you need to be aware of their existence:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 元组类似于列表，但它们是只读的。我很少使用它们，但它们存在于 Python 中，你需要知道它们的存在：
- en: 'To declare a tuple variable, do the following:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要声明一个元组变量，请执行以下操作：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To access an item in a tuple, use its index number. For example:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要访问元组中的项目，使用其索引号。例如：
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To get the length of a tuple, use the `len` function. For example:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取元组的长度，使用 `len` 函数。例如：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Dictionary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字典
- en: 'A dictionary is a list of items with key and value pairs. The best way to describe
    it is by using examples. Let''s start:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是一个包含键值对的项目列表。最好的描述方式是通过示例来说明。我们开始吧：
- en: 'To declare a key–value pair of the host and IP, enter the following (for example):'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要声明主机和 IP 的键值对，请输入以下内容（例如）：
- en: '[PRE29]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To add a new item to a dictionary, do the following:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要向字典添加新项目，请执行以下操作：
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To update an existing item in a dictionary, do the following:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新字典中的现有项目，请执行以下操作：
- en: '[PRE31]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To delete an existing item in a dictionary, do the following:'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除字典中的现有项目，请执行以下操作：
- en: '[PRE32]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To iterate through a dictionary, do the following:'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要遍历字典，请执行以下操作：
- en: '[PRE33]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Miscellaneous
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 杂项
- en: 'To create a **function**, use the `def` keyword, followed by the function name,
    some optional variables, and the `:` character at the end.  For example:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个**函数**，使用 `def` 关键字，后跟函数名称、一些可选变量，以及末尾的 `:` 字符。例如：
- en: '[PRE34]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'To create a `for` loop, do the following:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个 `for` 循环，请执行以下操作：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following is a sample custom `class` object in Python:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是 Python 中的一个示例自定义 `class` 对象：
- en: '[PRE36]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To manage errors using exceptions in Python, do the following:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 Python 中使用异常管理错误，请执行以下操作：
- en: '[PRE37]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To open and read a text file, do the following:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要打开并读取文本文件，请执行以下操作：
- en: '[PRE38]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'To write to a file, do the following:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要写入文件，请执行以下操作：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
