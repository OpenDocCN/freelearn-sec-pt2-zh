- en: Python Quick Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This appendix contains a quick overview of the amazing programming language,
    Python. This reference will contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of using Python language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make a condition statement in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python variable types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling files and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick Python language overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to start learning Python. I included this section in the book for
    two reasons. The first is that I want you to use it as a reference for when you
    develop your Python scripts in the future. The second reason is that I want to
    refresh your memory about this amazing programming language. It is important to
    note that I can't fit all the information about this programming language in an
    appendix, so I will include the most important elements of Python that will help
    you to achieve the most results in your career. You can enjoy learning and experimenting
    with the following examples using your Terminal window's Python interpreter—just
    type Python in your terminal window and you're ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: Basics of Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, I will list all the basic operations that you need to be aware
    of when using the Python language:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run a Python file, execute the following in your Terminal window:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Before executing the preceding command, you will need to give it the permission
    to execute:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To add comments to your code in Python, use the following syntaxes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a one-line comment use the `#` character, and use `"""` for a multiple-line
    comment :'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To organize your blocks in Python, remember to press *Tab* to insert a new
    block section underneath the semicolon character:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, we must create a new block underneath the `if` statement (exactly
    after the `:` character)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to go to a new line, use the backslash character, except for `[]`,
    `{}`, or `()`. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To combine three reports together, use the following:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To write a list of long IP addresses, use the following:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To import other external libraries to use their functionalities, use the `import`
    keyword:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To print a message to the console output, use the `print` function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To accept user input from the Terminal window, use the `raw_input` function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Null objects in Python are represented by the `None` keyword:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are so many types of operators that exist in the Python programming language.
    What is an operator? A simple example is the `==` operator, which is used by the
    `if` condition statement (for example, `if` `x==1`). In general, operators come
    under the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Arithmetic calculation operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `+` | **Adds** values | `x + y + z = 5` |'
  prefs: []
  type: TYPE_TB
- en: '| `-`  | **Subtracts** values | `num1 – num2 = 3` |'
  prefs: []
  type: TYPE_TB
- en: '| `*`  | **Multiplies** values | `x * y = 9` |'
  prefs: []
  type: TYPE_TB
- en: '| `/`  | **Divides** the left operand by the right operand | `b / a = 3` |'
  prefs: []
  type: TYPE_TB
- en: '| `%` | **Divides** the left operand by the right operand and returns the **remainder**
    | `x % a = 0` |'
  prefs: []
  type: TYPE_TB
- en: '| `**`  | **Performs an exponential** **(power) calculation** on operators
    | `a**b =9 ` |'
  prefs: []
  type: TYPE_TB
- en: Assignment operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `=` | **Assigns** values | `x=y` |'
  prefs: []
  type: TYPE_TB
- en: '| `+=`  | **Adds** the right operand to the left operand and assigns the result
    to the left operand | `x +=y` (same as `x = x+y`) |'
  prefs: []
  type: TYPE_TB
- en: '| `-=`  | **Subtracts** the right operand from the left operand and assigns
    the result to the left operand | `y -=x` (same as `y=y-x`) |'
  prefs: []
  type: TYPE_TB
- en: '| `*=`  | **Multiplies** the right operand by the left operand and assigns
    the result to the left operand | `x *= a` (same as `x = x * a`) |'
  prefs: []
  type: TYPE_TB
- en: '| `/=`  | **Divides** the left operand by the right operand and assigns the
    result to the left operand | `x /= a` (same as `x = x / ax`)  |'
  prefs: []
  type: TYPE_TB
- en: '| `%=`  | **Performs a modulus** on operators and assigns the result to the
    left operand | `x %= a` (same as `x = x % a`) |'
  prefs: []
  type: TYPE_TB
- en: '| `**=`  | **Performs an exponential (power) calculation** on operators and
    assigns the result to the left operand | `x **= a` (same as `x = x ** a`) |'
  prefs: []
  type: TYPE_TB
- en: Comparison operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `==` | If the two operands are **equal**, then the condition becomes true
    | `x==y` |'
  prefs: []
  type: TYPE_TB
- en: '| `!= or <>` | If the two operands are **not equal**, then the condition becomes
    true | `x!=y` |'
  prefs: []
  type: TYPE_TB
- en: '| `>` | If the left operand is **greater** than the value of the right operand,
    then the condition becomes true | `x>y` |'
  prefs: []
  type: TYPE_TB
- en: '| `<` | If the left operand is **less** than the value of the right operand,
    then the condition becomes true | `x<y` |'
  prefs: []
  type: TYPE_TB
- en: '| `>=` | If the left operand is **greater than or equal** to the value of the
    right operand, then the condition becomes true | `x>=y` |'
  prefs: []
  type: TYPE_TB
- en: '| `<=` | If the value of the left operand is **less than or equal** to the
    value of the right operand, then the condition becomes true | `x<= y` |'
  prefs: []
  type: TYPE_TB
- en: Membership and identity operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `in` | Evaluates to true if it is a variable in the specified sequence |
    `if ''tcp'' in results:` |'
  prefs: []
  type: TYPE_TB
- en: '| `not in` | Evaluates to false if it is a variable in the specified sequence
    | `if not ''http'' in results:` |'
  prefs: []
  type: TYPE_TB
- en: '| `is` | Evaluates to true if the variables on either side of the operator
    are equal |  `if results is None:` |'
  prefs: []
  type: TYPE_TB
- en: '| `is not` | Evaluates to true if the variables on either side of the operator
    are not equal | `if results is not None:` |'
  prefs: []
  type: TYPE_TB
- en: Binary operators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `&`  | **AND** operator checks whether the result exists in both operands
    | `1&1 = 1 ` |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;` | **OR** operator checks whether the result exists in either operand
    | `0&#124;1=1` |'
  prefs: []
  type: TYPE_TB
- en: '| `^` | **XOR** operator checks whether the result exists in one operand but
    not both | `0^1=1` |'
  prefs: []
  type: TYPE_TB
- en: '| `~` | **NOT** operator refers to the opposite bit | `~0=1` |'
  prefs: []
  type: TYPE_TB
- en: Making an if decision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Operator | Description | Example |'
  prefs: []
  type: TYPE_TB
- en: '| `if` | Makes a decision based on the operands | `if service == 80: print
    ''HTTP''` |'
  prefs: []
  type: TYPE_TB
- en: '| `if-else` | Takes a different action after an `if` decision | `if service
    == 80:``    print ''HTTP''``else:``    print ''Not HTTP''` |'
  prefs: []
  type: TYPE_TB
- en: '| `if-elif` | Makes multiple sequential decisions | `if service == 80:``   
    print ''HTTP''``elif service == 443:``    print ''TLS''``else:``    print ''Not
    HTTP or TLS''` |'
  prefs: []
  type: TYPE_TB
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables are used in Python and in other programming languages to store temporary
    values in memory in order to reuse them in multiple places in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have various types of variables in Python, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At any stage in your source code, you can cast from one variable to another
    using the following **type casting** syntaxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the string variable type when you want to store a set of characters into
    that variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the string variable type as shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To concatenate two string variables together, use the `+` sign:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To format a string using the `%` operator, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following formatters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%s`: String'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%d`: Integer number'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%f`: Float number'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%x`: Hexadecimal number'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Escape String Characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '| Backslash notation | Hexadecimal character | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `\a` | 0x07 | Bell or alert |'
  prefs: []
  type: TYPE_TB
- en: '| `\b` | 0x08 | Backspace |'
  prefs: []
  type: TYPE_TB
- en: '| `\e` | 0x1b | Escape |'
  prefs: []
  type: TYPE_TB
- en: '| `\f` | 0x0c | Formfeed |'
  prefs: []
  type: TYPE_TB
- en: '| `\n` | 0x0a | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| `\r` | 0x0d | Carriage return |'
  prefs: []
  type: TYPE_TB
- en: '| `\s` | 0x20 | Space |'
  prefs: []
  type: TYPE_TB
- en: '| `\t` | 0x09 | Tab |'
  prefs: []
  type: TYPE_TB
- en: 'To remove trailing and leading white spaces from a string, include a white
    space before the `Welcome` and a leading space after the `Python`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the length of a string, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To split a string and return the value in a list, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of the most common numerical types that Python supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '**int**: These are sometimes called integers, and they are positive or negative
    whole numbers with no decimal point (for example, 11).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**long** (**long integers**): These are integers of unlimited size, written
    like integers and followed by an uppercase or lowercase L (for example, 788739888999L).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**float** (**floating points**): These represent real numbers, and are written
    with a decimal point (99.9999). Floats are sometimes used in scientific notation,
    with E or e indicating the power of 10 (2e2 = 2 x 10²).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the maximum or minimum of two numbers, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate a random number from a range, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A list is a collection of items (for example, strings, numbers, objects, and
    so on). In other programming languages, it''s called an array. Now, should you
    hear that word in the future, you''ll know that it means a list in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a new item to the list, use the `append` function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To access each item in the list, use its index number. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To change an item in a list, just use its index and assign it a new value.
    For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete an item from the list, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the length of a list, use the `len` function. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tuples are similar to lists, but they''re read only. I rarely use them, but
    they exist in Python, and you need to be aware of their existence:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To declare a tuple variable, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To access an item in a tuple, use its index number. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the length of a tuple, use the `len` function. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A dictionary is a list of items with key and value pairs. The best way to describe
    it is by using examples. Let''s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To declare a key–value pair of the host and IP, enter the following (for example):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a new item to a dictionary, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To update an existing item in a dictionary, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To delete an existing item in a dictionary, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To iterate through a dictionary, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Miscellaneous
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a **function**, use the `def` keyword, followed by the function name,
    some optional variables, and the `:` character at the end.  For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a `for` loop, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a sample custom `class` object in Python:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To manage errors using exceptions in Python, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To open and read a text file, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To write to a file, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
