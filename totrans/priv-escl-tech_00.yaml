- en: '*Chapter 2*: Setting Up Our Lab'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Given the robust and technical nature of the work that a security researcher
    or penetration tester indulges in, it is vitally important that you practice and
    test your hacking skills in a safe and isolated virtual environment to avoid causing
    damage to public systems, computers, or networks. The art of setting up a **virtual
    hacking lab** is an essential skill for a *penetration tester*, as it allows for
    the rapid deployment, testing, and exploitation of systems without having to target
    public systems or network infrastructures.
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, vitally important to know how to set up a **virtualized environment**
    that can be used for practicing your penetration testing skills legally. Having
    a personal virtual hacking lab allows you to test out new attacks, exploits, and
    tools, and this, in turn, will enhance your learning process and will consistently
    build up your skill set making you a more competent hacker. Similarly, in this
    chapter, you will learn how to design and configure your own robust isolated virtual
    hacking lab, which will be used for learning and practicing the various *exploitation*
    and *privilege escalation* techniques on the Windows and Linux operating systems
    that are demonstrated in this book.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will give you the necessary knowledge and skills to design, deploy,
    configure, and troubleshoot your own isolated virtual hacking lab.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing our lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building our lab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Kali Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the demonstrations in this chapter, you will need to ensure
    that you have met the following hardware and software requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: A Windows, Linux, or macOS-hosted operating system is required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimum of 4 GB of RAM is required. 8 GB is the preferred specification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 500 GB of free storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A processor that supports virtualization technology (for instance, Intel VT-x
    or AMD VT).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A general understanding of how **VirtualBox** works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an idea of what we will be covering, let's dive right into
    the first topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3ukgh6C](https://bit.ly/3ukgh6C)'
  prefs: []
  type: TYPE_NORMAL
- en: Designing our lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start building our virtual hacking lab. We will design
    and structure our lab based on our requirements for the exercises and demonstrations
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To set up our lab infrastructure, we need to leverage **virtualization** technology.
    This will allow us to avoid any additional costs related to hardware and networking,
    as we will be running all of our *guest operating systems* and configuring our
    *virtual network* on one host.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started with designing and structuring our lab, we need to explore
    virtualization as a concept and as a practice. First, we will learn about the
    importance of and the role of virtualization in building and configuring our virtual
    hacking lab.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtualization is the process of running a virtualized instance of an operating
    system with an abstracted hardware layer. Virtualization facilitates the running
    of multiple operating systems on a single computer, or host, simultaneously. It
    was invented as a way to help large organizations and companies reduce their need
    for and expenditure on hardware for hosting and networking equipment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Originally, large companies and organizations would have to buy entire servers
    to host services such as email and web applications. Each service was hosted on
    its own dedicated server. This, in turn, led to an increase in spending by companies
    with no added benefit to factors such as performance and resource efficiency,
    given the fact that most servers are configured to be high performance, have a
    high number of system resources such as *RAM*, and are configured with powerful
    CPUs. However, given the fact that companies were only able to host one service
    per server, most of the time, the system resources such as processing power and
    RAM would be underutilized, which made hosting inefficient. This type of traditional
    hosting infrastructure is illustrated in *Figure 2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – A traditional hosting infrastructure'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – A traditional hosting infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: This problem of resource inefficiency is what virtualization was created to
    solve. With virtualization in place, companies are now able to run multiple operating
    systems and host multiple services on one dedicated server. Virtualization ensures
    that system resources are properly and efficiently utilized, as a server can be
    configured to run as many services as possible within the constraints of the physical
    resources and the capacity of the server.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 2.2* illustrates how, using a *hypervisor* such as VirtualBox, virtualization
    can be used to configure multiple operating systems and services to run on one
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – A modern hosting infrastructure'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – A modern hosting infrastructure
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 2.2*, a server has been configured to **virtualize three** operating
    systems that each host their own services. This clearly outlines the benefits
    of utilizing virtualization not only for companies but also for individuals and
    professionals. Likewise, we will be using virtualization to host our target and
    attacker operating systems on one host system. For us to leverage virtualization
    technology, we will need to take a look at hypervisors.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A key feature offered or facilitated by virtualization is the isolation of guest
    operating systems, which provides security and stability to the infrastructure.
    *Virtual machine isolation* can be configured as needed; we will take a closer
    look at guest isolation and virtual networking when we set up our virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: Hypervisors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **hypervisor** is a computer program that is responsible for creating, running,
    and managing virtual machines. It is responsible for facilitating the virtualization
    process and setting up the emulated environment required to run an operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hypervisors are split into two main categories based on their deployment and
    use case:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type 1 hypervisors**: These hypervisors are installed directly on top of
    hardware and, typically, run as operating systems. These types of hypervisors
    are also known as **bare-metal hypervisors**. Some examples of type 1 hypervisors
    include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a) VMware ESX
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Microsoft Hyper-V Server
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Proxmox-VE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Figure 2.3* illustrates the deployment structure of a type 1 hypervisor, where
    the hypervisor management system is installed directly onto hardware and acts
    as the main operating system that creates and manages the virtual machines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Type 1 hypervisor structure'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – The Type 1 hypervisor structure
  prefs: []
  type: TYPE_NORMAL
- en: '**Type 2 hypervisors**: These hypervisors are installed directly on top of
    a host operating system such as Windows, Linux, or macOS. They operate like traditional
    programs as opposed to being run directly on top of the hardware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type 2 hypervisors do not have direct access to the system hardware; instead,
    type 2 hypervisors utilize the system resources that are available to the host
    operating system. *Figure 2.2* illustrates a typical type 2 hypervisor setup where
    the hypervisor is installed directly on top of the host operating system. Some
    examples of free and commercial type 2 hypervisors are listed as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a) Oracle VirtualBox (free)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) VMware Player (free)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) VMware Workstation Pro (commercial)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Parallels Desktop for macOS (commercial)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is a virtual machine?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A virtual machine is an emulated operating system that runs directly on top
    of another operating system. Virtual machines have access to and can be allotted
    resources based on user requirements. For instance, we can specify the amount
    of RAM, the number of cores and logical processors, and the network interfaces
    and USB devices that the virtual machine will have access to. By default, virtual
    machines utilize a *virtual disk image* for storage and can be extended if required.
    Hypervisors such as VirtualBox also give us the ability to take snapshots of virtual
    machines as a form of redundancy. This can be extremely helpful in situations
    where virtual machines fail due to misconfigurations or system errors; you can
    easily restore a virtual machine to a previous snapshot.
  prefs: []
  type: TYPE_NORMAL
- en: What type of hypervisor should you use?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned earlier, the type of hypervisor you decide to use will depend on
    the nature of your deployment and individual use cases. If you have more than
    one computer or laptop, you can try out a type 1 hypervisor such as Proxmox-VE,
    which I personally use given the extended functionality it offers. If you intend
    on running your virtual hacking lab on a single computer or laptop, the obvious
    choice would be a type 2 hypervisor, as it can be installed directly onto the
    host operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better understanding of what virtualization is and how we
    can leverage the technology to set up our virtual hacking lab, we can take a look
    at how to structure our lab.
  prefs: []
  type: TYPE_NORMAL
- en: Lab structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin building our virtual lab, we need to understand how it will
    be structured, what software and operating systems we will use, and the network
    configuration we will implement. This will make the deployment phase much simpler
    and more straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to select our preferred hypervisor. In this book, we will
    be using **Oracle VirtualBox**, which is a type 2 hypervisor that is free and
    open source. It also offers great functionality out of the box. We will look at
    how to install and configure VirtualBox in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Operating systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will be deploying a robust variety of both Windows and Linux operating systems.
    This will give you the ability to simulate *real-world attacks* on different types
    of operating systems as opposed to a single target. You are also likely to encounter
    different operating systems during a typical penetration test. We will be using
    the following operating systems in our virtual hacking lab:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows 7**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Server 2008**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Server 2012**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows 10**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metasploitable2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kali Linux**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be utilizing Kali Linux as our offensive operating system, and the other
    operating systems will be used as targets.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The Windows Server 2012 target virtual machine is optional. Most of the techniques
    and attacks demonstrated in this book can be replicated on Windows Server 2008.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an idea of what hypervisor and operating systems we will be
    utilizing, we can set up our desired virtual network structure.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual network topology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Figure 2.4* outlines the desired network **topology** that we will be using
    to set up our virtual network within VirtualBox. All virtual machines will be
    interconnected and isolated from any other external networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The virtual network topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The virtual network topology
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox allows us to create a completely isolated virtual network without
    the need for a router or switch. Each virtual machine will need to be assigned
    an IP address. We will be using the built-in virtual switch within VirtualBox
    to set up a **Dynamic Host Configuration Protocol** (**DHCP**)-based network where
    IP addresses will be distributed to the virtual machines automatically. This will
    simulate a real network environment; we will then have to perform some basic host
    discovery to manually map out the network and the hosts.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a good understanding of the software that we will be using and the
    desired structure and network topology of our lab. The next step is to put all
    of these pieces together.
  prefs: []
  type: TYPE_NORMAL
- en: Building our lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now ready to begin putting the various pieces together to build our virtual
    hacking lab. We will start by setting up our hypervisor of choice, VirtualBox.
    Feel free to use any other preferred hypervisor if you are already familiar with
    one. Most of these steps can also be recreated on *VMware Workstation* and *VMware
    Player*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring VirtualBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'VirtualBox is a cross-platform open source type 2 hypervisor that offers excellent
    functionality and performance. The first step is to download the correct installation
    *binary* based on the host operating system you are running:'
  prefs: []
  type: TYPE_NORMAL
- en: Open [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)
    in your browser. You will be greeted with download links for the supported operating
    systems, as shown in *Figure 2.5*. Select your host operating system to begin
    the download:![Figure 2.5 – Downloading VirtualBox](Images/B17389_02_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.5 – Downloading VirtualBox
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the installation binary has been downloaded, you will need to install
    it. The binary or executable will present you with a standard installation wizard.
    Follow the installation steps while keeping all the settings and configurations
    at their default settings. Once completed, you can now open up VirtualBox, and
    you will be greeted with a window similar to the one shown in *Figure 2.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – The VirtualBox welcome screen](Images/B17389_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.6 – The VirtualBox welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: We now have VirtualBox installed and we can begin setting up and configuring
    the virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a virtual network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the network topology, as outlined in *Figure 2.4*, as our guide
    to set up and configure our virtual network adapter within VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox provides a simple, yet powerful, virtual network manager that can
    facilitate the creation of adapters and network configurations with customizable
    parameters and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our virtual network will require the following options and parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'IPv4 address mask: **10.10.10.1/24**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DHCP server enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have an understanding of the IP address mask, we can configure
    our virtual network:'
  prefs: []
  type: TYPE_NORMAL
- en: To open up the **Network** manager, click on the menu in the upper-right corner
    of the **Tools** ribbon:![Figure 2.7 – VirtualBox Network tools](Images/B17389_02_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.7 – VirtualBox Network tools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will be greeted with a new window similar to *Figure 2.8*, prompting you
    to either **Create** or **Remove** the virtual network adapters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In our case, we will create our own virtual network adapter that will be used
    to interconnect all our virtual machines under the same IP address mask. Click
    on the **Create** button to begin the configuration process:![Figure 2.8 – Creating
    a VirtualBox adapter](Images/B17389_02_008.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.8 – Creating a VirtualBox adapter
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now be greeted with the virtual network manager screen. Based on
    our network requirements, as described earlier, we will need to set up a specific
    IP address mask and enable DHCP for automatic IP assignment. To configure our
    IP address mask, select the virtual network adapter we created and click on the
    **Properties** button to begin the customization process:![Figure 2.9 – Configuring
    a virtual network adapter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.9 – Configuring a virtual network adapter
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Within the configuration options for the adapter, ensure that you check the
    **Configure Adapter Manually** option, as demonstrated in *Figure 2.9*. Add the
    IP address mask we specified earlier. Once done, click on the **Apply** button
    to save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to enable the DHCP server. This can be enabled and configured under
    the **DHCP Server** tab in the **Adapter Configuration** menu. After enabling
    DHCP, you will need to provide the addressing schema and the default gateway address.
    You can use the configuration outlined in *Figure 2.10*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.10 – The VirtualBox DHCP configuration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_02_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.10 – The VirtualBox DHCP configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After modifying the IP addressing schema for the DHCP server, click on **Apply**
    to save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created and configured our virtual network within VirtualBox,
    we can begin setting up our virtual machines within VirtualBox and adding them
    to the virtual network we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our target virtual machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have a fully configured hypervisor and virtual network in which we can
    operate; however, we also need to set up our **target virtual machines**, which
    will comprise two of the most popular operating systems used and adopted worldwide:
    Windows and Linux. Having practical experience in exploiting both operating systems
    is vital for a penetration tester, as you are likely to encounter both operating
    systems in real-world scenarios, although under different deployments and use
    cases.'
  prefs: []
  type: TYPE_NORMAL
- en: As outlined earlier, our target virtual machines will comprise a robust mix
    of different versions of Windows and Linux, and some of them will have been preconfigured
    with vulnerabilities to aid and enhance the learning process.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Windows virtual machines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Given the popularity and adoption of the Windows operating system, it is essential
    to understand how to perform privilege escalation attacks on both *Desktop* versions
    of Windows and *Windows Server deployments*. For this reason, our lab will consist
    of the following versions of Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2008
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows operating systems require a license and need to be activated in order
    to function. However, we can leverage the benefits offered by *Microsoft TechNet
    Evaluation Center*. This offers between 90-day and 180-day trials for both desktop
    and server operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: However, this service only offers the latest versions of Windows from Windows
    10 and Windows Server 2016 to Windows Server 2012 and Windows 8.1\. For our Windows
    7 virtual machine, we can leverage the **Microsoft Edge Legacy** virtual machines
    that use older versions of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: I will not be covering the Windows installation process. In this book, I will
    demonstrate the process of configuring and adding our virtual machines to the
    virtual network we have created.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by downloading and configuring our required Windows virtual machines
    in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Windows 7 virtual machine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We will now take a look at how to set up our Windows 7 virtual machine on VirtualBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the Windows 7 virtual machine, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, you will need to download the Windows 7 virtual machine **OVA** file,
    which can be downloaded at [https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the website, you will be prompted to select your virtual machine version
    and virtual machine platform, as illustrated in *Figure 2.11*. Ensure that you
    specify **Win7** as the version and **VirtualBox** as the platform:![Figure 2.11
    – Downloading the Windows 7 virtual machine image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.11 – Downloading the Windows 7 virtual machine image
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now click on the **Download** button to download the compressed VirtualBox
    OVA file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have downloaded and extracted the archive, you will be presented with
    an OVA file. The OVA file is a preconfigured and preinstalled virtual machine
    that does not need to be installed or configured; therefore, this will save time.
    The OVA file can be imported by double-clicking on it. This will open an **Import
    Virtual Appliance** screen, as shown here:![Figure 2.12 – VirtualBox OVA import](Images/B17389_02_012.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.12 – VirtualBox OVA import
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ensure that you specify the **Machine Base Folder** to a directory or location
    that you have set up and configured for your virtual machines; this is the directory
    where the virtual machine will be imported to. After specifying the base folder,
    you can click on **Import** to begin the import process, as illustrated in *Figure
    2.13*:![Figure 2.13 – The VirtualBox OVA import process](Images/B17389_02_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.13 – The VirtualBox OVA import process
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the importation process has been completed, we can now add the virtual
    machine to the virtual network we have set up. To do this, select the virtual
    machine, as shown in the left-hand bar in *Figure 2.14*, and click on the **Settings**
    button to modify the virtual machine settings:![Figure 2.14 – The virtual machine
    settings](Images/B17389_02_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.14 – The virtual machine settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will bring up the **Options** menu, where you can change the virtual machine
    name and resource allocation; however, we are also interested in adding the virtual
    machine to the virtual network. This can be done by clicking on the **Network**
    option, as shown in *Figure 2.15*, and specifying the adapter (in this case, **Adapter
    1** on the screen) as **Host-only Adapter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.15 – Virtual machine network configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.15 – Virtual machine network configuration
  prefs: []
  type: TYPE_NORMAL
- en: The virtual machine should now be configured to run and operate in the virtual
    network we have created. We can now move on to set up our Windows Server 2008
    virtual machine also known as **Metasploitable3**.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Metasploitable3 virtual machine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For our Windows Server 2008 virtual machine, we will be using an intentionally
    vulnerable virtual machine based on Windows Server 2008, called Metasploitable3\.
    It was designed and created by *Rapid7* to teach and demonstrate various penetration
    testing and privilege escalation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about Metasploitable3, you can read up on the release notes at
    [https://blog.rapid7.com/2016/11/15/test-your-might-with-the-shiny-new-metasploitable3/](https://blog.rapid7.com/2016/11/15/test-your-might-with-the-shiny-new-metasploitable3/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up Metasploitable3 involves a manual building process; however, prebuilt
    virtual machine files also exist, which we can use to set up our virtual machine
    without any hassle or installation:'
  prefs: []
  type: TYPE_NORMAL
- en: To get started with the setup process, we first need to download the OVA file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The prebuilt **Metasploitable3 Box** file can be downloaded at [https://app.vagrantup.com/rapid7/boxes/metasploitable3-win2k8](https://app.vagrantup.com/rapid7/boxes/metasploitable3-win2k8).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading the virtual machine file, the importation process is similar
    to that of Windows 7\. Simply double-click on the **OVA** file and it will bring
    up the virtual machine import screen, as follows:![Figure 2.16 – Importing Metasploitable3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.16 – Importing Metasploitable3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify your **Base Directory** virtual machine and begin the import process,
    as follows:![Figure 2.17 – Importing Metasploitable3](Images/B17389_02_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.17 – Importing Metasploitable3
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the virtual machine has been imported, we can modify the virtual machine
    settings to configure Metasploitable3 to use the virtual network, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.18 – Metasploitable3 network settings](Images/B17389_02_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.18 – Metasploitable3 network settings
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Windows 10 virtual machine
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You will need to manually install the Windows 10 virtual machine, given that
    no prebuilt virtual machine files are offered by Microsoft. If you have no experience
    of installing Windows manually from an *ISO* file or a *disc image*, use the installation
    guide at [https://www.extremetech.com/computing/198427-how-to-install-windows-10-in-a-virtual-machine](https://www.extremetech.com/computing/198427-how-to-install-windows-10-in-a-virtual-machine):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the Windows 10 ISO, you will need to navigate to the following
    URL: [https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-10-enterprise).
    This will prompt you to specify the version of Windows 10 you would like to download.
    Go ahead and specify **Windows 10 Enterprise** and click on **Continue**. Afterward,
    you will need to provide your personal information to access the download:![Figure
    2.19 – Downloading Windows 10 ISO'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_019.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.19 – Downloading Windows 10 ISO
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading the ISO, you can create the virtual machine in VirtualBox
    and install Windows manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After successfully installing Windows 10, you can now modify the **Network**
    settings to configure the virtual machine to use the virtual network we have created,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.20 – Windows network settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.20 – Windows network settings
  prefs: []
  type: TYPE_NORMAL
- en: We have now successfully set up our Windows virtual machines and configured
    them to use our customized virtual network. Let's now take a look at how to set
    up our Linux virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Linux virtual machines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typically, Linux is set up and configured to run as a server, primarily for
    the hosting of services such as web applications, mail gateways, and database
    servers. This vastly increases the threat surface and the number of attack vectors
    that an attacker can exploit in order to gain initial access into a Linux system;
    for example, a vulnerability in the web server can lead to total system compromise.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, we will be using an intentionally vulnerable Linux virtual
    machine called **Metasploitable2**, which is also created by *Rapid7* with the
    aim of teaching and demonstrating Linux exploitation and privilege escalation
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Metasploitable2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Metasploitable2 is a free and intentionally vulnerable Ubuntu virtual machine
    that can be set up and deployed on any type 2 hypervisor. Let''s take a look at
    how to set it up:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable2 can be downloaded at [https://sourceforge.net/projects/metasploitable/files/Metasploitable2/](https://sourceforge.net/projects/metasploitable/files/Metasploitable2/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This URL will direct you to **SourceForge**, where you will be prompted to download
    the Metasploitable2 compressed archive, as follows:![Figure 2.21 – The Metasploitable2
    archive
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_021.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.21 – The Metasploitable2 archive
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading and extracting the archive, we are presented with a **VMDK**
    (**Virtual Machine Disk**) file that we will use to set up the virtual machine,
    which you can see in the list here:![Figure 2.22 – The Metasploitable2 archive
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_022.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.22 – The Metasploitable2 archive
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To set up Metasploitable2, we will need to create a new virtual machine. Click
    on the **New** button in VirtualBox, as shown in the following screenshot:![Figure
    2.23 – The New VirtualBox virtual machine](Images/B17389_02_023.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.23 – The New VirtualBox virtual machine
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will now need to specify the virtual machine **Name** and the base directory
    under which the virtual machine will be installed. This is illustrated in *Figure
    2.24*:![Figure 2.24 – Metasploitable2 configuration](Images/B17389_02_024.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.24 – Metasploitable2 configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will now be prompted to specify the amount of RAM we wish to allocate to
    the virtual machine under the **Memory Size** option, as shown in *Figure 2.25*.
    Leave the option at the pre-configured amount, which should be **512 MB**:![Figure
    2.25 – Metasploitable2 Memory size setting](Images/B17389_02_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.25 – Metasploitable2 Memory size setting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After specifying the desired memory, you will be prompted to specify whether
    you would like to create a **virtual hard disk** or use an existing one. Select
    the option to use your own virtual hard disk and specify the directory of the
    **Metasploitable2.vmdk** file that you have downloaded, as shown here:![Figure
    2.26 – The Metasploitable2 VMDK specification](Images/B17389_02_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.26 – The Metasploitable2 VMDK specification
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After creating the Metasploitable2 virtual machine, you now need to configure
    the virtual machine to use the custom virtual network. This can be done by modifying
    the **Settings** of the virtual machine and modifying the **Network Adapter**,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.27 – The Metasploitable2 Network configuration](Images/B17389_02_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.27 – The Metasploitable2 Network configuration
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to set up both Windows and Linux virtual
    machines and how to configure a customized isolated virtual network for our virtual
    hacking lab.
  prefs: []
  type: TYPE_NORMAL
- en: We have now set up all our target virtual machines and have configured them
    to run in the same virtual network. Our final virtual machine to set up is our
    *main attacker* virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Kali Linux** is a *Debian*-based Linux distribution that is tailored toward
    penetration testers and security researchers. It is preconfigured and prepackaged
    with over 300 tools that can be used for penetration tests, security audits, and
    forensics. It is arguably the de facto standard for all industry professionals,
    as it offers a solid base to work from, various deployment and installation options,
    and an excellent software repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux can be downloaded from the official Kali website ([https://kali.org](https://kali.org))
    and can be installed and configured in a plethora of ways. You can directly install
    it from an ISO or use a pre-configured OVA file for a preinstalled solution. In
    our case, as with the Windows 7 virtual machine, we will be using the OVA file,
    as it saves time and is much more convenient.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To download the Kali Linux virtual appliance, navigate to the following link
    and download the **32-bit** or **64-bit** **Kali Linux VirtualBox** image based
    on your preferred system architecture (https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/#1572305786534-030ce714-cc3b):![Figure
    2.28 – Kali Linux VirtualBox Images
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/B17389_02_028.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.28 – Kali Linux VirtualBox Images
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After downloading and extracting the Kali Linux archive, the contents of the
    extracted directory will contain a Kali Linux OVA file that can be directly imported
    into VirtualBox. We can do this by double-clicking on the **OVA image**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will bring up the VirtualBox **Import virtual appliance wizard**, where
    we will need to specify the base directory under which our virtual machine will
    be stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The importing process will begin and will take a few minutes to complete:![Figure
    2.29 – Importing Kali Linux OVA](Images/B17389_02_029.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.29 – Importing Kali Linux OVA
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the import is complete, we will need to configure the Kali virtual machine
    to use the custom network we created. This can be done by modifying the settings
    of the virtual machine, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.30 – Kali Linux network settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_030.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.30 – Kali Linux network settings
  prefs: []
  type: TYPE_NORMAL
- en: We have now been able to set up our virtual hacking lab comprehensively, and
    we can move on to the testing phase. It involves starting up all of the virtual
    machines and performing a host discovery scan from Kali Linux to test the efficacy
    and functionality of our virtual network configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can begin the test by starting up our virtual machines individually and
    running the following tests:'
  prefs: []
  type: TYPE_NORMAL
- en: To log in to the Kali Linux virtual machine, use the credentials for the **root**
    user. The username will be root and the password will be **toor**. This can be
    changed by running the **passwd** utility in the Terminal, as follows:![Figure
    2.31 – The Kali Linux password change functionality](Images/B17389_02_031.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 2.31 – The Kali Linux password change functionality
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After you have started your virtual machines, you can perform a network discovery
    scan with a utility called **netdiscover**, which uses **Address Resolution Protocol**
    (**ARP**) pings to detect hosts on a network. To run a network discovery scan,
    run the following command in your Kali Linux Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**$ netdiscover -i <interface> -r 10.10.10.1/24**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After running the **netdiscover** command, we will discover two hosts that
    are online and active as illustrated in *Figure 2.32*. This demonstrates our network
    configuration is working and that we can communicate with other hosts on the network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.32 – The results of netdiscover'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_02_032.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.32 – The results of netdiscover
  prefs: []
  type: TYPE_NORMAL
- en: We have now set up our Kali Linux virtual machine and configured it to run in
    the same virtual network and have tested our virtual network by performing a host
    discovery scan.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began by understanding how to structure a virtual hacking
    lab and the role of virtualization. We then looked at how to set up and configure
    our hypervisor and a custom isolated network that could be used to interconnect
    our virtual machines. Later in the chapter, we set up our target virtual machines
    on VirtualBox and configured them to use our custom virtual network. We then ended
    the chapter by deploying Kali Linux in our virtual hacking lab.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a functional virtual hacking lab, we can move on to the initial
    exploitation progress.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin the privilege escalation process by gaining
    our initial foothold on our target virtual machines. We will take a look at the
    various attack vectors that can be leveraged to give us access to the systems.
  prefs: []
  type: TYPE_NORMAL
