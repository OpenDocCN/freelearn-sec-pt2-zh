- en: '*Chapter 4*: Performing Local Enumeration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our initial foothold on the target system, we need to enumerate
    additional information from the target that will be vital and pivotal to the privilege
    escalation process. This information will be used to structure, plan, and coordinate
    our privilege escalation attacks successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is vitally important to learn how to enumerate information correctly
    and comprehensively from a target system in order to successfully escalate privileges.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the enumeration process, why it is important,
    and the various local enumeration techniques for Windows and Linux. You will then
    learn how to use automated enumeration tools to automate processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the enumeration process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the demonstrations in this chapter, you will need to ensure
    that you meet the following technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Familiarity with Linux Terminal commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiarity with the Windows command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following link to see the Code in Action video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/39JFTjW](https://bit.ly/39JFTjW)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the enumeration process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you gained an initial foothold on a system in [*Chapter 3*](B17389_03_Final_PG_ePub.xhtml#_idTextAnchor045),
    *Gaining Access (Exploitation)*, you have little or no information regarding what
    operating system is running, what services are running, your privileges on the
    system, and what networks the target system is connected to. This leaves you blind
    and in no position to initiate a privilege escalation attack. This is where enumeration
    comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: '**Enumeration** is the process of extracting vital information such as operating
    system versions, usernames, network information, and installed programs from a
    target system. This information can then be used to identify potential flaws,
    misconfigurations, or vulnerabilities that can be exploited.'
  prefs: []
  type: TYPE_NORMAL
- en: The enumeration process can be analogized through the example of planning a
    heist, where reconnaissance and information gathering on the target is paramount.
    If insufficient information regarding the target is obtained, the heist will be
    marred with mistakes and will, in all probability, end up failing. However, if
    information regarding the target is diligently and comprehensively gathered, the
    heist will be efficient since all the relevant information has been gathered and
    analyzed for potential mistakes and issues. Therefore, it is vitally important
    to perform comprehensive enumeration on your target systems.
  prefs: []
  type: TYPE_NORMAL
- en: Local enumeration involves actively gathering information from the target system
    after its **initial exploitation**. This information is then used to identify
    potential privilege escalation vectors through vulnerabilities or configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The local enumeration process is multi-faceted and can therefore be categorized
    based on the type of information being gathered:'
  prefs: []
  type: TYPE_NORMAL
- en: System enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User and group enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall and antivirus enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This categorization will be useful in structuring and organizing the information
    we will be gathering. Local enumeration can be performed manually and automatically
    by using frameworks and scripts; however, it is always recommended to perform
    manual enumeration as it ensures the process is performed comprehensively and
    diligently.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will be exploring the various techniques and tools
    that can be used to perform local enumeration both manually and automatically
    on Windows and Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the following target virtual machines that
    we exploited in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploitable2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 20.04
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of using multiple operating system versions is to demonstrate and
    highlight the variety of information that can be gathered based on the operating
    system's version and configuration. The techniques demonstrated in this chapter
    will work on most Windows releases and Linux distributions with a few exceptions,
    all of which will be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what enumeration is and its importance in the privilege
    escalation process, we can take a look at how to enumerate information from Windows
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Windows enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin the enumeration process on Windows manually and follow the previously
    listed categories in our approach. To begin the local enumeration process, you
    will need to ensure that you have direct access to your target system in the form
    of a shell. If you have followed the examples demonstrated so far in this book,
    you should have a **meterpreter** session on your target systems.
  prefs: []
  type: TYPE_NORMAL
- en: System enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: System enumeration is the process of enumerating core system information such
    as the operating system's version and service pack, the operating system's architecture,
    the system services that are running, and the installed patches and hotfixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can begin the process of system enumeration by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the commands we will be running are native to the Windows command prompt,
    so they need to be run within a native shell session. If you already have one,
    you can skip this step. Alternatively, if you are running a **meterpreter** session,
    you will need to run the following command, as outlined in the following screenshot,
    to get a command prompt session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**shell**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, you should get an active shell on the
    target system through the command prompt, and you should be able to run Windows-specific
    commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Meterpreter command prompt'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_001.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.1 – Meterpreter command prompt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first step is to enumerate operating system information. This can be done
    by running the **systeminfo** command and piping the output to the **findstr**
    utility to limit the output to the information that is essential. This can be
    done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**systeminfo | findstr /B /C:"OS Name" /C:"OS Version"**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As highlighted in the following screenshot, the command will output the operating
    system's name, version, and architecture. This information can be used in conjunction
    with automated vulnerability assessment tools to determine inherent privilege
    escalation vulnerabilities. It is also useful for sorting through exploits for
    a particular operating system architecture. The operating system version is also
    useful for finding kernel-based exploits for specific versions of an operating
    system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This gives us enough information regarding the operating system to narrow down
    our approach regarding finding vulnerabilities:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.2 – systeminfo command output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_002.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.2 – systeminfo command output
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also use the **systeminfo** command to determine what Windows hotfixes
    or patches have been installed. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**systeminfo**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Hotfixes installed'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_003.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.3 – Hotfixes installed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As highlighted in the preceding screenshot, the output lists the total number
    of hotfixes that have been installed and their relevant HotFix IDs. This information
    is useful for finetuning your approach in terms of vulnerabilities in the operating
    system that may have already been patched.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The default output of the **systeminfo** command is detailed and provides you
    with a complete overview of the operating system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also determine the hotfixes and patches that have been installed on
    a system by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wmic qfe**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Installed updates'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_004.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.4 – Installed updates
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As illustrated in the preceding screenshot, the command outputs the updates
    or patches that have been installed and provides additional information, such
    as the date the patches were installed and the user that installed them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **HotFixID** can be used to determine potential vulnerabilities and exploits
    for specific hotfixes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also run the command on a Windows 10 system to determine the patches
    that have been installed and how recently this happened, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Windows 10 installed updates](Images/B17389_04_005.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.5 – Windows 10 installed updates
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next piece of information we must enumerate is the operating system''s
    hostname. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**hostname**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Hostname](Images/B17389_04_006.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.6 – Hostname
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The hostname is used to identify systems on a network and may shed some light
    on the role of the system or the person the system belongs to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another important piece of information to enumerate is the drives attached
    to the system. We can do this by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wmic logicaldisk get caption**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Logical disks'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_007.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.7 – Logical disks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will output the list of attached
    drives and their identifier. In this case, the only disk that's attached is the
    system drive labeled **C:**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is also important to enumerate information regarding the processes that
    are currently running. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**tasklist /SVC**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Running processes](Images/B17389_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Running processes
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will output a list of processes
    that are running and their associated services. It also displays the process ID,
    which can be useful for identifying a particular process.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of what the target system is running, we can
    start identifying the users on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: User and group enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User enumeration is the process of identifying the user we are currently utilizing
    and the user accounts that are on the target system. This information is useful
    as it tells us whether we have administrative privileges. It also helps us determine
    and identify potential user accounts that we can utilize to elevate our privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user enumeration process on Windows is fairly straightforward and can be
    performed by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to determine the user that we are currently using. This can
    be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**whoami**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you have administrative privileges, your username should be **nt authority**,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.9 - whoami'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_009.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.9 - whoami
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also determine our privileges by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**whoami /priv**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.10 – whoami privileges'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_010.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.10 – whoami privileges
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, this will output the privileges that have
    been assigned to our account and provides a brief description of each privilege,
    along with their current states. We looked at privileges briefly in [*Chapter
    1*](B17389_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Introduction to Privilege
    Escalation*, where we explained access tokens. The importance of privileges will
    be highlighted later in this book, when we look at token impersonation attacks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To determine the groups that our account is part of, we can run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**whoami /groups**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.11 – whoami groups'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_011.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.11 – whoami groups
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also enumerate the user accounts that are active on the system by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**net user**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.12 – net user](Images/B17389_04_012.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.12 – net user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, the command will output a list of all
    the users on the system. This provides helpful information regarding what accounts
    we can laterally escalate our privileges to. We can also obtain additional information
    about a particular user by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**net user <username>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This can also help us identify accounts that are part of the administrative
    group and have admin privileges, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.13 – User enumeration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_013.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.13 – User enumeration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also determine the users that are part of the administrative group by
    running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**net localgroup administrators**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Net localgroup](Images/B17389_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Net localgroup
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will outline the users that
    are part of the administrative group. This gives us a clear picture of the accounts
    we can target to obtain administrative privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Network enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Network enumeration is the process of obtaining all the relevant network information
    from a target system with the aim of determining its IP address, DNS server, default
    gateway, and domain controller, if any. This information can be used to map out
    the target network and stage pivoting attacks. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step involves enumerating the target network interfaces and their
    details. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ipconfig /all**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.15 – ipconfig'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.15 – ipconfig
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, this will display all the relevant network
    information regarding a particular NIC: its IP address, DNS server, and default
    gateway.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to analyze the routing table. This can be done by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**route print**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.16 – Routing table'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.16 – Routing table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to determine what services we have running and their respective
    ports. This can be done by running the **netstat** command with the following
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**netstat -ano**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Netstat active connections'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_04_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – Netstat active connections
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will display all the active
    connections, along with their respective ports and **process IDs** (**PIDs**).
  prefs: []
  type: TYPE_NORMAL
- en: 'This command can also be used to identify active connections from other hosts,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Netstat established connections'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_04_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Netstat established connections
  prefs: []
  type: TYPE_NORMAL
- en: This information is important as it may also reveal internal services that are
    running that were previously undetected during the initial footprinting phase
    and are running locally.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have enumerated the networking information from the target, we will
    learn how to find and enumerate passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Password enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Password enumeration is the process of finding and locating passwords stored
    locally in the form of stored user passwords in clear text, configuration files
    with passwords, passwords stored in the Windows registry, and Windows hashes stored
    in the **Security Account Manager** (**SAM**) database.
  prefs: []
  type: TYPE_NORMAL
- en: We will explore password enumeration in greater detail when we explore automated
    tools, since the process of manually enumerating passwords from the registry and
    SAM database can be time consuming.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will utilize manual techniques such as string matching.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can utilize the **findstr** utility to locate specific strings in files.
    For example, we can run the following command to locate the **password** string
    in files with commonly used file extensions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**findstr /si password *.doc *.txt *.ini *.config**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This can be useful for finding cleartext passwords stored by users or administrators
    that may contain passwords for other accounts or services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also search for specific strings pertaining to services such as **Secure
    Shell** (**SSH**) and **File Transfer Protocol** (**FTP**). This can be done by
    running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**dir /s *pass* == *cred* == *ssh* == *.config***'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can search for passwords within the registry for specific programs and software
    by running the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**reg query HKLM /f password /t REG_SZ /s**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will display any entries that contain the **password** string within the
    **HKEY_LOCAL_MACHINE** registry, as shown in the following screenshot. You can
    also run the same query for the **HKEY_CURRENT_USER** registry. This can be done
    by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**reg query HKCU /f password /t REG_SZ /s**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Password enumeration in the Windows Registry](Images/B17389_04_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Password enumeration in the Windows Registry
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also search for passwords in configuration files and session information
    for specific programs such as PuTTY or VNC. This can be done by running the following
    command and specifying the program''s default registry directory:'
  prefs: []
  type: TYPE_NORMAL
- en: reg query "HKCU\Software\SimonTatham\PuTTY\Sessions\<User>"
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the query will display the PuTTY session details for the user
    that was specified within the query.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The user Simon Tatham highlighted in the **HKCU\Software\SimonTatham\PuTTY\Sessions\<User>**
    registry directory references the developer of the PuTTY program.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to use manual querying techniques to enumerate passwords
    from Windows, we need to identify and map out the security features that are currently
    active on the system.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall and antivirus enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To successfully elevate our privileges and maintain persistence on a system,
    we need to understand the security measures and systems that are in place that
    could hinder the process. Two of the most common security deterrents found on
    Windows systems are Windows Firewall and Windows Defender, though other third-party
    antivirus solutions may help.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ability to detect and evade firewalls and antivirus solutions is important
    during a penetration test. This is because the privilege escalation process involves
    actively engaging with the target and transferring files to and from the target
    system. Firewalls and antivirus solutions can hinder the process and can alert
    a security team or administrator about a potential breach. For this reason, it
    is important to enumerate information regarding the firewall''s status and rules,
    as well as the antivirus solution in place. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need to identify the status of Windows Defender before copying
    over any files. This can be done by running using the service control command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sc query windefend**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Given the intentionally vulnerable design of the Metasploitable3 virtual machine,
    Windows Defender has not been enabled, so we must render the system vulnerable
    and unprotected, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.20 – Windows Defender disabled'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_020.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.20 – Windows Defender disabled
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If Windows Defender is enabled and active, you should get an output similar
    to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Windows Defender enabled and running](Images/B17389_04_021.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.21 – Windows Defender enabled and running
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To identify third-party antivirus solutions, you can list the services that
    are running on the system. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sc queryex type=service**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If a third-party antivirus solution is running, you should be able to identify
    it by analyzing the service name, as shown in the following screenshot. Here,
    I have been able to detect a second third-party antivirus program running in tandem
    with Windows Defender:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Third-party A/V](Images/B17389_04_022.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.22 – Third-party A/V
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to enumerate information regarding the firewall''s status and
    configuration. This will help us detect the ports that are open and can be utilized
    for further attacks. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**netsh firewall show state**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Firewall status'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_04_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.23 – Firewall status
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will output the firewall's
    operational mode, profile, and open ports. This gives us a clear idea of what
    we can and cannot do from a networking perspective.
  prefs: []
  type: TYPE_NORMAL
- en: We should now have a clear idea of what our target system is running and how
    it is configured. Now, let's learn how to use various automation tools to simplify
    the enumeration process.
  prefs: []
  type: TYPE_NORMAL
- en: Automated enumeration tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automated enumeration offers a much more targeted and time-efficient approach
    to gathering information from a target system and, consequently, making sense
    of it. The primary objective behind using automated enumeration tools is the ability
    to make sense of, as well as contextualize, the information that's been gathered
    and provide recommendations based on it.
  prefs: []
  type: TYPE_NORMAL
- en: Many automated enumeration tools for Windows exist. However, we will only be
    focusing on the tools that have a high probability of working and do not require
    any additional dependencies or access to specific utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Local Exploit Suggester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Local Exploit Suggester is a post-exploitation module for Metasploit that
    is used to scan a target for potential exploits based on operating system information.
    It automates the process of enumerating the system information and provides exploit
    recommendations based on the operating system''s version and installed patches.
    Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the module, you will need to have **meterpreter** access on a target
    system, after which you will need to move the **meterpreter** session to the background
    and load the **local_exploit_suggester** module. This can be done by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**use post/multi/recon/local_exploit_suggester**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you need to configure the module options. The only option that we need
    to set is the session number, as shown in the following screenshot. This can be
    done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**set SESSION <Session Number>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.24 – Local Exploit Suggester](Images/B17389_04_024.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.24 – Local Exploit Suggester
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After configuring the options, you can run the module. At this point, the module
    will begin the enumeration process and output the results after a few minutes,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.25 – Local Exploit Suggester results](Images/B17389_04_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Local Exploit Suggester results
  prefs: []
  type: TYPE_NORMAL
- en: The output from the module will display the various exploit modules, most of
    which are kernel exploits that can be used against the target. We will explore
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Exploit Suggester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows Exploit Suggester is an open source utility developed in Python that
    allows you to scan for potential vulnerabilities in Windows operating systems.
    It also provides their corresponding exploits or exploit modules.
  prefs: []
  type: TYPE_NORMAL
- en: It works by comparing the Windows patch levels against the Microsoft vulnerability
    database to detect vulnerabilities. It does this by identifying any missing patches
    on the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'It does not need to be run locally on the target system and only requires the
    output from the **systeminfo** command on the target. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step involves cloning the repository at [https://github.com/AonCyberLabs/Windows-Exploit-Suggester](https://github.com/AonCyberLabs/Windows-Exploit-Suggester)
    onto our Kali VM. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**git clone https://github.com/AonCyberLabs/Windows-Exploit-Suggester.git**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The tool requires Python2 to work as it utilizes various Python2 modules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Python2 is currently deprecated as of January 1, 2020\. This means that you
    may encounter issues with dependencies for older tools and frameworks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After cloning the repository, you will need to install the required dependencies.
    This can be done by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo apt-get install python-xlrd**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**pip install xlrd --upgrade**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After installing the dependencies, you will need to update the database by
    running the script with the following flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**./windows-exploit-suggester.py –update**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.26 – Windows Exploit Suggester update](Images/B17389_04_026.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.26 – Windows Exploit Suggester update
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Take note of the database''s filename, as highlighted in the following screenshot,
    as it will be used in the scanning phase:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.27 – Windows Exploit Suggester database file](Images/B17389_04_027.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.27 – Windows Exploit Suggester database file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The next step involves enumerating the target system information by running
    the **systeminfo** command, after which you will need to copy and paste the output
    of the command to a **.txt** file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After saving the output of the **systeminfo** command to a **.txt** file, you
    can run the script to check for vulnerabilities, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**./windows-exploit-suggester.py --database <database-file>.xlsx --systeminfo
    <systeminfo-output>.txt**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of this command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.28 – Windows Exploit suggester output'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_04_028.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.28 – Windows Exploit suggester output
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the script will perform a scan and output
    a list of all the potential vulnerabilities and relevant information, such as
    the POC reference and exploit code or modules available on **exploit-db** or GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: This information will be useful in the next chapter, when we explore kernel
    exploitation on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Other enumeration tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned earlier in this section, many automated enumeration tools exist
    and can provide additional functionality and information, most of which we will
    explore later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of useful enumeration tools and frameworks for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Privilege Escalation Awesome Script (winPEAS)**: [https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sherlock**: [https://github.com/rasta-mouse/Sherlock](https://github.com/rasta-mouse/Sherlock)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just Another Windows Enumeration Script** (**JAWS**): [https://github.com/411Hall/JAWS](https://github.com/411Hall/JAWS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Watson**: [https://github.com/rasta-mouse/Watson](https://github.com/rasta-mouse/Watson)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know how to perform local enumeration on Windows, we will learn
    how to perform local enumeration on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Linux enumeration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Local enumeration on Linux is similar to Windows and involves using manual techniques
    and tools to enumerate important information. In this section, we will explore
    a few automated tools that help simplify and streamline the enumeration process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Package managers will vary based on the Linux distribution in question. This
    will be pointed out and highlighted in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: System enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: System enumeration is the process of enumerating core system information such
    as the operating system's version, kernel version, operating system architecture,
    and the services that are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can perform system enumeration by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first piece of information we will need to enumerate is the operating system''s
    information. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**cat /etc/*-release**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also use the **Linux Standard Base** (**LSB**) information. This can
    be done by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**lsb_release -a**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If these commands do not work, you can use the hostname systemd utility by
    running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**hostnamectl**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will also need the kernel version and operating system architecture. This
    will be useful in determining vulnerabilities and finding kernel exploits. This
    can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**uname -a**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.29 – Linux kernel version](Images/B17389_04_029.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.29 – Linux kernel version
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will output the kernel version
    and system architecture.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will also need to identify the processes that are running as root. This
    is useful as you can utilize these processes to execute arbitrary commands as
    root. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ps aux | grep root**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, this will list all the processes running
    as root:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.30 – Linux services running](Images/B17389_04_030.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.30 – Linux services running
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another potential privilege escalation access vector on Linux is any programs
    and software that have been installed. We can determine the software that''s been
    installed on the system by listing the content of the following directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **/usr/local**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **/usr/local/bin**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **/opt/**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **/var**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e) **/usr/src**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can list the installed packages on Debian systems by running the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**dpkg -l**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If the target is running RHEL or Fedora, you can list the installed software
    by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**rpm -qa**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have enumerated information regarding the operating system's version
    and kernel version, we will learn how to enumerate user and group information
    on Linux.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also enumerate information from cron to determine what cron jobs are
    running and if they can be leveraged to execute commands or binaries. This can
    be done by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**crontab -l**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ls -al /var/spool/cron**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ls -al /etc/ | grep cron**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**ls -al /etc/cron***'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/cron***'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/at.allow**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/at.deny**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/cron.allow**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/cron.deny**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/crontab**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/anacrontab**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /var/spool/cron/crontabs/root**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have a clear picture of what is running on our target system, we
    can begin enumerating users and groups.
  prefs: []
  type: TYPE_NORMAL
- en: User and group enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User enumeration is the process of identifying the user we are currently utilizing
    and the user accounts that are on the target system. This information is useful
    as it tells us whether we have administrative privileges. It also helps us determine
    and identify potential user accounts that we can utilize to elevate our privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user enumeration process on Linux is fairly straightforward and can be
    performed by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to determine the user that we are currently using. This can
    be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**whoami**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.31 – whoami Linux](Images/B17389_04_031.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.31 – whoami Linux
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have administrative privileges, your username should be **root**, as
    shown in the preceding screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also enumerate the other user accounts on the system by running the
    following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/passwd**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To determine the groups that our account is part of, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**groups <username>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.32 – Linux groups'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_032.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.32 – Linux groups
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can also list the groups on the system by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**cat /etc/group**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can search for SUID binaries that can be exploited and run with root privileges
    to run arbitrary commands. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**find / -perm -u=s -type f 2>/dev/null**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's learn how to enumerate network information from the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Network enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Network enumeration is the process of obtaining all the relevant network information
    from a target system with the aim of determining its IP address, DNS server, default
    gateway, and domain controller, if any. This information can be used to map out
    the target network and stage pivoting attacks. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step involves enumerating the target network interfaces and their
    details. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ifconfig**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.33 – ifconfig](Images/B17389_04_033.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.33 – ifconfig
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is analyzing the routing table. This can be done by running the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**route**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.34 – Linux routing table'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_04_034.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 4.34 – Linux routing table
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to determine what services we have running and their respective
    ports. This can be done by running the **netstat** command with the following
    arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**netstat -ant**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.35 – Netstat active connections](Images/B17389_04_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – Netstat active connections
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the command will display all the active
    connections and their respective ports.
  prefs: []
  type: TYPE_NORMAL
- en: This information is important as it may also reveal internal services that are
    running locally that previously went undetected during the initial footprinting
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: We should now have a clear idea of what our target system is running and how
    it is configured. Now, let's learn how to use various automation tools that will
    help simplify the enumeration process.
  prefs: []
  type: TYPE_NORMAL
- en: Automated enumeration tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many automated enumeration tools for Linux exist. This section will focus on
    the enumeration tools that will provide us with meaningful and actionable information.
  prefs: []
  type: TYPE_NORMAL
- en: LinEnum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LinEnum is a bash script that automates the local enumeration process on Linux
    and provides comprehensive information to help specify the information required,
    as well as the ability to generate reports.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about the script at [https://github.com/rebootuser/LinEnum](https://github.com/rebootuser/LinEnum).
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the tool, we will need to download the bash script from GitHub and transfer
    it over to our target. If the target has internet access, we can download the
    script directly by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the target prevents any incoming connections, we can upload the script from
    our local system to the target through **meterpreter**, as shown in the following
    screenshot:![Figure 4.36 – LinEnum download](Images/B17389_04_036.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 4.36 – LinEnum download
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then execute the script with the following arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**./LinEnum.sh -t -r <report-name>**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will enumerate all the relevant information and will also display potentially
    useful vulnerabilities that can be exploited, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.37 – LinEnum results](Images/B17389_04_037.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 4.37 – LinEnum results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also use the keyword functionality to enumerate passwords on the system.
    This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**./LinEnum.sh -k password**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let's learn how to enumerate potential vulnerabilities on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Exploit Suggester
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Linux Exploit Suggester is an open source shell script that allows you to scan
    for potential kernel vulnerabilities on Linux. It provides their corresponding
    exploits or exploit modules. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The script needs to be run locally on the target system. First, we need to
    download the script on to the target system. This can be done with **wget**, like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh
    -O les.sh**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After downloading the script onto the target, you need to ensure the script
    has executable permissions. This can be done by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**chmod +x les.sh**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now run the script to begin the scanning process, after which the script
    will output a list of potential vulnerabilities and their corresponding POCs and
    exploits.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have a grip on how to use various enumeration tools, let's explore
    some of the other automated enumeration tools that can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Other enumeration tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned earlier in this section, many automated enumeration tools exist
    and can provide additional functionality and information, most of which we will
    explore later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of useful enumeration tools and frameworks for Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Linux Smart Enumeration: [https://github.com/diego-treitos/linux-smart-enumeration](https://github.com/diego-treitos/linux-smart-enumeration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux Priv Checker – **linuxprivchecker.py**: A Linux Privilege Escalation
    Check Script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Privilege Escalation Scripts: [https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LinEnum: [https://github.com/rebootuser/LinEnum](https://github.com/rebootuser/LinEnum)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that, we've learned how to enumerate information from Windows and Linux
    systems. Now, we are ready to start using this information to stage privilege
    escalation attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by learning about the enumeration process. We then
    looked at how to perform local enumeration manually and automatically on Windows.
    Finally, we learned how to perform local enumeration on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to perform local enumeration on Windows and Linux,
    we can begin the privilege escalation process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin the privilege escalation process on Windows
    by using kernel exploits.
  prefs: []
  type: TYPE_NORMAL
