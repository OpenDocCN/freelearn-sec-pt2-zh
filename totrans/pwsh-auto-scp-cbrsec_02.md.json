["```\n> $i = 1\n> $string = \"Hello World!\"\n> $this_is_a_variable = \"test\"\n```", "```\n> Get-Date\nMonday, November 2, 2020 6:43:59 PM\n> $date = Get-Date\n> Write-Host \"Today is\" $date\nToday is 11/2/2020 6:44:40 PM\n```", "```\n> $x = 4\n> $string = \"Hello World!\"\n> $date = Get-Date\n```", "```\n> $x.GetType().Name\nInt32\n> $string.GetType().Name\nString\n> $date.GetType().Name\nDateTime\n```", "```\n> $number = \"4\"\n> $number.GetType().Name\nString\n```", "```\n> $number + 2\n42\n```", "```\n> ($number + 2).GetType().Name\nString\n```", "```\n> $int_number = [int]$number\n> $int_number.GetType().Name\nInt32\n```", "```\n> $int_number + 2\n6\n```", "```\n> 0x263a\n9786\n> [char]0x263a\n☺\n```", "```\n    Get-ChildItem -Path C:\\ -Directory -Force -ErrorAction SilentlyContinue | ForEach-Object {\n    ```", "```\n        Write-Host $_.FullName\n    ```", "```\n    }\n    ```", "```\n> $env:PSModulePath\nC:\\Users\\PSSec\\Documents\\WindowsPowerShell\\Modules;C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\n```", "```\n> Get-Help about_reserved_words\n```", "```\n> Get-Help about_Language_Keywords\n```", "```\nBegin               Enum               Param\nBreak               Exit               Process\nCatch               Filter             Return\nClass               Finally            Static\nContinue            For                Switch\nData                ForEach            Throw\nDefine              From               Trap\nDo                  Function           Try\nDynamicParam        Hidden             Until\nElse                If                 Using\nElseif              In                 Var\nEnd                 InlineScript       While\n```", "```\n> Get-Help break\n```", "```\n> Get-Help about_If\n```", "```\n> Get-Help filter -Category:HelpFile\n```", "```\n$script:ModuleRoot = $PSScriptRoot\n# Sets the scope of the variable $ModuleRoot to script\n```", "```\n    > $a = 3; $b = 5; $result = $a + $b\n    ```", "```\n    > $result\n    ```", "```\n    8\n    ```", "```\n    > $a = 3; $b = 5; $result = $b - $a\n    ```", "```\n    > $result\n    ```", "```\n    2\n    ```", "```\n    > $a = 3; $b = 5; $result = $a * $b\n    ```", "```\n    > $result\n    ```", "```\n    15\n    ```", "```\n    > $a = 12; $b = 4; $result = $a / $b\n    ```", "```\n    > $result\n    ```", "```\n    3\n    ```", "```\n    > 7%2\n    ```", "```\n    1\n    ```", "```\n    > 8%2\n    ```", "```\n    0\n    ```", "```\n    > 7%4\n    ```", "```\n    3\n    ```", "```\n> $a = 3; $b = 5; $c = 2\n> $result = ($a + $b) * $c\n> $result\n16\n```", "```\n    > $a = 1; $b = 1; $a -eq $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 1; $b = 2; $a -eq $b\n    ```", "```\n    False\n    ```", "```\n> \"A\", \"B\", \"C\", \"D\" -lt \"C\"\nA\nB\n```", "```\n> \"A\",\"B\",\"C\" -eq \"A\"\nA\n```", "```\n    > $a = 1; $b = 2; $a -ne $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 1; $b = 1; $a -ne $b\n    ```", "```\n    False\n    ```", "```\n    > \"Hello World!\" -ne $null\n    ```", "```\n    True\n    ```", "```\n    > \"A\",\"B\",\"C\" -ne \"A\"\n    ```", "```\n    B\n    ```", "```\n    C\n    ```", "```\n    > $a = 1; $b = 2; $a -le $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 2; $b = 2; $a -le $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 3; $b = 2; $a -le $b\n    ```", "```\n    False\n    ```", "```\n    > \"A\",\"B\",\"C\" -le \"A\"\n    ```", "```\n    A\n    ```", "```\n    > $a = 1; $b = 2; $a -ge $b\n    ```", "```\n    False\n    ```", "```\n    > $a = 2; $b = 2; $a -ge $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 3; $b = 2; $a -ge $b\n    ```", "```\n    True\n    ```", "```\n    > \"A\",\"B\",\"C\" -ge \"A\"\n    ```", "```\n    A\n    ```", "```\n    B\n    ```", "```\n    C\n    ```", "```\n    > $a = 1; $b = 2; $a -lt $b\n    ```", "```\n    True\n    ```", "```\n    > $a = 2; $b = 2; $a -lt $b\n    ```", "```\n    False\n    ```", "```\n    > $a = 3; $b = 2; $a -lt $b\n    ```", "```\n    False\n    ```", "```\n    > \"A\",\"B\",\"C\" -lt \"A\" # results in no output\n    ```", "```\n    > $a = 1; $b = 2; $a -gt $b\n    ```", "```\n    False\n    ```", "```\n    > $a = 2; $b = 2; $a -gt $b\n    ```", "```\n    False\n    ```", "```\n    > $a = 3; $b = 2; $a -gt $b\n    ```", "```\n    True\n    ```", "```\n    > \"A\",\"B\",\"C\" -gt \"A\"\n    ```", "```\n    B\n    ```", "```\n    C\n    ```", "```\n    > \"PowerShell\" -like \"*owers*\"\n    ```", "```\n    True\n    ```", "```\n    > \"PowerShell\", \"Dog\", \"Cat\", \"Guinea Pig\" -like \"*owers*\"\n    ```", "```\n    PowerShell\n    ```", "```\n    > \"PowerShell\" -notlike \"*owers*\"\n    ```", "```\n    False\n    ```", "```\n    > \"PowerShell\", \"Dog\", \"Cat\", \"Guinea Pig\" -notlike \"*owers*\"\n    ```", "```\n    Dog\n    ```", "```\n    Cat\n    ```", "```\n    Guinea Pig\n    ```", "```\n    > \"PowerShell scripting and automation for Cybersecurity\" -match \"shell\\s*(\\d)\"\n    ```", "```\n    False\n    ```", "```\n    > \"Cybersecurity scripting in PowerShell 7.3\" -match \"shell\\s*(\\d)\"\n    ```", "```\n    True\n    ```", "```\n    > \"Cybersecurity scripting in PowerShell 7.3\" -notmatch \"^Cyb\"\n    ```", "```\n    False\n    ```", "```\n    > \"PowerShell scripting and automation for Cybersecurity\" -notmatch \"^Cyb\"\n    ```", "```\n    True\n    ```", "```\n    > $a = 1; $a\n    ```", "```\n    1\n    ```", "```\n    > $a = 1; $a += 2; $a\n    ```", "```\n    3\n    ```", "```\n    > $a\n    ```", "```\n    3\n    ```", "```\n    > $a -= 1; $a\n    ```", "```\n    2\n    ```", "```\n    > $a\n    ```", "```\n    2\n    ```", "```\n    > $a *= 3; $a\n    ```", "```\n    6\n    ```", "```\n    > $a\n    ```", "```\n    6\n    ```", "```\n    > $a /= 2; $a\n    ```", "```\n    3\n    ```", "```\n    > $a\n    ```", "```\n    3\n    ```", "```\n    > $a %= 2; $a\n    ```", "```\n    1\n    ```", "```\n    > $a= 1; $a++; $a\n    ```", "```\n    2\n    ```", "```\n    > $a = 10; $a--; $a\n    ```", "```\n    9\n    ```", "```\n    > $a = 1; $b = 2\n    ```", "```\n    > if (($a -eq 1) -and ($b -eq 2)) {Write-Host \"Condition is true!\"}\n    ```", "```\n    Condition is true!\n    ```", "```\n    > $a = 2; $b = 2\n    ```", "```\n    > if (($a -eq 1) -or ($b -eq 2)) {Write-Host \"Condition is true!\"}\n    ```", "```\n    Condition is true!\n    ```", "```\n    $path = $env:TEMP + \"\\TestDirectory\"\n    ```", "```\n    if( -not (Test-Path -Path $path )) {\n    ```", "```\n        New-Item -ItemType directory -Path $path\n    ```", "```\n    }\n    ```", "```\n    if (!(Test-Path -Path $path)) {\n    ```", "```\n        New-Item -ItemType directory -Path $path\n    ```", "```\n    }\n    ```", "```\n    > $a = 1; $b = 2; ($a -eq 1) -xor ($b -eq 1)\n    ```", "```\n    True\n    ```", "```\n    > ($a -eq 1) -xor ($b -eq 2)\n    ```", "```\n    False\n    ```", "```\n    > ($a -eq 2) -xor ($b -eq 1)\n    ```", "```\n    False\n    ```", "```\nif (<condition>)\n{\n    <action>\n}\nelseif (<condition 2>)\n{\n    <action 2>\n}\n...\nelse\n{\n    <action 3>\n}\n```", "```\n> if (1+2 -eq 3) { Write-Host \"Good job!\" }\n Good job!\n> if (1+2 -eq 5) { Write-Host \"Something is terribly wrong!\" }\n# returns no Output\n```", "```\n$color = \"green\"\nif ($color -eq \"blue\") {\n     Write-Host \"The color is blue!\"\n}\nelseif ($color -eq \"green\"){\n     Write-Host \"The color is green!\"\n}\n# returns: The color is green!\n```", "```\n$color = \"red\"\nif ($color -eq \"blue\") {\n     Write-Host \"The color is blue!\"\n}\nelseif ($color -eq \"green\"){\n     Write-Host \"The color is green!\"\n}\nelse {\n     Write-Host \"That is also a very beautiful color!\"\n}\n# returns: That is also a very beautiful color!\n```", "```\nswitch (<value to test>) {\n     <condition 1> {<action 1>}\n     <condition 2> {<action 2>}\n     <condition 3> {<action 3>}\n     ...\n     default {}\n}\n```", "```\n$color = Read-Host \"What is your favorite color?\"\nswitch ($color) {\n     \"blue\"   { Write-Host \"I'm BLUE, Da ba dee da ba di...\" }\n     \"yellow\" { Write-Host \"YELLOW is the color of my true love's hair.\" }\n     \"red\"    { Write-Host \"Roxanne, you don't have to put on the RED light...\" }\n     \"purple\" { Write-Host \"PURPLE rain, purple rain!\" }\n     \"black\" { Write-Host \"Lady in BLACK... she came to me one morning, one lonely Sunday morning...\" }\n     default  { Write-Host \"The color is not in this list.\" }\n}\n```", "```\nswitch -Regex ($userInput) {\n    \"^[A-Z]\" { \"User input starts with a letter.\" }\n    \"^[0-9]\" { \"User input starts with a number.\" }\n    default { \"User input doesn't start with a letter or number.\" }\n}\n```", "```\n$path = $env:TEMP + \"\\example.txt\"\nswitch -Wildcard -File $path {\n    \"*Error*\" { Write-Host \"Error was found!: $_\" }\n}\n```", "```\n> $path = $env:TEMP + \"\\baselines\"\n> Get-ChildItem -Path $path | ForEach-Object {Write-Host $_}\nOffice365-ProPlus-Sept2019-FINAL.zip\nWindows 10 Version 1507 Security Baseline.zip\nWindows 10 Version 1607 and Windows Server 2016 Security Baseline.zip\nWindows 10 Version 1803 Security Baseline.zip\nWindows 10 Version 1809 and Windows Server 2019 Security Baseline.zip\nWindows 10 Version 1903 and Windows Server Version 1903 Security Baseline - Sept2019Update.zip\nWindows 10 Version 1909 and Windows Server Version 1909 Security Baseline.zip\nWindows 10 Version 2004 and Windows Server Version 2004 Security Baseline.zip\nWindows Server 2012 R2 Security Baseline.zip\n```", "```\n$path = $env:TEMP + \"\\baselines\"\n$items = Get-ChildItem -Path $path\nforeach ($file in $items) {\n     Write-Host $file\n}\n```", "```\n$path = $env:TEMP + \"\\baselines\"\n$items = Get-ChildItem -Path $path\n$items.foreach({\n    Write-Host \"Current item: $_\"\n})\n```", "```\nwhile ( <condition> ){ <actions> }\n```", "```\nwhile(($input = Read-Host -Prompt \"Choose a command (type in 'help' for an overview)\") -ne \"quit\"){\n    switch ($input) {\n        \"hello\" {Write-Host \"Hello World!\"}\n        \"color\" {Write-Host \"What's your favorite color?\"}\n        \"help\" {Write-Host \"Options: 'hello', 'color', 'help' 'quit'\"}\n    }\n}\n```", "```\nfor (<initializing statement>; <condition>; <repeat>)\n{\n    <actions>\n}\n```", "```\n> for ($i=1; $i -le 5; $i++) {Write-Host \"i: $i\"}\ni: 1\ni: 2\ni: 3\ni: 4\ni: 5\n```", "```\ndo{\n     <action>\n}\n<while/until><condition>\n```", "```\n> for ($i=1; $i -le 10; $i++) {\n    Write-Host \"i: $i\"\n    if ($i -eq 3) {break}\n}\ni: 1\ni: 2\ni: 3\n```", "```\n> for ($i=1; $i -le 10; $i++) {\n    if (($i % 2) -ne 0) {continue}\n    Write-Host \"i: $i\"\n}\ni: 2\ni: 4\ni: 6\ni: 8\ni: 10\n```", "```\nGet-Verb | Sort-Object Verb\n```", "```\n> Get-Verb re*\nVerb     Group\n----     -----\nRedo     Common\nRemove   Common\nRename   Common\nReset    Common\nResize   Common\nRestore  Data\nRegister Lifecycle\nRequest  Lifecycle\nRestart  Lifecycle\nResume   Lifecycle\nRepair   Diagnostic\nResolve  Diagnostic\nRead     Communications\nReceive  Communications\nRevoke   Security\n```", "```\n> Get-Verb | Where-Object Group -eq Security\nVerb      Group\n----      -----\nBlock     Security\nGrant     Security\nProtect   Security\nRevoke    Security\nUnblock   Security\nUnprotect Security\n```", "```\n> $profile.CurrentUserCurrentHost\nC:\\Users\\pssecuser\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\n```", "```\nif ( !( Test-Path $profile.CurrentUserCurrentHost ) ) {\n    New-Item -ItemType File -Path $profile.CurrentUserCurrentHost\n}\n```", "```\n> Add-Content -Path $profile -Value “New-Alias -Name Get-Ip -Value ‘ipconfig.exe’”\n```", "```\n> Get-ChildItem Env:\\*path*\n```", "```\n> Get-Command new-item\nCommandType   Name      Version    Source\n-----------   ----      -------    ------\nCmdlet        New-Item  3.1.0.0    Microsoft.PowerShell.Management\n```", "```\nGet-Command -CommandType Cmdlet\n```", "```\nfunction Verb-Noun {\n<#\n        <Optional help text>\n#>\nparam (\n    [data_type]$Parameter\n)\n<...Code: Function Logic...>\n}\n```", "```\nVerb-Noun -Parameter \"test\"\n```", "```\nfunction Invoke-Greeting {\n    param (\n        [string]$Name\n    )\n    Write-Output \"Hello $Name!\"\n}\n```", "```\n> Invoke-Greeting -Name \"Miriam\"\nHello Miriam!\n```", "```\n> Invoke-Greeting\nHello !\n```", "```\nfunction Invoke-Greeting {\n    [cmdletbinding()]\n    param (\n        [Parameter(Mandatory)]\n        $Name\n    )\n    Write-Output \"Hello $Name!\"\n}\n```", "```\nfunction Invoke-Greeting {\n    [CmdletBinding(SupportsShouldProcess)]\n    param (\n        $Name\n    )\n    foreach ($item in $Name) {\n        if ($PSCmdlet.ShouldProcess($item)) {\n            Write-Output \"Hello $item!\"\n        }\n    }\n}\n```", "```\n> Get-Command -Name Invoke-Greeting -Syntax\nInvoke-Greeting [[-Name] <Object>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```", "```\nfunction Invoke-Greeting {\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]\n        [string]$Name\n    )\n    process {\n        Write-Output \"Hello $Name!\"\n    }\n}\n```", "```\n> \"Alice\",\"Bob\" | Invoke-Greeting\nHello Alice!\nHello Bob!\n```", "```\n> [pscustomobject]@{Name = \"Miriam\"} | Invoke-Greeting\nHello Miriam!\n```", "```\n<#\n.SYNOPSIS\n<Describe the function shortly.>\n.DESCRIPTION\n<More detailed description of the function.>\n.PARAMETER Name\n<Add a section to describe each parameter, if your function has one or more parameters.>\n.EXAMPLE\n<Example how to call the funtion>\n<Describes what happens if the example call is run.>\n#>\n```", "```\ntry {\n    New-PSSession -ComputerName $Computer -ErrorAction Stop\n}\ncatch {\n    Write-Warning -Message \"Couldn't connect to Computer: $Computer\"\n}\n```", "```\nPS C:\\> cd 'C:\\tmp\\PSSec\\'\nPS C:\\tmp\\PS Sec>\nPS C:\\> Set-Location 'C:\\tmp\\PSSec\\'\nPS C:\\tmp\\PS Sec>\n```", "```\n> New-Alias -Name Get-Ip -Value ipconfig\n> Get-Ip\nWindows IP Configuration\nEthernet adapter Ethernet:\n   Connection-specific DNS Suffix  . : mshome.net\n   IPv4 Address. . . . . . . . . . . : 10.10.1.10\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 10.10.1.1\n```", "```\n> Set-Alias -Name Get-Ip -Value Get-NetIPAddress\n```", "```\nExport-Alias -Path \"alias.csv\"\n```", "```\nExport-Alias -Path \"alias.ps1\" -As Script\n```", "```\nExport-Alias -Path \"alias.ps1\" -Name Get-Ip -As Script\n```", "```\n# Alias File\n# Exported by : PSSec\n# Date/Time : Sunday, July 9, 2023 1:39:50 PM\n# Computer : PSSEC-PC\n\"foreach\",\"ForEach-Object\",\"\",\"ReadOnly, AllScope\"\n\"%\",\"ForEach-Object\",\"\",\"ReadOnly, AllScope\"\n\"where\",\"Where-Object\",\"\",\"ReadOnly, AllScope\"\n\"?\",\"Where-Object\",\"\",\"ReadOnly, AllScope\"\n\"ac\",\"Add-Content\",\"\",\"ReadOnly, AllScope\"\n\"clc\",\"Clear-Content\",\"\",\"ReadOnly, AllScope\"\n...\n\"stz\",\"Set-TimeZone\",\"\",\"None\"\n\"Get-Ip\",\"Get-NetIPAddress\",\"\",\"None\"\n```", "```\n# Alias File\n# Exported by : PSSec\n# Date/Time : Sunday, July 9, 2023 1:34:31 PM\n# Computer : PSSEC-PC\nset-alias -Name:\"Get-Ip\" -Value:\"Get-NetIPAddress\" -Description:\"\" -Option:\"None\"\n```", "```\n> Set-Alias -Name Get-Ip -Value Get-Iponfig\n> Export-Alias -Name Get-Ip -Path Get-Ip_alias.csv\n```", "```\n> Import-Alias -Path .\\Get-Ip_alias.csv\n> Get-Ip\nWindows IP Configuration\nEthernet adapter Ethernet:\n   Connection-specific DNS Suffix  . : mshome.net\n   IPv4 Address. . . . . . . . . . . : 10.10.1.10\n   Subnet Mask . . . . . . . . . . . : 255.255.255.0\n   Default Gateway . . . . . . . . . : 10.10.1.1\n```", "```\n> Get-Item -Path Env:\\PSModulePath\nName           Value\n----           -----\nPSModulePath   C:\\Users\\PSSec\\Documents\\WindowsPowerShell\\Modules;\n               C:\\Program Files\\WindowsPowerShell\\Modules;\n               C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\n```", "```\n> Find-Module -Name EventList\nVersion    Name       Repository           Description\n-------    ----       ----------           -----------\n2.0.1      EventList  PSGallery            EventList - The Event Analyzer. This tool helps you to decide which events to monitor in your infrastructure and support...\n```", "```\n> Install-Module <modulename>\n```", "```\n> Update-Module <modulename> -Force\n```", "```\n> Get-PSRepository\n```", "```\n> Get-Module\n```", "```\n> Get-Module -ListAvailable\n```", "```\n> Get-Command -Module <modulename>\n```", "```\n> Remove-Module <modulename>\n```", "```\n$path = $env:TEMP + \"\\MyModule\\\"\nif (!(Test-Path -Path $path)) {\n    New-Item -ItemType directory -Path $path\n}\nNew-ModuleManifest -Path $path\\MyModule.psd1 -RootModule MyModule.psm1\nSet-Content -Path $path\\MyModule.psm1 -Value {\n    function Invoke-Greeting {\n        [CmdletBinding()]\n        param(\n            [Parameter(Mandatory=$true)]\n            [string]$Name\n        )\n        \"Hello, $Name!\"\n    }\n}\n```", "```\n> $env:PSModulePath\n```", "```\n> Import-Module MyModule\n```", "```\n> Import-Module $env:TEMP\\MyModule\\MyModule.psd1\n```", "```\n> Invoke-Greeting -Name \"Miriam\"\n```"]