["```\n> .\\Get-InstalledUpdates.ps1 -BaseIP \"172.29.0\" -MinIP 10 -MaxIP 20 -Verbose\n```", "```\n> .\\Scan-RemoteUpdates.ps1\n```", "```\n> .\\Scan-RemoteUpdates.ps1 -remoteHosts \"PSSec-PC01\", \"PSSec-PC02\", \"PSSec-Srv01\"\n```", "```\n$UserHistory = @(Get-ChildItem \"C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\").FullName;\n$UserHistory += @(Get-ChildItem \"c:\\windows\\system32\\config\\systemprofile\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\consolehost_history.txt\" -ErrorAction SilentlyContinue).FullName;\nforeach ($Item in $UserHistory) {\n    if ($Item) {\n        Write-Output \"\"\n        Write-Output \"###############################################################################################################################\"\n        Write-Output \"PowerShell history: $item\"\n        Write-Output \"###############################################################################################################################\"\n        Get-Content $Item\n    }\n}\n```", "```\n$ComputerName = \"PSSec-PC01.PSSec.local\"\n$EventLog = \"Microsoft-Windows-Powershell/Operational\"\n$LogEntries = Get-WinEvent -LogName $EventLog -ComputerName $ComputerName\n$LogEntries | Where-Object Id -eq 4104  | Where-Object Message -like \"*Mimikatz*\"\n```", "```\n$ComputerNames = @(\"DC01\", \"PSSec-PC01\", \"PSSec-PC02\", \"PSSec-Srv01\")\n$EventLog = \"Microsoft-Windows-Powershell/Operational\"\n$LogEntries = foreach ($Computer in $ComputerNames) {\n    Get-WinEvent -LogName $EventLog -ComputerName $Computer -ErrorAction SilentlyContinue\n}\n$LogEntries | Group-Object -Property MachineName\n$LogEntries | Where-Object {($_.Id -eq 4104) -and ($_.Message -like \"*Mimikatz*\")} | Select-Object -Property TimeCreated, MachineName, Id, LevelDisplayName, Message | ft\n```", "```\n> Get-WinEvent -LogName \"Windows PowerShell\" | Where-Object Id -eq 400 | Where-Object Message -notmatch \"HostApplication.*powershell.exe\" | fl Message,TimeCreated\n```", "```\n> Get-WinEvent -LogName \"Windows PowerShell\" | Where-Object Id -eq 400 | Where-Object { ($_.Message -notmatch \"HostApplication.*powershell.exe\") -and ($_.Message -notmatch \"HostApplication.*PowerShell_ISE.exe\") -and ($_.Message -notmatch \"HostApplication.*sdiagnhost.exe\") } | fl Message,TimeCreated\n```", "```\n$ComputerName = \"PSSec-PC01.PSSec.local\"\n$EventLog = \"Microsoft-Windows-Sysmon/Operational\"\n$LogEntries = Get-WinEvent -LogName $EventLog -ComputerName $ComputerName\n$LogEntries | Where-Object Id -eq 7 | Where-Object (($_.Message -like \"*System.Management.Automation*\") -or ($_.Message -like \"*System.Reflection*\"))\n```", "```\n> Get-NetFirewallRule -<parameter> <value>\n```", "```\n> Get-NetFirewallRule -Direction Inbound -Enabled True -Action Allow\n```", "```\n> Get-NetFirewallProfile -Name Public | Get-NetFirewallRule\n```", "```\n> New-NetFirewallRule -DisplayName \"Block Outbound PowerShell connections\" -Enabled True -Direction Outbound -Action Block -Profile Any -Program \"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -RemoteAddress \"Internet\"\n```", "```\n$ComputerName = \"PSSec-PC01\"\nmsg * /server $ComputerName \"Security issues were found on your computer. You are now disconnected from the internet. Please contact your helpdesk: +0012 3456789\"\n$session = Invoke-Command -ComputerName $ComputerName -InDisconnectedSession -ScriptBlock {\n    New-NetFirewallRule -DisplayName \"Isolate from outbound traffic\" -Direction Outbound -Action Block | Out-Null;\n    New-NetFirewallRule -DisplayName \"Isolate from inbound traffic\" -Direction Inbound -Action Block | Out-Null;\n    Get-NetAdapter|foreach { Disable-NetAdapter -Name $_.Name -Confirm:$false }\n}\nRemove-PSSession -Id $session.Id -ErrorAction SilentlyContinue\n```", "```\n$ComputerName = \"PSSec-PC01\"\nGet-CimInstance -ClassName Win32_Product -ComputerName $ComputerName | Sort-Object Name\n```", "```\nfunction Enable-PSTranscription {\n    [CmdletBinding()]\n    param(\n        $OutputDirectory,\n        [Switch] $IncludeInvocationHeader\n    )\n    $basePath = \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription\"\n    if (-not (Test-Path $basePath)) {$null = New-Item $basePath -Force}\n    Set-ItemProperty $basePath -Name EnableTranscripting -Value 1\n    if ($PSCmdlet.MyInvocation.BoundParameters.ContainsKey(\"OutputDirectory\")) {Set-ItemProperty $basePath -Name OutputDirectory -Value $OutputDirectory}\n    if ($IncludeInvocationHeader) {Set-ItemProperty $basePath -Name IncludeInvocationHeader -Value 1}\n}\n```", "```\n> Enable-PSTranscription -OutputDirectory \"C:\\tmp\\\"\n```", "```\n> Enable-PSTranscription -OutputDirectory \"\\\\fileserver\\Transcripts$\\$env:computername-$($env:userdomain)-$($env:username)-$(Get-Date -Format 'YYYYMMddhhmmss').txt\"\n```", "```\n$certificates = Get-ChildItem -Path \"Cert:\\\" -Recurse | Where-Object { $_.Subject -like \"*CN=*\"} | Where-Object { $_.Extensions | Where-Object { $_.Oid.Value -eq \"2.5.29.37\" } | Where-Object { $_.Critical -eq $false } }\n$expiringCertificates = @()\nforeach ($certificate in $certificates) {\n    if (($certificate.NotAfter) -and (($certificate.NotAfter -lt (Get-Date).AddDays(60)) -or ($certificate.NotAfter -lt (Get-Date)))) {\n        $expiringCertificates += $certificate\n    }\n}\nWrite-Output \"Expired or Expiring Certificates in the next 60 days:\"\nforeach ($expiringCertificate in $expiringCertificates) {\n    Write-Output $expiringCertificate | Select-Object Thumbprint, FriendlyName, Subject, NotBefore, NotAfter\n}\n```", "```\n> Get-AuthenticodeSignature \"C:\\Windows\\notepad.exe\" | Format-List\n```", "```\n$directory = \"C:\\Program Files\\Windows Defender\"\n$Acls = Get-ChildItem -Path $directory -Recurse | ForEach-Object {\n    $fileName = $_.FullName\n    (Get-Acl $_.FullName).Access | ForEach-Object {\n        [PSCustomObject]@{\n            FileName = $fileName\n            FileSystemRights = $_.FileSystemRights\n            AccessControlType = $_.AccessControlType\n            IdentityReference = $_.IdentityReference\n            IsInherited = $_.IsInherited\n        }\n    }\n}\n$Acls\n```", "```\n> Get-CimInstance win32_service | Where-Object State -eq \"Running\" | Select-Object ProcessId, Name, DisplayName, PathName | Sort-Object Name | fl\n```", "```\n> Get-Service -Name \"maliciousService\" | Stop-Service -Force -Confirm:$false -verbose\n```", "```\n> Get-WmiObject win32_process | Select ProcessID,Name,@{n='Owner';e={$_.GetOwner().User}},CommandLine | Sort-Object Name | ft -wrap -autosize\n```", "```\n> Get-Process -Id 8336 | Stop-Process -Force -Confirm:$false -verbose\n```", "```\n> Disable-LocalUser -Name \"Administrator\"\n```", "```\n> Get-LocalUser -Name \"Administrator\"\n```", "```\n> Enable-LocalUser -Name \"Administrator\"\n```", "```\n> Get-LocalUser -Name \"Administrator\"\n```", "```\n> Import-Module ActiveDirectory\n> Disable-ADAccount -Identity \"vvega\"\n```", "```\n> (Get-ADUser -Identity vvega).enabled\n```", "```\n> Import-Module ActiveDirectory\n> Enable-ADAccount -Identity \"vvega\"\n```", "```\n> (Get-ADUser -Identity vvega).enabled\n```", "```\nImport-Module ActiveDirectory\n$timestamp = ((Get-Date).AddDays(-30)).Date\nGet-ADUser -Filter {whenCreated -ge $timestamp} -Properties whenCreated | Sort-Object whenCreated -descending\n```", "```\n$result = Test-NetConnection -ComputerName DC01 -Port 445\n$result\n$result.TcpTestSucceeded\n```", "```\n> Get-NetTCPConnection | Select-Object LocalAddress,LocalPort,RemoteAddress,RemotePort,State,@{Label = 'ProcessName';Expression={(Get-Process -Id $_.OwningProcess).Name}}, @{Label=\"CommandLine\";Expression={(Get-WmiObject Win32_Process -filter \"ProcessId = $($_.OwningProcess)\").CommandLine}} | ft -Wrap -AutoSize\n```", "```\n> Get-NetUDPEndpoint | Select-Object CreationTime,LocalAddress,LocalPort,@{Label = 'ProcessName';Expression={(Get-Process -Id $_.OwningProcess).Name}}, @{Label=\"CommandLine\";Expression={(Get-WmiObject Win32_Process -filter \"ProcessId = $($_.OwningProcess)\").CommandLine}} | ft -Wrap -AutoSize\n```", "```\nGet-WinEvent -LogName \"Windows PowerShell\" | Where-Object Id -eq 400 | Foreach-Object {\n        $version = [Version] ($_.Message -replace '(?s).*EngineVersion=([\\d\\.]+)*.*','$1')\n        if($version -lt ([Version] \"5.0\")) { $_ }\n}\n```", "```\n> powershell -version 2 -noprofile -command \"(Get-Item ([PSObject].Assembly.Location)).VersionInfo\"\n> powershell -version 2 -noprofile -command \"(Get-Item (Get-Process -id $pid -mo | ? { $_.FileName -match 'System.Management.Automation.ni.dll' } | % { $_.FileName })).VersionInfo\"\n```"]