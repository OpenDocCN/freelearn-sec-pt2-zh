["```\n    nslookup www.snowcapcyber.com\n    ```", "```\n    \"www.snowcapcyber.com \"\n    ```", "```\n    nslookup -query=AAAA www.snowcapcyber.com\n    ```", "```\n    \"www.snowcapcyber.com\"\n    ```", "```\n    nslookup -query=CNAME www.snowcapcyber.com\n    ```", "```\n    nslookup -query=MX snowcapcyber.com\n    ```", "```\n    nslookup -query=NS snowcapcyber.com\n    ```", "```\n    nslookup 8.8.8.8\n    ```", "```\n    nslookup -query=SOA snowcapcyber.com\n    ```", "```\n    nslookup -query=TXT www.snowcapcyber.com\n    ```", "```\n $FQDN = \"www.snowcapcyber.com.com\"\n$Result = Resolve-DnsName -Name $FQDN\nif ($Result.QueryResults.Count -gt 0) {\n    $IPAddress = $Result.QueryResults[0].IPAddress\n    Write-Host \"IP address of $FQDN: $IPAddress \"\n} else {\n    Write-Host \"Unable to resolve IP for $FQDN\"}\n```", "```\n     $Domain = \" snowcapcyber.com\"\n    $MXRecords = Resolve-DnsName -Name $Domain -Type MX\n    if ($MXRecords) {\n        $MXRecords | ForEach-Object {\n            $MailServer = $_.NameExchange\n            $Preference = $_.Preference\n            Write-Host \"MX Record: $Preference\"\n       Write-Host \"Mail Server: $MailServer\"}\n    } else {\n        Write-Host \"No MX records found for $Domain\"}\n    ```", "```\n     $Domain = \"snowcapcyber.com\"\n    $NSRecords = Resolve-DnsName -Name $Domain -Type NS\n    if ($NSRecords) {\n        $NSRecords | ForEach-Object {\n            $NameServer = $_.NameHost\n            Write-Host \"Name Server: $NameServer\" }\n    } else {\n        Write-Host \"No NS records found for $Domain\"}\n    ```", "```\n     $IPAddress = \"192.168.27.132\"\n    $PTRRecords = Resolve-DnsName -Name $IPAddress -Type PTR\n    if ($PTRRecords) {\n        $PTRRecords | ForEach-Object {\n            $DomainName = $_.NameHost\n            Write-Host \"PTR Record: IP Address $IPAddress resolves to $DomainName\" }\n    } else {\n        Write-Host \"No PTR records found for IP address $IPAddress\" }\n    ```", "```\n     $Domain = \"snowcapcyber.com\"\n    $DnsServer = \"192.168.1.1\"\n    # Enumerate MX records\n    $MXRecords = Test-DnsServer -IPAddress $DnsServer -Name $Domain -Type MX\n    if ($MXRecords) {\n        Write-Host \"MX records for $Domain:\"\n        $MXRecords.QueryResults | ForEach-Object {\n            Write-Host \"Server: $($_.MailExchange)\" }\n    } else {\n        Write-Host \"No MX records found for $Domain\"}\n    ```", "```\n     $DnsServer = \"192.168.1.1\"\n    $MaliciousServer = \"malicious.com\"\n    $TargetDomain = \"snowcapcyber.com\"\n    # Test if DNS server resolves to malicious IP\n    $DnsResponse = Test-DnsServer -IPAddress $DnsServer -Name $TargetDomain -Type A\n    if ($DnsResponse.QueryResults.IPAddress -eq \"malicious_IP\") {\n        Write-Host \"Server vulnerable to spoofing.\" } else {\n        Write-Host \"DNS server is not vulnerable.\"}\n    ```", "```\n     $DnsServer = \"192.168.1.1\"\n    $QueryType = \"ANY\"\n    $TargetDomain = \"victim.com\"\n    # Test DNS server for amplification vulnerability\n    $DnsResponse = Test-DnsServer -IPAddress $DnsServer -Name $TargetDomain -Type $QueryType\n    if ($DnsResponse.QueryResults.Count -gt 1) {\n        Write-Host \"DNS server is vulnerable.\" } else {\n        Write-Host \"DNS server is not vulnerable.\"}\n    ```", "```\n     $DnsServer = \"192.168.1.1\"\n    $TargetDomain = \"target.com\"\n    # Test if zone transfer is allowed\n    $ZoneTransfer = Test-DnsServer -IPAddress $DnsServer -Name $TargetDomain -Type AXFR\n    if ($ZoneTransfer.QueryResults) {\n        Write-Host \"Transfer allowed $TargetDomain.\" } else {\n        Write-Host \"Zone transfer is not allowed.\"}\n    ```", "```\n     [System.Net.Dns]::GetHostAddresses(\"google.com\")\n    ```", "```\n     [System.Net.Dns]::GetHostEntry(\"google.com\")\n    ```", "```\n     [System.Net.Dns]::GetHostName()\n    ```", "```\n     $ipAddresses = [System.Net.Dns]::GetHostAddresses(\"google.com\")\n    $ipAddresses | ForEach-Object {\n        Write-Host \"IP Address: $_\"}\n    ```", "```\n     $hostEntry = [System.Net.Dns]::GetHostEntry(\"google.com\")\n    Write-Host \"HostName: $($hostEntry.HostName)\"\n    Write-Host \"Aliases: $($hostEntry.Aliases -join ', ')\"\n    Write-Host \"IP Addresses:\"\n    $hostEntry.AddressList | ForEach-Object {\n        Write-Host \"  $_\"}\n    ```", "```\n     $localHostName = [System.Net.Dns]::GetHostName()\n    Write-Host \"Local HostName: $localHostName\"\n    ```", "```\n try {\n    $ipAddresses = [System.Net.Dns]::GetHostAddresses(\"invalid123\")\n    $ipAddresses | ForEach-Object {\n        Write-Host \"IP Address: $_\"  }\n} catch {\n    Write-Host \"Error: $($_.Exception.Message)\"}\n```"]