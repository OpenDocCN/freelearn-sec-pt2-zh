["```\n Test-NetConnection -ComputerName 192.168.1.100 -Port 80\nComputerName           : 192.168.1.100\nRemoteAddress          : 192.168.1.100\nRemotePort             : 80\nInterfaceAlias         : Ethernet\nSourceAddress          : 192.168.1.101\nTcpTestSucceeded       : True\n```", "```\n $RemoteHost = \"192.168.1.100\"\n$Ports = 80, 443\nforeach ($Port in $Ports) {\n    Test-NetConnection -ComputerName $RemoteHost -Port $Port }\nComputerName           : 192.168.1.100\nRemoteAddress          : 192.168.1.100\nRemotePort             : 80\nInterfaceAlias         : Ethernet\nSourceAddress          : 192.168.1.101\nTcpTestSucceeded       : True\nComputerName           : 192.168.1.100\nRemoteAddress          : 192.168.1.100\nRemotePort             : 443\nInterfaceAlias         : Ethernet\nSourceAddress          : 192.168.1.101\nTcpTestSucceeded       : False\n```", "```\n $RemoteHost = \"192.168.1.100\"\n$Ports = 1..65535\n$OpenPorts = foreach ($Port in $Ports) {\n    $Result = Test-NetConnection -ComputerName $RemoteHost -Port $Port\n    if ($Result.TcpTestSucceeded) {\n        $Port\n    }\n}\n```", "```\n $RHost = \"192.168.1.100\"\n$Port = 80\n$TcpClient = New-Object System.Net.Sockets.TcpClient\ntry {\n    $TcpClient.Connect($RHost, $Port)\n    Write-Host \"Port $Port on $RHost is open.\" }\ncatch {\n    Write-Host \"Port $Port on $RHost is closed or filtered.\" }\nfinally {\n    $TcpClient.Close()}\n```", "```\n $RHost = \"192.168.1.100\"\n$Ports = 80, 443, 22\nforeach ($Port in $Ports) {\n    $TcpClient = New-Object System.Net.Sockets.TcpClient\n    try {\n        $TcpClient.Connect($RHost, $Port)\n        Write-Host \"Port $Port on $RHost is open.\" }\n    catch {\n        Write-Host \"Port $Port on $RHost is closed or filtered.\"     }\n    finally {\n        $TcpClient.Close()}}\n```", "```\n $RHost = \"192.168.1.100\"\n$StartPort = 1\n$EndPort = 65535\nfor ($Port = $StartPort; $Port -le $EndPort; $Port++) {\n    $TcpClient = New-Object System.Net.Sockets.TcpClient\n    try {\n        $TcpClient.Connect($RHost, $Port)\n        Write-Host \"Port $Port on $RHost is open.\"     }\n    catch {# Port is closed or filtered.}\n    finally {\n        $TcpClient.Close()}}\n```", "```\n $RHost = \"192.168.1.100\"\n$Ports = 53, 67, 123\nforeach ($Port in $Ports) {\n    $UdpClient = New-Object System.Net.Sockets.UdpClient\n    try {\n        $UdpClient.Connect($RHost, $Port)\n        $UdpClient.Send([byte[]](0), 0, 0)\n        Write-Host \"UDP Port $Port open - $RHost\"\n    }\n    catch {\n        Write-Host \"UDP Port $Port closed - $Host.\"     }\n    finally {\n        $UdpClient.Close()}}\n```", "```\n .\\IPv4PortScan.ps1 [-ComputerName] <String> [[-StartPort] <Int32>] [[-EndPort] <Int32>] [[-Threads] <Int32>] [[-Force]] [<CommonParameters>]\n```", "```\n PS> .\\IPv4PortScan.ps1 -ComputerName www.snowcapcyber.com -EndPort 500\nPort Protocol ServiceName  ServiceDescription   Status\n---- -------- -----------  ------------------   ------\n  53  tcp     domain       Domain Name Server   open\n  80 tcp      http         World Wide Web HTTP  open\n```", "```\n PS C:\\>ps2.ps1 -sT -i 192.168.1.1\n```", "```\n PS C:\\>ps2.ps1 -sT -p (1..65535) -i 192.168.1.1\n```", "```\n PS C:\\>ps2.ps1 -sU -i 192.168.1.1\n```"]