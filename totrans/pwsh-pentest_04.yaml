- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network Enumeration and Port Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore how PowerShell can be used as part of a penetration
    test to perform TCP/UDP port scanning. Through practical examples, we will explore
    how specific cmdlets can be used and how PowerShell can use functions in other
    frameworks such as .NET. Finally, we will examine some open source tools that
    can be used to perform a port scan. We will now begin this chapter by looking
    at how various cmdlets can be used to perform network enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Network enumeration using PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP port scanning using PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDP port scanning using PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PowerShell tools for port scanning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network enumeration using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Network enumeration is a crucial phase in a penetration test, where security
    professionals assess the vulnerabilities and weaknesses of a target network. PowerShell,
    a powerful scripting language and framework in Windows environments, can be an
    invaluable tool to conduct network enumeration. Here, we’ll delve into how PowerShell
    can be used for this purpose in a penetration test:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discovery of network assets**: PowerShell allows testers to discover network
    assets such as hosts, servers, and devices. Commands such as **Test-Connection**
    can be employed to ping hosts and check their availability. **Resolve-DnsName**
    can help identify hostnames, while **Test-NetConnection** can assess open ports
    and services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Directory enumeration**: With PowerShell, testers can gather valuable
    information about the target’s **Active Directory** (**AD**) environment. Tools
    such as **Get-ADUser, Get-ADComputer**, and **Get-ADGroupMember** can be used
    to retrieve user, computer, and group data. This data aids in understanding the
    network’s structure and potential entry points. This will be covered in greater
    detail in [*Chapter 6*](B21364_06.xhtml#_idTextAnchor100).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network shares and permissions**: PowerShell scripts can be crafted to enumerate
    network shares and their permissions. Commands such as **Get-SmbShare** and **Get-Acl**
    can be employed to identify open shares and their associated access rights, providing
    insights into potential areas of exploitation. This will be covered in greater
    detail in [*Chapter 6*](B21364_06.xhtml#_idTextAnchor100).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enumeration of network shares and user information**: PowerShell can facilitate
    the enumeration of network shares and users’ information by querying LDAP and
    SMB services. Tools like **NetView** and **NetUser** can reveal additional information
    about the network’s structure and potential vulnerabilities. This will be covered
    in greater detail in [*Chapter 6*](B21364_06.xhtml#_idTextAnchor100).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enumeration of running services**: PowerShell allows testers to identify
    running services on target hosts. By using **Get-Service** or querying the **Windows
    Management Instrumentation** (**WMI**) repository with **Get-WmiObject**, testers
    can gather information about services, their configurations, and potential vulnerabilities.
    These types of services include databases. This will be covered in [*Chapter 7*](B21364_07.xhtml#_idTextAnchor135),
    [*Chapter 8*](B21364_08.xhtml#_idTextAnchor164), and [*Chapter 9*](B21364_09.xhtml#_idTextAnchor183).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vulnerability scanning**: PowerShell can be used to initiate vulnerability
    scans on target systems, employing scripts that check for known vulnerabilities
    or outdated software versions. This aids in prioritizing potential attack vectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port scanning and banner grabbing**: PowerShell’s **Test-NetConnection**
    and **Invoke-WebRequest** can be used to perform port scans and banner grabbing.
    This information helps testers identify open ports, services, and potentially
    outdated software versions that may be susceptible to known exploits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hence, PowerShell is an indispensable tool for network enumeration during a
    penetration test in Windows environments. Its versatility, scripting capabilities,
    and access to system resources enable testers to gather critical information about
    the target network, helping them identify potential weaknesses and entry points
    for further exploitation. However, it’s essential to conduct these activities
    ethically and with proper authorization to ensure the security of the assessed
    network.
  prefs: []
  type: TYPE_NORMAL
- en: TCP port scanning using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Port scanning is the practice of systematically checking the open, closed, or
    filtered ports on a target system. Open ports represent potential entry points
    for attackers, while closed or filtered ports may indicate security measures in
    place. By conducting a port scan, penetration testers can gather crucial information
    about a network or system’s security posture.
  prefs: []
  type: TYPE_NORMAL
- en: '**Test-NetConnection** is a versatile cmdlet available in Windows PowerShell
    (version 4.0 and later) that primarily serves to diagnose network connectivity.
    However, it can be repurposed to perform port scanning in a penetration-testing
    context.'
  prefs: []
  type: TYPE_NORMAL
- en: Single port scanning with Test-NetConnection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform a simple port scan on a target host using **Test-NetConnection**,
    follow this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, **Test-NetConnection** confirms that port **80** on the target
    system is open, which is indicative of a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple port scanning with Test-NetConnection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A penetration tester often needs to scan multiple ports on a target system.
    **Test-NetConnection** can be used in a loop to scan a range of ports or a list
    of specific ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this case, **Test-NetConnection** scans ports **80** and **443** on the target
    system. The results show whether each port is open or not.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating open ports with Test-NetConnection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the primary objectives of a penetration test is to enumerate open ports.
    You can utilize PowerShell to filter and display only the open ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, **Test-NetConnection** scans all possible ports and identifies
    the open ones. **Test-NetConnection**, while primarily designed for diagnosing
    network connectivity, can be a valuable tool for penetration testers to perform
    port scanning. By utilizing its capabilities to check the status of specific ports
    on a target system, penetration testers can gather crucial information about potential
    vulnerabilities and security weaknesses. However, it’s important to note that
    penetration testing should always be conducted with proper authorization and in
    a responsible, ethical manner to avoid any legal or ethical issues. **Test-NetConnection**,
    when used within these guidelines, can be an asset in a penetration tester’s toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Single port scanning with .NET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can create a .NET socket object to establish a connection with a
    single port on a target host. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, PowerShell creates a TCP client object and attempts to connect
    to the specified port on the target host. It then reports whether the port is
    open or closed.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple port scanning with .NET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A typical penetration test involves scanning multiple ports on a target system.
    PowerShell can iterate through a list of ports and check their status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This PowerShell script scans a list of ports on the target host and reports
    their status.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating all open ports with .NET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, it’s essential to enumerate all open ports on a target system.
    PowerShell can be used to scan a range of ports systematically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: PowerShell systematically scans all possible ports on the target host and reports
    the open ones.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging .NET Socket Objects in PowerShell provides penetration testers with
    a versatile and programmable approach to conducting port scanning, as a vital
    part of ethical hacking assessments. Port scanning plays a pivotal role in identifying
    potential vulnerabilities within a target system, and .NET Socket Objects empower
    testers to automate and customize this process effectively. However, it’s imperative
    to conduct penetration tests responsibly, adhering to legal and ethical guidelines
    and obtaining proper authorization. When used responsibly, .NET Socket Objects
    in PowerShell serve as powerful tools for penetration testers to assess the security
    posture of systems and networks, ultimately enhancing cybersecurity.
  prefs: []
  type: TYPE_NORMAL
- en: UDP port scanning using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Performing UDP port scanning in PowerShell involves sending UDP packets to
    specific ports on a target host to determine whether those ports are open or closed.
    Unlike TCP, UDP is connectionless, which makes UDP port scanning a bit more challenging,
    as there are no handshakes to confirm the port’s status. Here’s a simplified method
    using PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This script iterates through the specified UDP ports, creates a UDP client object,
    and sends an empty UDP packet to each port. If an exception is caught during the
    process, it means the port is closed or filtered. If no exception is raised, the
    port is considered open.
  prefs: []
  type: TYPE_NORMAL
- en: Note that UDP scanning can be less reliable than TCP scanning, as UDP does not
    provide the same acknowledgment and response mechanisms as TCP. Some open UDP
    ports may not respond to empty UDP packets, which could lead to false negatives.
    Additionally, firewalls and network filtering can affect the accuracy of UDP port
    scanning. Always ensure you have proper authorization, and consider using more
    specialized tools for comprehensive penetration-testing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Using PowerShell tools for port scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several open source PowerShell tools that support TCP/UDP port scanning.
    The following is an example of a PowerShell Scanning tool: [https://github.com/BornToBeRoot/PowerShell_IPv4PortScanner](https://github.com/BornToBeRoot/PowerShell_IPv4PortScanner).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The IPv4PortScan is an asynchronous TCP scanning tool that allows a user to
    define the port range to be scanned. The command line for the tool is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following, we will use this tool to scan the first 500 ports on the
    computer **www.snowcapcyber.com**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The PS2 tool is a TCP port scanner tool that mimics some of the functions of
    Nmap. This tool can be downloaded at [https://github.com/nccgroup/PS2](https://github.com/nccgroup/PS2).
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool supports TCP and UDP scanning as well as mapping out a network using
    a traceroute function. In the following, we will use this tool to scan the top
    1,000 commonly used TCP ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following example, we will use the tool to scan all the TCP ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will use the tool to scan the top 1,000 commonly used UDP ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In summary, PowerShell provides us with the ability to create simple, and powerful,
    TCP/UDP port scanning tools. We have shown how cmdlets can be used and scripted
    and how PowerShell can make use of .NET functions. These tools enable us to live
    off the land within a penetration test and minimize the number of tools we are
    required to support within a security test.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a comprehensive exploration of leveraging PowerShell for robust
    network reconnaissance and security assessment. Detailing the significance of
    understanding network structures, the chapter illuminated how PowerShell can be
    harnessed to enumerate devices and services efficiently. You were guided through
    the intricacies of network enumeration, gaining insights into PowerShell techniques
    to discover active hosts, identify live systems, and map network architectures.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter further delved into the realm of port scanning, emphasizing the
    critical role it plays in vulnerability assessment. Demonstrating the power of
    PowerShell for port scanning, the chapter unveiled strategies to identify open
    ports, services, and potential vulnerabilities. Practical examples and real-world
    scenarios equipped you with hands-on experience, empowering you to strengthen
    network security. Whether for defensive purposes or ethical hacking, this chapter
    serves as a valuable resource, providing a nuanced understanding of network enumeration
    and port scanning using the versatile capabilities of PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use PowerShell when performing penetration
    testing on REST and SOAP APIs.
  prefs: []
  type: TYPE_NORMAL
