- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SMB, Active Directory, LDAP and Kerberos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore how PowerShell can be used as part of a comprehensive
    penetration test on **Server Message Block** (**SMB**), **Active Directory** (**AD**),
    and **Lightweight Directory Access Protocol** (**LDAP**). We will delve into the
    powerful capabilities of PowerShell to conduct thorough security assessments and
    identify potential vulnerabilities in these critical components of enterprise
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell, as a scripting language developed by Microsoft, offers a wide array
    of tools and cmdlets that can be harnessed by security professionals and penetration
    testers to assess the security posture of SMB shares, user accounts, group memberships,
    and directory services. Through a series of worked examples, we will illustrate
    how PowerShell can be leveraged to enumerate, profile, and exploit weaknesses
    in these systems.
  prefs: []
  type: TYPE_NORMAL
- en: Our journey begins with SMB, where we will demonstrate how PowerShell can be
    used to assess SMB versioning, enumerate shared resources, and test for weak passwords.
    We will then transition to Active Directory, where we will showcase PowerShell’s
    capabilities in auditing user account security, identifying inactive accounts,
    and evaluating group memberships.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to LDAP, we will explore how PowerShell can be employed to assess
    LDAP permissions, test authentication, and monitor LDAP traffic. Each step of
    our exploration will be accompanied by practical examples, empowering you to apply
    these techniques effectively in your own security assessments.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a comprehensive understanding of how
    PowerShell can be an invaluable tool in the arsenal of penetration testers and
    security professionals. It will equip you with the knowledge and skills to proactively
    identify vulnerabilities, assess security configurations, and ultimately, enhance
    the resilience of SMB, AD, and LDAP implementations within your organizations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell and SMB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell, AD, and LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell and Kerberos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell and SMB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell can be effectively employed to perform security tests against network
    services such as the SMB protocol, which is commonly used for file sharing and
    resource access in Windows environments. In this section, we’ll explore how PowerShell
    can be used to conduct a security test against SMB, identify vulnerabilities,
    and bolster network defenses.
  prefs: []
  type: TYPE_NORMAL
- en: The SMB protocol is a critical component of Windows-based networks, facilitating
    file and printer sharing, as well as access to various resources. While SMB is
    vital for seamless data exchange, it can also present security risks if not adequately
    configured. These risks include unauthorized access, data leakage, and susceptibility
    to ransomware attacks. To ensure the robust security of your network, it’s essential
    to conduct thorough security testing of SMB implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating SMB shares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A fundamental aspect of SMB security testing is discovering shared resources
    on a remote server. PowerShell provides cmdlets such as **Get-SmbShare** that
    allow you to enumerate SMB shares:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command lists all the available shares on a remote server, providing information
    about share names, paths, and access permissions. Security testers can use this
    information to assess share permissions, identify misconfigurations, and determine
    which shares may be vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: An SMB version assessment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To identify potential vulnerabilities related to outdated or insecure SMB versions,
    PowerShell can be used to check the SMB version running on a remote system. The
    **Get-SmbConnection** cmdlet reveals details about SMB connections, including
    the dialect version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command provides insights into the SMB version in use, helping you evaluate
    whether your network is running secure and up-to-date versions of SMB.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for weak passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Weak or default passwords can be a significant security risk in SMB environments.
    PowerShell can be employed to perform password audits by attempting to connect
    to SMB shares using a list of commonly used or known weak passwords. The following
    script automates this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This script attempts to connect to each computer in the list using a set of
    passwords and logs any failed attempts, helping you identify weak or unchanged
    default credentials.
  prefs: []
  type: TYPE_NORMAL
- en: SMB vulnerability scanning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be leveraged to perform SMB vulnerability scanning using third-party
    modules or scripts. Tools such as **Invoke-SMBScanner** can be integrated into
    PowerShell to identify SMB vulnerabilities on target systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Such tools perform scans for common SMB vulnerabilities, including known exploits
    such as EternalBlue or SMBGhost, and provide insights into potential risks.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing SMB signing and encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SMB signing and encryption are crucial to ensure data integrity and confidentiality.
    PowerShell allows you to check whether SMB signing and encryption are enabled
    on a remote server. The **Get-SmbClientConfiguration** cmdlet can be used to retrieve
    SMB client configuration, including signing and encryption settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Inspect the **RequireSecuritySignature** and **EncryptData** properties to verify
    whether these security features are enabled. Securely configured SMB servers should
    have both signing and encryption enabled to enhance network security.
  prefs: []
  type: TYPE_NORMAL
- en: The enumeration of active SMB sessions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to enumerate active SMB sessions, providing insights
    into who is currently accessing shared resources. The **Get-SmbSession** cmdlet
    allows you to retrieve information about SMB sessions on a local or remote system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By analyzing session data, security professionals can identify unauthorized
    or suspicious connections.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for guest access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Guest access to SMB shares can be a significant security risk. PowerShell can
    be used to verify whether guest access is allowed on a remote system. The **Get-SmbShare**
    cmdlet can be customized to check for guest access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This command lists shares that only allow guest access, highlighting potential
    security concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating share permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell enables security testers to evaluate share permissions and **Access
    Control Lists** (**ACLs**) for SMB shares. The **Get-Acl** cmdlet can be used
    to retrieve and analyze the ACL of a specific share:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command displays the share’s security descriptor, helping you identify
    overly permissive or misconfigured share permissions.
  prefs: []
  type: TYPE_NORMAL
- en: SMB session monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to set up continuous monitoring of SMB sessions.
    By periodically running commands to retrieve active sessions, you can spot any
    unexpected or suspicious connections over time. Consider using a scheduled task
    to automate session monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This script continually retrieves SMB session information and can be run as
    a background task to monitor for any unauthorized or suspicious access.
  prefs: []
  type: TYPE_NORMAL
- en: Automated ransomware detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to detect suspicious or rapid changes in files that
    may indicate ransomware activity. Scripts can be written to monitor file attributes,
    such as file size and modification time, and raise alerts when unexpected changes
    occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This script monitors the size of a specific file and raises an alert if the
    file size changes unexpectedly, which could indicate ransomware activity.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell provides a robust set of tools and techniques for conducting security
    tests against SMB implementations. By leveraging these capabilities, security
    professionals can proactively identify vulnerabilities, assess share permissions,
    monitor SMB activity, and strengthen network defenses. It’s crucial to conduct
    these tests with proper authorization and compliance with applicable laws and
    regulations. Regularly auditing SMB configurations and actively monitoring for
    suspicious activity can help organizations secure their network services effectively
    and mitigate potential threats to SMB.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell, AD, and LDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell can be harnessed to perform comprehensive security tests against
    AD and LDAP services. In this extensive guide, we’ll delve into how PowerShell
    can be used to conduct security tests against AD and LDAP, identify vulnerabilities,
    and bolster the security of directory services.
  prefs: []
  type: TYPE_NORMAL
- en: AD is Microsoft’s directory service used in Windows environments to manage users,
    groups, computers, and other network resources. LDAP is a protocol used to access
    and manage directory services, including AD. Both AD and LDAP are critical components
    of many enterprise networks, and securing them is paramount to maintaining a secure
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Before diving into the specifics of security testing, let’s briefly understand
    the core concepts of AD and LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: '**AD**: AD is a directory service developed by Microsoft for Windows domain
    networks. It stores and manages information about network resources, including
    user accounts, groups, and computers. AD plays a central role in authentication,
    authorization, and resource management in Windows environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LDAP**: LDAP is a protocol used to access and manage directory services,
    including AD. It provides a standardized way to query, update, and administer
    directory information. LDAP is commonly used in various network services and applications
    to access directory data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The enumeration of active directory objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AD contains a wealth of information about users, groups, and computers. PowerShell
    allows you to enumerate these objects to gain insights into your AD structure.
    The **Get-ADObject** cmdlet is a powerful tool for this purpose – for example,
    to list all user objects in a specific **Organizational** **Unit** (**OU**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves all user objects within the specified OU, providing details
    such as usernames and distinguished names. Enumeration is the first step in understanding
    your AD environment, and it can help identify objects that shouldn’t be accessible
    or exist.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing user account security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'User accounts are a primary target for attackers. PowerShell can be used to
    assess user account security by checking for common issues, such as password complexity
    and expiration settings. For instance, the following can be used to list users
    whose passwords never expire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This command identifies users with accounts set to never expire, which may be
    a security risk. Security testing often involves evaluating password policies,
    account lockout settings, and other security-related attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying inactive user accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inactive user accounts can be exploited by attackers. PowerShell can help identify
    and disable or remove inactive accounts by checking the last login date. Here’s
    an example of finding users who haven’t logged in for 90 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies users who haven’t logged in for the specified period,
    allowing you to take appropriate action, such as disabling or deleting the accounts.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing group memberships
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Group memberships can grant users access to sensitive resources. PowerShell
    can audit group memberships to ensure they adhere to the principle of least privilege.
    For instance, to list the members of a specific group, the following command can
    be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves all members of the **ITAdmins** group, helping you verify
    that only authorized individuals have access to administrative privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying privileged accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Privileged accounts, such as administrators, require extra scrutiny. PowerShell
    can help identify and review privileged accounts. To list all users with administrative
    roles, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This command provides a list of all users in the **Administrators** group, allowing
    you to review their roles and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing password policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Password policies are crucial for security. PowerShell can be used to check
    the password policy settings in your domain. For example, to retrieve the password
    policy for your domain, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command provides details about password complexity requirements, length,
    and other policy settings.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing LDAP permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'LDAP permissions can also be assessed using PowerShell. You can query AD to
    determine which users or groups have specific LDAP permissions. For instance,
    to find users with read access to the **CN=Users** container, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This command identifies users or groups that have read access to the **CN=Users**
    container. You can adapt this approach to check other permissions as well.
  prefs: []
  type: TYPE_NORMAL
- en: Testing LDAP authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to test LDAP authentication by attempting to bind
    to the LDAP directory with different credentials. This can help identify weak
    or unprotected accounts. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This script attempts to bind to the LDAP directory using the specified credentials
    and reports whether the authentication was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying unsecured LDAP ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Attackers often target unsecured LDAP ports. PowerShell can be used to check
    whether LDAP services are exposed on unsecured ports. You can use the **Test-NetConnection**
    cmdlet to test LDAP connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This command checks whether the LDAP service runs on the default unsecured port
    (**389**). If it is, consider securing LDAP with TLS or SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring LDAP traffic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to monitor LDAP traffic for unusual or suspicious
    activities. Tools such as the **Get-WinEvent** cmdlet can help you analyze event
    logs for LDAP-related events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves security event logs containing LDAP channel binding failures,
    which may indicate unauthorized access attempts.
  prefs: []
  type: TYPE_NORMAL
- en: Testing LDAP with LDAPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**LDAP over SSL** (**LDAPS**) is a secure way to access directory services.
    PowerShell can be used to verify whether LDAPS is properly configured. Here’s
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command checks whether the LDAPS service runs on port **636**. LDAPS should
    be used to encrypt LDAP traffic for enhanced security.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying anomalies with PowerShell scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Custom PowerShell scripts can be created to identify anomalies and potential
    security breaches in AD and LDAP. For example, you can create a script that regularly
    checks for unusual login patterns, such as multiple failed login attempts, and
    sends alerts when detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This script monitors the security event log for multiple failed login attempts
    and sends an alert if the threshold is exceeded.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell is an invaluable tool for conducting security tests against AD and
    LDAP services. By using these PowerShell commands and scripts, security professionals
    can proactively identify vulnerabilities, assess user account security, audit
    group memberships, and monitor directory service activity. However, it’s essential
    to conduct these tests with proper authorization and in compliance with applicable
    laws and regulations. Regularly auditing and securing AD and LDAP configurations
    can help organizations strengthen their directory services’ security and defend
    against potential threats.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell and Kerberos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell can be effectively used to perform a wide range of security tests
    against Kerberos, a widely used authentication protocol. In this section, we will
    explore how PowerShell can be employed to assess the security of Kerberos implementations,
    identify vulnerabilities, and enhance system defenses.
  prefs: []
  type: TYPE_NORMAL
- en: Kerberos is a network authentication protocol that uses secret-key cryptography
    to authenticate users and services on a network. It’s employed in many Windows-based
    environments and is known for its robust security mechanisms. However, like any
    technology, Kerberos can have vulnerabilities that could be exploited by malicious
    actors. PowerShell can be utilized to uncover these vulnerabilities proactively.
  prefs: []
  type: TYPE_NORMAL
- en: The enumeration of Kerberos tickets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell provides cmdlets such as **Get-KerberosTicket** that allow security
    testers to enumerate Kerberos tickets, revealing valuable information about active
    sessions and potential attack vectors, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This command lists the active Kerberos tickets, providing insights into which
    users and services are authenticated and when these tickets expire.
  prefs: []
  type: TYPE_NORMAL
- en: Service Principal Name (SPN) enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to discover SPNs associated with services, which are
    crucial for Kerberos authentication. Attackers may target misconfigured SPNs to
    gain unauthorized access. Use **Get-ADServiceAccount** to list service accounts
    and their SPNs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This can help to identify any unnecessary or improperly configured SPNs.
  prefs: []
  type: TYPE_NORMAL
- en: Credential harvesting with Mimikatz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mimikatz, a powerful post-exploitation tool, can be integrated into PowerShell
    to extract credentials from memory. By loading the **Mimikatz** module, you can
    access its functions to harvest credentials, including Kerberos tickets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This can expose stored Kerberos tickets and plaintext passwords, highlighting
    the importance of securing sensitive credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting golden ticket attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to detect golden ticket attacks, a sophisticated
    threat vector where an attacker forges a Kerberos **Ticket Granting Ticket** (**TGT**).
    Tools such as PowerShellMafia/PowerSploit offer modules to check the integrity
    of TGTs and identify potential compromises:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This command checks for vulnerable TGTs that can be cracked offline, helping
    to identify potential attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Kerberos ticket renewal analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kerberos tickets are typically renewed during a user’s session. PowerShell
    scripts can monitor ticket renewals and highlight anomalies. For instance, you
    can use the **New-TimeSpan** cmdlet to calculate the duration between ticket issuance
    and renewal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This can help detect prolonged sessions that might be indicative of unauthorized
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing event logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can parse Windows event logs to identify suspicious Kerberos-related
    events. The **Get-WinEvent** cmdlet can be used to filter and analyze security
    event logs for specific Kerberos events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This allows security professionals to identify failed authentication attempts
    or other unusual activities.
  prefs: []
  type: TYPE_NORMAL
- en: Password spray attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to conduct password spray attacks against Kerberos.
    Tools such as **Invoke-SprayKerberos** can be used to test the strength of user
    passwords and identify weak credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This helps to highlight users with weak passwords that could be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell serves as a versatile and indispensable tool to conduct security
    tests against Kerberos implementations. By leveraging its capabilities, security
    professionals can proactively identify vulnerabilities, detect potential threats,
    and enhance the security of their network infrastructure. However, it’s important
    to note that security testing should always be conducted with proper authorization
    and in compliance with applicable laws and regulations. Regularly auditing Kerberos
    configurations and monitoring for anomalies can play a vital role in safeguarding
    sensitive authentication mechanisms and preventing unauthorized access.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter delved into the multifaceted applications of PowerShell in penetration
    testing across SMB, AD, and LDAP. Through a series of practical examples, we unveiled
    how PowerShell serves as an indispensable tool to enumerate, profile, and exploit
    vulnerabilities in these critical components of enterprise networks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how PowerShell can be used as part
    of a vulnerability assessment against SQL databases. Particular attention will
    be paid to Microsoft SQL, PostgreSQL, and MySQL.
  prefs: []
  type: TYPE_NORMAL
