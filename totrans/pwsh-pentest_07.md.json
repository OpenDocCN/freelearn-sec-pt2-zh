["```\n Add-Type -Path \"C:\\Path\\To\\MySql.Data.dll\"\n$connectionString = \"Server=localhost;Database=mydb;Uid=myuser;Pwd=mypassword;\"\n$connection = New-Object MySql.Data.MySqlClient.MySqlConnection\n$connection.ConnectionString = $connectionString\n$connection.Open()\n```", "```\n         SELECT user, host FROM mysql.user;\n        ```", "```\n        SHOW GRANTS FOR 'username'@'hostname';\n        ```", "```\n        SELECT user, host FROM mysql.user WHERE SUPER_PRIV='Y';\n        ```", "```\n         SHOW VARIABLES LIKE 'validate_password%';\n        ```", "```\n         SHOW VARIABLES LIKE 'general_log';\n        ```", "```\n        SHOW VARIABLES LIKE 'slow_query_log';\n        ```", "```\n         SHOW VARIABLES LIKE 'bind_address';\n        ```", "```\n        SELECT host, user FROM mysql.user WHERE host NOT LIKE 'localhost';\n        ```", "```\n         SELECT VERSION();\n        ```", "```\n        SELECT * FROM information_schema.plugins WHERE plugin_name LIKE '%vulnerable%';\n        ```", "```\n         SELECT DISTINCT table_schema FROM information_schema.tables WHERE table_privileges = 'Select,Insert,Update,Delete';\n        ```", "```\n        SELECT user, host FROM mysql.user WHERE host='%';\n        ```", "```\n         SHOW VARIABLES LIKE 'have_ssl';\n        ```", "```\n        SHOW STATUS LIKE 'Ssl_cipher';\n        ```", "```\n         SELECT user, host FROM mysql.user WHERE File_priv = 'Y';\n        ```", "```\n         SELECT * FROM Products WHERE ProductID = '1 OR 1=1; --';\n        ```", "```\n         SELECT user, host FROM mysql.user WHERE failed_login_attempts > 0;\n        ```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT VERSION();\"\n$version = $command.ExecuteScalar()\nWrite-Host \"MySQL Version: $version\"\n```", "```\n $server = \"localhost\"\n$database = \"your_database\"\n$username = \"your_username\"\n$password = \"your_password\"\n$connectionString = \"server=$server;database=$database;uid=$username;pwd=$password;\"\ntry {\n    $connection = New-Object System.Data.SqlClient.SqlConnection\n    $connection.ConnectionString = $connectionString\n    $connection.Open()\n    if ($connection.State -eq [System.Data.ConnectionState]::Open) {\n        Write-Host \"MySQL Connection Successful\"}\n    else {\n        Write-Host \"Failed to connect to MySQL.\"}\n    $connection.Close() }\ncatch {\n    Write-Host \"An error occurred: $_\"}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT user, host FROM mysql.user;\"\n$users = $command.ExecuteReader()\nwhile ($users.Read()) {\n    Write-Host \"User: $($users[\"user\"])@($users[\"host\"])\"\n}\n$users.Close()\n```", "```\n $command.CommandText = \"SHOW GRANTS FOR 'myuser'@'localhost';\"\n$privileges = $command.ExecuteReader()\nwhile ($privileges.Read()) {\n    Write-Host \"Privilege: $($privileges[0])\"}\n```", "```\n $command.CommandText = \"SHOW VARIABLES LIKE 'validate_password%';\"\n$passwordPolicy = $command.ExecuteReader()\nwhile ($passwordPolicy.Read()) {\n    Write-Host \"Setting: $($passwordPolicy[\"Variable_name\"]), Value: $($passwordPolicy[\"Value\"])\"}\n```", "```\n $command.CommandText = \"SHOW VARIABLES LIKE 'have_ssl';\"\n$sslEnabled = $command.ExecuteScalar()\nWrite-Host \"SSL/TLS Enabled: $sslEnabled\"\n```", "```\n $command.CommandText = \"SHOW VARIABLES LIKE 'innodb_encrypt%' OR 'encrypt%';\"\n$encryptionSettings = $command.ExecuteReader()\nwhile ($encryptionSettings.Read()) {\n    Write-Host \"Setting: $($encryptionSettings[\"Variable_name\"]), Value: $($encryptionSettings[\"Value\"])\"}\n```", "```\n $command.CommandText = \"SHOW VARIABLES LIKE 'secure_file_priv';\"\n$backupSecurity = $command.ExecuteScalar()\nWrite-Host \"Backup Security: $backupSecurity\"\n```", "```\n $command.CommandText = \"SHOW VARIABLES LIKE 'log_error';\"\n$errorLogPath = $command.ExecuteScalar()\n$logs = Get-Content $errorLogPath\nWrite-Host \"Contents of MySQL Error Log:\"\nWrite-Host $logs\n```", "```\n         SELECT username FROM pg_user;\n        ```", "```\n        SELECT grantee, privilege_type, table_name FROM information_schema.role_table_grants WHERE grantee = 'your_username';\n        ```", "```\n        SELECT usename,\n          CASE\n        WHEN usesup = TRUE THEN 'Superuser'\n        WHEN usecdb = TRUE THEN 'Create DB'\n        WHEN usecat = TRUE THEN 'Update Catalog'\n        ELSE 'No Excessive Privileges'\n            END AS privilege_type\n        FROM pg_user\n        WHERE usesup = TRUE OR usecdb = TRUE OR usecat = TRUE;\n        ```", "```\n         SELECT name AS \"Parameter\", setting AS \"Value\" FROM pg_settings WHERE name LIKE 'password%';\n        ```", "```\n         SELECT\n            name AS \"Parameter\",\n            setting AS \"Value\"\n        FROM pg_settings\n        WHERE name = 'logging_collector';\n        ```", "```\n        SELECT\n            name AS \"Parameter\",\n            setting AS \"Value\"\n        FROM pg_settings\n        WHERE name IN ('log_statement', 'log_duration');\n        ```", "```\n         SELECT\n            name AS \"Parameter\",\n            setting AS \"Bind Address\"\n        FROM pg_settings\n        WHERE name = 'listen_addresses';\n        ```", "```\n        SELECT version();\n        ```", "```\n         SELECT\n            schemaname AS \"Schema\",\n            tablename AS \"Table/View\",\n            privilege_type AS \"Privilege\",\n            grantee AS \"User/Role\"\n        FROM information_schema.role_table_grants\n        WHERE\n            privilege_type IN ('SELECT', 'INSERT', 'UPDATE', 'DELETE')\n            AND grantee NOT IN ('postgres', 'public')\n            AND schemaname NOT IN ('information_schema', 'pg_catalog')\n        ORDER BY\n            schemaname, tablename, privilege_type, grantee;\n        ```", "```\n        SELECT\n            r.rolname AS \"Username\",\n            s.clienthostname AS \"Host\"\n        FROM pg_stat_statements\n        JOIN pg_roles r ON r.oid = s.userid\n        WHERE\n            s.clienthostname LIKE '%_%' ESCAPE '|';\n        ```", "```\n         SELECT\n            name AS \"Parameter\",\n            setting AS \"SSL/TLS Enabled\"\n        FROM  pg_settings\n        WHERE name = 'ssl';\n        ```", "```\n         SELECT\n            rolname AS \"Role Name\",\n            path AS \"File or Directory Path\",\n            access,\n            pg_stat_file_mode(access) AS \"Permissions\"\n        FROM pg_stat_file\n        JOIN\n            pg_roles ON pg_roles.oid = pg_stat_file.st_owner\n        WHERE\n            path LIKE '/path/to/backup/directory%';\n        ```", "```\n         SELECT * FROM Products WHERE ProductID = '1 OR 1=1; --';\n        ```", "```\n         # Import the Npgsql module\n        Import-Module Npgsql\n        # PostgreSQL server details\n        $server = \"your_postgresql_server\"\n        $database = \"your_database\"\n        $username = \"your_username\"\n        $password = \"your_password\"\n        # Connection string\n        $connectionString = \"Server=$server;Database=$database;User Id=$username;Password=$password;\"\n        # SQL query\n        $query = @\"\n        SELECT\n          datname AS \"Database\",\n          usename AS \"Username\",\n          client_addr AS \"Client IP Address\",\n          client_port AS \"Client Port\",\n          backend_start AS \"Backend Start Time\",\n          state AS \"Connection State\",\n          application_name AS \"Application Name\"\n        FROM\n          pg_stat_activity\n        WHERE\n          state = 'active';\n        \"@\n        try {\n          # Establish connection\n          $connection = New-Object Npgsql.NpgsqlConnection\n          $connection.ConnectionString = $connectionString\n          $connection.Open()\n          # Execute the query\n          $command = New-Object Npgsql.NpgsqlCommand($query, $connection)\n          $reader = $command.ExecuteReader()\n          # Display results\n          if ($reader.HasRows) {\n            while ($reader.Read()) {\n              Write-Host \"Database: $($reader[\"Database\"]), Username: $($reader[\"Username\"]), Client IP Address: $($reader[\"Client IP Address\"]), Client Port: $($reader[\"Client Port\"]), Backend Start Time: $($reader[\"Backend Start Time\"]), Connection State: $($reader[\"Connection State\"]), Application Name: $($reader[\"Application Name\"])\"\n            }\n          } else {\n            Write-Host \"No active connections found.\"   }\n        } catch {\n          Write-Host \"Error executing SQL query: $_\"\n        } finally {\n          # Close connection\n          if ($connection.State -eq 'Open') {\n            $connection.Close()\n          }\n        }\n        ```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\n$connection = Connect-Npgsql -ConnectionString $connectionString\nif ($connection.State -eq 'Open') {\n    # Define the SQL query to retrieve the PostgreSQL version\n    $versionQuery = \"SELECT version();\"\n    $command = $connection.CreateCommand()\n    $command.CommandText = $versionQuery\n    $result = $command.ExecuteScalar()\n    if ($result) {\n        Write-Host \"PostgreSQL Database Version: $result\"\n    } else {\n        Write-Host \"Unable to retrieve PostgreSQL database version.\" }\n    $connection.Close()\n}\nelse {\n    Write-Host \"Failed to connect to the PostgreSQL database.\" }\n```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\ntry {\n    $connection = Connect-Npgsql -ConnectionString $connectionString\n    if ($connection.State -eq 'Open') {\n        Write-Host \"Connection to PostgreSQL database successful. Username and password are valid.\" $connection.Close()\n    } else {\n        Write-Host \"Connection to PostgreSQL database failed. Username and/or password are invalid.\"     }\n}\ncatch {\n    Write-Host \"An error occurred while connecting to the PostgreSQL database: $_.Exception.Message\"\n}\n```", "```\n # Import the Npgsql module\nImport-Module Npgsql\n# PostgreSQL server details\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n# Connection string\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\ntry {\n  # Attempt to connect to the PostgreSQL database\n  $connection = Connect-Npgsql -ConnectionString $connectionString\n  # Check if the connection is open\n  if ($connection.State -eq 'Open') {\n    Write-Host \"Connection to PostgreSQL database successful. Username and password are valid.\" # Close the connection\n    $connection.Close()\n  } else {\n    Write-Host \"Connection to PostgreSQL database failed. Username and/or password are invalid.\"   }\n} catch {\n  # Display error message if connection attempt fails\n  Write-Host \"An error occurred while connecting to the PostgreSQL database: $_.Exception.Message\"\n}\n```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\n$connection = Connect-Npgsql -ConnectionString $connectionString\nif ($connection.State -eq 'Open') {\n    # Define the SQL query to check user privileges\n    $privilegesQuery = @\"\n    SELECT\n        grantee,\n        privilege_type,\n        table_name\n    FROM\n        information_schema.role_table_grants\n    WHERE\n        grantee = '$username';\"@\n    $command = $connection.CreateCommand()\n    $command.CommandText = $privilegesQuery\n    $privileges = $command.ExecuteReader()\n    if ($privileges.HasRows) {\n        Write-Host \"User Privileges for $username in $database:\"\n        while ($privileges.Read()) {\n            $grantee = $privileges['grantee']\n            $privilegeType = $privileges['privilege_type']\n            $tableName = $privileges['table_name']\n            Write-Host \"  Grantee: $grantee, Privilege Type: $privilegeType, Table Name: $tableName\"\n        }} else {\n        Write-Host \"No privileges found for user $username in $database.\" }\n    $connection.Close()  }\nelse {\n    Write-Host \"Failed to connect to the PostgreSQL database.\"}\n```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\n$connection = Connect-Npgsql -ConnectionString $connectionString\nif ($connection.State -eq 'Open') {\n    $passwordSettingsQuery = @\"\n    SELECT\n        name AS \"Parameter\",\n        setting AS \"Value\"\n    FROM\n        pg_settings\n    WHERE\n        name IN ('password_encryption', 'password_check_duration', 'password_min_length');\"@\n    $command = $connection.CreateCommand()\n    $command.CommandText = $passwordSettingsQuery    $passwordSettings = $command.ExecuteReader()\n    if ($passwordSettings.HasRows) {\n        Write-Host \"Password Policy Settings in PostgreSQL for $database:\"\n        while ($passwordSettings.Read()) {\n            $parameter = $passwordSettings['Parameter']\n            $value = $passwordSettings['Value']\n            Write-Host \"  $parameter: $value\"\n        }\n    }\n    else {\n        Write-Host \"No password policy settings found in PostgreSQL for $database.\"     }\n    $connection.Close()}\nelse {\n    Write-Host \"Failed to connect to the PostgreSQL database.\"}\n```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\n$connection = Connect-Npgsql -ConnectionString $connectionString\nif ($connection.State -eq 'Open') {\n    $sslConfigQuery = @\"\n    SELECT\n        name AS \"Parameter\",\n        setting AS \"Value\"\n    FROM\n        pg_settings\n    WHERE\n        name IN ('ssl', 'ssl_ca_file', 'ssl_cert_file', 'ssl_key_file', 'ssl_ciphers');\"@\n    $command = $connection.CreateCommand()\n    $command.CommandText = $sslConfigQuery\n    $sslConfigSettings = $command.ExecuteReader()\n    if ($sslConfigSettings.HasRows) {\n        Write-Host \"SSL/TLS Configuration in PostgreSQL for $database:\"\n        while ($sslConfigSetting = $sslConfigSettings.Read()) {\n            $parameter = $sslConfigSetting['Parameter']\n            $value = $sslConfigSetting['Value']\n            Write-Host \"  $parameter: $value\"\n        }\n    }\n    else {\n        Write-Host \"No SSL/TLS configuration settings found in PostgreSQL for $database.\" }\n    $connection.Close() }\nelse {\n    Write-Host \"Failed to connect to the PostgreSQL database.\"}\n```", "```\n Import-Module Npgsql\n$server = \"postgresql.snowcapcyber.com\"\n$port = 5432\n$database = \"mypostdb\"\n$username = \"mypostuser\"\n$password = \"mypostpassword\"\n$connectionString = \"Host=$server;Port=$port;Database=$database;Username=$username;Password=$password;\"\n$connection = Connect-Npgsql -ConnectionString $connectionString\nif ($connection.State -eq 'Open') {\n    $encryptionQuery = @\"\n    SELECT\n        name AS \"Parameter\",\n        setting AS \"Value\"\n    FROM\n        pg_settings\n    WHERE\n        name IN ('ssl', 'ssl_ca_file', 'ssl_cert_file', 'ssl_key_file');\"@\n    $command = $connection.CreateCommand()\n    $command.CommandText = $encryptionQuery\n    $encryptionSettings = $command.ExecuteReader()\n    if ($encryptionSettings.HasRows) {\n        Write-Host \"Encryption Settings in PostgreSQL for $database:\"\n        while ($encryptionSetting = $encryptionSettings.Read()) {\n            $parameter = $encryptionSetting['Parameter']\n            $value = $encryptionSetting['Value']\n            Write-Host \"  $parameter: $value\"\n        }\n    }\n    else {\n        Write-Host \"No encryption settings found in PostgreSQL for $database.\" }\n    $connection.Close()\n}\nelse {\n    Write-Host \"Failed to connect to the PostgreSQL database.\" }\n```", "```\n $backupDirectory = \"C:\\path\\to\\backup\\directory\"\n$backupFiles = Get-ChildItem -Path $backupDirectory\nif ($backupFiles.Count -gt 0) {\n    Write-Host \"PostgreSQL Backup Files in $backupDirectory:\"\n    foreach ($backupFile in $backupFiles) {\n        $backupFilePath = $backupFile.FullName\n        Write-Host \"Backup file: $($backupFile.Name)\"\n        $fileSecurity = Get-Acl -Path $backupFilePath\n        Write-Host \"Security settings:\"\n        foreach ($ace in $fileSecurity.Access) {\n            Write-Host \"  User/Group: $($ace.IdentityReference), Permissions: $($ace.FileSystemRights)\"\n        }\n        Write-Host \"\"\n    }\n} else {\n    Write-Host \"No PostgreSQL backup files found in the specified directory.\" }\n```", "```\n $logDirectory = \"C:\\PostgreSQL\\13\\data\\pg_log\"\n$logFiles = Get-ChildItem -Path $logDirectory -Filter \"postgresql*.log\"\nif ($logFiles.Count -gt 0) {\n    Write-Host \"PostgreSQL Error Logs:\"\n    foreach ($logFile in $logFiles) {\n        $logFilePath = $logFile.FullName\n        $logLines = Get-Content -Path $logFilePath\n        Write-Host \"Log file: $($logFile.Name)\"\n        $errorEntries = $logLines | Where-Object { $_ -match \"ERROR|FATAL|PANIC\" }\n        if ($errorEntries.Count -gt 0) {\n            Write-Host \"Errors found:\"\n            foreach ($errorEntry in $errorEntries) {\n                Write-Host \"  $errorEntry\"\n            }\n        } else {\n            Write-Host \"No errors found in this log file.\" }\n        Write-Host \"\"\n    }\n} else {\n    Write-Host \"No PostgreSQL log files found in the specified directory.\" }\n```", "```\n # Import the SqlServer module (Ensure it's installed)\nImport-Module SqlServer\n# Replace these values with your SQL Server details\n$serverInstance = \"localhost\"\n$database = \"YourDatabase\"\n$username = \"YourUsername\"\n$password = \"YourPassword\"\n# Create a SQL Server connection\n$connectionString = \"Server=$serverInstance;Database=$database;User Id=$username;Password=$password;\"\n$connection = New-Object System.Data.SqlClient.SqlConnection\n$connection.ConnectionString = $connectionString\n# Open the connection\n$connection.Open()\n# Check if the connection is open\nif ($connection.State -eq [System.Data.ConnectionState]::Open) {\n    Write-Host \"Connected to SQL Server successfully!\" } else {\n    Write-Host \"Failed to connect to SQL Server.\" }\n# Close the connection when done\n$connection.Close()\n```", "```\n $serverInstance = \"127.0.0.1\"\n$connection = New-Object System.Data.SqlClient.SqlConnection\n$connection.ConnectionString = \"Server=$serverInstance;Database=master;Integrated Security=True;\"\n$connection.Open()\n$command = $connection.CreateCommand()\n$command.CommandText = \"SELECT @@VERSION;\"\n$version = $command.ExecuteScalar()\nWrite-Host \"SQL Server Version: $version\"\n$connection.Close()\n```", "```\n Import-Module SqlServer\n$serverInstance = \"localhost\"\n$database = \"YourDatabase\"\n$username = \"YourUsername\"\n$password = \"YourPassword\"\n$connectionString = \"Server=$serverInstance;Database=$database;User Id=$username;Password=$password;\"\n$connection = New-Object System.Data.SqlClient.SqlConnection\n$connection.ConnectionString = $connectionString\n$connection.Open()\n$query = \"SELECT * FROM YourTable\"\n$command = $connection.CreateCommand()\n$command.CommandText = $query\n$result = $command.ExecuteReader()\nwhile ($result.Read()) {\n    Write-Host \"Column1: $($result[\"Column1\"]), Column2: $($result[\"Column2\"])\"\n}\n$connection.Close()\n```", "```\n         SELECT @@VERSION;\n        ```", "```\n        SELECT SERVERPROPERTY('ProductVersion'), SERVERPROPERTY('ProductLevel');\n        ```", "```\n         SELECT name, type_desc, is_disabled FROM sys.sql_logins;\n        ```", "```\n        SELECT name FROM sys.server_principals WHERE type = 'R';\n        ```", "```\n        SELECT name FROM sys.database_principals WHERE type = 'R';\n        ```", "```\n         EXEC sp_helprotect @username;\n        ```", "```\n        EXEC sp_srvrolepermission @username;\n        ```", "```\n         SELECT name, is_policy_checked FROM sys.sql_logins WHERE is_policy_checked = 1;\n        ```", "```\n         SELECT name, is_encryption_enabled FROM sys.dm_database_encryption_keys;\n        ```", "```\n        EXEC xp_readerrorlog 0, 1, 'SSL is enabled';\n        ```", "```\n         SELECT database_name, backup_start_date, backup_finish_date FROM msdb.dbo.backupset;\n        ```", "```\n        EXEC sp_configure 'backup retention period';\n        ```", "```\n         SELECT is_tracked_by_c2_audit_mode, is_cdc_enabled FROM sys.databases;\n        ```", "```\n        EXEC xp_readerrorlog;\n        ```", "```\n         SELECT * FROM Products WHERE ProductID = '1 OR 1=1; --';\n        ```", "```\n         SELECT login_name, host_name, login_failed_time FROM sys.dm_exec_connections WHERE net_transport = 'TCP';\n        ```", "```\n         ```", "```\n        ```", "```\n          ```", "```\n        ```", "```\n         ```", "```\n        ```", "```\n          ```", "```\n        ```", "```\n $productId = \"1 OR 1=1; --\"\n$command = $connection.CreateCommand()\n$command.CommandText = \"SELECT * FROM Products WHERE ProductID = $productId;\"\n```", "```\n $username = \"admin\"\n$passwords = Get-Content \"passwords.txt\"  # Load a list of passwords from a file\nforeach ($password in $passwords) {\n    $command = $connection.CreateCommand()\n    $command.CommandText = \"SELECT * FROM Users WHERE Username = '$username' AND Password = '$password';\"\n    $result = $command.ExecuteScalar()\n    if ($result -ne $null) {\n        Write-Host \"Login successful for $username with password $password\"\n        break\n    } }\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT name, type_desc, is_disabled FROM sys.sql_logins;\"\n$logins = $command.ExecuteReader()\nwhile ($logins.Read()) {\n    Write-Host \"Login: $($logins[\"name\"]), Type: $($logins[\"type_desc\"]), Disabled: $($logins[\"is_disabled\"])\"\n}\n```", "```\n $targetUsername = \"JohnDoe\"\n$command = $connection.CreateCommand()\n$command.CommandText = \"EXEC sp_helprotect @username;\"\n$command.Parameters.AddWithValue(\"@username\", $targetUsername)\n$privileges = $command.ExecuteReader()\nwhile ($privileges.Read()) {\n    Write-Host \"Object Name: $($privileges[\"Object_Name\"]), Permission: $($privileges[\"Permission_Name\"]), Grantor: $($privileges[\"Grantor\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT * FROM sys.sql_logins WHERE is_policy_checked = 1;\"\n$passwordPolicies = $command.ExecuteReader()\nwhile ($passwordPolicies.Read()) {\n    Write-Host \"Login: $($passwordPolicies[\"name\"]), Password Policy Enforced: $($passwordPolicies[\"is_policy_checked\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT name, protocol_desc, local_net_address, local_tcp_port, type_desc, role_desc FROM sys.dm_exec_connections;\"\n$connections = $command.ExecuteReader()\nwhile ($connections.Read()) {\n    Write-Host \"Name: $($connections[\"name\"]), Protocol: $($connections[\"protocol_desc\"]), Local Address: $($connections[\"local_net_address\"]), Local Port: $($connections[\"local_tcp_port\"]), Type: $($connections[\"type_desc\"]), Role: $($connections[\"role_desc\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT name, is_encryption_enabled, encryption_type_desc FROM sys.dm_database_encryption_keys;\"\n$encryptionKeys = $command.ExecuteReader()\nwhile ($encryptionKeys.Read()) {\n    Write-Host \"Database: $($encryptionKeys[\"name\"]), Encryption Enabled: $($encryptionKeys[\"is_encryption_enabled\"]), Encryption Type: $($encryptionKeys[\"encryption_type_desc\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"EXEC sp_MSforeachdb 'USE [?]; SELECT name, recovery_model_desc, is_broker_enabled FROM sys.databases;'\"\n$databases = $command.ExecuteReader()\nwhile ($databases.Read()) {\n    Write-Host \"Database: $($databases[\"name\"]), Recovery Model: $($databases[\"recovery_model_desc\"]), Service Broker Enabled: $($databases[\"is_broker_enabled\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"EXEC xp_readerrorlog;\"\n$errorLogs = $command.ExecuteReader()\nwhile ($errorLogs.Read()) {\n    Write-Host \"Log Date: $($errorLogs[\"LogDate\"]), Process Info: $($errorLogs[\"ProcessInfo\"]), Message: $($errorLogs[\"Text\"])\"\n}\n```", "```\n $command = $connection.CreateCommand()\n$command.CommandText = \"SELECT * FROM sys.fn_get_audit_file('C:\\Audit\\*.sqlaudit', DEFAULT, DEFAULT);\"\n$auditLogs = $command.ExecuteReader()\nwhile ($auditLogs.Read()) {\n    Write-Host \"Event Time: $($auditLogs[\"event_time\"]), Action: $($auditLogs[\"action_id\"]), Object Name: $($auditLogs[\"object_name\"])\"\n}\n```"]