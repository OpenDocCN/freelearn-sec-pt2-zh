["```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$request = [System.Net.WebRequest]::Create($ftpServer)\n$request.Method = [System.Net.WebRequestMethods+Ftp]::ListDirectoryDetails\n$response = $request.GetResponse()\n$stream = $response.GetResponseStream()\n$reader = [System.IO.StreamReader]::new($stream)\n$banner = $reader.ReadToEnd()\nWrite-Host \"Banner Information:\"\nWrite-Host $banner\n$reader.Close()\n$response.Close()\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$ftpUsername = \"your_username\"\n$ftpPassword = \"your_password\"\n$ftpWebRequest = [System.Net.FtpWebRequest]::Create($ftpServer)\n$ftpWebRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $ftpPassword)\n$ftpResponse = $ftpWebRequest.GetResponse()\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$webClient = New-Object System.Net.WebClient\n$credentials = $webClient.Credentials\nif ($credentials.UserName -eq \"anonymous\" -or $credentials.UserName -eq \"\") {\n    Write-Host \"Anonymous access is enabled.\" } else {\n    Write-Host \"Anonymous access is disabled.\"}\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$request = [System.Net.WebRequest]::Create($ftpServer)\n$request.Method = [System.Net.WebRequestMethods+Ftp]::ListDirectoryDetails\n$request.EnableSsl = $true\ntry {\n    $response = $request.GetResponse()\n    Write-Host \"SSL/TLS is supported.\" $response.Close()\n} catch {\n    Write-Host \"SSL/TLS is not supported or misconfigured.\" }\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$ftpUsername = \"ajcblyth\"\n$ftpPassword = \"Th1s1sMyOa55w9rd\"\n$remoteDirectory = \"/home/ajcblyth/directory\"\n$ftpWebRequest = [System.Net.FtpWebRequest]::Create(\"$ftpServer$remoteDirectory\")\n$ftpWebRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $ftpPassword)\n$ftpWebRequest.Method = [System.Net.WebRequestMethods+Ftp]::ListDirectory\n$ftpResponse = $ftpWebRequest.GetResponse()\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$ftpUsername = \"ajcblyth\"\n$ftpPassword = \".Th1s1sMyOa55w9rd\"\n$localFilePath = \"C:\\local\\file.txt\"\n$remoteFilePath = \"/remote/directory/file.txt\"\n$ftpWebRequest = [System.Net.FtpWebRequest]::Create(\"$ftpServer$remoteFilePath\")\n$ftpWebRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $ftpPassword)\n$ftpWebRequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile\n$fileContent = Get-Content $localFilePath\n$ftpRequestStream = $ftpWebRequest.GetRequestStream()\n$ftpRequestStream.Write($fileContent, 0, $fileContent.Length)\n$ftpRequestStream.Close()\n$ftpResponse = $ftpWebRequest.GetResponse()\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$ftpUsername = \"ajcblyth\"\n$ftpPassword = \".Th1s1sMyOa55w9rd\"\n$remoteFilePath = \"/remote/directory/file.txt\"\n$localFilePath = \"C:\\local\\downloaded_file.txt\"\n$ftpWebRequest = [System.Net.FtpWebRequest]::Create(\"$ftpServer$remoteFilePath\")\n$ftpWebRequest.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $ftpPassword)\n$ftpWebRequest.Method = [System.Net.WebRequestMethods+Ftp]::DownloadFile\n$ftpResponse = $ftpWebRequest.GetResponse()\n$ftpResponseStream = $ftpResponse.GetResponseStream()\n$fileStream = [System.IO.File]::Create($localFilePath)\n$buffer = New-Object byte[] 1024\nwhile ($true) {\n    $read = $ftpResponseStream.Read($buffer, 0, $buffer.Length)\n    if ($read -le 0) {\n        break\n    }\n    $fileStream.Write($buffer, 0, $read)\n}\n$fileStream.Close()\n$ftpResponseStream.Close()\n```", "```\n $ftpServer = \"ft p://ftp.snowcap cyber.com\"\n$ftpUsername = \"ajcblyth\"\n$passwords = \"password1\", \"password123\", \"ftpuserpass\", \"secureftp\"\n$webClient = New-Object System.Net.WebClient\n$failedAttempts = 0\nforeach ($password in $passwords) {\n    $webClient.Credentials = New-Object System.Net.NetworkCredential($ftpUsername, $password)\n    try {\n     $webClient.UploadFile(\"$ftpServer/test.txt\", \"C:\\temp\\test.txt\")\n        Write-Host \"Password '$password' worked!\" break\n    } catch {\n        $failedAttempts++  } }\nif ($failedAttempts -eq $passwords.Count) {\n    Write-Host \"No valid password found.\" }\n```", "```\n Test-NetConnection -ComputerName ftp.snowcapcyber.com -Port 21\n```", "```\n Test-NetConnection -ComputerName tftp.snowcapcyber.com -Port 69\n```", "```\n Install-Module -Name PSFTP\nGet-PSFTPConfiguration -ComputerName tftp.snowcapcyber.com\n```", "```\n Get-PSFTPFile -ComputerName tftp.snowcapcyber.com -Path \"/\"\n```", "```\n # Specify the path to the file\n$filePath = \"C:\\Path\\To\\Your\\TFTPFile.txt\"\n$computer = \"tftp.snowcapcyber.com\"\n# Check if the file exists\nif (Test-Path $filePath -PathType Leaf) {\n    # Read the contents of the file and print each line\n    Get-Content $filePath | ForEach-Object {\n        Get-PSFTPFile -ComputerName $computer -Path $_\n    }\n} else {\n    Write-Host \"File not found: $filePath\"\n}\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { ssh -V }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { ssh -Q kex }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { ssh -Q cipher }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { ssh -Q auth }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { Get-Content /etc/ssh/sshd_config }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { cat /etc/ssh/sshd_config | grep AllowUsers }\n```", "```\n Invoke-Command -ComputerName scp.snowcapcyber.com -ScriptBlock { scp -V }\n```", "```\n Invoke-Command -ComputerName sftp.snowcapcyber.com -ScriptBlock { sftp -V }\n```", "```\n Invoke-Command -ComputerName www.snowcapcyber.com -ScriptBlock { Get-Content /etc/ssh/sshd_config | grep Subsystem }\n```", "```\n Invoke-Command -ComputerName YourSSHServer -ScriptBlock { ssh-audit YourSSHServer }\n```", "```\n # Invoke SSH command on the remote server using the private key\nInvoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock {\n    param($sshKey)\n    ssh -T -i $using:sshKey ajcblyth@ssh.snowcapcyber.com\n} -ArgumentList $sshKey\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { sudo -l }\n```", "```\n Invoke-Command -ComputerName ssh.snowcapcyber.com -ScriptBlock { Get-EventLog -LogName Security -Source sshd }\n```", "```\n # Install Posh-SSH module\nInstall-Module -Name Posh-SSH -Force -AllowClobber\n# Import the module\nImport Module Posh-SSH\n# Example: Establish an SSH session\n$session = New-SSHSession -Port 22 -ComputerName ssh.snowcapcyber.com -Credential (Get-Credential)\n# Example: Run a command on the remote server\nInvoke-SSHCommand -SessionId $session.SessionId -Command \"ls -l\"\n# Example: Close the SSH session\nRemove-SSHSession -SessionId $session.SessionId\n```", "```\n # Example: Using WinSCP .NET Assembly for SFTP\n$sessionOptions = New-Object WinSCP.SessionOptions -Property @{\n    Protocol = [WinSCP.Protocol]::Sftp\n    HostName = \"ssh.snowcapcyber.com\"\n    UserName = \"ajcblyth\"\n    Password = \"MyPa55w0RdL3tM31N\"\n}\n$session = New-Object WinSCP.Session\ntry {\n    $session.Open($sessionOptions)\n    $session.GetFiles(\"/remote/path/*.txt\", \"C:\\local\\path\\\").Check()\n}\nfinally {\n    $session.Dispose()\n}\n```", "```\n # Install SSH-Sessions module\nInstall-Module -Name SSH-Sessions -Force -AllowClobber\n# Import the module\nImport-Module SSH-Sessions\n# Example: Establish a persistent SSH session\n$session = New-SshSession -ComputerName ssh.snowcapcyber.com -Credential (Get-Credential)\n# Example: Run a command on the remote server\nInvoke-SshCommand -SessionId $session.SessionId -Command \"ls -l\"\n# Example: Close the persistent SSH session\nRemove-SshSession -SessionId $session.SessionId\n```", "```\n # Example: Using Chilkat SSH/SFTP Module\n$ssh = New-Object Chilkat.Ssh\n$success = $ssh.Connect(\"ssh.snowcapcyber.com\")\nif ($success -eq $true) {\n    $ssh.AuthenticatePw(\"ajcblyth\", \"MyPa55w0RdL3tM31N\")\n    $commandResult = $ssh.QuickCmd(\"ls -l\")\n    Write-Host $commandResult\n}\n$ssh.Disconnect()\n```"]