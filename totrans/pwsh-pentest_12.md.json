["```\n # Assign a policy to deny the creation of resources without tags\nNew-AzPolicyAssignment -Name \"DenyResourceWithoutTags\" -DisplayName \"Deny Resources Without Tags\" -Scope \"/subscriptions/{subscriptionId}\" -PolicyDefinitionReferenceId \"/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionId}\" -EnforcementMode DoNotEnforce\n```", "```\n # Assign a user the contributor role to a specific resource group\nNew-AzRoleAssignment -ObjectId \"{userObjectId}\" -RoleDefinitionName \"Contributor\" -Scope \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}\"\n```", "```\n # Add tags to a virtual machine\nSet-AzResource -ResourceId \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{vmName}\" -Tag @{ \"Environment\" = \"Production\"; \"Project\" = \"XYZ\" }\n```", "```\n # Apply a read-only lock to a storage account\nNew-AzResourceLock -LockLevel ReadOnly -LockNotes \"Critical Resource\" -ResourceId \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{storageAccountName}\"\n```", "```\n # Create and assign a blueprint\nNew-AzBlueprint -Name \"MyBlueprint\" -SubscriptionId \"{subscriptionId}\" -BlueprintFile \"C:\\Path\\To\\Blueprint.json\"\n```", "```\n # Get compliance status for all resources in a subscription\nGet-AzPolicyState -SubscriptionId \"{subscriptionId}\" | Where-Object { $_.ComplianceState -eq \"NonCompliant\" }\n```", "```\n Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser\nImport-Module Az\n```", "```\nPS C:\\> $Creds = Get-Credential\nPS C:\\> Connect-AzAccount -Credential $Creds\nAccount                      SubscriptionName   TennantID                              Environment\n-------                      ----------------   ------------------------------------   -----------\najcblyth@snowcapcyber.com    Infinity           749a36a1-402a-481c-a0c0-66f677504ea8   AzureCloud\n```", "```\n PS C:\\> Get-AzTenant\nId                                       Name              Category Domains\n--                                       ----              -------- -------\n749a36a1-402a-481c-a0c0-66f677504ea8     SnowCap Cyber     Home     {snowcapcyber.onmicrosoft.com, snowcapcyber.com}\n```", "```\n PS C:\\> nslookup devtest.snowcapcyber.com\nServer:          192.168.1.254\nAddress:    192.168.1.254#53\nNon-authoritative answer:\ndevtest.snowcapcyber.com    canonical name = snowcapcyber.z13.web.core.windows.net. snowcapcyber.z16.web.core.windows.net    canonical name = web.s768fd45.store.core.windows.net. Name:    web.s768fd45.store.core.windows.net\nAddress: 52.239.123.45\n```", "```\n Get-AzResource | Select-Object ResourceGroupName, ResourceType, ResourceName\n```", "```\n Get-AzVirtualNetwork | Select-Object ResourceGroupName, Name, AddressSpace, @{Name=\"Subnets\"; Expression={$_.Subnets.Name -join \", \"}}\n```", "```\n Get-AzVirtualNetwork -ResourceGroupName \"YourResourceGroup\" | Get-AzVirtualNetworkSubnetConfig | Select-Object Name, AddressPrefix\n```", "```\n Get-AzNetworkSecurityGroup -ResourceGroupName \"YourResourceGroup\" | Get-AzNetworkSecurityRuleConfig\n```", "```\n Get-AzPublicIpAddress | Select-Object ResourceGroupName, Name, IpAddress\n```", "```\n Get-AzureADUser | Select-Object DisplayName, UserPrincipalName\nGet-AzureADGroup | Select-Object DisplayName, Description\nGet-AzureADApplication | Select-Object DisplayName, AppId\n```", "```\n Get-AzADServicePrincipal | Select-Object DisplayName, ApplicationId, ServicePrincipalNames\n```", "```\n $dotContent = @\"\ndigraph NetworkMap {\n  subgraph cluster_vnet {\n    label=\"Virtual Network: YourVNet\"\n    \"Subnet A\" -> \"Subnet B\"\n  }\n  \"Subnet B\" -> \"Web Server\"\n  \"Subnet B\" -> \"Database Server\"\n  \"Web Server\" -> \"DB Server\"\n  \"Web Server\" -> \"Public IP\"\n}\n\"@\n$dotContent | Out-File -FilePath \"NetworkMap.dot\"\n```", "```\n # Retrieve all users in Azure AD\nGet-AzADUser -All $true | Select-Object DisplayName, UserPrincipalName, UserType, ObjectId\n```", "```\n # List role assignments within a specific subscription\nGet-AzRoleAssignment -Scope \"/subscriptions/{subscription-id}\" | Select-Object DisplayName, SignInName, RoleDefinitionName\n```", "```\n # Retrieve information about the \"Contributor\" built-in role\nGet-AzRoleDefinition -Name \"Contributor\" | Select-Object Name, Description, Actions\n```", "```\n # Create a temporary role assignment for testing\nNew-AzRoleAssignment -ObjectId \"{user-object-id}\" -RoleDefinitionName \"Reader\" -Scope \"/subscriptions/{subscription-id}\"\n```", "```\n # Sample script to automate RBAC analysis\n$users = Get-AzADUser -All $true\nforeach ($user in $users) {\n    $roleAssignments = Get-AzRoleAssignment -ObjectId $user.ObjectId\n    Write-Output \"User: $($user.DisplayName)\"\n    Write-Output \"Role Assignments:\"\n    $roleAssignments | Select-Object RoleDefinitionName, Scope\n    Write-Output \"`n\"\n}\n```", "```\n # Get information about Blob Storage accounts\nGet-AzStorageAccount | ForEach-Object {\n    $account = $_\n    Write-Output \"Storage Account Name: $($account.StorageAccountName)\"\n    Get-AzStorageContainer -Context $_.Context | ForEach-Object {\n        Write-Output \"   Container Name: $($_.Name)\"\n        # Additional commands to analyze blobs within the container\n    }\n    Write-Output \"`n\"\n}\n```", "```\n # Get Blob Container permissions for a specific storage account\n$storageAccount = Get-AzStorageAccount -ResourceGroupName \"YourResourceGroup\" -AccountName \"YourStorageAccountName\"\n$container = \"YourBlobContainer\"\nGet-AzStorageContainerAcl -Context $storageAccount.Context -Name $container | Select-Object Id, Access\n```", "```\n # Get RBAC assignments for a specific storage account\n$storageAccount = Get-AzStorageAccount -ResourceGroupName \"YourResourceGroup\" -AccountName \"YourStorageAccountName\"\nGet-AzRoleAssignment -Scope $storageAccount.Id | Select-Object DisplayName, SignInName, RoleDefinitionName\n```", "```\n # Retrieve secrets from Azure Key Vault\n$keyVault = Get-AzKeyVault -VaultName \"YourKeyVaultName\" -ResourceGroupName \"YourResourceGroup\"\nGet-AzKeyVaultSecret -VaultName $keyVault.VaultName | Select-Object Name, Value\n```", "```\n # Automated analysis of Azure Storage Accounts\nGet-AzStorageAccount | ForEach-Object {\n    $account = $_\n    Write-Output \"Storage Account Name: $($account.StorageAccountName)\"\n    # Additional commands for analyzing containers, permissions, etc.     Write-Output \"`n\"\n}\n```", "```\n     # Retrieve user information from Azure AD\n    Get-AzADUser -All $true | Select-Object DisplayName, UserPrincipalName, UserType, ObjectId\n    ```", "```\n     # List service principals in Azure AD\n    Get-AzADServicePrincipal | Select-Object DisplayName, ServicePrincipalNames, AppId, ObjectType\n    ```", "```\n     # Get information about Azure SQL servers\n    Get-AzSqlServer | Select-Object ServerName, ResourceGroupName, Location, Version\n    ```", "```\n     # List users and their roles in an Azure SQL database\n    $server = Get-AzSqlServer -ResourceGroupName \"YourResourceGroup\" -ServerName \"YourSqlServer\"\n    $database = \"YourDatabase\"\n    Get-AzSqlDatabase -ServerName $server.ServerName -ResourceGroupName $server.ResourceGroupName -DatabaseName $database | Get-AzSqlDatabaseServerActiveDirectoryAdministrator | Select-Object DisplayName, SignInName\n    ```", "```\n     # Enable auditing for an Azure SQL database\n    $database = \"YourDatabase\"\n    Set-AzSqlDatabaseAuditing -ServerName $server.ServerName -ResourceGroupName $server.ResourceGroupName -DatabaseName $database -StorageAccountName \"YourStorageAccount\" -AuditActionGroup \"SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\", \"FAILED_DATABASE_AUTHENTICATION_GROUP\"\n    ```", "```\n     # Retrieve information about virtual machines in a specific resource group\n    Get-AzVM -ResourceGroupName \"YourResourceGroup\" | Select-Object Name, ResourceGroupName, Location, PowerState\n    ```", "```\n     # List NSG rules for a specific subnet\n    $subnet = \"YourSubnet\"\n    (Get-AzNetworkSecurityGroup -ResourceGroupName \"YourResourceGroup\" | Get-AzNetworkSecurityRuleConfig | Where-Object { $_.SourcePortRange -eq '*' -and $_.DestinationPortRange -eq '*' -and $_.Direction -eq 'Inbound' -and $_.SourceAddressPrefix -eq '*' -and $_.DestinationAddressPrefix -eq \"$subnet\" }) | Select-Object Name, Priority, Access, Direction, Protocol\n    ```", "```\n     # Retrieve secrets from Azure Key Vault\n    $keyVault = Get-AzKeyVault -VaultName \"YourKeyVaultName\" -ResourceGroupName \"YourResourceGroup\"\n    Get-AzKeyVaultSecret -VaultName $keyVault.VaultName | Select-Object Name, Version, Enabled\n    ```", "```\n     # Enable auditing for an Azure Key Vault\n    Set-AzKeyVault -VaultName \"YourKeyVaultName\" -ResourceGroupName \"YourResourceGroup\" -EnableSoftDelete $true -EnablePurgeProtection $true -EnableRbacAuthorization $true -Sku Premium\n    ```", "```\nPS C:\\> Get-AzVM\nResourceGroupName                  Name Location            VmSize  OsType        NIC           ProvisioningState\n-----------------                  ---- --------            ------  ------        ---           -----------------\nSNOWCAPCLOUD                 SNOWUNIX01  UKWales   Standard_D8s_v3   Linux        SNOWUNIX01268         Succeeded\nSNOWWINCLOUD                  SNOWWIN01  UKWales   Standard_D8s_v3 Windows        SNOWWIN01789          Succeeded\nSNOWWINCLOUD                  SNOWWIN02  UKCardiff Standard_D8s_v3 Windows        SNOWWIN02906          Succeeded\n```", "```\nPS C:\\> Get-AzVM -Name *UNIX* | Where-Object { $_.StorageProfile.OsDisk.OsType -eq \"Linux\" -or $_.StorageProfile.OsDisk.OsType -eq \"Linux\" }\nResourceGroupName                  Name Location            VmSize  OsType        NIC           ProvisioningState\n-----------------                  ---- --------            ------  ------        ---           -----------------\nSNOWCAPCLOUD                 SNOWUNIX01  UKWales   Standard_D8s_v3   Linux        SNOWUNIX01268         Succeeded\nPS C:\\> Get-AzVM -Location \"UKCardiff\"\nResourceGroupName                  Name Location            VmSize  OsType        NIC           ProvisioningState\n-----------------                  ---- --------            ------  ------        ---           -----------------\nSNOWWINCLOUD                  SNOWWIN02  UKCardiff Standard_D8s_v3 Windows        SNOWWIN02906          Succeeded\n```", "```\n PS C:\\> Get-azpublicipaddress -Name SNOWUNIX01 | select IpAddress\nIpAddress\n137.135.55.253\n```", "```\n     # Retrieve information about virtual machines in a specific resource group\n    Get-AzVM -ResourceGroupName \"YourResourceGroup\" | Select-Object Name, ResourceGroupName, Location, PowerState\n    ```", "```\n     # List storage accounts and their properties\n    Get-AzStorageAccount | Select-Object StorageAccountName, ResourceGroupName, Location, AccountType\n    ```", "```\n     # Get information about Azure SQL databases\n    Get-AzSqlDatabase -ResourceGroupName \"YourResourceGroup\" -ServerName \"YourSqlServer\" | Select-Object DatabaseName, Collation, Edition, ServiceObjectiveName\n    ```", "```\n     # List Azure App Services and their configurations\n    Get-AzWebApp | Select-Object Name, ResourceGroupName, Location, DefaultHostName\n    ```", "```\n     # Get web application configurations\n    $webAppName = \"YourWebAppName\"\n    (Get-AzWebApp -ResourceGroupName \"YourResourceGroup\" -Name $webAppName).SiteConfig\n    ```", "```\n     # List Azure Functions and their configurations\n    Get-AzFunctionApp | Select-Object Name, ResourceGroupName, Location, Kind\n    ```"]