- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using PowerShell in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delve into the strategic utilization of PowerShell to execute
    a comprehensive penetration test on Azure environments. PowerShell, a versatile
    scripting language, empowers penetration testers to analyze Azure’s intricate
    ecosystem, including Identity Management, Role-Based Access Control, Data Storage,
    SQL, Web Services, and more. From gathering detailed information on Azure resources
    to automating complex analyses, this chapter demonstrates how PowerShell is a
    key ally in identifying vulnerabilities, assessing security configurations, and
    fortifying Azure against potential threats. Harness the full potential of PowerShell
    to enhance the efficiency and efficacy of penetration testing in Azure, ensuring
    a robust and resilient cloud security posture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main topics to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure architecture and governance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity Management and Role-Based Access Control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Data Storage and permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and key vaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and Web Services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Azure** is the Microsoft Cloud computing platform. Azure is built around
    the concepts of Identity Management and Role-Based Access Control. Within Azure,
    we have various resources of various types that we can control. At the heart of
    Azure is the **Azure Active Directory**. This is used to perform Identity Management.
    Azure testing can be broken down into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessing Azure and reconnaissance**: This concerns accessing the Azure environment
    and starting to profile the Azure Tenancy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Investigating networks and DNS**: This involved profiling the Azure infrastructure
    to identify what systems have been deployed and how the network infrastructure
    has been configured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity Management and Role-Based Access Control**: This is concerned with
    profiling and identifying the weaknesses in the Identity Management deployed within
    the Azure Tenancy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examining storage**: This focuses on the analysis and vulnerability identification
    of the Storage Structures used within Azure Tenancy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual machines**: This focuses on the analysis and vulnerability identification
    of the virtual machines used within Azure Tenancy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure and SQL**: This concerns identifying and profiling the types of SQL
    systems used within Azure Tenancy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Key Vaults**: This examines how the key vaults used to store passwords
    for Azure have been configured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure architecture and governance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure architecture encompasses a comprehensive set of cloud computing services,
    building blocks, and resources designed to facilitate various applications and
    services’ development, deployment, and management. Microsoft Azure provides a
    flexible and scalable platform that supports diverse workloads, from simple web
    applications to complex enterprise solutions. Here’s an overview of key components
    within Azure’s architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Global data center presence**: Azure operates a vast network of data centers
    strategically distributed across the globe. This global presence ensures low-latency
    access to services and high availability for applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regions**: Azure is divided into geographical regions, each comprising multiple
    data centers. The regions are isolated from each other to provide redundancy and
    enable users to deploy resources in proximity to their target audience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Availability zones**: Azure offers availability zones within regions in the
    form of physically separate data centers with independent power, cooling, and
    networking. Deploying resources across availability zones enhances resiliency
    and fault tolerance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource groups**: Resource groups are logical containers that organize and
    manage related resources within Azure. Grouping resources simplifies management,
    monitoring, and the application of policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual networks**: Azure virtual networks allow users to create private,
    isolated networks within the Azure cloud. They facilitate the connection of resources,
    such as virtual machines and databases, while enabling control over network configurations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Machines** (**VMs**): Azure VMs provide scalable computing power
    in the cloud. Users can deploy and manage VMs running various operating systems
    tailored to their specific application needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Blob Storage**: Azure Blob Storage is a scalable and secure object
    storage solution for large amounts of unstructured data, such as documents, images,
    and videos. It offers different storage tiers to optimize costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure app service**: The Azure app service enables the deployment of web,
    mobile, and API applications without managing the underlying infrastructure. It
    supports various programming languages and frameworks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure SQL database**: The Azure SQL database is a fully managed relational
    database service that provides high availability, security, and scalability for
    applications requiring structured Data Storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Kubernetes Service** (**AKS**): For containerized applications, Azure
    offers AKS—a managed Kubernetes service. It simplifies the deployment, management,
    and scaling of containerized applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Active Directory** (**AAD**): Azure Active Directory is a cloud-based
    Identity and access management service. It provides authentication, authorization,
    and single sign-on capabilities, enhancing security and user management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Functions**: Azure Functions allow users to run event-triggered code
    without provisioning or managing servers. It supports serverless computing, enabling
    the efficient execution of small, isolated functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Security Center**: Azure Security Center provides advanced threat protection
    across all Azure resources. It monitors security configurations, identifies potential
    threats, and provides actionable insights to enhance security posture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure DevOps**: Azure DevOps is a set of development tools and services for
    building, testing, and deploying applications. It includes features such as version
    control, continuous integration, and release management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, Azure’s architecture provides a robust foundation for building
    and scaling applications in the cloud. With its diverse services, global infrastructure,
    and strong security features, Azure caters to the needs of a wide range of businesses
    and industries, enabling them to innovate and transform their IT landscape.
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell plays a crucial role in Azure governance, enabling administrators
    to efficiently manage, enforce policies, and maintain compliance across Azure
    resources. Here’s a detailed explanation with examples of how PowerShell can be
    utilized for governance within Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Policy enforcement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Policy allows you to enforce rules and standards across resources. PowerShell’s
    AzPolicy module provides cmdlets to work with Azure Policy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The PowerShell cmdlet **New-AzPolicyAssignment** is used to create a new policy
    assignment in Azure. The command you provided seems to be creating a new policy
    assignment named “**DenyResourceWithoutTags**” with the display name “**Deny Resources
    Without Tags**”. Here’s a breakdown of the parameters used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Specifies the name of the policy assignment. In this case, it’s “**DenyResourceWithoutTags**”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DisplayName**: Specifies the display name for the policy assignment. This
    is the name that will be shown in Azure Portal and other interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scope**: Specifies the scope at which the policy assignment will be applied.
    In this example, it’s set to a subscription-level scope: **(/subscriptions/{subscriptionId})**.
    You need to replace **{subscriptionId}** with the actual subscription ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PolicyDefinitionReferenceId**: Specifies the ID of the policy definition
    to be assigned. This references an existing policy definition. The value should
    be in the format **/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionId}**.
    You need to replace **{policyDefinitionId}** with the actual ID of the policy
    definition you want to assign.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EnforcementMode**: Specifies the enforcement mode for the policy assignment.
    In this case, it’s set to **DoNotEnforce**, which means the policy is created
    but not enforced. This is useful for testing or rolling out policies gradually.
    The possible values for enforcement mode are **Default**, **DoNotEnforce**, and
    **Enforce**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role-based access control (RBAC)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell’s AzRole module helps manage RBAC assignments, ensuring proper permissions
    for users or applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Resource tagging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enforcing resource tagging enhances organization and cost management. PowerShell
    can be used to automate tagging processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Resource locking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prevent the accidental deletion or modification of critical resources by using
    PowerShell to apply resource locks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Azure blueprint deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define and deploy Azure Blueprints, which contain templates for resources,
    policies, and RBAC assignments, ensuring consistent governance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Compliance reporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to generate compliance reports, providing insights into
    the adherence of resources to organizational policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In summary, PowerShell in Azure governance empowers administrators to automate
    policy enforcement, manage access control, implement resource tagging, apply locks,
    deploy blueprints, and generate compliance reports. This ensures a well-organized,
    secure, and compliant Azure environment aligned with organizational standards.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our goal in this section is to describe how PowerShell can be used to connect
    a query with a resource within Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Install and import the Azure PowerShell module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before diving into reconnaissance, installing and importing the Azure PowerShell
    module is essential. This module provides cmdlets designed explicitly for interacting
    with Azure resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Authenticate and connect to Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Authenticate and connect to your Azure subscription to access the resources
    within the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have connected to an Azure Tenancy, we can query it to ensure it is
    correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Networking in Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our goal in this section is to describe how PowerShell can be used with Azure
    to perform network reconnaissance and profiling as part of a penetration test.
    Our goal is to use this information to construct a network map. Once we have a
    public IP address and name, we can start to use nslookup to explore the type of
    DNS services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'From the analysis of the DNS names, we can identify the type of service. The
    following table lists the available DNS suffixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **DNS Suffix** | **Associated** **Azure Service** |'
  prefs: []
  type: TYPE_TB
- en: '| file.core.windows.net | Storage accounts – Files |'
  prefs: []
  type: TYPE_TB
- en: '| blob.core.windows.net | Storage accounts – Blobs |'
  prefs: []
  type: TYPE_TB
- en: '| azurewebsites.net | App Service and Functions App |'
  prefs: []
  type: TYPE_TB
- en: '| scm.azurewebsites.net | App Services – Management |'
  prefs: []
  type: TYPE_TB
- en: '| database.windows.net | Databases – MSSQL |'
  prefs: []
  type: TYPE_TB
- en: '| documents.azure.com | Databases – Cosmos DB |'
  prefs: []
  type: TYPE_TB
- en: '| cloudapp.azure.com | Customer – Assigned public IP DNS |'
  prefs: []
  type: TYPE_TB
- en: '| vault.azure.net | Key Vault |'
  prefs: []
  type: TYPE_TB
- en: '| azurecontainer.io | Container instances |'
  prefs: []
  type: TYPE_TB
- en: '| azurecr.io | Container registry |'
  prefs: []
  type: TYPE_TB
- en: Table 12.1 – List of available DNS suffixes
  prefs: []
  type: TYPE_NORMAL
- en: Resource discovery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by discovering Azure resources using the **Get-AzResource** cmdlet. This
    provides information about various resources, including virtual machines, databases,
    and networking components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Virtual network enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand the network structure, use the **Get-AzVirtualNetwork** cmdlet.
    This retrieves details about virtual networks, including subnets and associated
    resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Subnet analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dig deeper into subnet configurations within virtual networks to identify IP
    address ranges and the associated resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Network security group exploration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Examine **Network Security Groups** (**NSGs**) using **Get-AzNetworkSecurityGroup**.
    NSGs act as firewalls, controlling traffic to and from resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Public IP address enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identify the public IP addresses associated with resources to understand potential
    external-facing points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Azure Active Directory (AAD) reconnaissance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Understand the Identity landscape using AAD commands. This includes retrieving
    information about users, groups, and applications. The **Get-AzureADUSer** command
    retrieves users from the AAD (Entra):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Service principal enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identify service principals, which are used for authenticating Azure services,
    by using **Get-AzADServicePrincipal**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Constructing the network map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the collected information, you can start building a network map. Use tools
    such as Graphviz to visualize the relationships between different resources, subnets,
    and security groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: After generating the DOT file, you can use Graphviz tools to convert it into
    a visual representation, providing a comprehensive network map.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell and Azure cmdlets offer penetration testers a robust toolkit for
    network reconnaissance and profiling in Azure environments. You can construct
    a detailed network map by collecting information about resources, virtual networks,
    security configurations, and Identity components. This map is valuable for understanding
    the Azure landscape, identifying potential attack surfaces, and making informed
    decisions during a penetration test. Always ensure proper authorization and adhere
    to ethical guidelines when conducting penetration tests in any environment.
  prefs: []
  type: TYPE_NORMAL
- en: Identity Management and Role-Based Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing involves assessing the security of a system, and PowerShell
    is a valuable tool for analyzing **Identity Management** (**IDM**) and **Role-Based
    Access Control** (**RBAC**) in Azure environments. With its extensive set of cmdlets,
    PowerShell allows penetration testers to gather information, identify potential
    vulnerabilities, and simulate scenarios to evaluate the security posture of an
    Azure environment.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information about users and Identity Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can retrieve detailed information about users and their attributes
    AAD. The **Get-AzADUser** cmdlet is a powerful tool for this task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This command fetches information such as display name, user principal name,
    user type, and object ID for all users in Azure AD. Penetration testers can use
    this data to identify privileged accounts and potential targets for exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring RBAC assignments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell facilitates the examination of RBAC assignments, enabling penetration
    testers to understand who has access to what resources. The **Get-AzRoleAssignment**
    cmdlet retrieves information about role assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command displays the display name, sign-in name, and role definition name
    for each role assignment within the specified subscription. It helps testers identify
    users with elevated privileges and understand the overall RBAC configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing access control settings for resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can review access control settings to assess the effectiveness of
    RBAC configurations for specific resources. The **Get-AzRoleDefinition** cmdlet
    provides details about built-in roles and their permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command fetches information about the “**Contributor**” role, including
    its name, description, and the actions it permits. Penetration testers can use
    this information to evaluate the impact of specific role assignments and identify
    potential security risks.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying RBAC assignments for simulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell allows penetration testers to simulate scenarios by modifying RBAC
    assignments. The **New-AzRoleAssignment** cmdlet can be used to create temporary
    assignments for testing purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This command assigns the “**Reader**” role to a specific user for the specified
    subscription. Testers can use this capability to assess the impact of changes
    to RBAC configurations without affecting the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Identity Management and RBAC analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell scripts can be written to automate the analysis of Identity Management
    and RBAC. For example, a script could iterate through users and their roles, generate
    reports, and highlight anomalies or potential security issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This script iterates through all users, retrieves their role assignments, and
    outputs relevant information. Automation can significantly enhance the efficiency
    of the penetration testing process.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell is an invaluable tool for penetration testers when analyzing Identity
    Management and RBAC in Azure environments. By leveraging its capabilities, testers
    can gather information, evaluate configurations, and simulate scenarios to effectively
    identify and address security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Data Storage and permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PowerShell is a powerful tool for penetration testers to analyze Identity and
    Data Storage permissions in Azure environments. In a penetration test scenario,
    understanding and scrutinizing Azure Data Storage and associated permissions is
    crucial for identifying potential security vulnerabilities. Here’s how PowerShell
    can be employed for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Azure Data Storage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure offers various storage services, such as Blob Storage, Table Storage,
    and Queue Storage. PowerShell can gather information about these services, configurations,
    and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This script lists all Azure storage accounts and their associated containers,
    providing a starting point for penetration testers to analyze Data Storage configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating data permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell enables testers to examine permissions and access the control settings
    associated with Azure Data Storage. Understanding who has access to the data and
    what level of permissions they possess is critical for identifying potential security
    risks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves and displays the **Access Control Lists** (**ACLs**) for
    a specific Blob Container, providing insights into who has access and what level
    of access they have.
  prefs: []
  type: TYPE_NORMAL
- en: Checking RBAC settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure uses RBAC to manage access to resources, including Data Storage. PowerShell
    can be employed to review RBAC assignments and configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This script provides information about the role assignments associated with
    the specified storage account, helping testers identify users with elevated privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing data security with Azure Key Vault
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure Key Vault is often used to securely store and manage sensitive information,
    such as storage account keys. PowerShell can interact with Azure Key Vault and
    assess the security of key management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This script fetches and displays secrets stored in the specified Azure Key Vault,
    allowing testers to identify sensitive information that may impact the security
    of Azure Data Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Data Storage and permissions analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell scripts can be written to automate the analysis of Azure Data Storage
    and the associated permissions. These scripts can iterate through storage accounts,
    containers, and access settings, providing comprehensive insights into the security
    landscape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This script automates retrieving and analyzing information about all Azure storage
    accounts, streamlining the penetration testing workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, PowerShell proves to be a versatile and efficient tool for penetration
    testers when analyzing Identity and Data Storage permissions in Azure. By leveraging
    its capabilities, testers can gather information, assess configurations, and identify
    the potential security risks associated with Azure Data Storage. Automation further
    enhances the effectiveness of penetration testing, allowing for a thorough examination
    of Azure resources in a scalable and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Azure and SQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell is a powerful tool for penetration testers to analyze the Identity
    and SQL components within Azure environments. Azure Identity services, such as
    AAD and SQL databases, are crucial in securing and managing access to resources.
    Here’s how PowerShell can be employed for analyzing Identity in Azure and SQL
    in Azure during a penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Azure Identity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving user information: PowerShell can fetch information about users in
    Azure Active Directory, providing insights into potential targets for exploitation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command fetches details such as display name, user principal name, user
    type, and object ID for all users in Azure AD. Penetration testers can analyze
    this data to identify privileged accounts or potential attack points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Examining service principals: Service principals represent non-human accounts
    that are often used for automation tasks. PowerShell allows testers to investigate
    service principals and their permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command lists service principals, providing details about their display
    names, service principal names, application IDs, and object types. Testers can
    scrutinize these details to identify potential security risks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Analyzing Azure SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving SQL server information: PowerShell enables testers to gather information
    about Azure SQL servers, including their configurations and associated databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command lists details such as SQL server name, resource group, location,
    and version. Testers can use this information to assess the SQL server’s configuration
    and potential security risks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Examining database permissions: PowerShell can analyze permissions within Azure
    SQL databases, helping testers identify users with elevated privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script retrieves information about Active Directory administrators for
    a specific SQL database. It provides details such as display and sign-in names,
    helping testers identify users with administrative roles.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Auditing SQL database activity: PowerShell can enable and review auditing settings
    for Azure SQL databases, helping testers track and analyze database activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command enables auditing for successful and failed database authentications.
    Testers can then review audit logs to analyze user activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Automating Identity and SQL analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell scripts can automate the analysis of Azure Identity and SQL components.
    These scripts can be iterated through users, service principals, SQL servers,
    and databases, providing a comprehensive overview of the security landscape.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, PowerShell proves to be an indispensable tool for penetration testers
    when analyzing Identity in Azure and SQL in Azure. By utilizing its capabilities,
    testers can gather information, scrutinize configurations, and identify the potential
    security risks associated with Azure Identity services and SQL databases. Automation
    further streamlines the penetration testing process, allowing for a thorough examination
    of Azure resources in a scalable and efficient manner. Here’s how you can leverage
    PowerShell for testing Azure and Key Vaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Resource Management**: PowerShell provides cmdlets to interact with
    Azure resources, allowing you to test resource provisioning, configuration, and
    management. For instance, you can use cmdlets such as **New-AzResourceGroup**,
    **New-AzStorageAccount**, and **New-AzVM** to create resource groups, storage
    accounts, and virtual machines, respectively. You can then validate if the resources
    are created correctly using cmdlets such as **Get-AzResource**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Key Vault management**: PowerShell offers cmdlets for managing Azure
    Key Vaults, enabling you to test access policies, key management, and secrets.
    For example, you can use **New-AzKeyVault**, **Set-AzKeyVaultAccessPolicy**, and
    **Set-AzKeyVaultSecret** to create a Key Vault, set access policies, and store
    secrets, respectively. You can verify the existence of secrets and keys using
    **Get-AzKeyVaultSecret** and **Get-AzKeyVaultKey**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing Azure Functions with PowerShell**: Azure Functions can be tested
    and managed using PowerShell scripts. You can use the **New-AzFunctionApp** cmdlet
    to create a new Function App and **Publish-AzWebapp** to deploy your function
    code. Then, you can test the function by triggering it with sample input data
    and validating the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration testing Azure APIs**: PowerShell can be utilized for the integration
    testing of Azure APIs. By using cmdlets such as **Invoke-RestMethod**, you can
    make HTTP requests to Azure REST APIs and validate responses. For example, you
    can test Azure resource manager APIs by sending requests to manage Azure resources
    programmatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated testing of Azure Policies**: PowerShell scripts can be employed
    to test Azure Policies. You can use cmdlets such as **New-AzPolicyDefinition**
    to define policies, **Test-AzPolicyAssignment** to evaluate policy compliance,
    and **Get-AzPolicyEvent** to retrieve policy evaluation results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure and key vaults
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell is a powerful scripting language and command line shell that can
    be instrumental in analyzing Azure resources and Key Vaults during a penetration
    test. Azure services, such as **Azure Resource Manager** (**ARM**) and Azure Key
    Vault, are critical components that store sensitive information. Here’s how PowerShell
    can be employed to analyze Azure and Key Vaults in Azure during penetration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Azure resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving information about Azure resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell can retrieve detailed information about various Azure resources,
    including virtual machines, storage accounts, and networking components:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command lists the virtual machines in a specified resource group, displaying
    details such as VM name, resource group, location, and power state. Penetration
    testers can analyze this information to identify potential targets for exploitation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Examining **Network Security Groups** (**NSGs**) rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Network Security Groups control inbound and outbound traffic to Azure resources.
    PowerShell enables testers to review NSGs rules for potential security risks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script fetches and displays inbound NSGs rules for a specific subnet, providing
    insights into the configured security policies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Analyzing Azure Key Vaults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving Key Vault secrets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell can retrieve and analyze the secrets stored in Azure Key Vaults,
    helping testers identify sensitive information that may impact security:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command fetches and displays details about secrets in the specified Azure
    Key Vault, including their name, version, and whether they are enabled. Penetration
    testers can use this information to assess the security of stored secrets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Auditing Key Vault access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell enables testers to audit access to Key Vaults, providing insights
    into who accessed the Key Vault and when:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command enables various security features, including auditing, for an Azure
    Key Vault. Testers can then review audit logs to analyze access patterns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Automating the analysis of Azure resources and Key Vaults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell scripts can automate the Azure resources and Key Vaults analysis.
    These scripts can iterate through various resource types, Key Vaults, and configurations,
    providing comprehensive insights into the security landscape.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, PowerShell is a valuable tool for penetration testers when analyzing
    Azure resources and Key Vaults. By leveraging its capabilities, testers can gather
    information, scrutinize configurations, and identify potential security risks
    associated with Azure services and stored secrets. Automation further streamlines
    the penetration testing process, enabling a thorough examination of Azure resources
    and Key Vaults in a scalable and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Azure and virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic method that Azure uses to develop a service is that of a virtual
    machine. We can query an Azure Tenancy to identify all associated VM machines.
    By using the **Get-AzVM** command, we can get a list of all the VM machines associated
    with the tenancy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the **Get-AzVM** command to query the virtual machines by name and
    by location as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we know the names of all the virtual machines within a tenancy, we can
    query the tenancy and extract the public IP address for a virtual machine. We
    achieve this as follows. Then, once we have identified all public IP addresses
    associated with a tenancy, we can start to attack/probe these IP addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once we have identified the IP addresses that we can use to access Microsoft
    Azure, we can start to make use of the various features that it provides.
  prefs: []
  type: TYPE_NORMAL
- en: Azure and Web Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PowerShell is a versatile tool for penetration testers to analyze Azure resources
    and Web Services as part of a comprehensive security assessment. Azure, Microsoft’s
    cloud computing platform, hosts a wide range of services, and penetration testers
    can leverage PowerShell to assess the security of these services. Here’s a detailed
    guide on how PowerShell can be utilized for analyzing Azure resources and Web
    Services during a penetration test:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Azure resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving information about Azure resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell can gather information about various Azure resources, such as virtual
    machines, storage accounts, and databases:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command fetches details such as VM name, resource group, location, and
    power state. It provides insights into the current state of virtual machines,
    helping penetration testers identify potential targets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Analyzing storage accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell allows testers to examine storage accounts and associated configurations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script lists storage accounts along with details such as account name,
    resource group, location, and account type. It aids testers in assessing the security
    posture of Azure Storage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Investigating Azure databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For databases hosted in Azure, PowerShell can provide information on their
    configurations and settings:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command retrieves details such as database name, collation, edition, and
    service objective. Testers can use this information to assess the security configurations
    of Azure SQL databases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Analyzing Web Services in Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieving information about Azure App Services:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure App Services host web applications and APIs. PowerShell allows testers
    to fetch details about these services:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command lists Azure App Services, including details such as service name,
    resource group, location, and default hostname. It provides insights into the
    web applications hosted in Azure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Analyzing web application configurations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'PowerShell can be used to retrieve configurations and settings for web applications
    hosted on Azure App Services:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This script fetches the site configuration for a specific web application, including
    the settings related to authentication, CORS, and other security-related parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Investigating Azure Functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure Functions provide serverless computing capabilities. PowerShell can help
    testers analyze the configurations of Azure Functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command lists Azure Functions, providing details such as function app name,
    resource group, location, and kind. Testers can use this information to assess
    serverless components.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Automating the analysis of Azure resources and Web Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PowerShell scripts can be written to automate the analysis of Azure resources
    and Web Services. Automation enhances efficiency and allows penetration testers
    to scale their assessments.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, by leveraging PowerShell capabilities, testers can gather detailed
    information, scrutinize configurations, and identify any potential security risks
    associated with Azure services and hosted web applications. Automation further
    streamlines the penetration testing process, enabling a thorough examination of
    Azure resources and Web Services in a scalable and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the pivotal role of PowerShell in conducting a
    penetration test on Azure. By leveraging PowerShell’s capabilities, we navigated
    through Azure’s multifaceted landscape, dissecting Identity Management, Role-Based
    Access Control, Data Storage, SQL, and Web Services. By employing PowerShell scripts,
    testers gained granular insights into Azure resources, executed automated analyses,
    and identified potential security vulnerabilities. The chapter emphasized the
    importance of cross-service analysis and showcased PowerShell’s efficiency in
    fortifying Azure against cyber threats.
  prefs: []
  type: TYPE_NORMAL
- en: With this comprehensive exploration, you are equipped to harness PowerShell’s
    prowess for effective penetration testing, ensuring a resilient and secure Azure
    environment.
  prefs: []
  type: TYPE_NORMAL
