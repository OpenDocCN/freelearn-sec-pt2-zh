- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-Exploitation in Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delve into the powerful realm of post-exploitation using
    PowerShell in the Microsoft Windows environment. Post-exploitation is a critical
    phase where adversaries aim to maintain control, escalate privileges, and extract
    valuable information after breaching a system. Harnessing the robust capabilities
    of PowerShell, we explore advanced techniques for navigating Windows networks,
    manipulating permissions, and concealing activities. From privilege escalation
    and lateral movement to data exfiltration and covering tracks, PowerShell serves
    as a versatile toolset for both defenders and attackers. Join us as we unravel
    the intricacies of post-exploitation, demonstrating how PowerShell scripts can
    be strategically employed to simulate real-world threats and enhance our understanding
    of Windows security landscapes. Through detailed examples and practical insights,
    this chapter equips you with the knowledge to assess, defend, and strategically
    navigate the post-exploitation phase in Microsoft Windows environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the main topics to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The role of post-exploitation in Microsoft Windows on a penetration test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation on Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell on Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File permissions in Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PowerShell for privilege escalation on Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of post-exploitation in Microsoft Windows on a penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation is a critical phase in a penetration test, especially when
    targeting Microsoft Windows environments. This phase occurs after an attacker
    has successfully breached a system or network, gaining unauthorized access. The
    primary objective during post-exploitation is to maintain control, escalate privileges,
    and gather valuable information without triggering detection mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: One crucial aspect of post-exploitation on Microsoft Windows is understanding
    the operating system’s architecture and security mechanisms. Windows environments
    often have multiple interconnected systems, making lateral movement a key focus.
    Attackers aim to traverse the network, escalating privileges to gain greater control
    over resources.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation is a common goal during post-exploitation. Windows systems
    typically operate with different user accounts, each with varying permissions.
    Exploiting vulnerabilities to elevate privileges allows attackers to access sensitive
    data, install malicious software, or manipulate system configurations. Tools such
    as Mimikatz frequently extract and leverage credentials stored in memory, facilitating
    privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining persistence is another crucial aspect of post-exploitation. Attackers
    seek to ensure continued access to compromised systems even after initial exploitation.
    Techniques such as backdoors, scheduled tasks, or registry modifications are commonly
    employed to establish persistence. This ensures that even if the initial point
    of entry is discovered and patched, the attacker can still regain access.
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration is a significant concern during post-exploitation. Once inside
    a network, attackers may target sensitive information such as intellectual property,
    customer data, or login credentials. Various tools and techniques, including covert
    channels and encrypted communication, are utilized to exfiltrate data without
    raising suspicion.
  prefs: []
  type: TYPE_NORMAL
- en: During post-exploitation, security professionals must emulate real-world adversaries
    to assess the effectiveness of defenses and incident response capabilities. Red
    teamers often use tools such as Cobalt Strike or Metasploit to simulate advanced
    persistent threats, testing the organization’s ability to detect and respond to
    sophisticated attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation also involves thorough reconnaissance. Attackers aim to gather
    intelligence about the network, its architecture, and the roles of different systems
    and users. This information helps in making informed decisions about further exploitation
    and lateral movement.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, post-exploitation is a critical phase in a penetration test focused
    on Microsoft Windows environments. It involves privilege escalation, persistence,
    data exfiltration, and reconnaissance to simulate real-world threats, providing
    valuable insights into an organization’s security posture and identifying areas
    for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell, a powerful scripting language and shell developed by Microsoft,
    is often leveraged during post-exploitation activities on the Microsoft Windows
    platform. Its flexibility, integration with Windows components, and ability to
    execute commands and scripts make it a preferred choice for attackers.
  prefs: []
  type: TYPE_NORMAL
- en: There are also frameworks that support post-exploitation. PowerShell Empire
    is a post-exploitation framework that provides a range of tools and modules for
    performing post-exploitation activities on Windows systems.
  prefs: []
  type: TYPE_NORMAL
- en: The following are detailed examples of how PowerShell can be used for various
    post-exploitation tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to check for privilege escalation opportunities. For
    instance, the following PowerShell command checks for the current user’s privileges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command reveals information about the current user, including their group
    memberships and privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Credential dumping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell is commonly used to dump credentials from memory. The following
    example demonstrates the use of the **Mimikatz** PowerShell module, which is a
    popular tool for credential extraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script imports the **Mimikatz** module and executes the **Invoke-Mimikatz**
    cmdlet to dump credentials from memory.
  prefs: []
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed to establish persistence on a compromised system.
    For example, the following script adds a registry entry to execute a PowerShell
    script at system startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This script creates a registry key that ensures the execution of a PowerShell
    script every time the user logs in.
  prefs: []
  type: TYPE_NORMAL
- en: Lateral movement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell’s ability to execute commands remotely makes it valuable for lateral
    movement within a network. The following example uses PowerShell remoting to execute
    a command on a remote machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, PowerShell remoting is enabled on the target machine, and then
    a command (**Get-Process**) is executed remotely. It should be noted that many
    cmdlets support the **-ComputeName** parameter. This allows for the remote execution
    of the specific command on the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed for data exfiltration using various techniques.
    One standard method is to encode data into Base64 and send it over the network.
    The following script demonstrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This script encodes the **SensitiveData** string into Base64 and sends it to
    an attacker-controlled server.
  prefs: []
  type: TYPE_NORMAL
- en: Covering tracks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can also cover its tracks by deleting logs or modifying event entries.
    The following example demonstrates the removal of event logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This script clears the security event log, removing traces of activities.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, PowerShell is a versatile tool for post-exploitation on the Microsoft
    Windows platform. It enables attackers to escalate privileges, dump credentials,
    establish persistence, move laterally, exfiltrate data, and cover tracks. Defenders
    should be vigilant in monitoring PowerShell activities and implementing security
    measures to mitigate the risks associated with its misuse.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell on Microsoft Windows involves gathering detailed
    information about the user’s activities, permissions, and system interactions.
    This process is crucial for security professionals performing penetration tests
    and attackers seeking to exploit vulnerabilities. The following are examples of
    how PowerShell can be used to profile a user on a Windows system.
  prefs: []
  type: TYPE_NORMAL
- en: User information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can retrieve detailed information about a user, including their
    account properties and group memberships. The following example demonstrates how
    to gather user information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves information about the currently logged-in user, including
    properties such as username, full name, and group memberships.
  prefs: []
  type: TYPE_NORMAL
- en: Running processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiling involves understanding the processes a user is running. PowerShell
    allows the retrieval of running processes and associated details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command provides information about processes, including the username associated
    with each process.
  prefs: []
  type: TYPE_NORMAL
- en: Network connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiling includes examining network connections established by a user. PowerShell
    can be used to retrieve information about active network connections about processes
    owners by a specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies active network connections associated with processes
    owned by the current user.
  prefs: []
  type: TYPE_NORMAL
- en: File and directory access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiling involves understanding a user’s file and directory access. PowerShell
    can be used to list files and directories a user has access to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This command lists files and directories in the user’s home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Installed software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell allows querying installed software on a system, providing insights
    into the tools and applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves a list of installed software associated with the current
    user.
  prefs: []
  type: TYPE_NORMAL
- en: Recent activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiling involves understanding a user’s recent activities. PowerShell can
    query event logs to gather information about when a user logs in, when system
    changes occur, and other relevant events. In the following snippet, we will focus
    on when a user logs in and logs out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves recent security events related to the current user, such
    as successful logins and logouts.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, profiling a user with PowerShell on Microsoft Windows involves using
    various cmdlets and commands to gather information about the user’s account, running
    processes, network connections, file access, installed software, and recent activities.
    This comprehensive approach helps security professionals assess user behaviors
    and identify potential security risks.
  prefs: []
  type: TYPE_NORMAL
- en: File permissions in Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: File permissions in Microsoft Windows play a crucial role in controlling access
    to files and folders, ensuring data security and integrity. Understanding how
    to manage and manipulate file permissions is essential for system administrators,
    security professionals, and users. The following sections are detailed examples
    illustrating how file permissions work in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can view the existing file permissions on a file or folder. The
    following example shows how to retrieve the current permissions for a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This script uses the **Get-Acl** cmdlet to retrieve the **Access Control List**
    (**ACL**) for the specified file and then formats the output for better readability.
  prefs: []
  type: TYPE_NORMAL
- en: Granting file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell enables users to grant specific permissions to users or groups.
    The following example demonstrates how to grant read and execute permissions to
    a specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This script creates a new access rule, specifying the user, the type of permission
    (**ReadAndExecute**), and whether to allow or deny the permission. The rule is
    then added to the file’s ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Existing file permissions can be modified using PowerShell. The following example
    shows how to add write permissions to an existing user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves the current ACL, disables inheritance and protection,
    adds a new access rule for write permission, and then applies the modified ACL
    to the file.
  prefs: []
  type: TYPE_NORMAL
- en: Revoking file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to revoke or remove file permissions. The following
    example demonstrates how to remove read permissions from a specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this script, the existing access rule for the specified user and read permission
    is identified and removed from the ACL.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and effectively managing file permissions in Windows is critical
    for maintaining a secure and organized filesystem. PowerShell provides a powerful
    and scriptable interface for performing these tasks efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Using PowerShell for privilege escalation on Microsoft Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Privilege escalation is a critical aspect of penetration testing and security
    assessment. PowerShell, a powerful scripting language in the Windows environment,
    can be used for various privilege escalation techniques. The following are detailed
    examples illustrating how PowerShell can be employed for privilege escalation
    on Microsoft Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the current user’s privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before attempting privilege escalation, it’s crucial to understand the current
    user’s privileges. PowerShell can be used to retrieve detailed information about
    the current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This command provides extensive information about the current user, including
    group memberships and privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating local administrators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identifying local administrators is a common step in privilege escalation.
    PowerShell allows for the enumeration of local administrators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This command lists the members of the **Administrators** group, helping identify
    users with elevated privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting unquoted service paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some services on Windows may have unquoted paths, allowing an attacker to manipulate
    the service execution path and potentially escalate privileges. PowerShell can
    be used to identify such services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies services with unquoted paths, which could be exploited
    for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting insecure service permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, service configurations may have insecure permissions, allowing
    modification by non-privileged users. PowerShell can be used to identify and exploit
    such misconfigurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This script checks the permissions of services in the registry and alerts if
    any have weak permissions that could be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: DLL hijacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DLL hijacking involves replacing a legitimate DLL with a malicious one, which
    can lead to privilege escalation when a process loads that DLL. PowerShell can
    be used to identify potential DLL hijacking opportunities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This script checks each running process for potential DLL hijacking opportunities
    and alerts if any are found. We can also use the **PowerSploit** module for code
    execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Invoke-DllInjection**: Injects a DLL into the process ID of your choosing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoke-ReflectivePEInjection**: Reflectively loads a Windows PE file (DLL/EXE)
    into the PowerShell process or reflectively injects a DLL into a remote process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoke-Shellcode**: Injects shellcode into the process ID of your choosing
    or within PowerShell locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoke-WmiCommand**: Executes a PowerShell ScriptBlock on a target computer
    and returns its formatted output using WMI as a C2 channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registry manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to manipulate registry settings related to user privileges.
    For example, modifying the **AlwaysInstallElevated** registry key can lead to
    privilege escalation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This script creates the necessary registry path and sets the **AlwaysInstallElevated**
    key to **1**, which can lead to the installation of packages with elevated privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting weak folder permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Weak folder permissions can be exploited for privilege escalation. PowerShell
    can be used to identify folders with insecure permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This script searches for folders with weak permissions (modify rights for **Users**)
    and alerts if any are found.
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled task exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Windows scheduled tasks can be manipulated for privilege escalation. PowerShell
    can be used to identify and modify scheduled tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies scheduled tasks running as **SYSTEM** and alerts if any
    are found, providing an opportunity for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting unattended installations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unattended installations may contain sensitive information such as passwords
    in unencrypted files. PowerShell can be used to search for such files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This script searches for **unattend.xml** files recursively and alerts if any
    potentially containing sensitive information are found.
  prefs: []
  type: TYPE_NORMAL
- en: These examples showcase how PowerShell can be employed for privilege escalation
    on Microsoft Windows systems. However, it’s essential to note that these techniques
    should only be used in ethical hacking or penetration testing scenarios within
    legal and authorized environments. Unauthorized privilege escalation attempts
    are illegal and can have severe consequences. Security professionals and administrators
    should actively monitor and secure systems to prevent vulnerabilities and unauthorized
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the dynamic landscape of post-exploitation using
    PowerShell in Microsoft Windows. Emphasizing the significance of this phase in
    security assessments, we navigated through privilege escalation, lateral movement,
    and data exfiltration techniques, all powered by the versatility of PowerShell
    scripting. From uncovering weak permissions and exploiting service configurations
    to manipulating the registry and covering tracks, PowerShell emerged as a central
    tool for ethical hackers and defenders. The chapter provided a comprehensive overview
    of how PowerShell facilitates sophisticated post-exploitation maneuvers, enabling
    users to simulate and understand real-world threats. By employing detailed examples,
    the chapter equipped readers with the skills to assess and fortify Windows security,
    ensuring a holistic understanding of post-exploitation dynamics and the role of
    PowerShell in navigating and securing complex Windows environments.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the potent synergy between PowerShell and
    Linux in the realm of post-exploitation.
  prefs: []
  type: TYPE_NORMAL
