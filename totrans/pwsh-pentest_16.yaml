- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-Exploitation in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the potent synergy between PowerShell and Linux
    in the realm of post-exploitation. In a landscape traditionally dominated by native
    Linux tools, PowerShell’s cross-platform adaptability emerges as a game-changer,
    providing security professionals with a versatile toolkit for post-exploitation
    maneuvers. This chapter delves into the strategic utilization of PowerShell to
    navigate and manipulate Linux environments post-breach.
  prefs: []
  type: TYPE_NORMAL
- en: As we embark on this journey, we’ll uncover PowerShell’s role in privilege escalation,
    lateral movement, and data exfiltration within Linux systems. From profiling users
    and manipulating file permissions to exploiting vulnerabilities, each facet of
    post-exploitation is dissected through detailed worked examples, demonstrating
    PowerShell’s effectiveness in simulating real-world threats.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are an ethical hacker seeking to understand and simulate potential
    risks or a defender looking to fortify your Linux environment, this chapter equips
    you with actionable insights. Join us in unraveling the dynamic interplay between
    PowerShell and Linux in the post-exploitation phase as we navigate the complexities
    of security landscapes, empowering you to strategically assess, defend, and respond
    to the challenges posed by post-exploitation scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the topics to be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The role of post-exploitation in Linux on a penetration test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-exploitation on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell in Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File permissions in Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PowerShell for privilege escalation in Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The role of post-exploitation in Linux on a penetration test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post-exploitation is a crucial phase in a penetration test on Linux systems,
    where security professionals assess the extent of access gained and exploit opportunities
    to establish persistence, escalate privileges, and gather valuable information.
    This phase occurs after an initial breach, allowing testers to simulate real-world
    attack scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: One primary objective of post-exploitation in Linux is to achieve and maintain
    persistence. Attackers seek to establish a lasting presence on the compromised
    system, ensuring continued access even after initial detection and remediation
    attempts. This can involve creating backdoors, modifying startup scripts, or installing
    malicious services.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation is another key focus during post-exploitation. Linux systems
    operate with various user accounts, each assigned specific privileges. Testers
    aim to escalate their privileges to gain access to sensitive data, manipulate
    configurations, or execute critical system commands. Techniques may include exploiting
    vulnerabilities or misconfigurations or leveraging weakly protected services.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering plays a pivotal role in post-exploitation. Testers aim
    to collect valuable data about the compromised system, such as user accounts,
    network configurations, and running processes. Tools such as **ps**, **netstat**,
    and custom scripts are often employed to extract this information, aiding in the
    reconnaissance of the targeted environment.
  prefs: []
  type: TYPE_NORMAL
- en: Linux post-exploitation involves lateral movement within the network. Once inside
    a system, testers seek to traverse through interconnected systems to explore the
    broader network. Techniques such as SSH tunneling, port forwarding, and pivoting
    are employed to move laterally and identify additional targets for exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration is a critical concern during post-exploitation. Testers simulate
    the extraction of sensitive information, such as user credentials or confidential
    files, to assess the effectiveness of security controls. Tools such as **scp**,
    **rsync**, or custom scripts may transfer data to external servers controlled
    by the tester.
  prefs: []
  type: TYPE_NORMAL
- en: Covering tracks is an essential aspect of post-exploitation in Linux. Testers
    aim to erase or manipulate logs and other traces of their activities to avoid
    detection. This involves modifying log files, clearing command histories, and
    disabling or evading auditing mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation in Linux is often conducted using manual techniques and automated
    tools. Common tools include Metasploit, Empire, and various scripting languages
    such as Python or Bash. Security professionals need to understand Linux system
    internals, file structures, and security mechanisms to navigate and manipulate
    the environment during post-exploitation effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, post-exploitation in Linux on a penetration test involves establishing
    persistence, escalating privileges, gathering information, lateral movement, data
    exfiltration, and covering tracks. Security professionals employ various techniques
    and tools to simulate real-world attacks, helping organizations identify and address
    vulnerabilities in their Linux-based systems.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell is primarily associated with Windows environments, and its functionality
    on Linux is limited. However, with the introduction of PowerShell Core (now known
    as PowerShell 7), a cross-platform version of PowerShell, it has become possible
    to use PowerShell for post-exploitation on Linux. Although PowerShell on Linux
    doesn’t have the same extensive functionality as Windows, it can still be utilized
    for specific tasks during post-exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing persistence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Linux, persistence can be achieved by setting up a cron job to execute a
    PowerShell script at regular intervals. Here’s an example of a basic cron job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The **persistence.ps1** PowerShell script can contain code for maintaining access
    or setting up backdoors.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can be used to check for potential privilege escalation
    opportunities. One common method is to identify processes running with elevated
    privileges. Here’s an example script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This script lists processes running with elevated privileges, helping identify
    potential targets for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating users and groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can be used to gather information about users and groups.
    An example is listing all users and their group memberships:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves information about local users and their group memberships.
  prefs: []
  type: TYPE_NORMAL
- en: Network enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can help enumerate network information. An example is listing
    network interfaces and their configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This script provides information about network interfaces, IP addresses, and
    prefix lengths. We can also use the following to capture IP address information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: File and directory enumeration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can gather information about files and directories on the Linux
    system. An example is listing files in the **/****etc** directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This script enumerates files and directories within the specified path.
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can be used to exfiltrate data. An example is encoding
    a file in Base64 and sending it to an external server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This script encodes the content of a file in Base64 and sends it to an attacker-controlled
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Covering tracks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can cover tracks by modifying or deleting logs. An example
    is clearing Bash history:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This script removes the command history, helping to cover tracks by erasing
    executed command records.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that using PowerShell on Linux for post-exploitation
    may not be as familiar or powerful as on Windows. Linux systems typically have
    native tools and scripting languages such as Bash that are more prevalent and
    well integrated. While PowerShell on Linux can be used in specific scenarios,
    understanding and utilizing Linux-specific tools is often more effective. Security
    professionals should know the context and environment when choosing post-exploitation
    techniques on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Profiling a user with PowerShell on Linux involves gathering detailed information
    about the user’s activities, permissions, and system interactions. While Linux
    offers native tools and commands for system profiling, PowerShell can complement
    these by providing a consistent and scriptable interface across different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: User information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can retrieve information about a specific user, including
    username, UID, GID, home directory, and shell. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This hypothetical cmdlet **Get-User** retrieves user information for the user
    named **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: Running processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can list running processes and filter them based on the user. This
    allows for a quick overview of the processes associated with a specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This script lists the processes running for the user **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: Network connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can provide insights into network connections associated
    with a user. An example is listing network connections for a specific user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command displays information about TCP connections owned by the user **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: File and directory access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiling involves understanding a user’s file and directory access. PowerShell
    can be used to list files and directories a user has access to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This script provides a list of files and directories in the user’s home directory,
    **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: Installed software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can query installed software on Linux systems, allowing profiling
    of a user’s software environment. Here’s an example using a hypothetical **Get-InstalledSoftware**
    cmdlet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This cmdlet would retrieve a list of software installed for the user **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: Recent activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can query system logs to gather information about a user’s
    recent activities. An example is retrieving recent login events for a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This example retrieves the last 10 authentication events for the user **andrewblyth**
    from the **auth.log** file.
  prefs: []
  type: TYPE_NORMAL
- en: Data exfiltration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be employed for data exfiltration on Linux using various techniques.
    One common method is to encode data into Base64 and send it over the network.
    Here’s a hypothetical example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This script encodes the string **SensitiveData** into Base64 and sends it to
    an attacker-controlled server.
  prefs: []
  type: TYPE_NORMAL
- en: While the examples provided demonstrate the potential use of PowerShell for
    profiling a user on Linux, it’s important to note that Linux has a rich ecosystem
    of native tools and commands that are more commonly used for these tasks. Commands
    such as **ps**, **ls**, and **netstat** and logs in **/var/log** often provide
    the necessary information without needing PowerShell. However, in heterogeneous
    environments where PowerShell is utilized for other tasks, its cross-platform
    nature can offer consistency in scripting and automation across different operating
    systems. Profiling a user on Linux with PowerShell should be approached considering
    the specific requirements and context of the environment in which it is being
    used.
  prefs: []
  type: TYPE_NORMAL
- en: File permissions in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell, traditionally known as a scripting language for Windows environments,
    has expanded its capabilities to Linux systems by introducing PowerShell Core
    (PowerShell 7). While Linux primarily relies on native tools and commands for
    file and directory permissions, PowerShell can offer a consistent scripting interface
    across different platforms. Here, we’ll explore how PowerShell on Linux can interact
    with file permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux allows users to view file permissions using the **Get-Acl**
    cmdlet. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves the **Access Control List** (**ACL**) for the specified
    file, displaying details about ownership and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Granting file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to grant specific permissions to a user or group. An
    example is granting read and write permissions to a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This script creates a new access rule granting the user **andrewblyth** read
    and write permissions on the specified file.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can be used to modify existing file permissions. An example
    is adding execute permissions to a group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This script adds an access rule allowing the **developers** group to execute
    the specified script file.
  prefs: []
  type: TYPE_NORMAL
- en: Revoking file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can also be employed to revoke or remove file permissions. An example
    is removing write permissions from a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies and removes the write permission rule for the user **alice**
    on the specified file.
  prefs: []
  type: TYPE_NORMAL
- en: Changing ownership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can facilitate changing the ownership of a file. An example is changing
    the owner of a file to a different user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This script sets the owner of the specified file to the user **andrewblyth**.
  prefs: []
  type: TYPE_NORMAL
- en: Checking effective permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can check the effective permissions for a user on a file.
    Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves the effective permissions for the user **guest** on the
    specified file.
  prefs: []
  type: TYPE_NORMAL
- en: Inheriting permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell can be used to configure permissions to be inherited by child objects.
    An example is configuring a directory to inherit permissions from its parent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This script disables the directory’s protection and allows it to inherit permissions
    from its parent.
  prefs: []
  type: TYPE_NORMAL
- en: Checking Access Control Lists (ACLs)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'PowerShell on Linux can list all **Access Control Entries** (**ACEs**) in an
    ACL. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This command retrieves and displays all ACEs in the ACL for the specified file.
    While native Linux commands such as **chmod**, **chown**, and **getfacl** are
    typically used to manage file permissions, PowerShell on Linux offers a consistent
    scripting experience, especially in heterogeneous environments. Security professionals
    should consider their Linux systems’ specific context and requirements when choosing
    between native tools and PowerShell for file permission management.
  prefs: []
  type: TYPE_NORMAL
- en: Using PowerShell for privilege escalation in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PowerShell, traditionally associated with Windows environments, has expanded
    its reach to Linux systems with PowerShell Core. While Linux typically relies
    on native tools and scripting languages such as Bash for privilege escalation,
    PowerShell on Linux can be a powerful addition to the toolkit of security professionals.
    This guide will explore how PowerShell can be used for privilege escalation on
    Linux through various techniques and examples.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the current user’s privileges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before attempting privilege escalation, it’s essential to understand the current
    user’s privileges. PowerShell on Linux can retrieve information about the current
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This simple command provides the current user’s username, allowing initial insight
    into their privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating local groups and users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identifying local groups and users is a crucial step in privilege escalation.
    PowerShell can be used to enumerate local groups and their members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This script lists all local groups and their members, helping identify potential
    targets for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Checking sudo configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Examining the sudo configuration is vital for identifying opportunities to
    execute commands with elevated privileges. PowerShell can be used to view the
    **sudoers** file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This command displays the contents of the **sudoers** file, revealing the configuration
    of users and commands with sudo privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Checking executable file permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Identifying executable files with lax permissions provides opportunities for
    privilege escalation. PowerShell can be used to search for files with the executable
    permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This script searches for executable files and lists those with potentially weak
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting weak service configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some services may have misconfigurations that can be exploited for privilege
    escalation. PowerShell can help identify services and their configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This script lists services and their start types, allowing for the identification
    of services with misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting crontab entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cron jobs can be manipulated for privilege escalation. PowerShell can be used
    to list and analyze cron jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This command displays the **cron** jobs for the current user, providing insights
    into scheduled tasks that might be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting world-writable directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Directories with world-writable permissions may offer opportunities for privilege
    escalation. PowerShell can be used to identify such directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This script identifies directories with world-writable permissions, which could
    be exploited for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: DLL hijacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DLL hijacking involves manipulating the search path for dynamic link libraries.
    PowerShell can be used to identify processes that might be vulnerable to DLL hijacking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This script checks each running process for potential DLL hijacking opportunities
    and alerts if any are found.
  prefs: []
  type: TYPE_NORMAL
- en: Password files and sensitive information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Searching for password files or sensitive information is a common privilege
    escalation tactic. PowerShell can be used to look for specific files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This script searches for files commonly associated with passwords or sensitive
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting wildcard injection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wildcards in commands might lead to unintended consequences. PowerShell can
    be used to check for wildcard injection vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This script searches for files with names matching the pattern **.log** and
    can help identify potential wildcard injection vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting setuid and setgid binaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**setuid** and **setgid** binaries execute with the privileges of the file
    owner. PowerShell can be used to find such binaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This command lists **setuid** and **setgid** binaries, potentially providing
    opportunities for privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting environment variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Environment variables can influence program behavior. PowerShell can be used
    to inspect environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This script retrieves the contents of environment variable files in the **/proc**
    directory, helping identify variables that might be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell on Linux provides security professionals with a cross-platform scripting
    language that can be used alongside native Linux tools for privilege escalation.
    While traditional Linux commands and scripting languages are often preferred,
    PowerShell’s consistency across platforms makes it a valuable addition to the
    toolkit for security assessments and penetration testing on mixed environments.
    Security professionals should consider the specific context of their Linux systems
    and choose the most appropriate tools and techniques for privilege escalation
    based on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we have come to the end of this book. Congratulations on successfully
    completing this book!
  prefs: []
  type: TYPE_NORMAL
