- en: Miscellaneous Fun in Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll mainly focus on exploiting vulnerable software in Windows
    and proceed to use different techniques within privilege escalation. Subsequently,
    we'll also create backdoors and cover our tracks. This chapter will give a general
    idea of how we can leverage the power of a Python script to our advantage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation – weak service file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation – preparing vulnerable software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation – backdooring legitimate windows service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation – creating a new admin account and covering the tracks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation – weak service file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During a penetration testing phase, you may encounter a standard user where
    you don't have full privilege to access or modify a filesystem due to the **user
    access control** (**UAC**) and, each time you try to elevate your privilege, you
    will be prompted to the window that asks you to enter the administrator password.
    In this section, we will discuss one of the types of doing a **privilege escalation
    attack**, where you technically jump from a standard user to an administrator
    or system privilege. These types of attacks, which we will discuss, are called
    **privilege escalation via service file permission weakness**. The system will
    be vulnerable if the location of a service executable file is modifiable by the
    standard user. Then, it can be overwritten by another malicious executable. We
    may use this capability to gain system privilege(s) by booting our own executable
    in place of the service executable. Once the service is started after restarting
    the system, the replaced executable will run instead of the original service executable.
    So, in summary, we have a system privilege and we'll run an EXE, which belongs
    to a vulnerable software. Now, since this software EXE can be written by a standard
    user and within a standard user profile, we can simply replace it with a malicious
    EXE.
  prefs: []
  type: TYPE_NORMAL
- en: So, this software EXE can be written or modified by a user space, using a standard
    user. So, what we can do is, we can simply replace the software EXE with a malicious
    one. On the next three boots, our EXE is going to take a place and will be executed
    with the power of system privilege.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a link on privilege escalation types with brief description for each
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://attack.mitre.org/wiki/Privilege_Escalation](https://attack.mitre.org/wiki/Privilege_Escalation). If
    you have some time, I recommend that you read this article.'
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation – preparing vulnerable software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this demonstration, I will be using a vulnerable software named **Photodex**
    taken from an Exploit Database website. You can download this software from [https://www.exploit-db.com/exploits/24872/](https://www.exploit-db.com/exploits/24872/). Once
    the software is downloaded, install this software on our target machine. Once
    it's finished, restart the machine.
  prefs: []
  type: TYPE_NORMAL
- en: So now, let's try and create a `nonadmin` standard account in our target Windows
    machine by going to Control Panel | Add or remove user accounts | Create a new
    account. Let's call this one `nonadmin`. After creating the account log into the
    `nonadmin` account and navigate to the `Photodex` directory created while installation
    at `C:\` drive and at the same time, open the Task Manager.
  prefs: []
  type: TYPE_NORMAL
- en: You will be able to see the service name, which gets created by Photodex software,
    which is `ScsiAccess` under the Services tab. To get more information about this
    service, click on the Services button. In the Services window that opens, find
    the `ScsiAccess`, right-click on it and select Properties, you will be able to
    find the EXE file path for this service. Go and have a look into that directory,
    in my case, it is `C:\Program Files\Photodex\Pro Show Producer\ScsiAccess.exe`.
    Find the EXE file and right-click on it; notice that we don't need any admin privilege
    to Rename, Delete, Copy, or even Cut this file. So, technically, if I rename this
    file to `ABC`, for instance, and then replace a malicious file instead of this
    one, then we can take advantage of this vulnerability. Let's see what we can do
    with this vulnerability. In the next section, we will create a new service EXE
    file purely in Python. Then, we will replace the current one, which is the `sciaccess.exe`
    file and see what privilege we can gain access by doing so.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation – backdooring legitimate windows service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will code a malicious service file to replace the legitimate
    one. Now, in order to replace the service file, our new malicious service file
    should be able to communicate with Windows service control manager. For instance,
    when you manually Start, Stop, Pause, or Resume the service, the Windows service
    control manager will send a signal or order to the EXE service file and in return,
    the service file should usually obey the service control manager's order. If,
    for any reason, the service file or the EXE file did not understand that signal,
    then the service control manager will fail to start the service and you will get
    an error saying `The service did not respond to the start or control request in
    a timely fashion`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s jump to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: First of all, some part of my code is inherited from a script that I found on
    ActiveState website. Here, you can find the original one [http://code.activestate.com/recipes/551780/](http://code.activestate.com/recipes/551780/).
    The second thing I recommend is to read more about Microsoft service control manager
    functionality. Here is a good start: [https://msdn.microsoft.com/en-us/library/windows/desktop/ms685150(v=vs.85).aspx](https://msdn.microsoft.com/en-us/library/windows/desktop/ms685150(v=vs.85).aspx). Last
    but not least, `pywin` library is a prerequisite library to create a Windows service
    in Python. You can download it from: [https://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/](https://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/).
    Our code can be divided into two sections. The first section is about initializing.
    In this section, we define a listener for Windows, that is, `servicemanager`.
    Then, we pass a `Service` class handler, so, whenever we get a signal from `servicemanager`,
    we will pass it to the `Service` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move to the second part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the second section, we define the action to do when we get a service manager
    signal and this will happen within the `Service` class. In the first two lines,
    we specify the service name and the display name. Note that the name that I have
    chosen, which is `ScsiAccess`, is similar to the original one for Photodex software.
    So, if we open the service from the Windows Task Manager, like we did in the previous
    section, the name exactly matches the service name for the vulnerable software.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we initialize the `ServiceFramework` and define in functions style what
    to do when we get a service manager signal. So, for example, if the service manager
    signal was pause, then we will `sleep` for `Sleep(sec*1000, True)` time of seconds.
    Also, if the signal was start, then we will tell the service manager that we are
    planning to run the service; this will happen via reporting back a `SERVICE_START_PENDING`
    status through `ReportServiceStatus()`. Then, within an exception handling, we
    will tell the service manager that we are currently running up the service and
    we will call the `start()` function. If any exception happened, then we will call
    the `SvcStop()` function here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we execute the `start()` function, we mark the `ServiceStatus` flag as
    `True` and we will wait in a while loop for receiving a service stop signal from
    the service manager. If we get this signal, we move to `stop()` function, which
    will eventually switch the flag to `False`. Now, inside the `stop()` function,
    we will do a similar procedure to what we did in the `start()` function. So, we
    will tell the service manager that we are planning to stop the service then, we
    will execute the `stop()` function and finally we will tell the service manager
    that we are currently stopping the service. Now, within the `stop()` function,
    we mark the service status flag as `False` to break the infinite loop in the `start()`
    function. Now, if I export this script into EXE and replace it instead of the
    `sciaccess.exe` and restart the machine, it should work fine. However, I want
    to go an extra mile and to prove that we got system privilege. So, let''s make
    sure that the exploitation worked fine. For this purpose, I made a quick Python
    script to check whether we are running as admin or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This script will simply call the `IsUserAnAdmin()` function from Windows. If
    the returned value is `0`, it means that we are a standard user; otherwise, it
    means that we have admin privileges. To run this script, open Command Prompt as
    administrator and navigate to the `Desktop` then `Users` and type `python "Are
    we Admin.py"`. We'll get `[+] We are admin :)` as we are having admin privilege.
    This is because before initiating the Command Prompt, I did a right-click and
    selected Run as administrator.
  prefs: []
  type: TYPE_NORMAL
- en: So, I'm going to use this little trick in our code, and I will inject the check
    admin script within our malicious service. Obviously, it should be executed once
    the service gets started, so it should be under the `start()` function. Once we
    run the service, we will create a text file on the desktop and inside that text
    file we will see what privilege are we running into.
  prefs: []
  type: TYPE_NORMAL
- en: So, we will now export the script into EXE like we did in the previous chapter,
    and at this point, all we have to do is to replace the original EXE file with
    the generated one. Go to the original one of the Photodex software. Since the
    software is vulnerable, we will be able to replace this one. So, I'm going to
    rename this one to `access2` and I will simply copy and paste our malicious file
    here. If everything is working fine our service should run without any error and
    we should see a text file on the desktop and once we open it, should tell us the
    privilege that we run into. After restarting, you'll notice a `priv` text file on
    the desktop. If you open it, you'll see a text that says we are running as an
    administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Privilege escalation – creating a new admin account and covering the tracks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our previous section, we created a malicious Python service and replaced
    the legitimate one with it. Once the system has started, we verified that we get
    a system or admin privilege. Now, in this section, we''ll see how we can create
    a new admin account and then jump from the standard user to the admin account.
    So, what I have changed on the coding part is adding the following section to
    the previous code, which in summary will create a new admin account once the service
    gets started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, keep in mind that I have added the aforementioned section under the `start()`
    function. So here, we defined the new username called `Hacked`, and the group
    that it belongs to, which is `Administrators` group. Next, we create a user and
    the group information profile in a dictionary format. Then, inside the dictionary,
    we specify some values, such as `password`, `priv`, and `home_dir`. Finally, we
    create the new admin account and add it as a group member to the `Administrators`
    group. In case any exception happened during the creation phase, we will simply
    skip it. Now, before exporting the code into EXE and test, quickly verify the
    usernames that we got on the machine by running `net users` in Command Prompt
    and it will list the users in our machine.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, we are logged into the `nonadmin` account. So, let's go ahead and
    do the EXE exporting here. Copy the script into the `Toexe` folder and rename
    it to `sciaccess`. Now, run the setup file. Then, copy the exported EXE file to
    replace our vulnerable software in the `Photodex\ProShow Producer` folder. At
    this point, if everything is working fine, then after a restart, we should see
    a new admin account listed called `Hacked`. Now, restart the machine and log into
    the `nonadmin` account. Fire up the Command Prompt. Now, if we type `net users`,
    we will get a new username called `Hacked`.
  prefs: []
  type: TYPE_NORMAL
- en: If we type `net users Hacked`, we'll see at the bottom that we belong to the
    `Administrators` group. So, at this point, once we get admin privilege, we can
    do whatever we want. So, let's go evil and clear the Windows event logs from the
    Event Viewer by logging in with the Hacked admin account. This will help us cover
    our tracks.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've learned the different ways to execute privilege escalation
    and exploit the vulnerabilities. We started with exporting a file to EXE and then
    moved to target a vulnerable software. After this, we initiated backdoor creation
    and subsequently covered our tracks to avoid detection.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll deal with different types of encryption algorithms.
  prefs: []
  type: TYPE_NORMAL
