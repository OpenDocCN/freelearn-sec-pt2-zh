- en: '*Chapter 3*: Setting Up the Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are covering the setup of the test environment that will
    be used in the core of the practical part, while also defining the main approach
    behind the practical section of this book. The main tools used will also be introduced;
    we'll describe their ability to perform our SQL injection tests, which will help
    us understand the subject matter even more.
  prefs: []
  type: TYPE_NORMAL
- en: After introducing the main methodology and tools, we will also show how to configure
    the lab settings that will be used. In order to best configure both the client,
    from which we will be conducting our test attacks, and the server side, made up
    of virtual targets we are conducting our tests against, this chapter serves as
    a step-by-step guide for configuration. Luckily, we have selected tools that are,
    for the most part, ready to use, and the setup is relatively simple.
  prefs: []
  type: TYPE_NORMAL
- en: As the client part will be mostly the same both for web application attacks
    and emulated devices, the first step will be configuring this machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding the practical approach and introducing the main tools**: An
    introductory description of our approach, which will guide us throughout the practical
    part of this book. Think of this as an introduction to the practical section,
    describing the lab we will be using and the overall setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overview of the Open Web Application Security (OWASP) Broken Web Application
    (BWA) project**: For our lab setup, we will be using a freely available **virtual
    machine** (**VM**), provided by OWASP, containing many vulnerable web applications.
    This allows us to test for vulnerabilities without attacking actual websites or
    entities belonging to third parties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The attacker – configuring your client machine**: Before setting our targets
    for our lab, in this section, we are providing our recommendation for the machine
    that we will be using as the main client for specialized attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The target – configuring your target web applications**: Our instructions
    for setting the target web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The target – configuring your target-emulated devices**: Our instructions
    for setting the targets for **Internet of Things** (**IoT**) testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating the lab**: In this final section of this chapter, we will describe
    how this lab is intended to be operated, putting together the elements we have
    seen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Despite involving strictly practical matters, there are no particular prerequisites
    for this chapter. However, we recommend familiarizing yourself with the main tools
    we will be using. All of these are free to use, so don''t worry about costs. Here
    are the links to the tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.virtualbox.org/](https://www.virtualbox.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.kali.org/docs/](https://www.kali.org/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-project-broken-web-applications/](https://owasp.org/www-project-broken-web-applications/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio](https://developer.android.com/studio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.eclipse.org/](https://www.eclipse.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the practical approach and introducing the main tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the most important aspects in understanding attack techniques and, in
    general, vulnerabilities and cyberattacks, is exploring firsthand what conducting
    an attack means, and also evaluating the behavior of an exploited target to figure
    out what the best defensive solutions might be. This is one of the main principles
    of ethical hacking: understanding the matter from the point of view of a potential
    attacker means having a more complete picture of what is happening, all in line
    with the strategic concepts of "knowing your enemy," which leads ultimately to
    a strategic advantage. This section is all about this: performing attack tests
    in a controlled and safe environment to study and experience in person what SQL
    injection is all about.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to achieve this level of expertise, a wide range of tools will be
    used. SQL injection is mostly a web-based vulnerability, and that means it could
    be exploited using a simple web browser, sending a specific input to interact
    with an application, as seen in the practical part of this book. Of course, performing
    these tests against real targets could be quite problematic, as it would require
    specific agreements and engagement rules for us not to cause harm to systems of
    companies or individuals. Performing attacks against a system without prior signed
    agreements is against the law, and we do not want or encourage anybody to commit
    crimes. For this reason, we will be introducing our first software that allows
    us to set up a controlled environment on our own computer, without attacking anyone
    else: virtualization software.'
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first piece of our set of tools is made of virtualization software. Virtualization
    is the process of emulating hardware resources (that is, a computer system) totally
    through software. An emulated machine is called a VM and has, virtualized as software,
    the same components a computer would have, all by using the hardware resources
    of the host system through the emulation software.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many possible solutions available, but we recommend two main solutions,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VMware Workstation**—VM emulation industry-standard software provided by
    VMware. The free version is partially limited in functionality and can only be
    run on a single VM at a time. This is illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.1 – VMWare Workstation main web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – VMWare Workstation main web page
  prefs: []
  type: TYPE_NORMAL
- en: '**Oracle VirtualBox** – VM emulation software by Oracle, freely available and
    easy to use for generic purposes (available at [www.virtualbox.org](http://www.virtualbox.org)).
    This is illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Oracle VirtualBox main web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Oracle VirtualBox main web page
  prefs: []
  type: TYPE_NORMAL
- en: The full version of VMware is, of course, the most complete solution, but Oracle
    VirtualBox is also well known among users worldwide. In any case, our lab setup
    requires virtualization software, so either of these is fine. Be sure to check
    the configuration section and follow the suggested steps.
  prefs: []
  type: TYPE_NORMAL
- en: As for simulating mobile and IoT devices, the Android operating system can be
    easily emulated. We will later see how to set up the emulation correctly.
  prefs: []
  type: TYPE_NORMAL
- en: After covering in general the foundation tool used to enable our lab setup,
    we now introduce one of the most important tools for ethical hacking, Kali Linux,
    which is a Linux distribution that we will use in our emulated environment for
    the client-side part.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Kali Linux is a Debian Linux distribution specifically for ethical hacking,
    penetration testing, and, in general, information security. Kali Linux is well
    known among information security experts because it offers a large selection of
    security tools that can be used to perform security testing and simulate cyberattacks.
    This array of tools is so popular and complete that it is even used by malicious
    attackers. We can''t stress this enough: as ethical hackers, tests are to be performed
    exclusively on targets for which explicit consent of the owner has been agreed
    upon. This includes, of course, possible targets that the attacker themselves
    owns and intends to use in order to perform tests. For this reason, the simplest
    configuration is based on the use of a VM running this specific version of the
    Linux operating system, so that it can be used in the same virtualized environment
    of the emulated targets, whether they may be web applications or other targets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali Linux has more than 600 tools for computer security, ranging from hacking
    to network monitoring tools, which are included to cover the widest possible range
    of use cases for security professionals. Included in the suite are also some important
    tools for web application security, some of which are also specific to discovering
    and exploiting the SQL injection vulnerability. We will now cover some of them,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP ZAP**: **ZAP** stands for **Zed Attack Proxy**, and the name explains
    what it does: this software is used as a proxy while using a web browser, so that
    the behavior of a web application can be studied performing **Dynamic Application
    Security Tests** (**DAST**). Traffic sent through a web browser can be sent through
    ZAP, allowing it to analyze the communications in terms of requests and response
    and, thus, depending on the interactions, discover possible vulnerabilities, including
    SQL injection. ZAP has also a built-in scanner that sends pre-formatted requests
    to target websites and, depending on the respective responses, can identify vulnerabilities
    in web applications. OWASP ZAP is provided by OWASP, which supports security professionals
    around the world, enabling the development of a security community and worldwide
    cooperation, while also providing a shared and effective methodology for web application
    security testing. OWASP ZAP is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – OWASP ZAP – Zed Attack Proxy – web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – OWASP ZAP – Zed Attack Proxy – web page
  prefs: []
  type: TYPE_NORMAL
- en: '**Burp Suite**: Burp Suite, by PortSwigger, is a set of web application security
    tools, similar to ZAP, but possibly richer in functionality. Some of its most
    useful modules are only available through its Pro version, however. Burp Suite
    is used in the same way as ZAP, like a proxy for web application-based attacks,
    and serves the same purpose. If you don''t have Burp Suite Pro already, we recommend
    using OWASP ZAP for the purpose of the tests included in this book. Burp Suite
    is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Burp Suite''s main web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Burp Suite's main web page
  prefs: []
  type: TYPE_NORMAL
- en: '**sqlmap**: sqlmap is the most well-known software for automated SQL injection.
    It is a command-line utility that can be used to identify and exploit possible
    SQL injection vulnerabilities on a web application. Its detection engine is very
    powerful and has been refined through the years, making it one of the most relevant
    tools for web application security testing. sqlmap is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.5 – sqlmap''s web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – sqlmap's web page
  prefs: []
  type: TYPE_NORMAL
- en: '**SQLninja**: SQLninja is another useful and powerful utility geared toward
    exploiting the SQL injection vulnerability against databases running Microsoft
    SQL Server, possibly taking over the backend altogether with more specific options
    that allow, ultimately, remote access to the database server. SQLninja is shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.6 – SQLninja''s web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 – SQLninja's web page
  prefs: []
  type: TYPE_NORMAL
- en: The last piece of our set of tools, which will be described in the next section,
    is the main enabler of our tests, as it serves as the server side of our emulated
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the OWASP BWA project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP keeps a plethora of sub-projects, fueled by the efforts of many people
    around the world, with the aim of improving the experience of security professionals
    around the globe and raising awareness of web application security issues. One
    of the problems that ethical hackers encounter is finding targets that are free
    to attack without consequence in order to put their knowledge to the test. In
    the past, some organizations, such as web application security software vendors,
    put specific web applications on the web to allow the testing of the capabilities
    of software, or just to educate the public on web application security in general.
    Some of these applications have been removed or have become progressively harder
    to find, probably because they were discontinued or were designed to test older
    versions of application security software. The **OWASP BWA** project was started
    to provide people with a collection of some of these web applications to be used
    as test targets during web application security tests. Those web applications
    are distributed through an Ubuntu Server VM that serves as a web server hosting
    the applications contained within.
  prefs: []
  type: TYPE_NORMAL
- en: The project was discontinued in 2015, but the download of the VM is still available.
    The virtual environment provided is what we will be using as our target web applications.
    In the *The target–configuring your target web applications* section, we will
    see how to set up the machine.
  prefs: []
  type: TYPE_NORMAL
- en: As this is are quite a large number of applications available (37, to be exact),
    we will be highlighting the ones that we think are the best fit for practicing
    SQL injection, both manual and automated.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have an idea of what the vulnerable web application selection hub will be,
    we added as a screenshot the selection menu that will be seen while accessing
    the active VM from your web browser. You will be able to see it once the target
    machine configuration is complete, so be sure not to miss the corresponding section
    (*The target – configuring your target web applications*). Have a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – The OWASP BWA application selection hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 – The OWASP BWA application selection hub
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the main web applications we will go through in the practical
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mutillidae II**: A test web application for guided training provided by OWASP.
    We''ve already seen this application for error triggering in *Chapter 2*, *Manipulating
    SQL – Exploiting SQL Injection*. Mutillidae II is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.8 – Mutillidae II home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 – Mutillidae II home page
  prefs: []
  type: TYPE_NORMAL
- en: '**Code Injection Rainbow**: Another test web application that provides guided
    challenges to practice with injection vulnerabilities (including SQL). This can
    be seen in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Code Injection Rainbow SQL injection page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.9 – Code Injection Rainbow SQL injection page
  prefs: []
  type: TYPE_NORMAL
- en: '**Peruggia**: An application designed to be vulnerable on purpose, providing
    realistic use-case scenarios for web application security testing. This can be
    seen in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Peruggia home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.10 – Peruggia home page
  prefs: []
  type: TYPE_NORMAL
- en: '**Broken WordPress**: A sample blog made with WordPress 2.0.0, known for the
    presence of many vulnerabilities. This is the same WordPress blog we saw in [*Chapter
    2*](B15632_02_Final_JC_ePub.xhtml#_idTextAnchor031), *Manipulating SQL – Exploiting
    SQL Injection,* to show credential stealing. Broken WordPress is shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Broken WordPress home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.11 – Broken WordPress home page
  prefs: []
  type: TYPE_NORMAL
- en: '**OWASP Vicnum**: A simple, very basic web application that shows how not applying
    security measures can be very damaging. We''ve seen this in [*Chapter 2*](B15632_02_Final_JC_ePub.xhtml#_idTextAnchor031),
    *Manipulating SQL – Exploiting SQL Injection,* as well, but we will revisit it
    for the practical part. OWASP Vicnum is shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Vicnum project''s main page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.12 – Vicnum project's main page
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to use the provided applications for testing, independently from the
    guide provided in this book. Practice makes perfect, and practicing in a controlled
    environment allows you to develop your skills at your own pace.
  prefs: []
  type: TYPE_NORMAL
- en: The approach and the tools provided represent the arsenal at our disposal. Now,
    it's time to start the setup of our test environment so that we can finally begin
    the practical part.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker – configuring your client machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show our recommendations in terms of configuration
    of the machine that will be used for conducting the offensive tests. Bear in mind
    that other options are possible (which will be described later), but our suggestions
    prioritize usability and cover a wide array of use cases.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will use a client machine running **Kali Linux**. Kali Linux
    is free to use and is available on the official Kali Linux website ([www.kali.org](http://www.kali.org))
    for download as a disk image that will be used on the first boot. Each image also
    includes the possibility to run the system in a *Live* environment, thus not requiring
    installation. Since we are using a VM lab to manage both the client and the server
    side, we will be using regular installation for the purpose of this guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the possible download options, we recommend *Kali Linux 64-Bit* for the
    best compatibility with updated software; alternatively, *Kali Linux 32-Bit* can
    also be used if your host can''t handle 64-bit virtualized systems properly. *Kali
    Linux Light* could also be used, but most of the software tools would need to
    be installed one by one. For security purposes, ensure that the SHA-256 hash of
    the file you downloaded from the site is the same as the one shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.13 – Kali Linux download page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.13 – Kali Linux download page
  prefs: []
  type: TYPE_NORMAL
- en: Once you have obtained the operating system image, it's time to set up your
    virtualized system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if VMware is widely considered as an industry standard for IT professionals,
    Oracle VirtualBox can also be used for the purpose of setting up a lab for testing
    without usage limitation. Both software solutions are valid and can be used without
    noticeable differences. For usability reasons, our tests will be conducted using
    the freely available Oracle VirtualBox, which is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.14 – Oracle VirtualBox download page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – Oracle VirtualBox download page
  prefs: []
  type: TYPE_NORMAL
- en: Once both the disk image of your choice and the virtualization software have
    been obtained, proceed to creating a new VM running Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new client VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we are presenting a step-by-step guide to create a new VM using VirtualBox.
    There will be many steps in common with the configuration of both client and target
    virtual machines, so be sure to follow our step-by-step guide. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the appropriate **Create New Virtual Machine** button and complete
    the settings in the wizard, depending on the version of Kali Linux you previously
    downloaded (64- or 32-bit) by selecting **Linux** as the operating system and
    **Other Linux (64-bit)** as the distribution (we have included a screenshot of
    the creation wizard here). The process is illustrated in the following screenshot:![Figure
    3.15 – Our Kali test machine setup – file path and system selection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_015.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.15 – Our Kali test machine setup – file path and system selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have selected the version, you will be prompted to configure the technical
    settings of the machine. Depending on the performance of your host computer, select
    the appropriate allocated **random-access memory** (**RAM**) to your VM. 1,024
    megabytes is the minimum requirement we recommend (the operating system alone
    requires about 512 megabytes to function properly). The process is illustrated
    in the following screenshot:![Figure 3.16 – Our Kali test machine setup – memory
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_016.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.16 – Our Kali test machine setup – memory settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As for secondary memory, you will be prompted to select a virtual hard disk.
    We recommend a disk size of at 8 GB minimum, but as this will only be a testing
    VM, that should be enough anyway (Kali Linux takes up to 3 GB of disk space, just
    for the installation of the operating system). The process is illustrated in the
    following screenshot:![Figure 3.17 – Our Kali test machine setup – hard drive
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_017.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.17 – Our Kali test machine setup – hard drive settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the first startup, select the Kali Linux image you previously downloaded
    as boot-up media so as to start the installation of the operating system on the
    VM. Select the appropriate options in terms of language, access credentials, and
    desktop environment(s) of choice. Once the operating system installation process
    is complete, you will be free to use your virtual Kali Linux machine for testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we recommend installing the additional software that we mentioned earlier,
    in the *Kali Linux* subsection of the *Understanding the practical approach and
    introducing the main tools* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost, ensure all your Kali application packages are updated and
    are the latest version available by running the following commands from the Terminal
    (ensure your Kali machine is connected to the internet first):'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get update
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get upgrade
  prefs: []
  type: TYPE_NORMAL
- en: 'To install OWASP-ZAP, run the following command from your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get install zaproxy
  prefs: []
  type: TYPE_NORMAL
- en: 'To install SQLninja, run the following command from your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get install sqlninja
  prefs: []
  type: TYPE_NORMAL
- en: 'sqlmap should already be present on the default Kali distribution. However,
    run the following command too, just in case:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo apt-get install sqlmap
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux offers many other security tools too, besides the ones we will be
    using in the practical section of this book. Feel free to explore them in a controlled
    and safe environment without damaging any third parties.
  prefs: []
  type: TYPE_NORMAL
- en: Once the client VM setup is complete, we can proceed with the setup of our target
    VMs that will be used during our tests.
  prefs: []
  type: TYPE_NORMAL
- en: The target – configuring your target web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all of our tests, we will be using the Kali Linux installation we previously
    set up as the client side. In order to cover the cases previously described in
    this book (web application and IoT devices), we need multiple target configurations.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will show how to set up the VM that will be used as a testing target
    for web application-based SQL injection attacks, by using the web applications
    included in the OWASP BWA VM. In this case, the setup is quite simple and linear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version of the OWASP BWA VM from the official OWASP website
    by following the link to Sourceforge, as reported on the OWASP BWA main page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://sourceforge.net/projects/owaspbwa/files/](https://sourceforge.net/projects/owaspbwa/files/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, in these last months, the OWASP BWA main page has been migrated
    to another platform, so it is only accessible as a poorly formatted page, awaiting
    to be moved to the new platform. You can find it at this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-project-broken-web-applications/migrated_content](https://owasp.org/www-project-broken-web-applications/migrated_content)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The OWASP BWA main page can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – OWASP BWA download page on Sourceforge.net'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.18 – OWASP BWA download page on Sourceforge.net
  prefs: []
  type: TYPE_NORMAL
- en: Select **Download Latest Version** from the Sourceforge page to start the download.
    This download may take some time due to the file size (1.8 GB), depending on your
    internet connection bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: The downloaded file is a compressed folder, containing VM files and the hard
    drive image. Now, we will see how easy it is to configure the server VM, as it
    will be much easier than the client one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the OWASP BWA VM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proceed in a similar fashion to what we saw in the *Creating a new client VM*
    section, with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new VM using your emulation software (Linux, 64-bit) and set 1,024
    MB of main memory. You can use *Figure 3.15* and *Figure 3.16* as a reference,
    since the options will be identical.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are prompted to select the virtual hard drive, choose an existing hard
    drive (in this case, the one provided in the **OWASP BWA** folder, **OWASP Broken
    Web Apps-cl1.vmdk**). The process is illustrated in the following screenshot:![Figure
    3.19 – Existing disk selection for the OWASP BWA VM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_019.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.19 – Existing disk selection for the OWASP BWA VM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since the VM has a large number of security vulnerabilities, set it with a **Host
    Only** connection to make it visible only at a local IP address from your host
    machine. Go to the **Settings** panel from the VirtualBox menu and configure the
    VM network adapter from the **Network** tab. The process is illustrated in the
    following screenshots:![Figure 3.20 – a—The Settings option from VirtualBox main
    screen
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_020.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.20 – a—The Settings option from VirtualBox main screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Network** panel the **Settings** menu is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.21 – b—The Network panel in the Settings menu'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](image/B15632_03_021.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.21 – b—The Network panel in the Settings menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the VM is ready, you can access it at the IP shown on its screen. By accessing
    the IP address with your web browser, you can see the applications available,
    up and running, as in the selection hub shown in *Figure 3.7*. In the following
    screenshot, you can see what the server VM screen looks like after startup, showing
    the IP address to use to connect through HTTP to the web applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – The main screen of the OWASP BWA, with the instructions to
    access the vulnerable web apps'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.22 – The main screen of the OWASP BWA, with the instructions to access
    the vulnerable web apps
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the setup of the web application environment. In the following
    section, we will deal with other emulated devices.
  prefs: []
  type: TYPE_NORMAL
- en: The target – configuring your target-emulated devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now see how to set up mobile and IoT emulated devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of functionality, these devices have a more restricted range of operations:
    usually, IoT devices have very limited computational power, and usually rely on
    simple web services, stripped out of any rich graphical setting.'
  prefs: []
  type: TYPE_NORMAL
- en: Some applications from the OWASP BWA virtual web server can actually mimic this
    behavior by providing web server **application programming interfaces** (**APIs**).
    We can say that we have already set up some of the environment for web service
    interaction.
  prefs: []
  type: TYPE_NORMAL
- en: 'A side note: the OWASP IoT security testing framework and IoTGoat projects'
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting approach to IoT Security Testing comes, once again, from OWASP:
    the IoT security testing framework was released this year, and provides a thorough
    methodology for assessing and testing vulnerabilities in IoT environments, in
    a similar fashion as in the web application and mobile application testing frameworks
    provided by OWASP.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In conjunction with this new framework, OWASP released yet another useful tool
    for testing purposes, while keeping everything legal and in a controlled setting:
    the OWASP IoTGoat VM. This project presents, in some ways, the IoT homologue to
    the OWASP BWA project, by providing a deliberately vulnerable emulation of a device,
    with many vulnerabilities in the OWASP Top 10 IoT vulnerabilities. We think it''s
    worth checking it out in any case, at the official GitHub page: [https://github.com/OWASP/IoTGoat](https://github.com/OWASP/IoTGoat).'
  prefs: []
  type: TYPE_NORMAL
- en: After dealing with web services and web application, which also constitute the
    main means of interacting with the world of IoT, we will be setting up our way
    to simulate mobile devices. To do so, we need a way to emulate a mobile application
    environment, including the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost, we recommend the most famous editor for Android mobile
    applications, which is also free to use: Android Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Studio** is a complete developer environment for Android Mobile applications.
    It also provides a handy Android emulator, to test developed applications from
    the client perspective on the same computer you would use for programming. This
    is the main feature we will use for testing for SQL injection.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Android Studio from the official website ([https://developer.android.com/studio](https://developer.android.com/studio))
    and proceed with the installation. Android Studio is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – Android Studio official download page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.23 – Android Studio official download page
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, you''ll have many options to choose from. Most of those are fine
    and can be selected as you like, but the most important feature we need from this
    is the Android emulator. Be sure to have it selected during installation. The
    process is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.24 – Select Android virtual device as an option during the installation
    of Android Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.24 – Select Android virtual device as an option during the installation
    of Android Studio
  prefs: []
  type: TYPE_NORMAL
- en: Run Android Studio, to finalize installation at the first startup. Feel free
    to set your preferences, but you should be fine with the standard installation.
    Once everything is set, you will now have what you need to emulate a mobile application
    client. As you probably know, mobile applications usually consist of client applications
    for web services. For this reason, we need a way to deploy and emulate a web service.
    Many options would do, but we recommend one of the most popular Java environments
    for coders, which is Eclipse. This will be used to run simple Java code that we
    will be using for emulating web services we need for our mobile application to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before installing the Java environment, to make our web service work, we need
    to install two more items of software, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache Tomcat** (available at [https://tomcat.apache.org/download-90.cgi](https://tomcat.apache.org/download-90.cgi))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL Community** (available at  [https://dev.mysql.com/downloads/installer/](https://dev.mysql.com/downloads/installer/)).
    In this case, select the custom installation to install only **MySQL Server**
    and **MySQL Workbench**, as illustrated in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.25 – Custom installation for MySQL'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_025.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.25 – Custom installation for MySQL
  prefs: []
  type: TYPE_NORMAL
- en: 'After having installed both Tomcat and MySQL, go to the MySQL website, then
    go to the **Download** section and download the Java connector to work with Tomcat
    ([https://dev.mysql.com/downloads/connector/j/](https://dev.mysql.com/downloads/connector/j/)).
    Be sure to select **Platform Independent** as the operating system. The process
    is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26 – Downloading the Java connector'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_026.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.26 – Downloading the Java connector
  prefs: []
  type: TYPE_NORMAL
- en: After the download, move the file in the lib folder of the Apache Tomcat installation
    folder (usually, **C:\Program Files\Apache Software Foundation\Tomcat 9.0\lib**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, head to the official Eclipse download page ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    and follow the instructions. This can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.27 – The official Eclipse download page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_027.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.27 – The official Eclipse download page
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the installer might not find any **Java Virtual Machine** (**JVM**)
    installed on your computer. If that is the case, it should show a pop-up to ask
    you to browse for the missing file. Choose the option to browse for it from the
    pop-up and browse your computer, and point to a valid **javaw.exe** file. You
    should find it anyway in the **jre\bin** folder of your Android Studio installation
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purpose, during the installation, select the **Eclipse IDE for Enterprise
    Java Developer** option: this is particularly useful as it includes all we need
    for deploying web services. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.28 – Select the highlighted option during Eclipse installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_028.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.28 – Select the highlighted option during Eclipse installation
  prefs: []
  type: TYPE_NORMAL
- en: At this point, installation should begin. Proceed with setting up your preferences
    in terms of path and accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: Operating the lab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the components of the lab are fully set up, we are ready to make it
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the OWASP BWA lab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps we suggest to set up the OWASP BWA part of the lab:'
  prefs: []
  type: TYPE_NORMAL
- en: First, run the OWASP BWA VM from VirtualBox. Once it has started, it should
    display the screen shown in *Figure 3.21*. By now, the full list of web applications
    can be accessed at the address shown on the screen on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use Kali Linux, run your Kali VM from VirtualBox. Keep in mind that as long
    as OWASP BWA is running with the current settings, it can also access the web
    applications available from BWA. This is illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.29 – The OWASP BWA selection hub as seen from the Kali VM'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15632_03_029.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.29 – The OWASP BWA selection hub as seen from the Kali VM
  prefs: []
  type: TYPE_NORMAL
- en: This way, any emulated device on your computer can connect to the OWASP BWA
    server, thus making it possible to test a various range of attacks. Obviously,
    manual attacks can also be carried out from the comfort of your own computer without
    using any VM. We will use Kali Linux mainly for advanced or automated attacks.
  prefs: []
  type: TYPE_NORMAL
- en: As for Android Studio and Eclipse, we will deal with these more thoroughly during
    the next chapter, as we will be using those in some specific use cases. Anyway,
    in order to make the Android emulator work, we need to set up a virtual device
    first.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Android Virtual Device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we are setting up an **Android Virtual Device** (**AVD**) using Android
    Studio. Please follow our easy step-by-step guide given here:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **AVD Manager** option from the main Android Studio screen. It should
    be at the upper right of the screen, as shown in the following screenshot:![Figure
    3.30 – AVD Manager in Android Studio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_030.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.30 – AVD Manager in Android Studio
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once in the **AVD Manager**, select **Create Virtual Device…**. You will then
    select the emulated model (Google Pixel 2 is usually the default selection: you
    can go for it). The process is illustrated in the following screenshot:![Figure
    3.31 – AVD Manager''s main screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_031.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.31 – AVD Manager's main screen
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once selected, you will need to select a system image. Choose **Android 10**
    from the recommended system images. The selected image will then be downloaded.
    Depending on your internet connection, this may take quite some time. The process
    is illustrated in the following screenshot:![Figure 3.32 – System image selection
    for a new device
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15632_03_032.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 3.32 – System image selection for a new device
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After the download is complete, the **AVD Manager** main screen will list your
    newly configured emulated device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The emulated device works exactly like a VM. It will replicate the functionality
    of an Android mobile device. This feature was devised specifically to test the
    runtime of developed Android applications. We will see some examples in the next
    chapter of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to sum it up: you can have all your targets running on your computer and
    perform all your tests without the need for physical machines or extra devices.
    However, in case you have constraints dictated by your machines such as limits
    for main memory, we recommend trying each of the scenarios separately in order
    not to overload your computer with too many virtualizations at once. However,
    systems settings for your VMs can be adjusted in accordance with your needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we set up the lab environment we need for running our tests.
    Here's a brief checklist of what we set up so far, with a recap of the tools we
    will be using.
  prefs: []
  type: TYPE_NORMAL
- en: Our main tool for performing tests in an ethical setup is using virtualization
    software, to test our attack techniques without damaging any third parties while
    using free tools and software.
  prefs: []
  type: TYPE_NORMAL
- en: Our main client for running web-based attacks, besides possibly our computer
    itself, will be a Kali Linux VM for advanced and automated attack techniques.
    To emulate a vulnerable target web server, we will be using the OWASP BWA VM,
    containing both traditional web applications vulnerable to SQL injection, and
    web service attack (**representational state transfer** (**REST**)) scenarios,
    on which other application models, such as IoT architectures, usually rely. Our
    mobile application scenarios will be run using Android Studio, using its built-in
    device emulator for the client, and a web service running on our computer itself.
  prefs: []
  type: TYPE_NORMAL
- en: All these different scenarios can be run separately on our computer, without
    overloading our resources too much. In any case, settings can be customized depending
    on your limits and needs.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be the core of the practical section, and will be centered
    on running, in a step-by-step approach, the attack techniques we saw in [*Chapter
    2*](B15632_02_Final_JC_ePub.xhtml#_idTextAnchor031), *Manipulating SQL – Exploiting
    SQL Injection* (and more). These will be performed against the same virtual environment
    we have seen in this chapter itself.
  prefs: []
  type: TYPE_NORMAL
- en: We hope you'll have fun in the next chapter, as you will be getting hands-on
    experience with what we've seen so far.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is virtualization software? Why do we need it for our practical section?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Kali Linux? Why do we use it in our lab setting?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the OWASP BWA project? Why do we need it for testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of emulated devices are we dealing with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it legal to test SQL injection against third-party, non-consenting entities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
