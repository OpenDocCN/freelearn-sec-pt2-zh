- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring, Crawling, Scanning, and Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve now reached [*Chapter 3*](B18829_03.xhtml#_idTextAnchor107). Here, we’ll
    start taking a deep dive into hacking, but before we get to that, we first need
    to understand how to set up our browser and **Zed Attack Proxy** (**ZAP**) to
    capture traffic successfully and without error, and learn the varying options
    you have as a user. We’ll cover the basics of **crawling** (or *spidering*) and
    using the application to map the **Sites tree** and prepare for scanning (*audit*).
    Finally, we’ll go over reporting and how to generate a report that fits your assessment,
    and we will interpret that data for better results.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting scope in ZAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crawling with the Spider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crawling with the AJAX Spider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning a web app passively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning a web app actively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you need to install OWASP ZAP Proxy and OWASP Juice Shop on
    your machine, and you want to be able to intercept the traffic between your browser
    and OWASP Juice Shop using ZAP.
  prefs: []
  type: TYPE_NORMAL
- en: Setting scope in ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is critical to set the scope of the **project** before starting the application
    security assessment. The scope defines the targets and boundaries of the assessment,
    such as targeting only pages in **192.168.254.61** in the *Setting scope in ZAP*
    section, as shown in *Figure 3**.1*. Setting up the scope prevents out-of-scope
    (*unauthorized*) testing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Sites | Session Properties to add scope](image/Figure_03.01_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Sites | Session Properties to add scope
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic on the OWASP Juice Shop application home page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need to start **OWASP Juice Shop**. In a browser window, while ZAP
    is intercepting traffic, navigate to the **OWASP Juice Shop** application using
    your IP address by entering the **3000** in your browser, as shown in *Figure
    3**.2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Accessing Juice Shop using the user’s IP Address](image/Figure_03.02_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Accessing Juice Shop using the user’s IP Address
  prefs: []
  type: TYPE_NORMAL
- en: Open ZAP, and in the *tree* window, click on the **New Context…** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Context Name** field, choose a name. In this example, I named a new
    context called **OWASP Juice Shop**, as shown in *Figure 3**.3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After choosing a name, in the **Top Node** field, click on **Select…** and choose
    the **https://IP Address:3000** node. In this example, my IP address is **localhost**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, enter something in the **Description** field if you wish, make sure that
    the checkbox next to **In Scope** is checked, and then click on **Save** for the
    new context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Setting up the scope](image/Figure_03.03_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Setting up the scope
  prefs: []
  type: TYPE_NORMAL
- en: Once you have finished setting up the scope for this project, we will discuss
    setting up user options for authenticated *spidering* and *scanning*, before moving
    on to describing how to use the **Spider** and **Audit** for an application.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By setting up the scope of the project, you will be able to select results and
    test for only in-scope items. Doing so will help ensure that you only examine
    applications that you have been authorized to text.
  prefs: []
  type: TYPE_NORMAL
- en: Crawling with the Spider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spidering builds upon the *Setting project options* section, and we’ll use this
    to crawl the OWASP Juice Shop proxy. Crawling with the Spider allows us to identify
    directories on *in-scope* applications. This is useful to identify what is readily
    available and is visible to the user from the public-facing internet. ZAP will
    be able to provide better results to a user, allowing you to have a better understanding
    of a web application to perform a more complete, passive, and active scan.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, ensure that ZAP is started and OWASP Juice Shop is running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you’ve added which application to add to your scope, we need to select
    the URL. Right-click and select **Spider**. As shown in the screenshot of *Figure
    3**.4*, several options are shown by right-clicking on the URL in the **Sites**
    or **Contexts** sections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Spidering from scope](image/Figure_03.04_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Spidering from scope
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve selected your scope, click on **Spider** to select **Starting Point**.
    Click on the **Select** icon, highlighted in green in *Figure 3**.5*, which will
    open a drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Spider scope](image/Figure_03.05_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Spider scope
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 3**.6*, you will select the in-scope application that you
    wish to use in the Spider. In this example, we are spidering our locally installed
    application, *OWASP* *Juice Shop*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Select Node](image/Figure_03.06_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Select Node
  prefs: []
  type: TYPE_NORMAL
- en: After clicking **Select** for the target application, you will be brought back
    to the **Spider** dialog window, as shown in *Figure 3**.7*, where the **Starting
    Point** field will show the *IP address* or *domain name* to the Spider. In our
    case, it lists the IP address of our application, which will be different from
    yours.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Starting Point](image/Figure_03.07_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Starting Point
  prefs: []
  type: TYPE_NORMAL
- en: The next feature is a **User** field, which allows you to select a configured
    user for authenticated spidering as well as session management. We will discuss
    more on how and some options for user setup in [*Chapter 4*](B18829_04.xhtml#_idTextAnchor142),
    *Authentication and* *Authorization Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: Further, you will notice a checkbox for **Recurse**. When selected, it will
    ensure all the nodes under the currently selected in-scope site will also be used
    to seed Spider.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, there are two more options to note in the **Spider** dialog window.
    The first option is **Spider Subtree Only**, which allows you to scan the application
    directory and anything inside the directory selected as a *starting point*. This
    setting will ignore the subdomain of the URL and will only use the subdirectory
    as the starting point. The other option is **Show Advanced Options**, as shown
    in *Figure 3**.8*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 – The Spider dialog checkboxes](image/Figure_03.08_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – The Spider dialog checkboxes
  prefs: []
  type: TYPE_NORMAL
- en: When checked, this feature will display as a second tab, which you can see in
    *Figure 3**.9*. It contains more options for the Spider scanner. This is good
    to know for cases where users have applications that are sensitive to crawlers.
    As good practice, if an application does not handle a request quickly, you will
    want to reduce threading for the spidering to prevent an application from crashing.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.9 – Spider Advanced options](image/Figure_03.09_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Spider Advanced options
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Spider works by discovering and identifying all the hyperlinks and directories
    in the selected application. The Spider will give you a complete view of the application
    by identifying the resources in an application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll continue with another commonly used feature known
    as the **AJAX Spider**. This integrated add-on can help a user crawl **Asynchronous
    JavaScript and XML** (**AJAX**)-rich web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Crawling with the AJAX Spider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AJAX web applications can use XML to transport data, but many web applications
    can equally use JSON text or plain text to transport data as well. AJAX is a way
    for web applications to update asynchronously (web services, API endpoints, and
    JavaScript fetch methods) by exchanging data with a web server on the backend.
    This allows a web page to update parts of a page without reloading it entirely.
    The AJAX Spider creates a proxy for ZAP to talk to **Crawljax**, which is an open
    source, event-driven, and dynamic crawling tool.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to crawl Juice Shop using ZAP, so start and run both before commencing
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are three methods to start AJAX crawling. The first method is in the **Sites**
    tree window. To start AJAX crawling, right-click on the site of choice to AJAX-crawl,
    hover over **Attack**, and click on **Ajax Spider…**, as shown in *Figure 3**.10*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.10 – Starting the AJAX Spider through the Sites tree](image/Figure_03.10_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Starting the AJAX Spider through the Sites tree
  prefs: []
  type: TYPE_NORMAL
- en: The second way to start the AJAX Spider is through the **Tools** tab by clicking
    on **AJAX Spider…**, as shown in *Figure 3**.11*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.11 – Starting the AJAX Spider from the Tools tab](image/Figure_03.11_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Starting the AJAX Spider from the Tools tab
  prefs: []
  type: TYPE_NORMAL
- en: The third and last method is through the **Information** window. To start the
    AJAX Spider, click on the **+** icon, and then add the **AJAX Spider** tab. Once
    this is done, you can click **New Scan** on the left-hand side, as shown in *Figure
    3**.12*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.12 – Starting the AJAX Spider from the Information window](image/Figure_03.12_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – Starting the AJAX Spider from the Information window
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have seen how to start the AJAX Spider, we will discuss what happens
    once you click on the **AJAX Spider** tab. By using the first two methods, or
    clicking on **New Scan** as a third method, an AJAX Spider configuration window
    will pop up. The configuration window contains seven options, as shown in *Figure
    3**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting Point**: Once you click on **Select…**, you can choose the node
    you would like to scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Context**: In this field, you will be able to select the context that you
    want to spider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: This is where you select a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just In Scope**: As the name suggests, when this box is checked, only nodes
    in scope will be AJAX-*spidered*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spider Subtree Only**: When this box is checked, resources under the **Starting
    Point** URI will be accessed only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser**: In this drop-down menu, you can select the desired browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Advanced Options**: As the name suggests, when this option is checked,
    additional options will be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.13 – The AJAX Spider Scope tab](image/Figure_03.13_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – The AJAX Spider Scope tab
  prefs: []
  type: TYPE_NORMAL
- en: 'When the last checkbox in the dialog window, **Show Advanced Options**, is
    checked, the **Option** tab will show. In the **Option** tab, there are seven
    more options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Number of Browser Windows to Open**: Select how many browser windows can
    be opened at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Crawl Depth**: Determines how deep the Spider can reach.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Crawl States**: Determines the maximum number of states the Spider
    can crawl.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Duration**: This option defines the maximum amount of time a crawler
    can run in minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Wait time**: Here, you can set the amount of time to wait when an event
    is fired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reload Wait time**: This configures the amount of time the crawler will wait
    once a page is loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allowed Resources**: This last setting will allow additional resources. This
    can be third-party scripts, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these options can be seen in *Figure 3**.14*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Figure_03.14_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.14 – The AJAX Spider Options tab
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected the option you desire, you can click on **Start Scan**
    to start the crawling. Once the scan is complete, the result can be viewed in
    the **AJAX Spider** tab in the **Information** window. Results will begin to populate
    in the **Sites** window after crawling. Expand the **Sites** tree to see new paths
    and flags, next to which the severity of the alert is indicated. In addition,
    resources that were found by the AJAX Spider will have a red spider symbol next
    to them, as shown in *Figure 3**.15*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.15 – Results from the AJAX Spider crawl](image/Figure_03.15_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Results from the AJAX Spider crawl
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the regular Spider, the Ajax Spider discovers and identifies all the
    hyperlinks and directories in the selected application, but it is more effective
    on AJAX applications.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the AJAX Spider section. Once spidering an application is complete,
    ZAP does one of two scans, which at first are automatic but can be manually triggered.
    In the next section, we’ll teach you about passive scanning.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AJAX is a group of technologies similar to DHTML or LAMP, combining the following:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML and CSS for markup and stylization data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Document Object Model** (**DOM**) to interact with data and dynamically
    display it in the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **XMLHttpRequest** (**XHR**) method for exchanging data asynchronously between
    a browser and a web server. This helps avoid page reloads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript Object Notation** (**JSON**) and XML formats to send data to a
    browser. Other common formats include pre-formatted HTML and plain text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript to bring all these listed technologies together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 3**.16* shows how this model communicates versus traditional web communications.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.16 – AJAX versus traditional web app communication model](image/Figure_03.16_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – AJAX versus traditional web app communication model
  prefs: []
  type: TYPE_NORMAL
- en: The AJAX engine, highlighted in orange in *Figure 3**.16*, is where you can
    make all requests manually by using the **XMLHttpRequest** object. Otherwise,
    a developer would use JavaScript libraries such as jQuery, Prototype, and YUI
    to create what AJAX replaces on the client side of your application. These libraries
    aim to hide the complexity of JavaScript development (i.e., cross-browser compatibility).
  prefs: []
  type: TYPE_NORMAL
- en: For the server side, some frameworks can help too (i.e., DWR or RAJAX (for Java)),
    but this isn’t necessary if you expose a service that returns only the required
    information needed to partially update a page.
  prefs: []
  type: TYPE_NORMAL
- en: Send HTTP requests from the client (browser) to the web server via AJAX, processing
    the server’s response without reloading the entire page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript then submits and receives the data response from the server (XML
    and JSON).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript updates the DOM dynamically and the user’s view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'See W3Schools for more information on how AJAX works and the XMLHTTPRequest
    option: [https://www.w3schools.com/js/js_ajax_http.asp](https://www.w3schools.com/js/js_ajax_http.asp).'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a web app passively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Passive scanning** is constantly running and recording findings in the background
    of the ZAP Proxy. It works by combing through traffic that passes into the ZAP
    Proxy. This is a passive background thread that does not affect the performance
    of an application because it scans traffic stored already on ZAP.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, all you need to do is start and run ZAP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When opening **Tools** | **Options**, scroll down on the left side until you
    see **Passive Scanner**. Here, you will have the configuration option checkboxes,
    asking you first whether only in-scope messages should be scanned and include
    traffic from the *fuzzers*. The last two options are for editing the maximum number
    of alerts per rule that can be raised and the maximum body size in bytes to scan
    on the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.17 – The Passive Scanner options](image/Figure_03.17_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – The Passive Scanner options
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For the shortcut hotkey, click and hold *Ctrl* + *Alt* and then press the letter
    *O* (*Ctrl* + *Alt* + *O*).
  prefs: []
  type: TYPE_NORMAL
- en: The last thing you need to know about passive scanning is that the findings
    will still be shown in the **Alerts** tab of the **Information** window on the
    main screen of the ZAP Proxy. Because this is passive, the findings will fill
    in here as you go along, navigating manually through the application. Examples
    of these findings can be seen in *Figure 3**.18*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.18 – The Alerts tab](image/Figure_03.18_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – The Alerts tab
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Passive scanning works by capturing and combing through traffic non-invasively
    into ZAP. These scans work in a background thread that does not affect the performance
    of an application.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, it can help to passively scan applications using other tools to compare
    scan results. This helps to understand false positives and ensure ZAP is capturing
    as intended.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another popular passive scanning tool is Wfuzz. To install it, go to [https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz).
  prefs: []
  type: TYPE_NORMAL
- en: Scanning a web app actively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **active scan** is as it sounds. ZAP will attempt to locate, fuzz, and enumerate
    an application based on known vulnerabilities and exploit them. Active scanning
    is explicitly an attack on a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '*Do not scan* web applications that you do not have permission to test.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Active scans will not account for *business logic vulnerabilities*. You will
    need to test these manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'A feature to keep in mind in ZAP is a script that can be added to the headers
    for all traffic passing through, which will aid in identifying ZAP traffic and
    **web application firewall** (**WAF**) exceptions. The script is **AddZAPHeader.js**,
    which adds a header (i.e., **X-ZAP-Initiator: 3**). If you are using Windows,
    the default install location is in the following path: **C:\Program Files\OWASP\Zed**
    **Attack Proxy\scripts\templates\httpsender**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that new *HttpSender* scripts will initially be disabled. Right-click the
    script in the **Scripts** tree and select **Enable**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to ensure that ZAP and OWASP Juice Shop are running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few ways to kick off an active scan. The first and easiest way is
    in the **Workspace** window, where using the **Automated Scan** feature will allow
    you to enter the URL being tested, and then you can proceed to click on **Attack**.
    This will first kick off the Spider and then actively start a scan with the default
    policies and options. To start an active scan with specific options, right-click
    on a URL in **Sites** in the **Tree** window, go to **Attack**, and then select
    **Active Scan**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open an **Active Scan** dialog window, where you can redefine the
    scope if needed, by using **Select** to open the list of *sites*. Here you can
    define other policies created by using the first drop-down button, define the
    context with the second drop-down button (which will only be available for use
    if a site is added to the context), define a user (only available if a user is
    defined for authenticated scanning), **Recurse** as seen in the **Passive Scan**
    dialog, and **Show Advanced Options**. By checking the box for advanced options,
    four new tabs will open, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input Vectors**: Overrides default input vectors that are defined in the
    **Options Active Scan Input Vectors** screen. Clicking on the **Reset** button
    will set the input vectors to the default options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When using all the options, you will increase the length of the scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'These options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Injectable Targets**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL Query String and** **Data-Driven Nodes**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add URL** **Query Parameter**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST Data**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL Path**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Headers**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All Requests**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie Data**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build-In Input** **Vector Handlers**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multipart Form-Data**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML Tag/Attribute**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google** **Web Toolkit**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OData ID/Filter**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Script Input Vectors**: These are scripts written or imported to allow
    a user to target elements not supported by default. They also configure parameters
    to be ignored by the active scanner in the **Add Alert** dialog window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Input Vectors** items that we have just
    covered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.19 – Active Scan | Input Vectors](image/Figure_03.19_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – Active Scan | Input Vectors
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom Vectors**: This allows users to specify locations in a request to
    attack. This is only available if the **Recurse** option is not selected, so you
    need to highlight the characters to attack and click the **Add** button. Multiple
    custom input vectors can be added, and to remove them, highlight any of the selected
    characters and click the **Remove** button. Checking the **Disable Non-custom
    Input Vectors** box disables all the input vectors except those that were manually
    defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Custom** **Vectors** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.20 – Active Scan | Custom Vectors](image/Figure_03.20_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Active Scan | Custom Vectors
  prefs: []
  type: TYPE_NORMAL
- en: '**Technology**: This specifies which types of technologies to actively scan.
    Un-select by using the checkbox next to the type of technology that you are certain
    is not present in the target application, as shown in *Figure 3**.21*. This will
    speed up the scan so that scan rules for targets will skip those tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.21 – Active Scan | Technology](image/Figure_03.21_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – Active Scan | Technology
  prefs: []
  type: TYPE_NORMAL
- en: '**Policy**: This allows you to override any of the settings specified in the
    selected scan policy. In this case, we are using **Default Policy**, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.22 – Active Scan | Policy](image/Figure_03.22_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – Active Scan | Policy
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also look at the **Filter** tab. This tab allows a user to specify criteria
    to filter in the active scan, based on these four filtering criteria:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Method**: Modifying this will change whether HTTP methods are permitted
    and checked in a scan'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status Code**: Modifying this will change whether status codes are permitted
    and checked in a scan'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include/Exclude Tags**: A short piece of text to associate with a request'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL Inc./Exc Regex**: A regex pattern to include or exclude'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once all your scanning has been completed, you’ll want to generate a report
    where you can easily review the findings.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An active scan works by scanning your application against publicly known vulnerabilities
    and trying to exploit them. It will also enumerate the application and find the
    available resources and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Once all your scanning has been completed, you’ll want to generate a report
    where you can easily review the findings.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In simple terms, it can be beneficial to actively scan using some other tools
    to help achieve better results and compare scanners to eliminate false positives.
    Different tools will parse through the applications differently.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a list of other open source scanning tools that are available for download
    and installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arachni scanner: [https://www.arachni-scanner.com/](https://www.arachni-scanner.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wapiti scanner: [https://wapiti-scanner.github.io/](https://wapiti-scanner.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with all **Dynamic Analysis Security Testing** (**DAST**) scanners, ZAP comes
    with the ability to generate a report that allows a user to review findings and
    receive evidence (i.e., requests and responses), a description of the findings,
    as well as remediation suggestions. All this data in a report is useful to determine
    metrics when liaising with executive leadership, and it is also useful for developers
    to understand issues when updating or resolving code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to proceed with this recipe, you need to make sure that you have ZAP
    started and that you have already scanned an application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with reports, within the *top-level menu* bar, select the drop-down
    menu of **Report** to open a panel of options. *Figure 3**.23* shows the various
    options available. Other add-ons can be selected in the Marketplace that provide
    additional features for reports. We won’t be going over the additional add-ons,
    but it’s worth noting that they are available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.23 – The Report menu](image/Figure_03.23_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – The Report menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The following features are straightforward based on the name in the **Report**
    drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Export Messages to File…**: This is where you save requests and responses
    to a text file. First, choose which messages to save by selecting one or more
    in the **History** tab, located in the **Information** window. Use the *Shift*
    key to select more than one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export Response(s) to File…**: Use this option to save a specific response
    to a text file. Again, within the **History** tab located in the **Information**
    window, select the relevant messages to be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Binary responses (i.e., images) can be saved in addition to test responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Export All URLs to File…**: To save all URLs accessed to a text or HTML file,
    use this option. This can be used to compare URLs you’ve come across, compare
    users with different roles (i.e., admin versus auditor), or compare varying user
    permissions on the same system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export Selected URLs to File…**: Use this option to export specific or multiple
    URLs and subdomains from the **Sites** tree to a text file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export URLs for Context(s)**: Within the **Sites** tree, each URL within
    the selected *context* will be exported. You can also right-click on the **Context**
    node to export from there. Just note that the URL from the **Sites** tree must
    be added to the context first before using this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compare with Another Session…**: This option requires you to have saved a
    previous ZAP session that will then open a menu for you to select the saved output
    file from your local directory. It then loads into the current ZAP session for
    comparison. The file will contain the URLs listed in a table that includes the
    HTTP status for the URLs of both sessions. Within the **.html** report (as shown
    in *Figure 3**.24*), you have a few options for viewing any data from all sessions
    – the first session only, the second session only, or a comparison of both. The
    **Both** option only shows URLs that are contained in both, whereas the **Any**
    option shows all URLs. However, it’s the HTTP status that differentiates which
    URL from which session responded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.24 – A .html comparison report](image/Figure_03.24_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – A .html comparison report
  prefs: []
  type: TYPE_NORMAL
- en: This report is handy for comparing two sessions where different users have accessed
    the same application. It allows you to see which users have visibility to which
    URL and grants the ability to understand which URLs or paths a user logged in
    and successfully accessed the domain with.
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate Report …**: This is the last option and will open a dialog window
    with options to customize your configuration for your report. At first glance,
    you will see four different option tabs in the **Generate Report** dialog, as
    shown in *Figure 3**.25*, which are **Scope**, **Template**, **Filter**, and **Options**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within **Scope**, you give your report a title, name it, choose which local
    directory to save your report to, give a brief description of what the report
    is about, and select one or more *contexts* and *sites* to place in the report.
    The two checkboxes, **Generate If No Alerts** and **Display Report**, are there
    to allow you to generate a report with no alerts and also open it using your computer’s
    default program of choice for that report type.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.25 – The Generate Report dialog | Scope](image/Figure_03.25_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – The Generate Report dialog | Scope
  prefs: []
  type: TYPE_NORMAL
- en: 'The next tab is **Template**, as shown in *Figure 3.26*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.26 – The Generate Report Dialog | Template](image/Figure_03.26_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – The Generate Report Dialog | Template
  prefs: []
  type: TYPE_NORMAL
- en: This comes with a drop-down menu that contains all of the available templates.
    Templates included for the report can be formatted in several different file types,
    such as HTML, MD, and PDF (see *Figure 3.27*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.27 – The Generate Report Dialog | the Template drop-down menu](image/Figure_03.27_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – The Generate Report Dialog | the Template drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: '**Theme** is for applying different colors and/or styles but only if these
    are defined in the selected template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lastly, **Sections** is for parts of the report that you want to be included
    or excluded. If the selected template has defined sections, then there will be
    a checkbox for each section displayed. By unselecting any of the sections, you
    will exclude them from the overall report.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: By default, all the checkboxes will be selected.
  prefs: []
  type: TYPE_NORMAL
- en: Next is **Filter**, which allows you to specify which severity level to include
    in a report, as shown in *Figure 3.28*. This option also allows you to select
    the level of confidence (or level that ZAP determines as highly possible) and
    a checkbox for filtering on *false positives*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 3.28 – The Generate Report dialog | Filter](image/Figure_03.28_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 – The Generate Report dialog | Filter
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is an **Options** tab with **Report Name Pattern** and **Template
    Directory** fields (*Figure 3.29*). **Report Name Pattern** gives you a simple
    way to define how the report name structure is set. **Template Directory** sets
    the path of the local directory where your templates are loaded from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to change the **Template Directory** setting unless you have
    designed a new report. Otherwise, the **Reports** folder in the ZAP home directory
    is set by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.29 – The Generate Report dialog | Options | Template Directory](image/Figure_03.29_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – The Generate Report dialog | Options | Template Directory
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The report works by gathering all the findings and evidence and combining them
    in a report that can be downloaded and submitted to parties. The options and configurations
    in the **Generate Report** dialog box are used to customize the report.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check out these other open source tools for building reports:'
  prefs: []
  type: TYPE_NORMAL
- en: 'WriteHat: [https://github.com/blacklanternsecurity/writehat](https://github.com/blacklanternsecurity/writehat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Serpico: [https://github.com/SerpicoProject/Serpico](https://github.com/SerpicoProject/Serpico)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
