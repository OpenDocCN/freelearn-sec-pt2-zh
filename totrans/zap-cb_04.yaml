- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication and Authorization Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [*Chapter 4*](B18829_04.xhtml#_idTextAnchor142)! We are as excited
    as you that you have gotten to this chapter. In this chapter, we will cover numerous
    topics surrounding authentication and authorization testing to learn more about
    the varying ways to attack these mechanisms. Authentication is the process of
    verifying the validity of the identity of who’s attempting to access a system
    or application. Authorization also helps us verify that a requested action or
    service is approved for a specific entity.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Bypassing Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for Credentials Transported over an Encrypted Channel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for Default Credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Directory Traversal File Include
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for Privilege Escalation and Bypassing Authorization Schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for Insecure Direct Object References
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, it is required that you install the OWASP ZAP and OWASP Juice
    Shop on your machine, as you want to be able to intercept the traffic between
    your browser and OWASP Juice Shop using ZAP.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Bypassing Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of an authentication schema is to validate the identity of the user
    being authenticated. Examining the authentication function starts with understanding
    how the authentication process validates the user account. When an authentication
    schema is vulnerable, attackers are able to bypass the authentication process.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple methods that can be used to bypass the authentication schema.
    Some of the methods to bypass include (but are not limited to) intercepting authentication
    requests if the application utilizes weak encryption, not correctly implementing
    input validation (which makes injection attacks possible), predicting session
    IDs if they follow a certain pattern, and misconfigurations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, Juice Shop must be running, and ZAP should be intercepting
    the traffic between the browser and Juice Shop.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will bypass the authentication schema by performing a basic
    SQL injection attack to log in to the administrator account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the lab, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the login page of Juice Shop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open ZAP and *set break on all requests and responses* by clicking on the green
    circle on the top menu, which will make it change color to red, as seen in *Figure
    4**.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Set breakpoint button](image/Figure_04.01_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Set breakpoint button
  prefs: []
  type: TYPE_NORMAL
- en: Open the Juice Shop application again, enter an apostrophe (**'**) in the username
    and password section, and press *Enter* (*return* in macOS). You will see the
    request is stopped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Step** four or five times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The goal is to see the response of the request that contains the apostrophe
    username and password. In *Figure 4**.2*, we can see the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Request with username and password fields](image/Figure_04.02_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Request with username and password fields
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 4**.3*, we can see the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Response showcasing an error](image/Figure_04.03_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Response showcasing an error
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the response contains the type of database that is being used
    and the SQL query submitted.
  prefs: []
  type: TYPE_NORMAL
- en: This information should not be shown to a user. Click on **Continue**, and you
    will see the **"[object Object]"** error under **Login**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By seeing all of this, we can tell that the website is vulnerable to SQL injections.
  prefs: []
  type: TYPE_NORMAL
- en: Now, enter **' or 1=1 --+** in the username field and any character in the password
    field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the **1=1** statement is true, the SQL injection works. The **--** symbols
    (dashes) comment everything after the query statement from the backend. In this
    case, the password will be commented out.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Login** to see that the SQL injection worked by showing whether the
    login was successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you click on **Account** in the top-right menu, you can see that we are
    logged in as **admin@juice-sh.op**, as seen in *Figure 4**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Account login](image/Figure_04.04_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Account login
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we performed a SQL injection to bypass the authentication schema.
    SQL injection is one of the methods used to bypass the authentication process.
    It is possible to perform SQL injection to bypass the authentication if the application
    does not validate the user’s input.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Credentials Transported over an Encrypted Channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will walk through how to verify that the user’s login username
    and password are transmitted to the web server from the browser over an encrypted
    channel. It is crucial for an application to send login information or any sensitive
    data such as session IDs over an encrypted channel. The data transmitted between
    the application server and the user’s browser can be intercepted by an attacker,
    and if the traffic is encrypted, the attacker will not be able to read the data
    being transmitted.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To know whether a website is accessible and transmits data over **Hypertext
    Transfer Protocol** (**HTTP**) or **Hypertext Transfer Protocol Secure** (**HTTPS**),
    we have to intercept the login HTTP request. Let’s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure ZAP to intercept traffic, and then log in to the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After intercepting the **login** request, search for and open it in ZAP. It
    will be in the **History** tab of the Information window. *Figure 4**.5* shows
    the **login** request’s header, which contains the fields you want to examine
    for this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 4.5 – Login request header](image/Figure_04.05_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Login request header
  prefs: []
  type: TYPE_NORMAL
- en: Examine the HTTP method and the **Referer** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The HTTP method field is the first line, which is used to transmit the data.
    The start of the address will determine whether HTTPS is used versus HTTP. *Figure
    4**.5* shows **http**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, examine the **Referer** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This field shows the address of the page the request started from. Just like
    in the HTTP method field, the start of the address in the **Referer** field determines
    whether the originating web page is accessible through HTTP or HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two main internet protocols that are used to transmit web application
    data. The first protocol is HTTP, which transmits data unencrypted. The second
    protocol is an extension of HTTP – HTTPS, which is used to encrypt web traffic.
    HTTPS uses **Transport Layer Security** (**TLS**), which superseded **Secure Sockets
    Layer** (**SSL**), to encrypt web communications. Using HTTP will unintentionally
    expose the end user’s data by sending requests in plaintext that can easily be
    read and manipulated by the attacker.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Default Credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will go over how to test an application for default credentials.
    Often, newly provisioned applications, servers, routers, hosts, and so on come
    with default passwords for system administrators to log in and configure. If these
    are left as defaults, when attackers run brute-force attacks, the likelihood of
    a successful login is higher. We will go through how to conduct a simple brute-force
    attack using a wordlist.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page. In
    addition, you will need to create an account in OWASP Juice Shop using any dummy
    email, but ensure that the password is **password** for this section. In addition,
    obtain the password-cracking wordlist (**'top-passwords-shortlist'**) from GitHub
    or a Google search.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Intercept the traffic, then log in to the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By logging in to the application, you will see the **POST** request, as shown
    in *Figure 4**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Site''s tree window POST request location](image/Figure_04.06_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Site's tree window POST request location
  prefs: []
  type: TYPE_NORMAL
- en: From here, we’ll begin our brute force of the **login** request credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the **POST:login()** request, select **Attack**, and then select
    **Fuzz…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Site''s tree window](image/Figure_04.07_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Site's tree window
  prefs: []
  type: TYPE_NORMAL
- en: 'Highlight the field to brute-force and click **Add…**, as shown in *Figure
    4**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Fuzzer dialog and locations](image/Figure_04.08_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Fuzzer dialog and locations
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on the **Add…** button, as shown in *Figure 4**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Payloads dialog list](image/Figure_04.09_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Payloads dialog list
  prefs: []
  type: TYPE_NORMAL
- en: This opens the window to allow you to select your payloads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Type** dropdown and select **File**, as shown in *Figure 4**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Add Payload dialog file drop-down menu](image/Figure_04.10_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Add Payload dialog file drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the window open, select the wordlist we downloaded earlier in
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: Select **worldlist**, as shown in *Figure 4**.11*, and click **Open**, **Add**,
    and **OK**. After that, your **Fuzzer** window will look like *Figure 4**.8*.
    Now, you are ready to launch your fuzzer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Add Payload dialog file directory view](image/Figure_04.11_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Add Payload dialog file directory view
  prefs: []
  type: TYPE_NORMAL
- en: Click **Start Fuzzer**. A new tab opens, and ZAP starts testing the field you
    highlighted, containing the payloads that were added.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.12 – Fuzzer information\uFEFF window](image/Figure_04.12_B18829.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Fuzzer information window
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you notice, the payload “password” works. This is because the application
    returns a **200** code, as shown in *Figure 4**.12*, which lets you know that
    the password the fuzzer used to test the password field works. This example can
    be applied to any other login screen and any application that uses a password.
    When using it with an application that has default credentials, you can test multiple
    credentials at a time to try to brute-force the login page.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When choosing the wordlist to include for attacks such as brute-force, understand
    who and what your target is to craft specific lists (i.e., Apache Tomcat having
    the username and password of **tomcat** and **tomcat**).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Directory Traversal File Include
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Directory traversal, also known as path traversal, file include is where an
    attacker looks to exploit a lack of input validation or weakly deployed methods
    to read or write files that are not authorized or warranted to be accessible.
    In this recipe, we will discover the method of how attackers conduct such an attack,
    which is known as the “dot dot slash” (**../**) attack.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, ensure that ZAP is started and use the PortSwigger Academy lab, **File
    path traversal,** **simple case**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To determine which part of the application is vulnerable to input validation
    bypassing, you need to enumerate all parts of the application that accept content
    from the user’s perspective. This includes HTTP **GET** and **POST** queries and
    common options such as file uploads and HTML forms. Let’s look at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Capture the web application in ZAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Spider the web application and look for any areas where there’s an image file
    or other input parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Get:image(filename)](image/Figure_04.13_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Get:image(filename)
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the PortSwigger Academy lab, view any image on the web page or
    open the **GET** request for **image(filename)** in the Request editor to see
    the request of the filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Request editor** on the **GET** request for **image(filename)**
    and modify the filename to inject the file traversal attack, as shown in *Figure
    4**.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Request Editor for file path traversal](image/Figure_04.14_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Request Editor for file path traversal
  prefs: []
  type: TYPE_NORMAL
- en: 'When a file path is vulnerable, the response will reflect the newly requested
    file; in our example, the attack called for the **/etc/passwd** file, as shown
    in *Figure 4**.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.15 – Response reflected /et\uFEFFc/passwd](image/Figure_04.15_B18829.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Response reflected /etc/passwd
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Directory traversal attacks aim to access files or other directories that sit
    outside of the web root directory. Web servers and web applications usually employ
    authentication controls for accessing files and resources. Administrators attempt
    to identify the users and groups allowed to access, modify, or execute specific
    files on the server. To protect against malicious intent, an **Access Control
    List** (**ACL**) is used to prevent access to sensitive files (i.e., **/etc/passwd**)
    or avoid the execution of system commands.
  prefs: []
  type: TYPE_NORMAL
- en: ACLs are a common method to manage images and templates, load static texts,
    and so on, and unfortunately, improper validation of the input parameters (i.e.,
    forms and cookie values) will expose the applications to security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, some parameters are blocked and the attacker needs to use other methods
    in their input, such as HTML encoding or double encoding. For these other strings,
    refer to GitHub and look for cheat sheets or other payloads to help build your
    word list. Then, use the fuzzer to quickly load and attack the parameter of choice.
  prefs: []
  type: TYPE_NORMAL
- en: See also the *Fuzzing with Fuzzer* section in [*Chapter 2*](B18829_02.xhtml#_idTextAnchor062),
    *Navigating* *the UI*.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Privilege Escalation and Bypassing Authorization Schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to talk about two vulnerability types: the first
    is privilege escalation and the second is bypassing authorization schema. The
    lab will be for both vulnerabilities because once we escalate privilege, we will
    perform unauthorized actions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a privilege escalation attack, an attacker gains elevated permissions or
    performs actions intended for different users. Typically, this attack is possible
    due to a misconfiguration, software bug, or a vulnerability that allows the attacker
    to escalate their permissions. There are two types of privilege escalation: the
    first is vertical privilege escalation. In this attack, the attacker successfully
    gains more permissions (such as user-to-administrator permissions) than their
    account is supposed to have. The second type is horizontal privilege escalation.
    In this attack, the attacker performs an action that is not intended for their
    user account but for an account with a similar level of permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing authorization comes into play when an attacker obtains the ability
    to access the resources of a user when they are not authenticated, hence bypassing
    them. This vulnerability presents itself when access to resources is achievable,
    either after logging out of an application or accessing functions and resources
    that are only accessible and intended for a user with the proper role or privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow along in this lab, you should have OWASP Juice Shop running and ZAP
    intercepting the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this lab, we will perform a horizontal privilege escalation by viewing the
    items in another user’s cart. The following steps will guide you in performing
    privilege escalation in Juice Shop:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in as the administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The admin email (in this case, used as a username) is [admin@juice-sh.op](mailto:admin@juice-sh.op)
    and the password is **admin123**. The username is obtained from the **Reviews**
    section when **Apple Juice** is selected. We obtained the password by brute-forcing
    the password using a common password list.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the admin page at **https://[Your IP address** **or localhost]:3000/#/administration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The path to the administrator page was obtained by using the developer tools
    of the browser and reading the **main.js** file.
  prefs: []
  type: TYPE_NORMAL
- en: Obtain the user ID by clicking on the *eye* symbol next to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The user ID is needed in order to view the shopping cart of the **bender@juice-sh.op**
    user. Once the eye is clicked, you can see the user ID after the **#** sign, which
    is **3** in this case, as seen in *Figure 4**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – User ID](image/Figure_04.16_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – User ID
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have obtained the user ID, we have to create a new user account
    to get an account with normal user permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Log out of the admin account, click on **Account** | **Login**, click on **Not
    yet a customer?**, and fill out the information required for the user account.
    Once you have created the user account, log in to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open ZAP, add **Juice Shop** to the scope, and *set break on all requests and
    responses* by clicking the green circle on the top menu bar, which will make it
    turn red, as seen in *Figure 4**.17*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.17 – Setting break](image/Figure_04.17_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – Setting break
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **Your Basket** on the top menu. When you click on it, you will see
    the request stopped by ZAP and available for you to edit. The first line starts
    with **GET** (the HTTP method used); immediately after that, you can see the path
    followed by the protocol version. Notice that the end of the path contains the
    number, which refers to the user ID. See *Figure 4**.18*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Request header of userID](image/Figure_04.18_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Request header of userID
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace 6 with the user ID 3, as seen in Figure 4.19\. Click on **Continue**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Replace request header](image/Figure_04.19_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Replace request header
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can see the **bender@juice-sh.op** basket, as seen in *Figure 4**.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – OWASP Juice Shop basket](image/Figure_04.20_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – OWASP Juice Shop basket
  prefs: []
  type: TYPE_NORMAL
- en: 'To further perform unauthorized actions, let’s delete **Raspberry Juice** from
    mailto:[bender@juice-sh.op](mailto:bender@juice-sh.op) basket. Refresh and repeat
    *steps 5* to *7* to check that the basket is empty now, as seen in *Figure 4**.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 4.21 – \uFEFFEmpty basket](image/Figure_04.21_B18829.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Empty basket
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lab showed you how privilege escalation works. In this specific lab, we
    viewed another user’s basket by changing the ID in the **GET** request. These
    types of attacks are dangerous because an attacker could perform an action on
    behalf of others, and if the escalation is vertical, the attacker will have permission
    that could allow them to compromise an entire system or an application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Insecure Direct Object References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Insecure Direct Object References** (**IDOR**) occur when an application
    references objects in an insecure way that allows user-supplied input to manipulate
    and directly access those objects. Attackers that exploit this vulnerability are
    able to bypass authorization and directly access resources on the server (i.e,
    database records or files).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, ensure that ZAP is started and use the PortSwigger Academy lab, **Insecure
    direct** **object references**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we’ll attack a live chat feature of the application, which will allow
    us to view other users’ messages to the fictitious web app support. Let’s look
    at the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by navigating in the PortSwigger Academy lab to the **Live** **Chat**
    feature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While capturing the traffic, click the **View** **Transcript** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that this downloads a numbered text file. When you look at
    the response in ZAP’s Manual Request Editor, you are able to manipulate the number
    of the file, as seen in *Figure 4**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Request and response of the IDOR attack](image/Figure_04.22_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Request and response of the IDOR attack
  prefs: []
  type: TYPE_NORMAL
- en: Change the number to **1** and observe the response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the response, you will notice the chat between the support bot and someone
    else. Revealed within is the user sending their password in cleartext.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most basic IDOR scenario happens when the application references objects
    using easy-to-guess numerical values, such as incremental integers, as we saw
    and conducted our test on. These fields can also contain probable words, such
    as a user’s email address, or a directory name. Other times, poor encoding methods
    are used, allowing the attacker to decode something – for example, the use of
    base64 encoding on the incremental integer, or a profile image name hash reference.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to test for IDOR would be to request or create at least two users
    to cover different owned objects and functions – for example, two users each having
    access to different objects (such as purchase information, private messages, etc.)
    – and (if relevant and able) creating users with different privileges (i.e., admin
    versus auditor) to see whether there are direct references to application functionality.
    With multiple users, the tester is able to save time by not having to guess what
    the different object names are when attempting to access those objects that belong
    to other users.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some other areas to look for when testing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the value of a parameter is used directly to retrieve a database record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the value of a parameter is used directly to perform an operation in
    the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the value of a parameter is used directly to retrieve a filesystem resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the value of a parameter is used directly to access application functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
