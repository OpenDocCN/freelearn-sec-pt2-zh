- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validating (Data) Inputs – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You made it to [*Chapter 6*](B18829_06.xhtml#_idTextAnchor229), the meat and
    potatoes of hacking! In this chapter are the attack vectors that everyone comes
    to know, love, hate, and want to recreate. Here, we’ll begin digging our hands
    into attack methods that exploit fields or objects susceptible to input validation
    issues, poor encoding practices, or lack of parameterization on the backend with
    database inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Though many are aware of attacks such as **cross-site scripting** (**XSS**)
    that can exploit sessions or **Structured Query Language** (**SQL**) Injection
    attacks to bypass authentication or pull data across from databases, we’ll also
    dig into many more attacks that capitalize on the same poor coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for reflected XSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for HTTP verb tampering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for **HTTP Parameter** **Pollution** (**HPP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for SQL Injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, it is required that you install **OWASP Zed Attack Proxy**
    (**OWASP ZAP**) and OWASP Juice Shop on your machine to intercept traffic between
    the browser and OWASP Juice Shop. In addition, utilize your PortSwigger account
    for access to the PortSwigger Academy labs that will be used in this chapter’s
    recipes. Last, the use of the Mutillidae II Docker environment is required to
    complete some of the attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for reflected XSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The XSS vulnerability is one of the most common web application injection attacks.
    This attack falls into number 3 in the *OWASP Top 10:2021 – Injection* category.
    XSS tricks the user’s browser into running malicious JavaScript code that an attacker
    has crafted to steal a user’s sensitive information, such as session cookies or
    passwords. In some cases, the attacker could take over the entire application
    if the session information of an administrator account were to be compromised.
    XSS attacks are possible in any application that uses input data from a user to
    produce an output. There are multiple XSS vulnerability types: Reflected XSS,
    Stored XSS, and DOM XSS. DOM XSS will be discussed in [*Chapter 9*](B18829_09.xhtml#_idTextAnchor320),
    *Client-Side Testing*.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will attack the OWASP Juice Shop application with a Reflected
    XSS payload and intercept the traffic using ZAP to manipulate the request and
    see the attack reflected, back in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lab requires a running Juice Shop application and ZAP being able to intercept
    requests and responses from the server to your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Reflected XSS vulnerability happens when the application accepts the user’s
    input and displays it in the response output. Reflected XSS is not stored in the
    application permanently (non-persistent), unlike Stored XSS (persistent).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are used to exploit an XSS vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: Open OWASP Juice Shop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Intercept the web application with OWASP ZAP with **Set** **Break** enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following payload into the **Search** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the reflected payload pop-up alert in the browser, as seen in *Figure
    6**.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.1 – XSS payload reflected](image/Figure_06.01_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – XSS payload reflected
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether an XSS attack is reflected or stored, the result is always the same.
    The payload’s entry into the server’s system is what makes these two different.
    Never assume that a “read-only” website is immune to reflected XSS attacks. The
    end user may experience a range of issues as a result of XSS, from minor annoyances
    to full account compromise. By disclosing the user’s session cookie, XSS attacks
    provide the attacker access to the user’s session and account. Depending upon
    the level of privilege a user has, such as administrator-level privileges, this
    could increase the risk.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'XSS attacks are common, and preventing them is critical. The following are
    two methods of protecting against XSS attacks. Keep in mind that these are not
    the only options to protect against XSS attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Encoding non-alphanumeric characters to prevent the browser from executing
    the code**: You can utilize a library or framework that automatically encodes
    or escapes user input so that it is not perceived as code. In an HTML environment,
    for example, you may use Python’s **html.escape()** method or JavaScript’s **HTMLElement.textContent**
    property to encode user input so that it is interpreted as plaintext rather than
    executable code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validating the user’s input submitted by the user and allowing a specific
    list or type of input**: Using a whitelist of permitted characters rather than
    a blacklist of prohibited characters is one technique for doing this. You may,
    for instance, restrict input to alphanumeric letters and a few basic symbols while
    disallowing any input that comprises HTML or JavaScript elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s also a good idea to employ a **Content Security Policy** (**CSP**) to indicate
    which sources are permitted to execute scripts on your site, as well as to include
    input sanitization in your server-side validation process. Even if an attacker
    succeeds in circumventing your client-side validation, this can assist in avoiding
    XSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Stored XSS** (**XSS Type II**) is a persistent attack also known as second-order
    XSS. It occurs when an application obtains malicious data from an unreliable source,
    stores it in its servers, and then includes that data inadvertently in subsequent
    HTTP responses. This attack utilizes the same methods as Reflected XSS.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on XSS, go to the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-community/attacks/xss/](https://owasp.org/www-community/attacks/xss/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more payloads, visit GitHub to search for more, or go to the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/payloadbox/xss-payload-list](https://github.com/payloadbox/xss-payload-list)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for HTTP verb tampering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using various HTTP methods to access system objects, HTTP Verb Tampering
    evaluates how the web application reacts. The tester should attempt to reach each
    system object found during spidering using each HTTP method.
  prefs: []
  type: TYPE_NORMAL
- en: '**GET** and **POST** requests aren’t the only request types that the HTTP specification
    supports. Developers may not have anticipated how a standard-compliant web server
    will react to these alternate approaches. Although *verb tampering* is the usual
    term for these requests, the *RFC 9110* specification refers to them as various
    HTTP methods.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll explore the use of a few of these HTTP verbs to understand
    the response that occurs from the server and how this can be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lab requires an account with PortSwigger Academy and a working copy of
    ZAP to intercept requests and responses from the server to your browser. We will
    be utilizing the *Information disclosure due to insecure configuration* lab for
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, the administrative interface has an authentication bypass flaw.
    In order to take advantage of it, the attacker must understand the specific HTTP
    header that the frontend uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are used to exploit HTTP verb tampering:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by intercepting web traffic in ZAP using **Manual Explore** from the **Quick
    Start** menu, and within **Manual Explore**, enable **Set Break** and refresh
    the web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By browsing to the **/admin** path, notice the **GET** request. The response
    will disclose an **Admin interface only available to local** **users** message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Resend the request, but replace **GET** with the **TRACE** method (see *Figure
    6**.2*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.2 – TRACE request](image/Figure_06.02_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – TRACE request
  prefs: []
  type: TYPE_NORMAL
- en: 'The **X-Custom-IP-Authorization** header will now contain your IP address,
    appended to your request. This is used to determine whether the request came from
    the localhost IP address, as shown in *Figure 6**.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Response containing the IP address](image/Figure_06.03_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Response containing the IP address
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Replacer** (*Ctrl* + *R*). This will be used to match and replace a
    header. Create a description, and leave **Match Type** as **Response Body String**.
    Add the following to the **Replacement** **String** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The IP address is the same IP address seen in the HTTP Response when you tried
    visiting the /admin page in *Step 3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the **Replacement String** field as seen in *Figure 6**.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 6.4 – Match / Replace String](image/Figure_06.04_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Match / Replace String
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'For the **Replace** rule per the OWASP documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Response** **Body String:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this case, the Match String instance will be treated as a string or regular
    expression (regex).If it is present in the response body, then it will be replaced
    by the* *replacement text.*'
  prefs: []
  type: TYPE_NORMAL
- en: Check the **Enable** check box and click **Save**. ZAP will now add this to
    every request you send.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse back to the home page. Notice that you now have access to the **Admin
    panel** link (displayed in *Figure 6**.5*) and can then delete the user, **Carlos**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Admin panel](image/Figure_06.05_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Admin panel
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTTP **TRACE** method is intended for troubleshooting. When you enable the
    **TRACE** method, the web server will run a message loopback test along the path
    to the target resource.
  prefs: []
  type: TYPE_NORMAL
- en: Although this behavior is usually harmless and often used by developers for
    useful debugging purposes, if configured incorrectly, it can result in the leaking
    of private data, including internal authentication headers added by reverse proxies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are other standard methods commonly used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GET**: Transfer a current representation of the target resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HEAD**: Same as **GET**, but do not transfer the response content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST**: Perform resource-specific processing on the request content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PUT**: Replace all current representations of the target resource with the
    requested content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DELETE**: Remove all current representations of the target resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CONNECT**: Establish a tunnel to the server identified by the target resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OPTIONS**: Describe the communication options for the target resource'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TRACK**: Define text tracks for components with **audio>** or **video>**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember that the web server handles the **TRACE** verb. Your request may be
    routed through additional components on its way to the web server, such as a **web
    application firewall** (**WAF**) or load balancer. If that WAF includes headers,
    your **TRACE** response will include those headers, allowing you to obtain more
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**XMLHttpRequest** (**XHR**) will no longer send a **"TRACE"** request in modern
    browsers, and the **Cross-Origin Resource Sharing** (**CORS**) framework prevents
    XHR requests to foreign sites that do not explicitly allow them. As a result,
    old attacks seen in **cross-site tracing** (**XST**) are no longer effective.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further information on *RFC 9110*, please visit [https://www.rfc-editor.org/rfc/rfc9110.html#method.overview](https://www.rfc-editor.org/rfc/rfc9110.html#method.overview).
  prefs: []
  type: TYPE_NORMAL
- en: For more reading on **Web Distributed Authoring and Version** (**WebDAV**),
    please visit [http://www.webdav.org/specs/rfc2518.html](http://www.webdav.org/specs/rfc2518.html)
    or [https://datatracker.ietf.org/doc/html/rfc4918](https://datatracker.ietf.org/doc/html/rfc4918)
    (*RFC 4918*).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'If WebDAV extensions are enabled, these may permit several more HTTP methods:
    **PROPFIND**, **PROPPATCH**, **MKCOL**, **COPY**, **MOVE**, **LOCK**, and **UNLOCK**.'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for HTTP Parameter Pollution (HPP)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to go over HPP, and you will learn that by polluting
    a parameter, an attacker could take advantage of creating an account and take
    over another user’s account for their use.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this recipe, please start ZAP and OWASP Juice Shop. Make sure
    that ZAP intercepts traffic at the OWASP Juice Shop application home page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we’ll lead you through the steps on how to conduct HPP in OWASP
    Juice Shop. We are going to pollute the email field by adding a second value,
    which will allow the account creation process to establish an account with the
    attacker’s email in place of the victim’s email.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps guide you through this process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open ZAP and enable interception on ZAP by clicking **Set break on all requests
    and responses**, which will turn from green to red when enabled. See *Figure 6**.**6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Setting a break](image/Figure_06.06_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Setting a break
  prefs: []
  type: TYPE_NORMAL
- en: You also will need to step through each request since this configuration will
    stop all requests sent by the browser and responses.
  prefs: []
  type: TYPE_NORMAL
- en: Start by going to **Account** then **Login** then **Not Yet** **a Customer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **victim@email.com** email address with any password and anything for
    the security question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click **Register**, go to ZAP and look at the request, then enter
    the attacker email by copying the field name and the value, as shown in *Figure
    6**.7*, and forward the request on ZAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Request to change to attacker email](image/Figure_06.07_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Request to change to attacker email
  prefs: []
  type: TYPE_NORMAL
- en: 'After you send the request, the response will show the successful registration
    of the account but now with the attacker’s email instead of the victim’s email.
    See *Figure 6**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Response of successful attacker registration of the account](image/Figure_06.08_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Response of successful attacker registration of the account
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, log in with the attacker’s email address and password you created.
    Notice that the account showing under the profile is the attacker’s email. See
    *Figure 6**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Login of attacker account](image/Figure_06.09_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Login of attacker account
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The attack works due to the application accepting multiple parameters with the
    same name. Since there is no standard on how an application should handle multiple
    parameters with the same name, this can cause an application to process the parameter
    in unanticipated ways.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, HPP attacks include inserting several contradictory values into
    the query string parameters of an HTTP request in order to confuse or manipulate
    the server-side program that processes the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'An attacker might try to leverage this approach by converting arguments into
    an array. For example, an attacker may make the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the attacker is attempting to inject two contradictory values
    into the **q** argument by converting it to an array. This might be exploited
    to circumvent input validation or cause the program to act unexpectedly.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider further reading to understand HPP and remediations for this type of
    attack. Here’s a resource you could look at: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution).'
  prefs: []
  type: TYPE_NORMAL
- en: Testing for SQL Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL Injection is an attack that injects a SQL query mainly in input fields to
    unauthorizedly view database data, perform modifications to database data, or
    execute commands to control the underlying infrastructure. SQL Injection is considered
    one of the most common web application attacks. SQL Injection is a critical web
    application vulnerability; a successful attack can enable the attacker to make
    modifications (delete, view, or edit) to all the data stored in the database or
    execute commands on the underlying system.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to prevent SQL Injection attacks; some of the techniques to
    prevent them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Using parameterized queries, which prevents the application from adding the
    user’s input directly to the database query. This enables the developer to hardcode
    the SQL query and then pass the user’s input as parameters to the query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escaping user input, which escapes special characters in the query. SQL Injection
    attacks are dependent on special characters to complete the SQL query, such as
    **'** or **"**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input sanitization, which programmatically specifies which types of characters
    are accepted—for example, only accepting alphabetic characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep in mind that these techniques are not the only methods to prevent SQL Injection
    attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow along in this lab, ensure that Juice Shop is running and ZAP is intercepting
    the requests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following instructions walk you through steps to exploit a SQL Injection
    vulnerability in the login page of the OWASP Juice Shop application. In this lab,
    we will perform an SQL Injection attack to bypass the authentication mechanism
    and log in as the administrator. Before following the steps, ensure that the OWASP
    Juice Shop application is running and ZAP is intercepting the traffic between
    the application and the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we open OWASP Juice Shop, we must find the email/username of the administrator
    account. On the home page (the **All Products** page), click on **Apple Juice**,
    and in the **Reviews** section, you can see that the administrator wrote a review
    and their email is shown, as seen in *Figure 6**.**10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Administrator email in Reviews](image/Figure_06.10_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Administrator email in Reviews
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the login page by clicking on **Account** and then **Login**, as
    seen in *Figure 6**.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Login](image/Figure_06.11_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Login
  prefs: []
  type: TYPE_NORMAL
- en: Enter **admin@juice-sh.op** as the email and any value as the password. The
    login will fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the login fails, open ZAP. In the **History** tab, find the login request.
    The request will be a **POST** request, the URL will be **/rest/user/login**,
    and the code will be a **401** code. Right-click the request and select **Open/Resend
    with Request Editor…**, as seen in *Figure 6**.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Open/Resend with Request Editor…](image/Figure_06.12_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Open/Resend with Request Editor…
  prefs: []
  type: TYPE_NORMAL
- en: 'Once **Request Editor** opens, in the bottom window you will see the email.
    After the last character in the email, add **'' OR 1=1 --** to exploit the SQL
    vulnerability and bypass the login mechanism, as seen in *Figure 6**.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – SQL Injection attack](image/Figure_06.13_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – SQL Injection attack
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Send** button on the top right of the editor. The HTTP response
    will open, showcasing a successful HTTP response status code of **200 OK** along
    with a created **JSON Web Token** (**JWT**) authentication token, shown in *Figure
    6**.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – HTTP 200 response status](image/Figure_06.14_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – HTTP 200 response status
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQL Injection vulnerability can be exploited directly from the login web
    page as well, by entering a login username along with the **'' OR 1 = 1 –** injection
    code, as seen in *Figure 6**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Login bypass](image/Figure_06.15_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Login bypass
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Boolean value in SQL can be either **TRUE** or **FALSE**. In SQL, Boolean
    logic is used to combine numerous criteria in a **WHERE** clause to filter down
    a query’s set of results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQL Injection vulnerability comes into play when a page or parameter, such
    as the Juice Shop login page, connects to a backend database. As such, for the
    query added, in the statement '' OR **1=1 --**, the **1=1** condition is always
    a True query statement. When interpreted by the database, along with the OR statement
    added onto the username for the database to attempt to match any records of said
    username. The statement is also telling the database, if no match, to make the
    query true. A true statement will be the expected database input, even if the
    attacker does not have the correct username, which results in a successful login.
    On the backend, in the database, the SQL query would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then, followed by the **"--"** comment, it ignores any further query statements
    after the **True** statement. Thus, an attacker would never need to know the real
    password. The attacker inputs a single quote to close out the original query statement
    on the backend that’s looking for the input of the username. Then, the database
    server goes on to read the rest of the Boolean statement. In this simple scenario,
    the attacker will successfully bypass the authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The **' OR 1=1 --** query is one of the most common queries and statements used
    when initially testing potential vulnerabilities. In addition, adding **' --**
    will work in simple cases as it will also result in a **True** statement, and
    **--** will comment out the rest of the query statement that requires the password.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To exploit SQL vulnerabilities, it will be very helpful to become familiar
    with databases and how to write database queries. All SQL servers have slightly
    different syntaxes. However, if you learn one, you will understand the underlying
    structure of all of them. Some of the most common SQL servers are MySQL Microsoft
    SQL Server, MySQL, PostgreSQL, and Oracle. While the injection attack used in
    this recipe is SQLite, other common bypass techniques are as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '**admin'' -**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**admin'' #**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**admin''/***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''** **or 1=1--+**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''** **or 1=1#**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**''** **or 1=1/***'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**'')** **or ''1''=''1–**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**'')** **or (''1''=''1–-**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to common SQL databases, **Lightweight Directory Access Protocol**
    (**LDAP**) is attacked in the same manner as showcased in this recipe. LDAP is
    a directory service based on a client-server model, which functions similarly
    to a database but contains attribute-based data. A bypass technique can be used
    for LDAP Injection in a similar way to SQL Injection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many tools that specialize in finding and exploiting SQL Injection
    vulnerabilities. One notable tool (and my personal favorite) is SQLMap. SQLMap
    allows you to fingerprint **database management systems** (**DBMS**), retrieve
    usernames and database tables or columns, and enumerate and exploit potentially
    existing SQL vulnerabilities. For more information about SQLMap, visit the Kali
    Linux website at www.kali.org/tools/sqlmap/.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on LDAP Injection attacks, visit [https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection](https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection).
  prefs: []
  type: TYPE_NORMAL
