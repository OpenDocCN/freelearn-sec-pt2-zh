- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business Logic Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hooray! You’re a third of the way through. In this chapter, we will be covering
    **business logic flaws**. Business logic flaws are types of errors where an attacker
    finds ways of using an application’s actual handling stream in a manner that has
    a negative impact on the associations.
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will learn how to bypass the frontend GUI application and send data
    directly to the backend for processing by forging requests. We’ll also discover
    how to manipulate and disrupt designed business process flows by simply keeping
    active sessions open and failing to submit transactions within the *expected*
    time frame in the *Test for process timing* recipe. Furthermore, we will learn
    about workflow vulnerabilities that include any flaw that enables an attacker
    to abuse a system or application in such a way that they can avoid (not follow)
    the workflow that was planned or built.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we’ll look at unexpected file type uploads, where the application might
    only accept certain file types, such as **.csv** or **.txt** files, to be submitted
    for processing and might not check the uploaded file’s content or extension. This
    could produce unexpected system or database results or provide attackers with
    new vulnerabilities to exploit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Test ability to forge requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test for process timing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for the circumvention of workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test upload of unexpected file types with a malicious payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to install the OWASP ZAP Proxy in order to utilize your PortSwigger
    account for access to the PortSwigger Academy labs that will be used in this chapter’s
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Test ability to forge requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attackers use forged requests to deliver data directly to the application’s
    backend for processing instead of using its frontend GUI.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker attempts to submit HTTP **GET**/**POST** requests with data values
    that are not permitted, protected against, or anticipated by the business logic
    of the application using an intercepting proxy; in this case, OWASP ZAP. In this
    recipe, the attacker (you) will exploit a defect in the application’s logic to
    make a purchase of a leather jacket at an unanticipated cost.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lab requires a PortSwigger Academy account and ZAP to be able to intercept
    requests and responses from the server to your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will be using PortSwigger Academy’s *Excessive trust in
    client-side control* lab to change the price of the product by editing the request.
    Please follow these instructions to complete this lab:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the URL with the browser proxied to ZAP and log in to the PortSwigger
    Academy website to launch the lab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-excessive-trust-in-client-side-controls)'
  prefs: []
  type: TYPE_NORMAL
- en: Once you access the lab, log in to the lab application under **My Account**
    and use the provided **Username**/**Password** of **wiener**/**peter**. You won’t
    be able to complete a purchase without being logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll also notice the account has a store credit balance of **$100.00**.
  prefs: []
  type: TYPE_NORMAL
- en: Attempt to buy the first item, **Lightweight ‘l33t’ Leather Jacket**, by adding
    it to the cart and going through the entire process to buy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The order gets rejected as you don’t have enough store credit, as shown in
    *Figure 8**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Failed purchase of a lightweight jacket](image/Figure_8.1_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Failed purchase of a lightweight jacket
  prefs: []
  type: TYPE_NORMAL
- en: In ZAP, go to **History** and look over the order process. You’ll notice that
    when you add an item to your cart, the corresponding request contains a price
    parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the item from your cart but stay on the page that says **Cart** **is
    empty**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **POST <url>/cart** request and open in **Open/Resend With**
    **Request Editor…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the Request Editor, change the price to an arbitrary integer and ensure
    there are two zeros at the end to account for change (that is, **1700**), and
    then send the request, as shown in *Figure 8**.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Request with changed item price ](image/Figure_8.2_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Request with changed item price
  prefs: []
  type: TYPE_NORMAL
- en: 'On the web page, refresh the cart and notice that the item has come back but
    confirm that the price was changed based on your input (see *Figure 8**.3*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Changed item back in the cart ](image/Figure_8.3_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Changed item back in the cart
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this process to set the price to any amount less than your available
    store credit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Complete the order to solve the lab, as shown in *Figure 8**.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Completed purchase order ](image/Figure_8.4_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Completed purchase order
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These flaws are exploited by looking over the project documentation for field
    functionality that can be inferred or predicted, or ones that are hidden. In order
    to avoid following the standard business logic procedure, insert logically sound
    data.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For other similar cases, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Testing for Exposed* *Session Variables*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/04-Testing_for_Exposed_Session_Variables)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Testing for Cross-Site* *Request Forgery*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Testing for Account Enumeration and Guessable* *User Account*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account)'
  prefs: []
  type: TYPE_NORMAL
- en: Test for process timing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Process timing test is a type of business logic testing that focuses on finding
    flows in how applications accomplish certain processes, such as authentication.
    In the process timing testing, the tester looks at how long it takes the application
    to process valid versus invalid inputs or actions. The tester validates that an
    attacker is unable to determine the behavior of an application based on the time
    it takes the application to finish an action. In the authentication example, by
    monitoring the process timing, based on the timing variation between entering
    valid credentials versus invalid credentials, an attacker can determine whether
    the credentials are valid without having to depend on the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to start PortSwigger’s *Username enumerations
    via response timing* lab and ensure that ZAP is intercepting traffic between the
    lab application and your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following step-by-step tutorial demonstrates how to use process timing
    to find the correct login information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the following URL with the browser proxied to ZAP and log in to
    the PortSwigger Academy website to launch the lab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing](https://portswigger.net/web-security/authentication/password-based/lab-username-enumeration-via-response-timing)'
  prefs: []
  type: TYPE_NORMAL
- en: Open the *Username enumerations via response timing* lab and start ZAP to intercept
    the communications between your browser and the lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a context and add the application URL to it, and click on the target
    symbol to display only requests from the application in the **Sites Tree** and
    the **History** tabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to log in using any different usernames and passwords five times; as
    you can see in *Figure 8**.5*, your IP address has been blocked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – User account blocked for 30 minutes ](image/Figure_8.5_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – User account blocked for 30 minutes
  prefs: []
  type: TYPE_NORMAL
- en: 'If the IP address is blocked, we won’t be able to perform a brute-force attack.
    To get around this issue, we can use the **X-Forwarded-For** HTTP header, which
    will allow us to spoof the IP address. Now, select the **POST** request that is
    sent when you try to log in; the URL for the request ends in **/login**, as seen
    in *Figure 8**.6*. Right-click the request and select the **Open/Resend With Request**
    **Editor…** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – POST request of login ](image/Figure_8.6_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – POST request of login
  prefs: []
  type: TYPE_NORMAL
- en: The **Request Editor** window will open. In the **Request** tab, scroll down
    to the end of the HTTP headers and add the **X-Forwarded-For** header at the end.
    Let’s set the value of the header to **100**, as seen in *Figure 8**.7*. Change
    the values of the username and password and click on **Send**. *Figure 8**.7*
    also shows the **username** and **password** fields highlighted; the values for
    the fields in the picture are **admin** and **admin**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the request was sent successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – X-Forwarded-For header ](image/Figure_8.7_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – X-Forwarded-For header
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to change the value of the **X-Forwarded-For** field automatically
    and constantly, we will need to download **Community Scripts**. This is needed
    in order to brute-force the **password** and **username** fields. Here are the
    instructions to download **Community Scripts**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So to start, open the **Manage Add-ons** window by clicking the three-cube
    icon, as highlighted in *Figure 8**.8*:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Manage Add-Ons icon ](image/Figure_8.8_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Manage Add-Ons icon
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the **Manage Add-ons** window opens, navigate to the **Marketplace** tab
    and search for **Community Scripts**. Check the checkbox next to it and click
    on **Install Selected**, as shown in *Figure 8**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Marketplace Community Scripts ](image/Figure_8.9_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Marketplace Community Scripts
  prefs: []
  type: TYPE_NORMAL
- en: After **Community Scripts** has been installed, click on the plus icon next
    to the **Sites** tab and select **Scripts** to add the **Scripts** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the **Fuzzer HTTP Processor** section and enable **random_x_forwarded_for_ip.js**
    by right-clicking it and clicking on **Enable Script(s)**, as shown in *Figure
    8**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Enable Script(s) ](image/Figure_8.10_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Enable Script(s)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code of the script just in case it is removed from Community
    Scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, right-click the last request we sent, where we added the **X-Forwarded-For**
    header; the source of the request should say **Manual**. Click on **Open**/**Resend
    with Request Editor…**, and the request will open in the **Request Editor** window.
    Set the password to a very long password (300+ characters); in this request, I
    added **thezaplife** 21 times as the password, as shown in *Figure 8**.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Request Editor setting the password ](image/Figure_8.11_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Request Editor setting the password
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the last login request in the **History** tab – it should be the
    request to which we have added the long password, and the source of the request
    should say **Manual**. Select **Attack** and click on **Fuzz…**, which will open
    the **Fuzzer** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Message Processors** tab, and click on **Add…**, which will
    open the **Add Message Processor** window. In the **Script** field, select the
    script that we added earlier and click on **Add**, as shown in *Figure 8**.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Message Processors ](image/Figure_8.12_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Message Processors
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Fuzz Locations** tab. In this step, we will brute force the
    username, so select the username and click on **Add**. When you click on **Add**,
    the **Payloads** window will open; click on **Add** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Add Payload** window appears, select **Strings** as the type and
    enter the list of the usernames provided in the lab. The usernames are seen when
    you click on the **Candidate usernames** link on the lab home page before accessing
    the lab. *Figure 8**.13* shows the list of usernames in the payload. When you
    have entered the usernames, click on **Add**, and then **OK** in the **Payloads**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Add Payload ](image/Figure_8.13_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Add Payload
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on **Start Fuzzer**, as shown in *Figure 8**.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Start Fuzzer of added payload ](image/Figure_8.14_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Start Fuzzer of added payload
  prefs: []
  type: TYPE_NORMAL
- en: The username with the longest RTT time is the correct username. In my case,
    the longest RTT time is associated with the username **activestat**, as seen in
    *Figure 8**.15*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep a note of the five usernames with the longest RTT time; if you didn’t find
    the password for the first username, you can try the rest of the usernames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – RTT time of password payloads ](image/Figure_8.15_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – RTT time of password payloads
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the username, we have to brute force the password. But first,
    we have to resend the request using **Request Editor** to change the username.
    Right-click the last login **POST** request in the **History** tab, and select
    **Open**/**Resend with** **Request Editor…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **Request Editor** window opens, change the username to the username
    with the longest RTT time. In my case, the username will be **activestat**, as
    shown in *Figure 8**.16*. Click on **Send**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Username of activestat ](image/Figure_8.16_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Username of activestat
  prefs: []
  type: TYPE_NORMAL
- en: Find the request in the **History** tab, right-click it, hover over **Attack**,
    then click on **Fuzz…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Message Processors** tab, and click on **Add**, which will
    open the **Add Message** **Processor** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Add Message Processor** window opens, select the script that we added
    earlier in the **Script** field, and click on **Add**, as seen in *Figure 8**.13*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Fuzz Locations** tab, select **password**, and click on **Add**.
    When the **Payloads** window opens, click on **Add** again. When the **Add Payload**
    window appears, select **Strings** as the type and enter the list of the passwords
    provided in the lab. The passwords are seen when you click on the **Candidate
    passwords** link on the lab home page before accessing the lab. *Figure 8**.17*
    shows the list of passwords in the payload. When you have entered the passwords,
    click on **Add**, and then **OK** in the **Payloads** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Candidate password payloads ](image/Figure_8.17_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – Candidate password payloads
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on **Start Fuzzer**, as shown in *Figure 8**.19*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Start Fuzzer of payload ](image/Figure_8.18_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – Start Fuzzer of payload
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Fuzzer** tab, sort on the **Code** column by clicking on the **Code**
    word. The correct password will show **302 Found**, as shown in *Figure 8**.20*.
    The correct password is listed in the **Payloads** column, and in my case, it
    is **montana**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – 302 Found of correct password ](image/Figure_8.19_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – 302 Found of correct password
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the correct username and password, let’s try to log in to
    the web page using these details. If your login is successful, the application
    will display your username and email, as shown in *Figure 8**.21*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Display of solved lab ](image/Figure_8.20_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Display of solved lab
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many system login processes require a username and password. If you look closely,
    when guessing usernames, when the correct username is found but an incorrect password
    is entered, it takes longer than when an incorrect username and incorrect password
    are both entered. This would allow us to find the correct username even if the
    correct password is unknown. From there, it would be much easier to guess the
    password if the username is known than try to guess both. Process timing attacks
    of this type allow the attacker to determine whether they have a valid username
    by analyzing the time it takes for the process to complete, rather than relying
    on GUI messages.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A fuzzing assault on both the username and password simultaneously (aka cluster
    bombing), can also be used to brute-force the login. However, if feasible, it
    is considerably more efficient to enumerate a valid username first.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For other similar cases, visit the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Testing for Cookies* *Attributes*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Session* *Timeout*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing for the circumvention of workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workflow must be stopped with all actions and new activities *rolled back*
    or canceled if the user fails to complete particular stages in the right/precise
    order, as required by the application’s business logic. This lab makes assumptions
    that are inherently fallible about the sequence of events in the application’s
    purchasing business workflow. In this recipe, the attacker (you) will exploit
    a defect to purchase a leather jacket at no additional cost to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to start PortSwigger’s *Insufficient workflow
    validation* lab and ensure that ZAP is intercepting traffic between the lab application
    and your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this lab, we will demonstrate how to circumvent the item purchasing workflow
    by adding an item to the cart without an increase in price. Follow these steps
    to circumvent the purchasing workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the URL with the browser proxied to ZAP and log in to the PortSwigger
    Academy website to launch the lab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation](https://portswigger.net/web-security/logic-flaws/examples/lab-logic-flaws-insufficient-workflow-validation)'
  prefs: []
  type: TYPE_NORMAL
- en: 'With ZAP running and intercepting, log in to the lab application using the
    username and password provided: **wiener** and **peter**, respectively.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the application home page and buy any item that you *can* afford with
    your store credit, such as the *Babbage* *Web Spray*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at the proxy **History** tab to look for the order when you placed it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**POST /cart/checkout**'
  prefs: []
  type: TYPE_NORMAL
- en: This request redirects you to an order confirmation page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **GET /cart/order-confirmation?order-confirmation=true** request in
    ZAP’s Request Editor. See *Figure 8**.22*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – GET request of Babbage Web Spray ](image/Figure_8.21_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – GET request of Babbage Web Spray
  prefs: []
  type: TYPE_NORMAL
- en: Next, add the leather jacket to your basket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same Request Editor, resend the order confirmation request (as seen in
    *Figure 8**.21*) and observe that the order is completed without the cost being
    deducted from your store credit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your **History** tab will show the successful request of the leather jacket
    being ordered. See *Figure 8**.23*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The lab is solved.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Purchased leather jacket and completed lab ](image/Figure_8.22_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Purchased leather jacket and completed lab
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Workflow flaws include any defect that enables an attacker to abuse a system
    or application such that they can avoid (not perform) the workflow that was planned
    or built. Vulnerabilities related to business logic workflows are unique; each
    system or application contains its own workflows to accomplish a task or a process.
    Therefore, manual misuse cases must be carefully developed with requirements and
    use cases specific to the workflow. If an exchange initiates an action, that response
    will be reversed and eliminated if the process is unsuccessful. The workflow of
    the application must contain controls to guarantee that the user’s transactions/actions
    are occurring in the proper sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Due to a vulnerability’s specific nature for bypassing programmed logic, use
    cases are meticulous and require manual scrutiny to establish the correct requirements
    that avoid the circumvention of the workflows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*OWASP Abuse Case Cheat* *Sheet*: [https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html](https://cheatsheetseries.owasp.org/cheatsheets/Abuse_Case_Cheat_Sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Testing Directory Traversal/File* *Include*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Testing for Bypassing Authorization* *Schema*: [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Testing for Session Management* *Schema*: [https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Business Logic Data* *Validation*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Ability to Forge* *Requests*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/02-Test_Ability_to_Forge_Requests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Integrity* *Checks*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/03-Test_Integrity_Checks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test for Process* *Timing*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/04-Test_for_Process_Timing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Number of Times a Function Can be Used* *Limits*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/05-Test_Number_of_Times_a_Function_Can_Be_Used_Limits)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Defenses Against Application* *Mis-use*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/07-Test_Defenses_Against_Application_Misuse)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Upload of Unexpected File* *Types*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/08-Test_Upload_of_Unexpected_File_Types)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Upload of Malicious* *Files*: [https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing upload of unexpected file types with a malicious payload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many business processes in applications allow for the upload and modification
    of data supplied via uploaded files. The business process must examine the files
    and only accept specific *authorized* file types. The business logic is responsible
    for determining which files are *authorized* and whether they are application/system
    specific. In this recipe, we will attack an exploitable file upload option via
    profile avatar. Since certain file extensions are banned, the simple defense will
    be circumvented through traditional obfuscation techniques.
  prefs: []
  type: TYPE_NORMAL
- en: The user will upload a basic PHP web shell that will be used to exfiltrate the
    contents of a file secret in **/home/carlos/** to complete the lab.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need to start PortSwigger’s *Web shell upload via
    obfuscated file extension* lab and ensure that ZAP is intercepting traffic between
    the lab application and your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will exploit a file upload option to upload a file and use
    it to exfiltrate data. Follow these instructions to see how to accomplish the
    file upload and the data exfiltration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the following URL with the browser proxied to ZAP and log in to
    the PortSwigger Academy website to launch the lab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension](https://portswigger.net/web-security/file-upload/lab-file-upload-web-shell-upload-via-obfuscated-file-extension)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in using the username and password (**wiener** and **peter**, respectively),
    upload any **.jpg** or **.png** image as your avatar, then click **Back to My
    Account** to return to your account page. See *Figure 8**.24*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.23 – Uploading avatar file ](image/Figure_8.23_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Uploading avatar file
  prefs: []
  type: TYPE_NORMAL
- en: Go to **History** and look for your uploaded image that was retrieved using
    a **GET** request to **/files/avatars/<YOUR-IMAGE>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this request in the Request Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file named **exploit.php** on your machine that contains a script for
    obtaining the contents of Carlos’s secret – for example, **<?php echo** **file_get_contents('/home/carlos/secret');
    ?>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try using this script as your avatar. As shown in *Figure 8**.25*, the answer
    shows that you are only permitted to submit JPG and PNG files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Upload exploit.php fail ](image/Figure_8.24_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – Upload exploit.php fail
  prefs: []
  type: TYPE_NORMAL
- en: In ZAP’s **History** tab, find the **POST /my-account/avatar** request that
    was used to submit the file upload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Request Editor, open the **POST /my-account/avatar** request and find
    the part of the body that relates to your PHP file. In the **Content-Disposition**
    header, change the value of the filename parameter to include a URL-encoded null
    byte, followed by the **.jpg** extension, **filename="exploit.php%00.jpg"** (see
    *Figure 8**.26*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Request body of file uploaded, exploit.php ](image/Figure_8.25_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Request body of file uploaded, exploit.php
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Send** to send the request; as you can see, the file was uploaded
    successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that in the response’s message, the uploaded filename and format is
    **exploit.php**, as seen in *Figure 8**.27*, which suggests that the null byte
    and **.jpg** extension have been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Successful upload of exploit.php ](image/Figure_8.26_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – Successful upload of exploit.php
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Sites** window, open the **GET /files/avatars/<YOUR-IMAGE>** request
    in the Request Editor. In the path, replace the name of your image file with **exploit.php**
    and send the request. Observe that Carlos’s secret was returned in the response,
    as shown in *Figure 8**.28*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Response with Carlos’ secret (blurred out) ](image/Figure_8.27_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Response with Carlos’ secret (blurred out)
  prefs: []
  type: TYPE_NORMAL
- en: Submit the secret to solve the lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to the fact that the upload process promptly rejects a file if it lacks
    a specified extension, we had to use an obfuscation technique to trick the system
    into thinking that we were uploading a **.jpg** file. This differs from uploading
    malicious files in that a wrong file format isn’t generally deemed *malicious*,
    although it may still be harmful to the saved data.
  prefs: []
  type: TYPE_NORMAL
- en: In the example with the lab, the application only accepted specific file formats,
    **.jpg** files, for processing. For low assurance file validation, the program
    didn’t check the uploaded file’s content or, in other cases, the extension itself
    (high assurance file validation). This can cause the application or server to
    provide unexpected system or database results, or enable new ways for attackers
    to take advantage.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Test File Extensions Handling for Sensitive* *Information*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/03-Test_File_Extensions_Handling_for_Sensitive_Information)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Test Upload of Malicious* *Files*: [https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
