- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Adventures with ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we are at the final chapter. You’ve learned about the options **Zed Attack
    Proxy** (**ZAP**) offers, from navigating the interface to configurations, from
    crawling web applications, scanning, and reporting to learning about authentication,
    authorization, session management, injection attacks on unvalidated inputs, as
    well as business logic testing, client-side attacks, and some advanced techniques.
    This final chapter will see a change of pace and look at other implementations
    and uses of ZAP. We’ll introduce you to using the OWASP ZAP GUI to start web crawling
    and scanning for vulnerabilities against APIs, but also how to use the API in
    Docker to scan web applications. We’ll also discuss and show you how to build
    ZAP into a Jenkins pipeline to conduct dynamic analysis of web applications, and
    how to install, build and configure the ZAP GUI OAST server for out-of-band vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use the ZAP GUI local API to scan a target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the ZAP API via Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing ZAP DAST tests in a Jenkins CI DevOps pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing, configuring, and running the ZAP GUI OAST server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will need to install numerous tools that will coordinate
    with ZAP to complete the recipes. For the API recipe, you will need to install
    Docker and the command-line script for the OWASP ZAP API. Docker will also be
    needed for the Jenkins pipeline as well as for the standalone BOAST server. In
    addition, we will continue to use the Mozilla Firefox browser and a fork of the
    GitHub Juice-shop application code. Lastly, we’ll test using the command-line
    tool cURL.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the ZAP GUI local API to scan a target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ZAP API scan is a script included with the ZAP Docker images. It is optimized
    to scan APIs specified by OpenAPI, SOAP, or GraphQL through a local file or a
    URL. It imports the definition you give and then does an active scan of the URLs
    discovered. The ZAP API makes it possible to incorporate ZAP features into scripts
    and applications. In this recipe, we will walk through downloading the ZAP Docker
    image and then running it to scan against the Juice-Shop URL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Docker will need to be installed as well as the ZAP Docker image. Be sure that
    the ZAP image is able to intercept requests and responses from the server to your
    browser. We will also be using the command line to run the image and kick off
    spidering and scanning. OWASP ZAP Desktop will also be needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ZAP API-based effective automated analysis can assist in identifying emerging
    flaws. Using the current functional regression test suites and the ZAP Python
    API, OWASP ZAP will assist you in automating security tests to incorporate into
    the **Continuous Integration**/**Continuous Delivery** (**CI**/**CD**) pipeline
    for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The ZAP API scan is a script that is available in the ZAP Docker images. Download
    owasp zap docker here: **docker** **pull owasp/zap2docker-stable**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start OWASP ZAP by running the desktop executable, the **zap.sh** script (on
    Linux/macOS), or the **zap.bat** script (on Windows) from the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To run ZAP headless, use the -*daemon* flag. The OWASP ZAP daemon mode is a
    feature that allows the tool to run as a daemon, or background service, on a machine.
    This can be useful if you want to set up continuous scanning of a web application
    or want to remotely control the tool using the OWASP ZAP API.
  prefs: []
  type: TYPE_NORMAL
- en: In the OWASP ZAP UI, open **Tools** then **Options** and go to the **API** tab.
    Note the API key, as shown in *Figure 11**.1*, as well as the permitted IP addresses
    for use with the API and a few other options. You have checkboxes to enable the
    API and web UI (**127.0.0.1:PORT**/**UI** or /**json**). In addition, there are
    a few debug options that are only recommended for testing purposes, such as **Disable
    the** **API key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – API options](image/Figure_11.1_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – API options
  prefs: []
  type: TYPE_NORMAL
- en: To get started, ensure the appropriate plugins are added from the Marketplace.
    OWASP ZAP supports OpenAPI, GraphQL, and SOAP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To start a scan, you can simply use Automated Scan from the **Quick Start**
    menu and scan the endpoint. The only difference is to ensure that the URL has
    the appropriate API scope:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The results will populate in the same **Information** window under the **Alerts**
    tab, as seen in *Figure 11**.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The GraphQL Alerts results](image/Figure_11.2_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The GraphQL Alerts results
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can interact with the ZAP API scanner using a variety of different methods
    to carry out a variety of tasks, such as spidering a web application to learn
    about its contents, looking for application vulnerabilities, or creating reports.
    Making HTTP requests to the ZAP API endpoint, which is made available by the active
    ZAP instance, is the standard procedure for using the ZAP API. Depending on how
    you’ve set up the tool, the endpoint will be at a particular URL.
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to employ the ZAP API scanner. It allows you to scan
    an individual web page, an entire web application, or a collection of connected
    online applications. Additionally, it may be used to automate a number of security-related
    operations, including planning scans, creating reports, and connecting with other
    security solutions.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the ZAP API via Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Docker to execute and administer the ZAP application is known as running
    ZAP via Docker.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run ZAP in a containerized environment or quickly install and
    operate ZAP on many machines, this can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must install Docker on your computer and get the ZAP Docker image from Docker
    Hub in order to access the ZAP API via Docker.
  prefs: []
  type: TYPE_NORMAL
- en: The image can then be run as a Docker container, and you can communicate with
    the container while it is running using the ZAP API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The ZAP application will launch inside the container when you run the ZAP Docker
    image. ZAP will then handle any requests sent to the running container using the
    ZAP API. You can interact with ZAP using a variety of different methods provided
    by the ZAP API, such as spidering a web application to learn about its contents,
    looking for application vulnerabilities, or creating reports:'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to running the API scans via the GUI, you can kick off scans using
    Docker via the command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To use API via the Docker command line, open a Terminal session and run Docker
    to pull the image off ZAP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, after the image downloads, run Docker again but this time to create a
    container of ZAP that will run the ZAP API, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After a few moments, the command line will showcase the attacks running and
    whether they pass, fail, or come with other warnings, as shown in *Figure 11**.3*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – A Docker API scan of Juice-Shop](image/Figure_11.3_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – A Docker API scan of Juice-Shop
  prefs: []
  type: TYPE_NORMAL
- en: You will see the results at the end as well (see *Figure 11**.4*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – The Docker API scan results](image/Figure_11.4_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – The Docker API scan results
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the script does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the specified API definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actively scans the API using a specific scan profile tailored for APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notifies the command line of any problems discovered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If no bugs are detected, this does not imply that your API is secure. You may
    need to conduct a manual penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The API provides a set of methods that can be used to perform various actions,
    such as starting and stopping a scan, setting the target for the scan, and retrieving
    the results of the scan.
  prefs: []
  type: TYPE_NORMAL
- en: To use the OWASP ZAP API, you will need to make HTTP requests to the API endpoint,
    which is typically hosted on the same machine as the ZAP application. The API
    uses a **Representational State Transfer** (**RESTful**) design, which means that
    you can use standard HTTP methods (such as **GET**, **POST**, **PUT**, and **DELETE**)
    to perform different actions.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the OWASP ZAP API to start a scan, the tool will begin to crawl
    the target web application and perform various types of tests to identify vulnerabilities.
    These tests can include looking for SQL injection (SQLI) vulnerabilities, **cross-site
    scripting** (**XSS**) vulnerabilities, and other types of vulnerabilities that
    can be exploited by attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan is complete, the OWASP ZAP API will provide a report detailing
    any vulnerabilities that were identified. The report will typically include information
    about the type of vulnerability, the location of the vulnerability within the
    application, and any recommendations for how to fix the vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to using the OWASP ZAP API through HTTP requests, there are also
    a number of client libraries and language bindings available that make it easier
    to use the API in different programming languages. These libraries provide a set
    of functions and methods that you can use to make API calls and interact with
    the ZAP tool, rather than having to manually construct and send HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: For example, client libraries are available for languages such as Python, Java,
    and C#, allowing you to utilize the OWASP ZAP API in your own programs. Using
    these libraries can make integrating the ZAP tool into your own application or
    process easier, as well as save you time by handling the intricacies of performing
    API calls and analyzing the answers.
  prefs: []
  type: TYPE_NORMAL
- en: There are also a number of other ways that you can use the OWASP ZAP API, depending
    on your specific needs. For example, you can use the API to automate security
    testing as part of a CI/CD pipeline, or integrate the ZAP tool into a custom security
    tool or platform. You can also use the API to perform scans regularly or in response
    to specific events, such as the deployment of new code to a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When running the API script, here are some more command options for use with
    the ZAP API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information, visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: ZAP – API* *Scan*: [https://www.zaproxy.org/docs/docker/api-scan/](https://www.zaproxy.org/docs/docker/api-scan/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: Options API* *screen*: [https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/](https://www.zaproxy.org/docs/desktop/ui/dialogs/options/api/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: Scanning APIs with* *ZAP*: [https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/](https://www.zaproxy.org/blog/2017-06-19-scanning-apis-with-zap/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: Exploring APIs with* *ZAP*: [https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/](https://www.zaproxy.org/blog/2017-04-03-exploring-apis-with-zap/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: Why is an API key required by* *default?*:
    [https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/](https://www.zaproxy.org/faq/why-is-an-api-key-required-by-default/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official documentation: How can I connect to ZAP* *remotely?*: [https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/](https://www.zaproxy.org/faq/how-can-i-connect-to-zap-remotely/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OWASP ZAP official FAQ documentation on how to use the ZAP* *API*: [https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/](https://www.zaproxy.org/faq/how-can-you-use-zap-to-scan-apis/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A GitHub Action for running the OWASP ZAP API* *scan*: [https://github.com/marketplace/actions/owasp-zap-api-scan](https://github.com/marketplace/actions/owasp-zap-api-scan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing ZAP DAST testing with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is an open source CI/CD technology that aids in the automation of the
    software development process. Jenkins allows developers to seamlessly merge code
    changes and automatically create, test, and deploy applications, making the software
    development process more efficient and dependable. Jenkins is extensively used
    by teams of all sizes to automate their software delivery processes, and it is
    easily customizable to meet the demands of each project. In this context, the
    OWASP ZAP is a **Dynamic Application Security** (**DAST**) vulnerability detection
    tool for web applications. It can be linked to a Jenkins pipeline to automate
    security testing as part of the CI/CD process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires the installation of Jenkins and Docker on an Ubuntu 22.04
    virtual machine. Ensure Juice-Shop is running locally to scan against it.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you are running Jenkins on a local system, you must offer access rights/permissions
    to owners, normal users, and non-users with the **sudo chmod 777 /var/run/docker.sock**
    Terminal command. The script will not operate unless you provide access to owners,
    normal users, and non-users.
  prefs: []
  type: TYPE_NORMAL
- en: Please keep in mind that this script is exclusively for scanning applications
    that are already in **production/sandbox/UAT/SIT** environments.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will walk you through the process of installing OWASP ZAP
    in a Jenkins pipeline and setting up the automation for running scans during new
    code iterations and pushes. In addition, we’ll build ticketing with JIRA into
    the process to complete the DevOps life cycle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With Jenkins running and Docker installed, open your browser of choice and
    go to your Jenkins app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins boot setup runs by default at **https://localhost:8080/**. Adjust the
    boot configuration by editing the **jenkins.xml** file in your installation location.
    Other boot configuration parameters, such as JVM options, HTTPS configuration,
    and so on, can also be modified in this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with the credentials you created when first setting up Jenkins. If you
    have not completed this step, you will need to enter **initialAdminPassword**,
    which is found in the following path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the home screen, we’ll create a *new item*, name it **ZAP**, and select
    **Pipeline**, as shown in *Figure 11**.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.5 – A new Jenkins item](image/Figure_11.5_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – A new Jenkins item
  prefs: []
  type: TYPE_NORMAL
- en: On the next screen, you’ll have several settings or build triggers, but we’ll
    move past those and go to the **Pipeline** script (see *Figure 11**.6*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – The Pipeline script](image/Figure_11.6_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – The Pipeline script
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll enter the following Groovy script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you click **Save**, you are brought to the **Stage view** screen. This
    is where you have options to see the status, see the changes, build now, configure,
    delete the pipeline, see the full stage view, rename your pipeline, and see the
    pipeline syntax, as shown in *Figure 11**.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Stage View](image/Figure_11.7_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Stage View
  prefs: []
  type: TYPE_NORMAL
- en: To run the script we just entered, click **Build** **with Parameters**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will kick off the script and run through the steps we entered. You’ll
    see your new build running in **Build History** as well as the steps running in
    **Stage View**, as shown in *Figure 11**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – The new build](image/Figure_11.8_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – The new build
  prefs: []
  type: TYPE_NORMAL
- en: You can also click on the number in **Build History** to go to the build to
    see more details, such as **Console Output**, which shows the pipeline executing,
    the commands, and any errors that may have occurred, as shown in *Figure 11**.9*.
    Errors will be very obvious, indicated by the red **X** symbol in **Console Output**
    or next to the number in **Build History**, or will be red at the stage it occurred
    in **Stage View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Console Output](image/Figure_11.9_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Console Output
  prefs: []
  type: TYPE_NORMAL
- en: Once the scan completes, you can review the results by clicking on the stage
    in **Stage View** and then **Logs**, as shown in *Figure 11**.10*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Logs](image/Figure_11.10_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Logs
  prefs: []
  type: TYPE_NORMAL
- en: This view will show you the details of the scan, where you can digest all the
    findings and see where in the URL these issues occurred (see *Figure 11**.11*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Stage Logs](image/Figure_11.11_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Stage Logs
  prefs: []
  type: TYPE_NORMAL
- en: A successful build and scan require a lot of trial and error with the pipeline
    setup, which necessitates reading pipeline errors or commenting out sections in
    the script.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jenkins pipeline is configured to run OWASP ZAP as a step in the build process.
    This can be done using a Jenkins plugin or by calling the OWASP ZAP **command-line
    interface** (**CLI**) directly from a Jenkins script. When the pipeline is executed,
    Jenkins triggers OWASP ZAP to run a security scan against the application being
    tested. OWASP ZAP will attempt to find any vulnerabilities in the application,
    such as SQLI flaws or XSS vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP then generates a report, detailing any vulnerabilities that were found,
    along with recommendations for how to fix them. This report can be automatically
    sent to the development team for review. If the security scan identifies any critical
    vulnerabilities, the Jenkins pipeline can be configured to fail the build, preventing
    the vulnerable code from being deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, integrating OWASP ZAP into a Jenkins pipeline helps automate the process
    of identifying and addressing security vulnerabilities in web applications, making
    the software development process more efficient and secure.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pipeline script is just an example of a simple way to scan a URL and see
    the results in the pipeline. With some more work with the script, you can generate
    reports and get these copied from the Docker container over to a directory of
    your choice. In addition, this pipeline build we have scripted will also create
    parameters that allow you to switch between the baseline scan and full scan as
    well as enter the URL of choice to be scanned, allowing you to build the pipeline
    quicker on your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If, for some reason, your build is not scanning, check to see whether your Docker
    has stopped the container. If it hasn’t, you will need to do so before running
    the build again.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more details, see the following when running Docker scans:'
  prefs: []
  type: TYPE_NORMAL
- en: For the baseline scan, see [https://www.zaproxy.org/docs/docker/baseline-scan/](https://www.zaproxy.org/docs/docker/baseline-scan/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the full scan, see [https://www.zaproxy.org/docs/docker/full-scan/](https://www.zaproxy.org/docs/docker/full-scan/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing, configuring, and running the ZAP GUI OAST server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The BOAST server was created to receive and report the results of out-of-band
    application security testing. Some application security tests only result in out-of-band
    responses from the applications being examined. Because of the nature of these
    specific use case scenarios, the requests won’t transmit as a response back to
    the attacker and won’t be seen when a client is hidden behind a third-party NAT.
    A different component is then required in order to properly perceive such responses.
    This component needs the ability to be freely accessed over the internet and communicate
    the received protocols and ports without being constrained by that third-party
    NAT.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will walk you through how to install, configure, and test
    applications that require OOB, using the OWASP ZAP BOAST server, and how to install
    your own BOAST server for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe requires ZAP set up to intercept and send requests and responses
    between the BOAST server and the client application. The following tools will
    need to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker: [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GoLang: [https://go.dev/doc/install](https://go.dev/doc/install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we’ll be going through different techniques on how to install,
    configure, and run your own BOAST services to conduct out-of-band attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: First, in order to use the OAST server, you’ll need to download the add-on from
    ZAP Marketplace (see *Figure 11**.12*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 –  ZAP Marketplace](image/Figure_11.12_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – ZAP Marketplace
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, go to the **Tools** menu, and select **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, either go to **Tools** | **Options…** | **OAST**, click on the gear icon
    in the main toolbar and click **OAST**, or press *Ctrl* + *Alt* + *O* and then
    click **OAST**.
  prefs: []
  type: TYPE_NORMAL
- en: To view the **OAST** options, scroll down the tool **Options** menu until you
    see **OAST** (see *Figure 11**.13*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – OWASP OAST options](image/Figure_11.13_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – OWASP OAST options
  prefs: []
  type: TYPE_NORMAL
- en: In the first setting under **General**, there’s a dropdown to select either
    **BOAST** or **Interactsh**, and a checkbox next to **Use** **Permanent Database**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **BOAST** from the dropdown and go to the **BOAST** tab in the **OAST**
    options screen. **Permanent Database** is optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By checking **Use Permanent Database**, you can keep track of registered out-of-band
    payloads in ZAP’s permanent database. According to the predetermined polling period,
    the persisted payloads will be placed into memory and queried with other payloads.
    Currently, only the BOAST service is able to provide a permanent database.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this means that alerts may show up during a ZAP session, even if they
    are not particularly or directly connected to the first analysis or scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter a valid server URI or use the default one. The URI that will be used
    for registration and polling should be pointed at by this address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://odiss.eu:1337/events](https://odiss.eu:1337/events)'
  prefs: []
  type: TYPE_NORMAL
- en: The scheme, the host, the port, and the **/events** endpoint are all required
    components of a valid URI. A functional BOAST instance must be running on the
    host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a polling interval. This is the frequency of polling for the registered
    BOAST servers. Values are taken in seconds. There is no maximum permissible value
    but a minimum of 10 seconds is required. The 60-second setting is the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Register** and a new entry for the payload and canary will be added
    to the **Active Servers** table. Copy this payload to use it in your attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a request is made to the appropriate payload address, a random string known
    as the Canary value is returned to the destination web application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to test that the BOAST payload is working, open up a command-line terminal
    and curl the request of the URI given (see *Figure 11**.4*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 11.14 – A curl request](image/Figure_11.14_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – A curl request
  prefs: []
  type: TYPE_NORMAL
- en: 'ZAP will now poll this server at the frequency you set and report all interactions
    (DNS, HTTP, etc.) To view the payload URI, open the **OAST** tab in the informational
    window, as shown in *Figure 11**.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.15 – BOAST](image/Figure_11.15_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – BOAST
  prefs: []
  type: TYPE_NORMAL
- en: We can also send some other data via curl to see what is captured in our OAST
    polling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a curl request that sends a **POST** request with a simple
    header and no data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **-X** flag specifies the HTTP method to use – in this case, **POST**.
    The **-H** flag is used to set a custom header – in this case, the **Content-Type**
    header is set to **application/json** to indicate that the request body contains
    JSON data. You can also use **--data** or **-d flag** to include a request body
    in the **POST** request, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This sends a **POST** request with a JSON-encoded request body containing the
    **{"key": "value"}** data, as shown in *Figure 11**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – An example curl request with a secret](image/Figure_11.16_B18829.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – An example curl request with a secret
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An out-of-band attack occurs when an attacker utilizes a different communication
    route than the one the victim is using. This makes it simpler for the attacker
    to access sensitive data or systems, since it enables them to get over any security
    measures that might be in place on the main communication route.
  prefs: []
  type: TYPE_NORMAL
- en: There are several techniques to conduct out-of-band exploits. An attacker may,
    for instance, send a target a phishing email that tempts them to click on a link
    that installs malware on their machine. The virus might then be used to access
    the victim’s machine, giving the attacker access to take advantage of it to disrupt
    operations or steal important data.
  prefs: []
  type: TYPE_NORMAL
- en: Another technique would be for an attacker to utilize a different communication
    channel to manage malware that has already been placed on a victim’s machine.
    For instance, the attacker may order the virus to do a certain action, such as
    deleting files or encrypting data for ransom, through a different channel, such
    as a phone call or text message.
  prefs: []
  type: TYPE_NORMAL
- en: In general, because out-of-band attacks employ a different communication route
    than the one that is being defended, they can be challenging to identify and stop.
    People and organizations should be aware of the dangers presented by these assaults
    and take precautions to protect themselves. This can entail creating secure passwords,
    setting up security software, keeping it updated, and exercising caution when
    opening links or downloading things from untrusted sources.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These types of flaws are extremely delicate and important to secure for a company,
    since malicious actors can take advantage of them. They are primarily seen in
    REST APIs and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of OOB attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blind server-side XML/SOAP injection**: Similar to SQLI, an attacker sends
    XML or SOAP requests to a server with the intent of manipulating the server’s
    behavior, potentially reading or modifying data, executing arbitrary code, or
    launching other attacks, and the attack is “blind” because the attacker receives
    no immediate feedback about the success of the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blind XSS (delayed XSS)**: A covert and difficult-to-detect assault that
    allows an attacker to inject malicious code into a website and wait for someone
    else to initiate the attack by visiting the compromised web page, possibly stealing
    personal information or seizing control of the victim’s browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host header attack**: Manipulation of the host header in an HTTP request
    to deceive a web server into running malicious code or providing sensitive information,
    potentially allowing the attacker to take control of the server or reveal sensitive
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Out-of-Band Remote Code Execution (OOB RCE)**: An attack that lets an attacker
    run arbitrary code on a target system by delivering the code and receiving the
    results over a separate communication channel, possibly revealing sensitive information
    or allowing the attacker to seize control of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Out-of-Band SQL Injection (OOB SQLI)**: An SQLI attack in which an attacker
    executes arbitrary SQL instructions on a target database by leveraging a separate
    communication channel to send the commands and receive the results, possibly exposing
    sensitive information or allowing the attacker to gain control of the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Email header injection**: Injecting harmful code into the headers of an email
    message in order to manipulate the behavior of the email client or server, perhaps
    misleading the victim into submitting sensitive information or downloading malware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server-Side Request Forgery (SSRF)**: An attack in which an attacker sends
    arbitrary requests from a susceptible server to other servers, resources, or services
    on the network, possibly revealing sensitive information or allowing the attacker
    to launch more attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML External Entity (XXE) injection**: An attack that uses an XML parser
    vulnerability to access files or execute arbitrary code on a target system, possibly
    revealing sensitive information or allowing the attacker to take control of the
    machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OS code injection – OOB**: An attack that enables an attacker to execute
    arbitrary system instructions on a target system by injecting the commands into
    a susceptible application, possibly exposing sensitive information or granting
    the attacker control of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XXE – OOB**: A version of the XXE attack in which the results of the XXE
    assault are sent OOB over a different communication route than the one being abused,
    possibly allowing the attacker to obtain sensitive information or take control
    of the system without being detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A new Extender script template called **OAST Request Handler.js** is introduced
    to ZAP if the *Script Console* and *GraalVM JavaScript* add-ons are both installed.
    This template can be used to develop a script that executes a command whenever
    an OOB request is found. This action might be anything, such as running another
    ZAP script or sending yourself an email.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few other online services that allow us to interact with OOB attacks,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Free web GUI Interactsh: [https://app.interactsh.com/#/](https://app.interactsh.com/#/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For ZAP extensions, see [https://github.com/zaproxy/zap-extensions](https://github.com/zaproxy/zap-extensions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
